/**
 * @file deployToAzure.ts
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * Uploads source files to an Azure Blob Storage instance
 */
"use strict";
var glob = require("glob");
var colors = require("colors");
var ensureBlobService_1 = require("./../../utilities/azureStorage/ensureBlobService");
var ensureContainer_1 = require("./../../utilities/azureStorage/ensureContainer");
var uploadFilesToAzure_1 = require("./../../utilities/azureStorage/uploadFilesToAzure");
var url_1 = require("./../../utilities/url");
/**
 * Uses glob to expand the filepath glob into a list of resolved file paths
 */
function loadSourceFiles(globs, cwd) {
    return new Promise(function (resolve, reject) {
        var options = cwd ? { cwd: cwd } : {};
        glob(globs, options, function (err, matches) {
            if (err) {
                reject(err);
            }
            else {
                resolve(matches);
            }
        });
    });
}
/**
 * Deploys all the files in a certain directory to a specific Azure Blob Storage instance
 */
function deployToAzure(config, log, 
    /* tslint:disable-next-line:no-any */
    logError) {
    if (log === void 0) { log = console.log; }
    /* tslint:disable-next-line:no-any */
    if (logError === void 0) { logError = console.error; }
    if (!config.container) {
        return new Promise(function (complete, reject) {
            reject(new Error('Config file missing container name!'));
        });
    }
    if (!config.account) {
        return new Promise(function (complete, reject) {
            reject(new Error('Config file missing Azure account name!'));
        });
    }
    if (!config.accessKey) {
        return new Promise(function (complete, reject) {
            reject(new Error('Config file missing Azure access key!'));
        });
    }
    log("Uploading files '" + config.uploadPath + "' from directory '" + config.workingDir + "' to Azure");
    return loadSourceFiles(config.uploadPath, config.workingDir)
        .then(function (files) {
        return ensureBlobService_1.default(config.account, config.accessKey)
            .then(function (blobService) { return ensureContainer_1.default(blobService, config.container, undefined, log); })
            .then(function (blobService) {
            return uploadFilesToAzure_1.default(blobService, config.container, config.workingDir, files, log);
        })
            .then(function () {
            log(colors.green('Upload complete!\n'));
            log("Access your files at: " + getAzureStorageUrl(config.account, config.container) + "\n");
        }, function (error) {
            logError(error);
            if (error.stack) {
                logError(error.stack);
            }
        });
    });
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = deployToAzure;
function getAzureStorageUrl(accountName, containerName) {
    return url_1.joinUrlSegments("https://" + accountName + ".blob.core.windows.net", containerName || '');
}
exports.getAzureStorageUrl = getAzureStorageUrl;

//# sourceMappingURL=deployToAzure.js.map
