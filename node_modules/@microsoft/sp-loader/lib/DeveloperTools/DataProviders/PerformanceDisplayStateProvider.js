"use strict";
var sp_core_library_1 = require("@microsoft/sp-core-library");
var PerformanceLogger_1 = require("@ms/sp-telemetry/lib/Api/PerformanceLogger");
var PerformanceDisplay_resx_1 = require("./../Components/DeveloperModules/PerformanceDisplay/PerformanceDisplay.resx");
function getState() {
    var perfItems = [];
    var toReturn = {
        perfItems: perfItems,
        startTime: 0,
        eupl: 0
    };
    try {
        var data = PerformanceLogger_1.default.getPerformanceData();
        if (!data || (data && !data.W3cNavigationStart) || (data && !data.EUPL)) {
            toReturn.errorMessage = PerformanceDisplay_resx_1.default.ErrorAccessingPerfDataErrorMessage;
            console.debug(toReturn.errorMessage); 
            return toReturn;
        }
        toReturn.startTime = data.W3cNavigationStart;
        toReturn.eupl = data.EUPL;
        var euplBreakdown = void 0;
        try {
            euplBreakdown = JSON.parse(data.EUPLBreakdown);
        }
        catch (error) { }
        if (!euplBreakdown) {
            toReturn.errorMessage = PerformanceDisplay_resx_1.default.ErrorParsingPercievedLatencyErrorMessage;
            console.debug(toReturn.errorMessage); 
            return toReturn;
        }
        var apiCallsData = void 0;
        try {
            apiCallsData = JSON.parse(data.APICalls);
        }
        catch (error) { }
        if (!apiCallsData) {
            toReturn.errorMessage = PerformanceDisplay_resx_1.default.ErrorParsingApiDataErrorMessage;
            console.debug(toReturn.errorMessage); 
            return toReturn;
        }
        var redirectPerf = void 0;
        try {
            redirectPerf = window.performance.timing;
        }
        catch (error) { }
        if (!redirectPerf) {
            toReturn.errorMessage = PerformanceDisplay_resx_1.default.ErrorAccessingRedirectDataErrorMessage;
            console.debug(toReturn.errorMessage); 
            return toReturn;
        }
        if (redirectPerf.redirectEnd) {
            perfItems.push({
                id: 'RedirectResponse',
                name: PerformanceDisplay_resx_1.default.RedirectResponseLabel,
                startVal: redirectPerf.redirectStart,
                duration: (redirectPerf.redirectEnd - redirectPerf.redirectStart),
                breakdown: undefined
            });
        }
        perfItems.push({
            id: 'w3cResponseEnd',
            name: PerformanceDisplay_resx_1.default.ServerResponseLabel,
            startVal: data.W3cNavigationStart,
            duration: euplBreakdown.w3cResponseEnd,
            breakdown: undefined
        });
        perfItems.push({
            id: 'appStart',
            name: PerformanceDisplay_resx_1.default.ApplicationInitializationLabel,
            startVal: data.W3cResponseEnd,
            duration: euplBreakdown.appStart,
            breakdown: undefined
        });
        perfItems.push({
            id: 'PageComponent',
            name: PerformanceDisplay_resx_1.default.PageRenderLabel,
            startVal: euplBreakdown['PageComponent.start'],
            duration: data.Control3RenderTime -
                (euplBreakdown['PageComponent.start'] - data.W3cNavigationStart),
            breakdown: undefined
        });
        perfItems.push({
            id: 'LeftNavComponent',
            name: PerformanceDisplay_resx_1.default.LeftNavRenderLabel,
            startVal: euplBreakdown['LeftNavComponent.start'],
            duration: data.Control1RenderTime -
                (euplBreakdown['LeftNavComponent.start'] - data.W3cNavigationStart),
            breakdown: undefined
        });
        perfItems.push({
            id: 'CanvasComponent',
            name: PerformanceDisplay_resx_1.default.CanvasRenderLabel,
            startVal: euplBreakdown['CanvasComponent.start'],
            duration: data.Control2RenderTime -
                (euplBreakdown['CanvasComponent.start'] - data.W3cNavigationStart),
            breakdown: undefined
        });
        var apiCalls = {};
        var endVals = {};
        for (var _i = 0, apiCallsData_1 = apiCallsData; _i < apiCallsData_1.length; _i++) {
            var apiCall = apiCallsData_1[_i];
            if (apiCall.name && apiCall.name.indexOf('WebPart') > -1) {
                if (!apiCalls[apiCall.name]) {
                    apiCalls[apiCall.name] = [];
                    endVals[apiCall.name] = 0;
                }
                apiCalls[apiCall.name].push({
                    startVal: Date.parse(apiCall.startTime),
                    duration: +apiCall.duration
                });
                endVals[apiCall.name] = Math.max(Date.parse(apiCall.startTime) + +apiCall.duration, endVals[apiCall.name]);
            }
        }
        for (var webPart = data.Control4Id, i = 4; webPart; i++, webPart = data["Control" + i + "Id"]) {
            var renderDuration = data["Control" + i + "RenderTime"] -
                (euplBreakdown[webPart + ".start"] - data.W3cNavigationStart);
            var wpBreakdown = {
                dataFetch: apiCalls[webPart] || [],
                init: {
                    startVal: euplBreakdown[webPart + ".start"],
                    duration: euplBreakdown[webPart + ".init"]
                },
                modulesLoaded: {
                    startVal: euplBreakdown[webPart + ".start"],
                    duration: euplBreakdown[webPart + ".modulesLoaded"]
                },
                render: {
                    startVal: euplBreakdown[webPart + ".start"],
                    duration: renderDuration
                }
            };
            perfItems.push({
                id: webPart,
                name: "" + _getReadableWebpartName(webPart.replace('Load.', '')),
                startVal: euplBreakdown[webPart + ".start"],
                duration: Math.max(renderDuration, (endVals[webPart] || 0) - euplBreakdown[webPart + ".start"]),
                breakdown: wpBreakdown
            });
        }
        return toReturn;
    }
    catch (error) {
        toReturn.errorMessage = sp_core_library_1.Text.format(PerformanceDisplay_resx_1.default.UnkownPerformanceDataErrorMessage, error);
        console.debug(toReturn.errorMessage); 
        return toReturn;
    }
}
exports.getState = getState;
function _getReadableWebpartName(id) {
    try {
        var readableWebPartName = id.split('.')[1];
        return readableWebPartName;
    }
    catch (error) {
        return PerformanceDisplay_resx_1.default.DefaultWebPartName;
    }
}
