"use strict";
var sp_telemetry_1 = require("@ms/sp-telemetry");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_page_context_1 = require("@microsoft/sp-page-context");
var sp_http_1 = require("@microsoft/sp-http");
var SuiteNavManager_1 = require("../../common/suiteNav/SuiteNavManager");
var SPPageChrome_1 = require("../../common/spPageChrome/SPPageChrome");
var PreloadedDataReader_1 = require("./PreloadedDataReader");
var AppPageContext_1 = require("../pageContext/AppPageContext");
var Shell = (function () {
    function Shell() {
    }
    Shell.getInstance = function () {
        if (Shell._instance === undefined) {
            Shell._instance = new Shell();
        }
        return Shell._instance;
    };
    Object.defineProperty(Shell.prototype, "serviceScope", {
        get: function () {
            return this._rootServiceScope;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Shell.prototype, "pageContext", {
        get: function () {
            return this._pageContext;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Shell.prototype, "appPageContext", {
        get: function () {
            return this._appPageContext;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Shell.prototype, "httpClient", {
        get: function () {
            return this._httpClient;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Shell.prototype, "spHttpClient", {
        get: function () {
            return this._spHttpClient;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Shell.prototype, "suiteNav", {
        get: function () {
            return this._suiteNav;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Shell.prototype, "environment", {
        get: function () {
            return this._environment;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Shell.prototype, "manifestPreloads", {
        get: function () {
            return this._manifestPreloads;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Shell.prototype, "pageManager", {
        get: function () {
            return this._pageManager;
        },
        enumerable: true,
        configurable: true
    });
    Shell.prototype.start = function (module, preloadedData) {
        var application = module.default ||
            module;
        this._initializePreload(preloadedData, application);
        sp_telemetry_1._PerformanceLogger.markApplicationStart();
        return this._startApplication(application, preloadedData);
    };
    Shell.prototype._startApplication = function (application, preloadedData) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (application['__type'] !== 'ClientSideApplication') {
                reject(new Error('The application is not a subclass of ClientSideApplication'));
                return;
            }
            var qosMonitor = new sp_telemetry_1._QosMonitor('ClientApplication');
            var qosApplicationData = {
                alias: application.alias || preloadedData.manifests[0].alias,
                isInternal: preloadedData.manifests[0].isInternal,
                manifestId: preloadedData.manifests[0].id
            };
            try {
                _this._application = application;
                _this._application.load(_this);
                if (sp_core_library_1.Environment.type !== sp_core_library_1.EnvironmentType.ClassicSharePoint) {
                    _this._spPageChrome = SPPageChrome_1.default.getInstance(_this._rootServiceScope);
                    _this._suiteNav = new SuiteNavManager_1.default(_this._application.suiteNavConfiguration(), _this._spPageChrome.suiteNavDiv, _this.serviceScope);
                    _this._suiteNav.loadSuiteNav();
                    _this._application.render(_this._spPageChrome.appDiv);
                }
                qosMonitor.writeSuccess(qosApplicationData);
                resolve(_this._application);
            }
            catch (e) {
                qosMonitor.writeUnexpectedFailure('GeneralError', e, qosApplicationData);
                reject(e);
            }
        });
    };
    Shell.prototype._initializePreload = function (preloadedData, application) {
        sp_telemetry_1._TraceLogger.logVerbose(Shell._logSource, 'Starting sp-client-preview');
        this._rootServiceScope = sp_core_library_1.ServiceScope.startNewRoot();
        this._rootServiceScope.provide(sp_telemetry_1._logSourceServiceKey, Shell._logSource);
        this._pageManager = this._rootServiceScope
            .createDefaultAndProvide(sp_page_context_1.PageManager.serviceKey);
        this._pageContext = this._rootServiceScope
            .createDefaultAndProvide(sp_page_context_1.PageContext.serviceKey);
        this._appPageContext = this._rootServiceScope
            .createDefaultAndProvide(AppPageContext_1.appPageContextServiceKey);
        this._httpClient = this._rootServiceScope.createAndProvide(sp_http_1.HttpClient.serviceKey, sp_http_1.HttpClient);
        this._spHttpClient = this._rootServiceScope.createAndProvide(sp_http_1.SPHttpClient.serviceKey, sp_http_1.SPHttpClient);
        this._rootServiceScope.finish();
        this._pageManager.navigateToPage(preloadedData.spPageContextInfo.webServerRelativeUrl, 
        sp_page_context_1.SharePointPageContextDataProvider._createPageContextData(preloadedData.spPageContextInfo), 
        preloadedData.spPageContextInfo);
        this._preloadedDataReader = new PreloadedDataReader_1.default(preloadedData);
        this._initializeDigestCache(this._rootServiceScope, preloadedData);
        this._preloadedDataReader.initializePageContext(this._appPageContext);
        this._spPageChrome = SPPageChrome_1.default.getInstance(this._rootServiceScope);
        this._manifestPreloads = preloadedData;
        this._manifestPreloads.spPageContextInfo = undefined;
    };
    Shell.prototype._initializeDigestCache = function (serviceScope, preloadedData) {
        if (preloadedData.contextWebInfo && preloadedData.spPageContextInfo) {
            serviceScope.whenFinished(function () {
                var digestCache = serviceScope.consume(sp_http_1.DigestCache.serviceKey);
                sp_telemetry_1._TraceLogger.logVerbose(Shell._logSource, 'Shell: Added preloaded FormDigestValue to cache');
                var expirationTimestamp = performance.now()
                    + 1000 * preloadedData.contextWebInfo.FormDigestTimeoutSeconds;
                digestCache.addDigestToCache(preloadedData.spPageContextInfo.webServerRelativeUrl, preloadedData.contextWebInfo.FormDigestValue, expirationTimestamp);
                digestCache.addDigestToCache(preloadedData.spPageContextInfo.webAbsoluteUrl, preloadedData.contextWebInfo.FormDigestValue, expirationTimestamp);
            });
        }
    };
    return Shell;
}());
Shell._logSource = sp_telemetry_1._LogSource.create('Shell');
Shell._instance = undefined;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Shell;
