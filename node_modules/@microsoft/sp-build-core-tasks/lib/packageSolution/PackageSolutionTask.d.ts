/// <reference types="node" />
import * as gulp from 'gulp';
import { GulpTask, IBuildConfig } from '@microsoft/gulp-core-build';
import ISolution from './packageSolution/models/packageDefinition/ISolution';
export interface IPackageSolutionTaskConfig {
    paths?: {
        /**
         * The packaging root folder. Defaults to './sharepoint'. All other paths are relative to this folder.
         */
        packageDir?: string;
        /**
         * The folder to write the raw package to disk for debugging. Defaults to 'solution/debug'
         */
        debugDir?: string;
        /**
         * The name of the sppkg to create (including extension) Defaults to 'ClientSolution.sppkg'
         */
        zippedPackage?: string;
        /**
         * The folder containing the custom feature xml to import into the package. Defaults to 'feature_xml'.
         * Note that all files in this folder will be included in the SPPKG, however, you must create a .rels
         * file for your custom feature for it to be included in the package manifest.
         */
        featureXmlDir?: string;
        /**
         * The glob to match against to find manifest files. Looks in dist/ when running in normal, but deploy/ for
         *  production.
         */
        manifestsMatch?: string;
        /**
         * The path to the folder where manifests are stored. Defaults to buildConfig.distFolder
         */
        manifestDir?: string;
        /**
         * The directory containing Sharepoint assets (such as feature elements, element manifests, and upgrade actions),
         * which will be automatically included in the sharepoint package. Defaults to 'assets'.
         */
        sharepointAssetDir?: string;
    };
    /**
     * The definition of this solution's package, features, and components
     */
    solution?: ISolution;
}
export declare class PackageSolutionTask extends GulpTask<IPackageSolutionTaskConfig> {
    name: string;
    taskConfig: IPackageSolutionTaskConfig;
    private _hasPrependedPaths;
    loadSchema(): Object;
    executeTask(gulp: gulp.Gulp, completeCallback: () => void): NodeJS.ReadWriteStream;
    getCleanMatch(buildConfig: IBuildConfig): string[];
    private _prependBaseToConfigPaths();
}
