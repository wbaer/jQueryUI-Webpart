{"version":3,"sources":["certificates.ts"],"names":[],"mappings":"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","file":"certificates.js","sourcesContent":["/// <reference path=\"./NodeForgeExtensions.d.ts\" />\r\n\r\nimport { GulpTask } from '@microsoft/gulp-core-build';\r\nimport * as forgeType from 'node-forge';\r\nconst forge: typeof forgeType & IForgeExtensions = require('node-forge');\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport * as child_process from 'child_process';\r\nimport { EOL } from 'os';\r\n\r\nimport { runSudoSync, ISudoSyncResult } from './sudoSync';\r\n\r\nimport CertificateStore from './CertificateStore';\r\n\r\nconst serialNumber: string = '731c321744e34650a202e3ef91c3c1b9';\r\nconst friendlyName: string = 'gulp-core-build-serve Development Certificate';\r\nconst macKeychain: string = '/Library/Keychains/System.keychain';\r\n\r\nlet _certutilExePath: string;\r\n\r\nexport interface ICertificate {\r\n  pemCertificate: string;\r\n  pemKey: string;\r\n}\r\n\r\nfunction createDevelopmentCertificate(): ICertificate {\r\n  const keys: forgeType.pki.KeyPair = forge.pki.rsa.generateKeyPair(2048);\r\n  const certificate: IForgeCertificate = forge.pki.createCertificate();\r\n  certificate.publicKey = keys.publicKey;\r\n\r\n  certificate.serialNumber = serialNumber;\r\n\r\n  const now: Date = new Date();\r\n  certificate.validity.notBefore = now;\r\n  certificate.validity.notAfter.setFullYear(certificate.validity.notBefore.getFullYear() + 3); // Three years from now\r\n\r\n  const attrs: IAttr[] = [{\r\n    name: 'commonName',\r\n    value: 'localhost'\r\n  }];\r\n\r\n  certificate.setSubject(attrs);\r\n  certificate.setIssuer(attrs);\r\n\r\n  certificate.setExtensions([\r\n    {\r\n      name: 'keyUsage',\r\n      digitalSignature: true,\r\n      keyEncipherment: true,\r\n      dataEncipherment: true\r\n    }, {\r\n      name: 'extKeyUsage',\r\n      serverAuth: true\r\n    }, {\r\n      name: 'friendlyName',\r\n      value: friendlyName\r\n    }]);\r\n\r\n  // self-sign certificate\r\n  certificate.sign(keys.privateKey, forge.md.sha256.create());\r\n\r\n  // convert a Forge certificate to PEM\r\n  const pem: string = forge.pki.certificateToPem(certificate);\r\n  const privateKey: string = forge.pki.privateKeyToPem(keys.privateKey);\r\n\r\n  return {\r\n    pemCertificate: pem,\r\n    pemKey: privateKey\r\n  };\r\n}\r\n\r\nfunction ensureCertUtilExePath(parentTask: GulpTask<{}>): string {\r\n  if (!_certutilExePath) {\r\n    const where: child_process.SpawnSyncReturns<string> = child_process.spawnSync('where', ['certutil']);\r\n\r\n    const whereErr: string = where.stderr.toString();\r\n    if (!!whereErr) {\r\n      parentTask.logError(`Error finding certUtil command: \"${whereErr}\"`);\r\n      _certutilExePath = undefined;\r\n    } else {\r\n      _certutilExePath = where.stdout.toString().trim();\r\n    }\r\n  }\r\n\r\n  return _certutilExePath;\r\n}\r\n\r\nfunction tryTrustCertificate(certificatePath: string, parentTask: GulpTask<{}>): boolean {\r\n  switch (process.platform) {\r\n    case 'win32':\r\n      const certutilExePath: string = ensureCertUtilExePath(parentTask);\r\n      if (!certutilExePath) {\r\n        // Unable to find the cert utility\r\n        return false;\r\n      }\r\n\r\n      parentTask.log( 'Attempting to trust a dev certificate. This self-signed certificate only points to localhost ' +\r\n                      'and will be stored in your local user profile to be used by other instances of ' +\r\n                      'gulp-core-build-serve. If you do not consent to trust this certificate, click \"NO\" in the ' +\r\n                      'dialog.');\r\n\r\n      const winTrustResult: child_process.SpawnSyncReturns<string> =\r\n        child_process.spawnSync(certutilExePath, ['-user', '-addstore', 'root', certificatePath]);\r\n\r\n      if (winTrustResult.status !== 0) {\r\n        parentTask.logError(`Error: ${winTrustResult.stdout.toString()}`);\r\n\r\n        const errorLines: string[] = winTrustResult.stdout.toString().split(EOL).map((line: string) => line.trim());\r\n\r\n        // Not sure if this is always the status code for \"cancelled\" - should confirm.\r\n        if (winTrustResult.status === 2147943623 ||\r\n            errorLines[errorLines.length - 1].indexOf('The operation was canceled by the user.') > 0) {\r\n          parentTask.log('Certificate trust cancelled.');\r\n        } else {\r\n          parentTask.logError('Certificate trust failed with an unknown error.');\r\n        }\r\n\r\n        return false;\r\n      } else {\r\n        parentTask.logVerbose('Successfully trusted development certificate.');\r\n\r\n        return true;\r\n      }\r\n\r\n    case 'darwin': // tslint:disable-line:no-switch-case-fall-through\r\n      parentTask.log( 'Attempting to trust a dev certificate. This self-signed certificate only points to localhost ' +\r\n                      'and will be stored in your local user profile to be used by other instances of ' +\r\n                      'gulp-core-build-serve. If you do not consent to trust this certificate, do not enter your ' +\r\n                      'root password in the prompt.');\r\n\r\n      const commands: string[] = [\r\n        'security',\r\n        'add-trusted-cert',\r\n        '-d',\r\n        '-r',\r\n        'trustRoot',\r\n        '-k',\r\n        macKeychain,\r\n        certificatePath\r\n      ];\r\n      const result: ISudoSyncResult = runSudoSync(commands);\r\n\r\n      if (result.code === 0) {\r\n        parentTask.logVerbose('Successfully trusted development certificate.');\r\n        return true;\r\n      } else {\r\n        if (result.stderr.some((value: string) => !!value.match(/The authorization was cancelled by the user\\./))) {\r\n          parentTask.log('Certificate trust cancelled.');\r\n          return false;\r\n        } else {\r\n          parentTask.logError(`Certificate trust failed with an unknown error. Exit code: ${result.code}. ` +\r\n                              `Error: ${result.stderr.join(' ')}`);\r\n          return false;\r\n        }\r\n      }\r\n\r\n    default: // tslint:disable-line:no-switch-case-fall-through\r\n      // Linux + others: Have the user manually trust the cert if they want to\r\n      parentTask.log( 'Automatic certificate trust is only implemented for gulp-core-build-serve on Windows and ' +\r\n                      'macOS. To trust the development certificate, add this certificate to your trusted root ' +\r\n                      `certification authorities: \"${CertificateStore.instance.certificatePath}\".`);\r\n      return true;\r\n  }\r\n}\r\n\r\nfunction trySetFriendlyName(certificatePath: string, parentTask: GulpTask<{}>): boolean {\r\n  if (process.platform === 'win32') {\r\n    const certutilExePath: string = ensureCertUtilExePath(parentTask);\r\n    if (!certutilExePath) {\r\n      // Unable to find the cert utility\r\n      return false;\r\n    }\r\n\r\n    const basePath: string = path.dirname(certificatePath);\r\n    const fileName: string = path.basename(certificatePath, path.extname(certificatePath));\r\n    const friendlyNamePath: string = path.join(basePath, `${fileName}.inf`);\r\n\r\n    const friendlyNameFile: string = [\r\n      '[Version]',\r\n      'Signature = \"$Windows NT$\"',\r\n      '[Properties]',\r\n      `11 = \"{text}${friendlyName}\"`,\r\n      ''\r\n    ].join(EOL);\r\n\r\n    fs.writeFileSync(friendlyNamePath, friendlyNameFile);\r\n\r\n    const commands: string[] = [\r\n      '–repairstore',\r\n      '–user',\r\n      'root',\r\n      serialNumber,\r\n      friendlyNamePath\r\n    ];\r\n    const repairStoreResult: child_process.SpawnSyncReturns<string> =\r\n      child_process.spawnSync(certutilExePath, commands);\r\n\r\n    if (repairStoreResult.status !== 0) {\r\n      parentTask.logError(`CertUtil Error: ${repairStoreResult.stdout.toString()}`);\r\n\r\n      return false;\r\n    } else {\r\n      parentTask.logVerbose('Successfully set certificate name.');\r\n\r\n      return true;\r\n    }\r\n  } else {\r\n    // No equivalent concept outside of Windows\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * Get the dev certificate from the store, or, optionally, generate a new one and trust it if one doesn't exist in the\r\n *  store.\r\n */\r\nexport function ensureCertificate(canGenerateNewCertificate: boolean,\r\n                                  parentTask: GulpTask<{}>): ICertificate {\r\n  const certificateStore: CertificateStore = CertificateStore.instance;\r\n\r\n  if ((!certificateStore.certificateData || !certificateStore.keyData) && canGenerateNewCertificate) {\r\n    const generatedCertificate: ICertificate = createDevelopmentCertificate();\r\n\r\n    const now: Date = new Date();\r\n    const certificateName: string = now.getTime().toString();\r\n    const tempDirName: string = path.join(__dirname, '..', 'temp');\r\n    if (!fs.existsSync(tempDirName)) {\r\n      fs.mkdirSync(tempDirName); // Create the temp dir if it doesn't exist\r\n    }\r\n\r\n    const tempCertificatePath: string = path.join(tempDirName, `${certificateName}.cer`);\r\n    fs.writeFileSync(tempCertificatePath, generatedCertificate.pemCertificate);\r\n\r\n    if (tryTrustCertificate(tempCertificatePath, parentTask)) {\r\n      certificateStore.certificateData = generatedCertificate.pemCertificate;\r\n      certificateStore.keyData = generatedCertificate.pemKey;\r\n\r\n      if (!trySetFriendlyName(tempCertificatePath, parentTask)) { // Try to set the friendly name, and warn if we can't\r\n        parentTask.logWarning('Unable to set the certificate\\'s friendly name.');\r\n      }\r\n    } else {\r\n      // Clear out the existing store data, if any exists\r\n      certificateStore.certificateData = undefined;\r\n      certificateStore.keyData = undefined;\r\n    }\r\n\r\n    fs.unlinkSync(tempCertificatePath);\r\n  }\r\n\r\n  return {\r\n    pemCertificate: certificateStore.certificateData,\r\n    pemKey: certificateStore.keyData\r\n  };\r\n}\r\n\r\nexport function untrustCertificate(parentTask: GulpTask<{}>): boolean {\r\n  switch (process.platform) {\r\n    case 'win32':\r\n      const certutilExePath: string = ensureCertUtilExePath(parentTask);\r\n      if (!certutilExePath) {\r\n        // Unable to find the cert utility\r\n        return false;\r\n      }\r\n\r\n      const winUntrustResult: child_process.SpawnSyncReturns<string> =\r\n        child_process.spawnSync(certutilExePath, ['-user', '-delstore', 'root', serialNumber]);\r\n\r\n      if (winUntrustResult.status !== 0) {\r\n        parentTask.logError(`Error: ${winUntrustResult.stdout.toString()}`);\r\n        return false;\r\n      } else {\r\n        parentTask.logVerbose('Successfully untrusted development certificate.');\r\n        return true;\r\n      }\r\n\r\n    case 'darwin': // tslint:disable-line:no-switch-case-fall-through\r\n      parentTask.logVerbose('Trying to find the signature of the dev cert');\r\n\r\n      const macFindCertificateResult: child_process.SpawnSyncReturns<string> =\r\n        child_process.spawnSync('security', ['find-certificate', '-c', 'localhost', '-a', '-Z', macKeychain]);\r\n\r\n      if (macFindCertificateResult.status !== 0) {\r\n        parentTask.logError(`Error finding the dev certificate: ${macFindCertificateResult.output.join(' ')}`);\r\n        return false;\r\n      }\r\n\r\n      const outputLines: string[] = macFindCertificateResult.stdout.toString().split(EOL);\r\n      let found: boolean = false;\r\n      let shaHash: string = undefined;\r\n      for (let i: number = 0; i < outputLines.length; i++) {\r\n        const line: string = outputLines[i];\r\n        const shaMatch: string[] = line.match(/^SHA-1 hash: (.+)$/);\r\n        if (shaMatch) {\r\n          shaHash = shaMatch[1];\r\n        }\r\n\r\n        const snbrMatch: string[] = line.match(/^\\s*\"snbr\"<blob>=0x([^\\s]+).+$/);\r\n        if (snbrMatch && (snbrMatch[1] || '').toLowerCase() === serialNumber) {\r\n          found = true;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (!found) {\r\n        parentTask.logError('Unable to find the dev certificate.');\r\n        return false;\r\n      }\r\n\r\n      parentTask.logVerbose(`Found the dev cert. SHA is ${shaHash}`);\r\n\r\n      const macUntrustResult: ISudoSyncResult =\r\n        runSudoSync(['security', 'delete-certificate', '-Z', shaHash, macKeychain]);\r\n\r\n      if (macUntrustResult.code === 0) {\r\n        parentTask.logVerbose('Successfully untrusted dev certificate.');\r\n        return true;\r\n      } else {\r\n        parentTask.logError(macUntrustResult.stderr.join(' '));\r\n        return false;\r\n      }\r\n\r\n    default: // tslint:disable-line:no-switch-case-fall-through\r\n      // Linux + others: Have the user manually untrust the cert\r\n      parentTask.log( 'Automatic certificate untrust is only implemented for gulp-core-build-serve on Windows and ' +\r\n                      'macOS. To untrust the development certificate, remove this certificate from your trusted ' +\r\n                      `root certification authorities: \"${CertificateStore.instance.certificatePath}\". The ` +\r\n                      `certificate has serial number \"${serialNumber}\".`);\r\n      return false;\r\n  }\r\n}"],"sourceRoot":"..\\src"}