/**
 * PropertyPane interfaces for the developers wanting to configure the web parts.
 */
import { IPropertyPanePage } from '../propertyPanePage/IPropertyPanePage';
import { WebPartConfigurationEvent } from './PropertyPaneDefinitions';
/**
 * Web part - PropertyPane data contract.
 *
 * @internal
 */
export interface IPropertyPaneData {
    /**
     * Web part instance id.
     */
    webPartId: string;
    /**
     * Title of the web part.
     */
    title: string;
    /**
     * Indicates whether the web part's configuration is reactive or not.
     */
    isReactive?: boolean;
    /**
     * Indicates whether the PropertyPane state should reset or not.
     */
    shouldResetState?: boolean;
    /**
     * Notification event fired when the property pane field is changed and
     * has already been validated and modified.
     */
    onPropertyPaneFieldChanged: (propertyName: string, newValue: any) => void;
    /**
     * Single callback for all the possible configuration events of the PropertyPane.
     */
    onConfigurationEvent: (eventType: WebPartConfigurationEvent) => void;
    /**
     * Event callback fired after the PropertyPane is rendered.
     */
    onRendered: () => void;
    /**
     * Callback to re-render the PropertyPane.
     */
    render?: () => void;
    /**
     * Property bag from the web part.
     */
    properties: any;
    /**
     * Property pane configuration.
     */
    configuration: IPropertyPaneConfiguration;
}
/**
 * Web part configuration settings
 *
 * @public
 */
export interface IPropertyPaneConfiguration {
    /**
     * Page to be displayed on the PropertyPane.
     */
    currentPage?: number;
    /**
     * Indicates whether the loading indicator should be displayed on top of the property pane or not.
     * This feature is intended to be used when the user is waiting on a promise to resolve.
     * If set to true, overlay loading indicator appears after 500ms (web part author can override this behavior by
     * using overlayLoadingIndicator property).
     *
     * The reason why we are not showing it immediately is that our intent is to never show the loading
     * indicator. But in real life async requests could take long and it becomes necessary to display a
     * loading indicator to the end user.
     */
    showLoadingIndicator?: boolean;
    /**
     * Number of milli seconds to be delayed before the loading indicator is shown on the property pane.
     *
     * default is 500.
     */
    loadingIndicatorDelayTime?: number;
    /**
     * Total number of pages on the PropertyPane.
     */
    pages: IPropertyPanePage[];
}
