{"version":3,"sources":["SetWebpackPublicPathLoader.ts"],"names":[],"mappings":"AAAA;;;GAGG;;AAEH,uBAAsB,QAAQ,CAAC,CAAA;AAC/B,mBAAoB,IAAI,CAAC,CAAA;AACzB,IAAY,MAAM,WAAM,WAAW,CAAC,CAAA;AAEpC,4BAA4B;AAC5B,IAAM,WAAW,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AAU5C;IA0JE;QACE,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;IAC7E,CAAC;IAlJa,gDAAqB,GAAnC,UAAoC,KAAsB;QAAtB,qBAAsB,GAAtB,aAAsB;QACxD,IAAM,KAAK,GAAa;YACtB,cAAc;YACd,WAAQ,0BAA0B,CAAC,eAAe,UAAK,0BAA0B,CAAC,eAAe,UAAM;YACvG,wDAAwD;YACxD,kCAAkC;YAClC,8CAA8C;YAC9C,gCAAgC;YAChC,gDAAgD;YAChD,oBAAiB,0BAA0B,CAAC,eAAe,kBAAc;YACzE,KAAK;YACL,GAAG;YACH,OAAO;SACR,CAAC;QAEF,IAAM,YAAY,GAAW,0BAA0B,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAEzE,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACV,MAAM,CAAC,KAAG,QAAG,GAAG,YAAc,CAAC;QACjC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAM,QAAQ,GAAwB,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;YACjE,QAAQ,CAAC,gBAAgB,EAAE,CAAC;YAC5B,IAAM,UAAU,GAAwB,MAAM,CAAC,UAAU,CAAC;gBACxD,SAAS,EAAE,IAAI;aAChB,CAAC,CAAC;YACH,IAAM,UAAU,GAAwB,QAAQ,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;YACvE,UAAU,CAAC,gBAAgB,EAAE,CAAC;YAC9B,UAAU,CAAC,sBAAsB,EAAE,CAAC;YACpC,UAAU,CAAC,YAAY,EAAE,CAAC;YAC1B,MAAM,CAAC,KAAG,QAAG,GAAG,UAAU,CAAC,eAAe,EAAI,CAAC;QACjD,CAAC;IACH,CAAC;IAEa,qCAAU,GAAxB,UAAyB,OAA2C;QAClE,IAAI,CAAC,cAAc,GAAG,OAAO,IAAI,EAAE,CAAC;IACtC,CAAC;IAEa,gCAAK,GAAnB,UAAoB,gBAAwB;QAC1C,2BAA2B;QAC3B,IAAM,IAAI,GAAQ,IAAI,CAAC;QACvB,0BAA0B;QAE1B,IAAM,OAAO,GACX,0BAA0B,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACpD,IAAI,KAAK,GAAa,EAAE,CAAC;QAEzB,EAAE,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;YACvB,KAAK,GAAG;gBACN,wDAAwD;gBACxD,8BAA2B,0BAA0B,CAAC,kBAAkB,CAAC,OAAO,CAAC,UAAU,CAAC,cAAU;gBACtG,oBAAoB;gBACpB,EAAE;gBACF,kCAAkC;gBAClC,8CAA8C;gBAC9C,gCAAgC;gBAChC,gDAAgD;gBAChD,sCAAsC;gBACtC,+EAA+E;gBAC/E,qBAAqB;gBACrB,cAAc;gBACd,OAAO;gBACP,KAAK;gBACL,GAAG;gBACH,EAAE;gBACF,eAAe;gBACf,2BAAwB,0BAA0B,CAAC,eAAe,SAAK;gBACvE,0CAA0C;gBAC1C,mFAAmF;gBACnF,cAAc;gBACd,OAAO;gBACP,KAAK;gBACL,GAAG;aACJ,CAAC;QACJ,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,EAAE,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;gBACvB,KAAK,GAAG;oBACN,mBAAmB;wBACjB,OAAI,0BAA0B,CAAC,gCAAgC,CAAC,OAAO,CAAC,UAAU,CAAC,QAAI;iBAC1F,CAAC;YACJ,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAC5B,KAAK,GAAG;oBACN,oEAAoE;oBACpE,4EAA4E;iBAC7E,CAAC;YACJ,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,IAAI,CAAC,WAAW,CAAC,iDAAiD;oBAChE,yCAAyC,CAAC,CAAC;gBAE7C,MAAM,CAAC,EAAE,CAAC;YACZ,CAAC;YAED,EAAE,CAAC,CAAC,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,SAAS,KAAK,EAAE,CAAC,CAAC,CAAC;gBAClD,KAAK,CAAC,IAAI,CACR,EAAE,EACF,gBAAgB;oBACd,OAAI,0BAA0B,CAAC,gCAAgC,CAAC,OAAO,CAAC,SAAS,CAAC,QAAI,CAAC,CAAC;YAC9F,CAAC;YAED,KAAK,CAAC,IAAI,CACR,EAAE,EACF,uCAAuC,CACxC,CAAC;QACJ,CAAC;QAED,MAAM,CAAC,0BAA0B,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACrD,CAAC;IAEc,oCAAS,GAAxB,UAAyB,KAAe;QACtC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,QAAG,CAAC,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,KAAG,QAAG,GAAG,QAAG,MAAG,EAAE,GAAG,CAAC,EAAE,KAAG,QAAG,GAAG,QAAK,CAAC,CAAC;IACnF,CAAC;IAEc,6CAAkB,GAAjC,UAAkC,GAAW;QAC3C,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACR,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QACnC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,SAAS,CAAC;QACnB,CAAC;IACH,CAAC;IAEc,2DAAgC,GAA/C,UAAgD,GAAW;QACzD,EAAE,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;YAClC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;QAClB,CAAC;QAED,MAAM,CAAC,0BAA0B,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;IAC5D,CAAC;IAEc,qCAAU,GAAzB,UAA0B,KAAa;QACrC,IAAM,OAAO,GAAuC;YAClD,QAAQ,EAAE,0BAA0B,CAAC,cAAc,CAAC,QAAQ;YAC5D,UAAU,EAAE,0BAA0B,CAAC,cAAc,CAAC,UAAU;YAChE,SAAS,EAAE,0BAA0B,CAAC,cAAc,CAAC,SAAS;YAC9D,UAAU,EAAE,0BAA0B,CAAC,cAAc,CAAC,UAAU;SACjE,CAAC;QAEF,IAAM,YAAY,GAAuC,WAAW,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QACvF,EAAE,CAAC,CAAC,YAAY,CAAC,QAAQ,IAAI,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC;YACrD,qEAAqE;YACrE,OAAO,CAAC,UAAU,GAAG,SAAS,CAAC;QACjC,CAAC;QAED,MAAM,CAAC,cAAK,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;IACtC,CAAC;IAvJa,0CAAe,GAAW,kDAAkD,CAAC;IAE5E,yCAAc,GAAuC;QAClE,QAAQ,EAAE,KAAK;QACf,UAAU,EAAE,SAAS;QACrB,SAAS,EAAE,SAAS;QACpB,UAAU,EAAE,SAAS;KACtB,CAAC;IAqJJ,iCAAC;AAAD,CA7JA,AA6JC,IAAA;AA7JY,kCAA0B,6BA6JtC,CAAA","file":"SetWebpackPublicPathLoader.js","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\n\r\nimport { merge } from 'lodash';\r\nimport { EOL } from 'os';\r\nimport * as uglify from 'uglify-js';\r\n\r\n/* tslint:disable:typedef */\r\nconst loaderUtils = require('loader-utils');\r\n/* tslint:enable:typedef */\r\n\r\nexport interface ISetWebpackPublicPathLoaderOptions {\r\n  systemJs?: boolean;\r\n  scriptPath?: string;\r\n  urlPrefix?: string;\r\n  publicPath?: string;\r\n}\r\n\r\nexport class SetWebpackPublicPathLoader {\r\n  public static registryVarName: string = 'window.__setWebpackPublicPathLoaderSrcRegistry__';\r\n\r\n  private static defaultOptions: ISetWebpackPublicPathLoaderOptions = {\r\n    systemJs: false,\r\n    scriptPath: undefined,\r\n    urlPrefix: undefined,\r\n    publicPath: undefined\r\n  };\r\n\r\n  public static getGlobalRegisterCode(debug: boolean = false): string {\r\n    const lines: string[] = [\r\n      '(function(){',\r\n      `if (!${SetWebpackPublicPathLoader.registryVarName}) ${SetWebpackPublicPathLoader.registryVarName}={};`,\r\n      `var scripts = document.getElementsByTagName('script');`,\r\n      'if (scripts && scripts.length) {',\r\n      '  for (var i = 0; i < scripts.length; i++) {',\r\n      '    if (!scripts[i]) continue;',\r\n      `    var path = scripts[i].getAttribute('src');`,\r\n      `    if (path) ${SetWebpackPublicPathLoader.registryVarName}[path]=true;`,\r\n      '  }',\r\n      '}',\r\n      '})();'\r\n    ];\r\n\r\n    const joinedScript: string = SetWebpackPublicPathLoader.joinLines(lines);\r\n\r\n    if (debug) {\r\n      return `${EOL}${joinedScript}`;\r\n    } else {\r\n      const uglified: uglify.AST_Toplevel = uglify.parse(joinedScript);\r\n      uglified.figure_out_scope();\r\n      const compressor: uglify.AST_Toplevel = uglify.Compressor({\r\n        dead_code: true\r\n      });\r\n      const compressed: uglify.AST_Toplevel = uglified.transform(compressor);\r\n      compressed.figure_out_scope();\r\n      compressed.compute_char_frequency();\r\n      compressed.mangle_names();\r\n      return `${EOL}${compressed.print_to_string()}`;\r\n    }\r\n  }\r\n\r\n  public static setOptions(options: ISetWebpackPublicPathLoaderOptions): void {\r\n    this.defaultOptions = options || {};\r\n  }\r\n\r\n  public static pitch(remainingRequest: string): string {\r\n    /* tslint:disable:no-any */\r\n    const self: any = this;\r\n    /* tslint:enable:no-any */\r\n\r\n    const options: ISetWebpackPublicPathLoaderOptions =\r\n      SetWebpackPublicPathLoader.getOptions(self.query);\r\n    let lines: string[] = [];\r\n\r\n    if (options.scriptPath) {\r\n      lines = [\r\n        `var scripts = document.getElementsByTagName('script');`,\r\n        `var regex = new RegExp('${SetWebpackPublicPathLoader.escapeSingleQuotes(options.scriptPath)}', 'i');`,\r\n        'var found = false;',\r\n        '',\r\n        'if (scripts && scripts.length) {',\r\n        '  for (var i = 0; i < scripts.length; i++) {',\r\n        '    if (!scripts[i]) continue;',\r\n        `    var path = scripts[i].getAttribute('src');`,\r\n        '    if (path && path.match(regex)) {',\r\n        `      __webpack_public_path__ = path.substring(0, path.lastIndexOf('/') + 1);`,\r\n        '      found = true;',\r\n        '      break;',\r\n        '    }',\r\n        '  }',\r\n        '}',\r\n        '',\r\n        'if (!found) {',\r\n        `  for (var global in ${SetWebpackPublicPathLoader.registryVarName}) {`,\r\n        '    if (global && global.match(regex)) {',\r\n        `      __webpack_public_path__ = global.substring(0, global.lastIndexOf('/') + 1);`,\r\n        '      break;',\r\n        '    }',\r\n        '  }',\r\n        '}'\r\n      ];\r\n    } else {\r\n      if (options.publicPath) {\r\n        lines = [\r\n          'var publicPath = ' +\r\n            `'${SetWebpackPublicPathLoader.appendSlashAndEscapeSingleQuotes(options.publicPath)}';`\r\n        ];\r\n      } else if (options.systemJs) {\r\n        lines = [\r\n          `var publicPath = window.System ? window.System.baseURL || '' : '';`,\r\n          `if (publicPath !== '' && publicPath.substr(-1) !== '/') publicPath += '/';`\r\n        ];\r\n      } else {\r\n        self.emitWarning(`Neither 'publicPath' nor 'systemJs' is defined,` +\r\n          'so the public path will not be modified');\r\n\r\n        return '';\r\n      }\r\n\r\n      if (options.urlPrefix && options.urlPrefix !== '') {\r\n        lines.push(\r\n          '',\r\n          'publicPath += ' +\r\n            `'${SetWebpackPublicPathLoader.appendSlashAndEscapeSingleQuotes(options.urlPrefix)}';`);\r\n      }\r\n\r\n      lines.push(\r\n        '',\r\n        `__webpack_public_path__ = publicPath;`\r\n      );\r\n    }\r\n\r\n    return SetWebpackPublicPathLoader.joinLines(lines);\r\n  }\r\n\r\n  private static joinLines(lines: string[]): string {\r\n    return lines.join(EOL).replace(new RegExp(`${EOL}${EOL}+`, 'g'), `${EOL}${EOL}`);\r\n  }\r\n\r\n  private static escapeSingleQuotes(str: string): string {\r\n    if (str) {\r\n      return str.replace('\\'', '\\\\\\'');\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  private static appendSlashAndEscapeSingleQuotes(str: string): string {\r\n    if (str && str.substr(-1) !== '/') {\r\n      str = str + '/';\r\n    }\r\n\r\n    return SetWebpackPublicPathLoader.escapeSingleQuotes(str);\r\n  }\r\n\r\n  private static getOptions(query: string): ISetWebpackPublicPathLoaderOptions {\r\n    const options: ISetWebpackPublicPathLoaderOptions = {\r\n      systemJs: SetWebpackPublicPathLoader.defaultOptions.systemJs,\r\n      scriptPath: SetWebpackPublicPathLoader.defaultOptions.scriptPath,\r\n      urlPrefix: SetWebpackPublicPathLoader.defaultOptions.urlPrefix,\r\n      publicPath: SetWebpackPublicPathLoader.defaultOptions.publicPath\r\n    };\r\n\r\n    const queryOptions: ISetWebpackPublicPathLoaderOptions = loaderUtils.parseQuery(query);\r\n    if (queryOptions.systemJs || queryOptions.publicPath) {\r\n      // If ?systemJs or ?publicPath=... is set inline, override scriptPath\r\n      options.scriptPath = undefined;\r\n    }\r\n\r\n    return merge(options, queryOptions);\r\n  }\r\n\r\n  constructor() {\r\n    throw new Error('Constructing \"LoadThemedStylesLoader\" is not supported.');\r\n  }\r\n}\r\n"],"sourceRoot":"/source/"}