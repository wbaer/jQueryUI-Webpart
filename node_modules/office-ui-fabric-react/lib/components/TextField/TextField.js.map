{"version":3,"sources":["components/TextField/TextField.tsx"],"names":[],"mappings":"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","file":"components/TextField/TextField.js","sourcesContent":["import * as React from 'react';\r\nimport { ITextField, ITextFieldProps } from './TextField.Props';\r\nimport { Label } from '../../Label';\r\nimport {\r\n  BaseComponent,\r\n  getId,\r\n  css,\r\n  getNativeProps,\r\n  inputProperties,\r\n  textAreaProperties\r\n} from '../../Utilities';\r\nimport './TextField.scss';\r\n\r\nexport interface ITextFieldState {\r\n  value?: string;\r\n\r\n  /** Is true when the control has focus. */\r\n  isFocused?: boolean;\r\n\r\n  /**\r\n   * The validation error message.\r\n   *\r\n   * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.\r\n   * - If we have done the validation and there is validation error, errorMessage is the validation error message.\r\n   */\r\n  errorMessage?: string;\r\n}\r\n\r\nexport class TextField extends BaseComponent<ITextFieldProps, ITextFieldState> implements ITextField {\r\n  public static defaultProps: ITextFieldProps = {\r\n    multiline: false,\r\n    resizable: true,\r\n    autoAdjustHeight: false,\r\n    underlined: false,\r\n    onChanged: () => { /* noop */ },\r\n    onBeforeChange: () => { /* noop */ },\r\n    onNotifyValidationResult: () => { /* noop */ },\r\n    onGetErrorMessage: () => undefined,\r\n    deferredValidationTime: 200,\r\n    errorMessage: '',\r\n    validateOnFocusIn: false,\r\n    validateOnFocusOut: false,\r\n    validateOnLoad: true,\r\n  };\r\n\r\n  private _id: string;\r\n  private _descriptionId: string;\r\n  private _delayedValidate: (value: string) => void;\r\n  private _isMounted: boolean;\r\n  private _lastValidation: number;\r\n  private _latestValidateValue;\r\n  private _isDescriptionAvailable: boolean;\r\n  private _textElement: HTMLInputElement | HTMLTextAreaElement;\r\n\r\n  public constructor(props: ITextFieldProps) {\r\n    super(props);\r\n\r\n    this._id = getId('TextField');\r\n    this._descriptionId = getId('TextFieldDescription');\r\n\r\n    this.state = {\r\n      value: props.value || props.defaultValue || '',\r\n      isFocused: false,\r\n      errorMessage: ''\r\n    };\r\n\r\n    this._onInputChange = this._onInputChange.bind(this);\r\n    this._onFocus = this._onFocus.bind(this);\r\n    this._onBlur = this._onBlur.bind(this);\r\n\r\n    this._delayedValidate = this._async.debounce(this._validate, this.props.deferredValidationTime);\r\n    this._lastValidation = 0;\r\n    this._isDescriptionAvailable = false;\r\n  }\r\n\r\n  /**\r\n   * Gets the current value of the text field.\r\n   */\r\n  public get value(): string {\r\n    return this.state.value;\r\n  }\r\n\r\n  public componentDidMount() {\r\n    this._isMounted = true;\r\n    this._adjustInputHeight();\r\n\r\n    if (this.props.validateOnLoad) {\r\n      this._validate(this.state.value);\r\n    }\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps: ITextFieldProps) {\r\n    const { onBeforeChange } = this.props;\r\n\r\n    if (newProps.value !== undefined && newProps.value !== this.state.value) {\r\n      if (onBeforeChange) {\r\n        onBeforeChange(newProps.value);\r\n      }\r\n\r\n      this.setState({\r\n        value: newProps.value,\r\n        errorMessage: ''\r\n      } as ITextFieldState);\r\n\r\n      this._delayedValidate(newProps.value);\r\n    }\r\n  }\r\n\r\n  public componentWillUnmount() {\r\n    this._isMounted = false;\r\n  }\r\n\r\n  public render() {\r\n    let {\r\n      className,\r\n      description,\r\n      disabled,\r\n      iconClass,\r\n      label,\r\n      multiline,\r\n      required,\r\n      underlined\r\n    } = this.props;\r\n    let { isFocused } = this.state;\r\n    const errorMessage: string = this._errorMessage;\r\n    this._isDescriptionAvailable = Boolean(description || errorMessage);\r\n\r\n    const textFieldClassName = css('ms-TextField', className, {\r\n      'is-required': required,\r\n      'is-disabled': disabled,\r\n      'is-active': isFocused,\r\n      'ms-TextField--multiline': multiline,\r\n      'ms-TextField--underlined': underlined\r\n    });\r\n\r\n    return (\r\n      <div className={ textFieldClassName }>\r\n        { label && <Label htmlFor={ this._id }>{ label }</Label> }\r\n        { iconClass && <i className={ iconClass }></i> }\r\n        { multiline ? this._renderTextArea() : this._renderInput() }\r\n        { errorMessage && <div aria-live='assertive' className='ms-u-screenReaderOnly' data-automation-id='error-message'>{ errorMessage }</div> }\r\n        { this._isDescriptionAvailable &&\r\n          <span id={ this._descriptionId }>\r\n            { description && <span className='ms-TextField-description'>{ description }</span> }\r\n            { errorMessage && <p className='ms-TextField-errorMessage ms-u-slideDownIn20'>{ errorMessage }</p> }\r\n          </span>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Sets focus on the text field\r\n   */\r\n  public focus() {\r\n    if (this._textElement) {\r\n      this._textElement.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Selects the text field\r\n   */\r\n  public select() {\r\n    if (this._textElement) {\r\n      this._textElement.select();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the selection start of the text field to a specified value\r\n   */\r\n  public setSelectionStart(value: number) {\r\n    if (this._textElement) {\r\n      this._textElement.selectionStart = value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the selection end of the text field to a specified value\r\n   */\r\n  public setSelectionEnd(value: number) {\r\n    if (this._textElement) {\r\n      this._textElement.selectionEnd = value;\r\n    }\r\n  }\r\n\r\n  private _onFocus(ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>) {\r\n    if (this.props.onFocus) {\r\n      this.props.onFocus(ev);\r\n    }\r\n\r\n    this.setState({ isFocused: true });\r\n    if (this.props.validateOnFocusIn) {\r\n      this._validate(this.state.value);\r\n    }\r\n  }\r\n\r\n  private _onBlur(ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>) {\r\n    if (this.props.onBlur) {\r\n      this.props.onBlur(ev);\r\n    }\r\n\r\n    this.setState({ isFocused: false });\r\n    if (this.props.validateOnFocusOut) {\r\n      this._validate(this.state.value);\r\n    }\r\n  }\r\n\r\n  private get _textElementClassName(): string {\r\n    const errorMessage: string = this._errorMessage;\r\n    let textFieldClassName: string;\r\n\r\n    if (this.props.multiline && !this.props.resizable) {\r\n      textFieldClassName = 'ms-TextField-field ms-TextField-field--unresizable';\r\n    } else {\r\n      textFieldClassName = 'ms-TextField-field';\r\n    }\r\n\r\n    return css(textFieldClassName, this.props.inputClassName, {\r\n      'ms-TextField-invalid': !!errorMessage\r\n    });\r\n  }\r\n\r\n  private get _errorMessage(): string {\r\n    let { errorMessage } = this.state;\r\n    if (!errorMessage) {\r\n      errorMessage = this.props.errorMessage;\r\n    }\r\n\r\n    return errorMessage;\r\n  }\r\n\r\n  private _renderTextArea(): React.ReactElement<React.HTMLProps<HTMLAreaElement>> {\r\n    let textAreaProps = getNativeProps(this.props, textAreaProperties, ['defaultValue']);\r\n\r\n    return (\r\n      <textarea\r\n        id={ this._id }\r\n        aria-describedby={ this._isDescriptionAvailable ? this._descriptionId : undefined }\r\n        aria-invalid={ !!this.state.errorMessage }\r\n        aria-label={ this.props.ariaLabel }\r\n        { ...textAreaProps }\r\n        ref={ this._resolveRef('_textElement') }\r\n        value={ this.state.value }\r\n        onInput={ this._onInputChange }\r\n        onChange={ this._onInputChange }\r\n        className={ this._textElementClassName }\r\n        onFocus={ this._onFocus }\r\n        onBlur={ this._onBlur }\r\n      />\r\n    );\r\n  }\r\n\r\n  private _renderInput(): React.ReactElement<React.HTMLProps<HTMLInputElement>> {\r\n    let inputProps = getNativeProps<React.HTMLProps<HTMLInputElement>>(this.props, inputProperties, ['defaultValue']);\r\n\r\n    return (\r\n      <input\r\n        type={ 'text' }\r\n        id={ this._id }\r\n        aria-describedby={ this._isDescriptionAvailable ? this._descriptionId : undefined }\r\n        aria-label={ this.props.ariaLabel }\r\n        aria-invalid={ !!this.state.errorMessage }\r\n        { ...inputProps }\r\n        ref={ this._resolveRef('_textElement') }\r\n        value={ this.state.value }\r\n        onInput={ this._onInputChange }\r\n        onChange={ this._onInputChange }\r\n        className={ this._textElementClassName }\r\n        onFocus={ this._onFocus }\r\n        onBlur={ this._onBlur }\r\n      />\r\n    );\r\n  }\r\n\r\n  private _onInputChange(event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>): void {\r\n    const element: HTMLInputElement = event.target as HTMLInputElement;\r\n    const value: string = element.value;\r\n    if (value === this.state.value) {\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      value: value,\r\n      errorMessage: ''\r\n    } as ITextFieldState,\r\n      () => {\r\n        this._adjustInputHeight();\r\n        if (this.props.onChanged) {\r\n          this.props.onChanged(value);\r\n        }\r\n      });\r\n\r\n    const { validateOnFocusIn, validateOnFocusOut } = this.props;\r\n    if (!(validateOnFocusIn || validateOnFocusOut)) {\r\n      this._delayedValidate(value);\r\n    }\r\n\r\n    const { onBeforeChange } = this.props;\r\n    onBeforeChange(value);\r\n  }\r\n\r\n  private _validate(value: string): void {\r\n    // In case of _validate called multi-times during executing validate logic with promise return.\r\n    if (this._latestValidateValue === value) {\r\n      return;\r\n    }\r\n\r\n    this._latestValidateValue = value;\r\n    let { onGetErrorMessage } = this.props;\r\n    let result: string | PromiseLike<string> = onGetErrorMessage(value || '');\r\n\r\n    if (result !== undefined) {\r\n      if (typeof result === 'string') {\r\n        this.setState({\r\n          errorMessage: result\r\n        } as ITextFieldState);\r\n        this._notifyAfterValidate(value, result);\r\n      } else {\r\n        let currentValidation: number = ++this._lastValidation;\r\n\r\n        result.then((errorMessage: string) => {\r\n          if (this._isMounted && currentValidation === this._lastValidation) {\r\n            this.setState({ errorMessage } as ITextFieldState);\r\n          }\r\n          this._notifyAfterValidate(value, errorMessage);\r\n        });\r\n      }\r\n    } else {\r\n      this._notifyAfterValidate(value, '');\r\n    }\r\n  }\r\n\r\n  private _notifyAfterValidate(value: string, errorMessage: string): void {\r\n    if (this._isMounted &&\r\n      value === this.state.value &&\r\n      this.props.onNotifyValidationResult) {\r\n      this.props.onNotifyValidationResult(errorMessage, value);\r\n    }\r\n  }\r\n\r\n  private _adjustInputHeight(): void {\r\n    if (this._textElement && this.props.autoAdjustHeight && this.props.multiline) {\r\n      const textField = this._textElement as HTMLElement;\r\n      textField.style.height = '';\r\n      let scrollHeight = textField.scrollHeight + 2; // +2 to avoid vertical scroll bars\r\n      textField.style.height = scrollHeight + 'px';\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}