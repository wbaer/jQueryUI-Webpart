/// <reference types="es6-promise" />
import { IClientSideComponentManifest } from '@microsoft/sp-module-interfaces';
import { ISPComponentLoader, ILoadScriptOptions, IApplicationPreloadedData } from './ISPComponentLoader';
/**
 * The global component loader for SP client-side applications and webparts.
 *
 * @alpha
 */
export default class SPSystemJsComponentLoader implements ISPComponentLoader {
    /**
     * @internal
     */
    static _currentLocale: string;
    private static _headElement;
    private _systemJsLoader;
    private _isInitialized;
    /**
     * @internal
     */
    constructor();
    /**
     * This is called by the page scripts to start loading the framework. Do not call it from your own code.
     */
    start<TApplication>(preloadedData: IApplicationPreloadedData): Promise<TApplication>;
    /**
     * Initializes the component loader.
     * Registers all manifests (including debug manifests, if it applies)
     * and sets up internal logic before allowing to load components.
     */
    initialize(preloadedData: IApplicationPreloadedData): Promise<void>;
    /**
     * Given a URL, load a script.
     *
     * @param url     - The script URL.
     * @param options - globalExportsName: If the script isn't an AMD module and loads a global member on the page,
     *                    specify the global member's name.
     * @returns         A promise containing the loaded module.
     */
    loadScript<TModule>(url: string, options?: ILoadScriptOptions): Promise<TModule>;
    /**
     * Loads a component from a manifest.
     *
     * @param manifest - Manifest of the module to load.
     * @returns          A promise containing the loaded module.
     */
    loadComponent<TComponent>(manifest: IClientSideComponentManifest): Promise<TComponent>;
    /**
     * Resolve a component id and version, and load it. If a manifest cannot be found, this function
     * will throw an exception.
     *
     * @param id      - The id of the component to load.
     * @param version - The version of the component to load. If version is not defined, the method
     *                    will load any version of the component.
     * @returns         A promise containing the loaded module.
     *
     * @alpha
     */
    loadComponentById<TComponent>(id: string, version?: string): Promise<TComponent>;
    /**
     * Registers manifests in the manifest store.
     *
     * @param manifests - The manifests to register in the store.
     *
     * @alpha
     */
    registerManifests(manifests: IClientSideComponentManifest[]): void;
    /**
     * All registered manifests.
     *
     * @readonly
     * @alpha
     */
    readonly manifests: IClientSideComponentManifest[];
    /**
     * Inserts a <link ... /> tag for a stylesheet.
     *
     * @param url - The CSS file URL.
     */
    loadCss(url: string): void;
    /**
     * If manifests from localhost haven't already been loaded, force them to load without prompting the user.
     *
     * @returns A promise that is fulfilled when the manifests are loaded.
     *
     * @internal
     */
    _forceLocalManifests(): Promise<void>;
    /**
     * Get a component manifest from the component id and version.
     *
     * @param id      - GUID id of the component.
     * @param version - Version of the component. If version is not defined, the method
     *                    will return the manifest for any version of the component.
     * @returns         Manifest for the component.
     *
     * @alpha
     */
    tryGetManifestById(id: string, version?: string): IClientSideComponentManifest | undefined;
    /**
     * Ensure that a component is set in the system (both SystemJS and the module loader), when it's not
     * loaded by the module loader itself.
     */
    private _setComponent<TComponent>(manifest, componentModule);
}
