{"version":3,"sources":["test/DocElementParser.test.ts"],"names":[],"mappings":"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","file":"test/DocElementParser.test.js","sourcesContent":["/// <reference types=\"mocha\" />\r\n\r\nimport { assert } from 'chai';\r\nimport * as ts from 'typescript';\r\nimport * as path from 'path';\r\nimport DocElementParser from '../DocElementParser';\r\nimport { IDocElement, IParam, IHrefLinkElement, ICodeLinkElement, ITextElement, ISeeDocElement } from '../IDocElement';\r\nimport TestFileComparer from '../TestFileComparer';\r\nimport JsonFile from '../JsonFile';\r\nimport ApiStructuredType from '../definitions/ApiStructuredType';\r\nimport ApiDocumentation from '../definitions/ApiDocumentation';\r\nimport Extractor from './../Extractor';\r\nimport Tokenizer from './../Tokenizer';\r\n\r\nconst capturedErrors: {\r\n  message: string;\r\n  fileName: string;\r\n  lineNumber: number;\r\n}[] = [];\r\n\r\nfunction testErrorHandler(message: string, fileName: string, lineNumber: number): void {\r\n  capturedErrors.push({ message, fileName, lineNumber });\r\n}\r\n\r\nconst inputFolder: string = './testInputs/example2';\r\nlet myDocumentedClass: ApiStructuredType;\r\n\r\nconst compilerOptions: ts.CompilerOptions = {\r\n  target: ts.ScriptTarget.ES5,\r\n  module: ts.ModuleKind.CommonJS,\r\n  moduleResolution: ts.ModuleResolutionKind.NodeJs,\r\n  rootDir: inputFolder\r\n};\r\n\r\nconst extractor: Extractor = new Extractor({\r\n  compilerOptions: compilerOptions,\r\n  errorHandler: testErrorHandler\r\n});\r\n\r\n/**\r\n * Dummy class wrapping ApiDocumentation to test its protected methods\r\n */\r\nclass TestApiDocumentation extends ApiDocumentation {\r\n  constructor() {\r\n    super('Some summary\\n@remarks and some remarks\\n@public', extractor.docItemLoader, extractor, console.log);\r\n  }\r\n\r\n  public parseParam(tokenizer: Tokenizer): IParam {\r\n    return this._parseParam(tokenizer);\r\n  }\r\n}\r\n\r\nextractor.loadExternalPackages('./testInputs/external-api-json');\r\n// Run the analyze method once to be used by unit tests\r\nextractor.analyze({\r\n  entryPointFile: path.join(inputFolder, 'index.ts')\r\n});\r\n\r\nmyDocumentedClass = extractor.package.getSortedMemberItems()\r\n  .filter(apiItem => apiItem.name === 'MyDocumentedClass')[0] as ApiStructuredType;\r\n\r\ndescribe('DocElementParser tests', function (): void {\r\n  this.timeout(10000);\r\n\r\n  describe('Basic Tests', (): void => {\r\n    it('Should parse basic doc comment stream', (): void => {\r\n      const apiDoc: TestApiDocumentation = new TestApiDocumentation();\r\n\r\n      const docs: string = 'This function parses docTokens for the apiLint website ' +\r\n      '{@link https://github.com/OfficeDev/office-ui-fabric-react} \\n' +\r\n      '@returns an object \\n' +\r\n      '@param param1 - description of the type param1 \\n' +\r\n      '@param param2 - description of the type param2 \\n' +\r\n      '@internal';\r\n      const tokenizer: Tokenizer = new Tokenizer(docs, console.log);\r\n\r\n      // Testing Summary Doc Elements\r\n      const expectedSummary: IDocElement[] = [\r\n          {kind: 'textDocElement', value: 'This function parses docTokens for the apiLint website'} as ITextElement,\r\n          {\r\n              kind: 'linkDocElement',\r\n              referenceType: 'href',\r\n              targetUrl: 'https://github.com/OfficeDev/office-ui-fabric-react',\r\n              value: ''\r\n        } as IHrefLinkElement\r\n      ];\r\n      const actualSummary: IDocElement[] = DocElementParser.parse(myDocumentedClass.documentation, tokenizer);\r\n      JsonFile.saveJsonFile('./lib/basicDocExpected.json', JSON.stringify(expectedSummary));\r\n      JsonFile.saveJsonFile('./lib/basicDocActual.json', JSON.stringify(actualSummary));\r\n      TestFileComparer.assertFileMatchesExpected('./lib/basicDocActual.json', './lib/basicDocExpected.json');\r\n\r\n      // Testing Returns Doc Elements\r\n      const expectedReturn: IDocElement[] = [\r\n          {kind: 'textDocElement', value: 'an object'} as ITextElement\r\n      ];\r\n      tokenizer.getToken();\r\n      const actualReturn: IDocElement[] = DocElementParser.parse(myDocumentedClass.documentation, tokenizer);\r\n      JsonFile.saveJsonFile('./lib/returnDocExpected.json', JSON.stringify(expectedReturn));\r\n      JsonFile.saveJsonFile('./lib/returnDocActual.json', JSON.stringify(actualReturn));\r\n      TestFileComparer.assertFileMatchesExpected('./lib/returnDocActual.json', './lib/returnDocExpected.json');\r\n\r\n      // Testing Params Doc Elements\r\n      const expectedParam: IParam[] = [\r\n          {\r\n              name: 'param1',\r\n              description: [{kind: 'textDocElement', value: 'description of the type param1'}]\r\n          } as IParam,\r\n          {\r\n              name: 'param2',\r\n              description: [{kind: 'textDocElement', value: 'description of the type param2'}]\r\n          } as IParam\r\n      ];\r\n      const actualParam: IParam[] = [];\r\n      tokenizer.getToken();\r\n      actualParam.push(apiDoc.parseParam(tokenizer));\r\n      tokenizer.getToken();\r\n      actualParam.push(apiDoc.parseParam(tokenizer));\r\n\r\n      JsonFile.saveJsonFile('./lib/paramDocExpected.json', JSON.stringify(expectedParam));\r\n      JsonFile.saveJsonFile('./lib/paramDocActual.json', JSON.stringify(actualParam));\r\n      TestFileComparer.assertFileMatchesExpected('./lib/paramDocActual.json', './lib/paramDocExpected.json');\r\n    });\r\n\r\n    it('Should parse @deprecated correctly', (): void => {\r\n      const docs: string = '@deprecated - description of the deprecation';\r\n      const tokenizer: Tokenizer = new Tokenizer(docs, console.log);\r\n\r\n      // Testing Deprecated Doc Elements\r\n      const expectedDeprecated: IDocElement[] = [\r\n          {kind: 'textDocElement', value: '- description of the deprecation'} as ITextElement\r\n      ];\r\n      tokenizer.getToken();\r\n      const actualDeprecated: IDocElement[] = DocElementParser.parse(myDocumentedClass.documentation, tokenizer);\r\n      JsonFile.saveJsonFile('./lib/deprecatedDocExpected.json', JSON.stringify(expectedDeprecated));\r\n      JsonFile.saveJsonFile('./lib/deprecatedDocActual.json', JSON.stringify(actualDeprecated));\r\n      TestFileComparer.assertFileMatchesExpected('./lib/deprecatedDocActual.json', './lib/deprecatedDocExpected.json');\r\n    });\r\n\r\n    it('Should parse @see with nested link and/or text', (): void => {\r\n      const docs: string = 'Text describing the function’s purpose/nuances/context. \\n' +\r\n      '@see {@link https://github.com/OfficeDev/office-ui-fabric-react | The link will provide context}';\r\n      const tokenizer: Tokenizer = new Tokenizer(docs, console.log);\r\n\r\n      // Testing Summary Elements\r\n      const expectedSummary: IDocElement[] = [\r\n          {kind: 'textDocElement', value: 'Text describing the function’s purpose/nuances/context.'} as ITextElement,\r\n          {\r\n              kind: 'seeDocElement',\r\n              seeElements: [\r\n                  {\r\n                      kind: 'linkDocElement',\r\n                      referenceType: 'href',\r\n                      targetUrl: 'https://github.com/OfficeDev/office-ui-fabric-react',\r\n                      value: 'The link will provide context'\r\n                  } as IHrefLinkElement\r\n              ]\r\n          } as ISeeDocElement\r\n      ];\r\n      const actualSummary: IDocElement[] = DocElementParser.parse(myDocumentedClass.documentation, tokenizer);\r\n      JsonFile.saveJsonFile('./lib/seeDocExpected.json', JSON.stringify(expectedSummary));\r\n      JsonFile.saveJsonFile('./lib/seeDocActual.json', JSON.stringify(actualSummary));\r\n      TestFileComparer.assertFileMatchesExpected('./lib/seeDocExpected.json', './lib/seeDocActual.json');\r\n    });\r\n\r\n    it('Should parse @param with nested link and/or text', (): void => {\r\n      const apiDoc: TestApiDocumentation = new TestApiDocumentation();\r\n\r\n      // Don't include the \"@param\" in the doc string, parseParam() expects this to be processed in a\r\n      // previous step.\r\n      const docs: string = 'x - The height in {@link http://wikipedia.org/pixel_units}';\r\n      const tokenizer: Tokenizer = new Tokenizer(docs, console.log);\r\n\r\n      // Testing Param Doc Elements\r\n      const description: IDocElement[] = [\r\n        {kind: 'textDocElement', value: 'The height in'} as ITextElement,\r\n          {\r\n              kind: 'linkDocElement',\r\n              referenceType: 'href',\r\n              targetUrl: 'http://wikipedia.org/pixel_units',\r\n              value: ''\r\n          } as IHrefLinkElement\r\n      ];\r\n      const expectedParam: IParam = {\r\n          name: 'x',\r\n          description: description\r\n      } as IParam;\r\n      const actualParam: IParam = apiDoc.parseParam(tokenizer);\r\n\r\n      JsonFile.saveJsonFile('./lib/nestedParamDocExpected.json', JSON.stringify(expectedParam));\r\n      JsonFile.saveJsonFile('./lib/nestedParamDocActual.json', JSON.stringify(actualParam));\r\n      TestFileComparer.assertFileMatchesExpected(\r\n        './lib/nestedParamDocActual.json',\r\n        './lib/nestedParamDocExpected.json'\r\n      );\r\n    });\r\n\r\n    it('Should parse @link with url', (): void => {\r\n      const docs: string = '{@link https://microsoft.com}';\r\n      const tokenizer: Tokenizer = new Tokenizer(docs, console.log);\r\n\r\n      let docElements: IDocElement[];\r\n      /* tslint:disable-next-line:no-any */\r\n      let errorMessage: any;\r\n      try {\r\n        docElements = DocElementParser.parse(myDocumentedClass.documentation, tokenizer);\r\n      } catch (error) {\r\n        errorMessage = error;\r\n      }\r\n      assert.isUndefined(errorMessage);\r\n\r\n      const linkDocElement: IHrefLinkElement = (docElements[0] as IHrefLinkElement);\r\n      assert.equal(linkDocElement.referenceType, 'href');\r\n      assert.equal(linkDocElement.targetUrl, 'https://microsoft.com');\r\n      assert.equal(linkDocElement.value, '');\r\n    });\r\n\r\n    it('Should parse @link with url and text', (): void => {\r\n     const docs: string = '{@link https://microsoft.com | microsoft home}';\r\n     const tokenizer: Tokenizer = new Tokenizer(docs, console.log);\r\n\r\n      let docElements: IDocElement[];\r\n      /* tslint:disable-next-line:no-any */\r\n      let errorMessage: any;\r\n      try {\r\n        docElements = DocElementParser.parse(myDocumentedClass.documentation, tokenizer);\r\n      } catch (error) {\r\n        errorMessage = error;\r\n      }\r\n      assert.isUndefined(errorMessage);\r\n\r\n      const linkDocElement: IHrefLinkElement = (docElements[0] as IHrefLinkElement);\r\n      assert.equal(linkDocElement.referenceType, 'href');\r\n      assert.equal(linkDocElement.targetUrl, 'https://microsoft.com');\r\n      assert.equal(linkDocElement.value, 'microsoft home');\r\n    });\r\n\r\n    it('Should parse @link with API defintion reference', (): void => {\r\n      const docs: string = '{@link @microsoft/sp-core-library:Guid.equals}';\r\n      const tokenizer: Tokenizer = new Tokenizer(docs, console.log);\r\n\r\n      let docElements: IDocElement[];\r\n      /* tslint:disable-next-line:no-any */\r\n      let errorMessage: any;\r\n      try {\r\n        docElements = DocElementParser.parse(myDocumentedClass.documentation, tokenizer);\r\n      } catch (error) {\r\n        errorMessage = error;\r\n      }\r\n      assert.isUndefined(errorMessage);\r\n\r\n      const linkDocElement: ICodeLinkElement = (docElements[0] as ICodeLinkElement);\r\n      assert.equal(linkDocElement.referenceType, 'code');\r\n      assert.equal(linkDocElement.scopeName, '@microsoft');\r\n      assert.equal(linkDocElement.packageName, 'sp-core-library');\r\n      assert.equal(linkDocElement.exportName, 'Guid');\r\n      assert.equal(linkDocElement.memberName, 'equals');\r\n    });\r\n\r\n    it('Should parse @link with API defintion reference and text', (): void => {\r\n      const docs: string = '{@link @microsoft/sp-core-library:Guid.equals | Guid equals}';\r\n      const tokenizer: Tokenizer = new Tokenizer(docs, console.log);\r\n\r\n      let docElements: IDocElement[];\r\n      /* tslint:disable-next-line:no-any */\r\n      let errorMessage: any;\r\n      try {\r\n        docElements = DocElementParser.parse(myDocumentedClass.documentation, tokenizer);\r\n      } catch (error) {\r\n        errorMessage = error;\r\n      }\r\n      assert.isUndefined(errorMessage);\r\n\r\n      const linkDocElement: ICodeLinkElement = (docElements[0] as ICodeLinkElement);\r\n      assert.equal(linkDocElement.referenceType, 'code');\r\n      assert.equal(linkDocElement.scopeName, '@microsoft');\r\n      assert.equal(linkDocElement.packageName, 'sp-core-library');\r\n      assert.equal(linkDocElement.exportName, 'Guid');\r\n      assert.equal(linkDocElement.memberName, 'equals');\r\n      assert.equal(linkDocElement.value, 'Guid equals');\r\n    });\r\n\r\n    it('Should report errors @link', (): void => {\r\n      const docs: string = '{@link @microsoft/sp-core-library:Guid.equals | Guid equals | something}';\r\n      const tokenizer: Tokenizer = new Tokenizer(docs, console.log);\r\n\r\n      let docElements: IDocElement[];\r\n      /* tslint:disable-next-line:no-any */\r\n      let errorMessage: any;\r\n      try {\r\n        docElements = DocElementParser.parse(myDocumentedClass.documentation, tokenizer);\r\n      } catch (error) {\r\n        errorMessage = error;\r\n      }\r\n      assert.isNotNull(errorMessage);\r\n    });\r\n  });\r\n});\r\n"],"sourceRoot":"..\\..\\src"}