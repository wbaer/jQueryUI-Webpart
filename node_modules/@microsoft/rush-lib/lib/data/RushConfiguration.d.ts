/// <reference types="es6-collections" />
import RushConfigurationProject, { IRushConfigurationProjectJson } from './RushConfigurationProject';
/**
 * Part of IRushConfigurationJson.
 */
export interface IRushGitPolicyJson {
    allowedEmailRegExps?: string[];
    sampleEmail?: string;
}
/**
 * This represents the JSON data structure for the "rush.json" configuration file.
 * See rush-schema.json for documentation.
 */
export interface IRushConfigurationJson {
    $schema: string;
    commonFolder: string;
    npmVersion: string;
    rushMinimumVersion: string;
    nodeSupportedVersionRange?: string;
    projectFolderMinDepth?: number;
    projectFolderMaxDepth?: number;
    packageReviewFile?: string;
    reviewCategories?: string[];
    useLocalNpmCache?: boolean;
    gitPolicy?: IRushGitPolicyJson;
    projects: IRushConfigurationProjectJson[];
}
/**
 * This represents the JSON data structure for the "rush-link.json" data file.
 */
export interface IRushLinkJson {
    localLinks: {
        [name: string]: string[];
    };
}
/**
 * This represents the Rush configuration for a repository, based on the Rush.json
 * configuration file.
 */
export default class RushConfiguration {
    private _rushJsonFolder;
    private _commonFolder;
    private _commonFolderName;
    private _cacheFolder;
    private _tmpFolder;
    private _tempModulesFolder;
    private _homeFolder;
    private _rushLinkJsonFilename;
    private _npmToolVersion;
    private _npmToolFilename;
    private _projectFolderMinDepth;
    private _projectFolderMaxDepth;
    private _packageReviewFile;
    private _reviewCategories;
    private _gitAllowedEmailRegExps;
    private _gitSampleEmail;
    private _projects;
    private _projectsByName;
    /**
     * Loads the configuration data from an Rush.json configuration file and returns
     * an RushConfiguration object.
     */
    static loadFromConfigurationFile(rushJsonFilename: string): RushConfiguration;
    static loadFromDefaultLocation(): RushConfiguration;
    /**
     * This generates the unique names that are used to create temporary projects
     * in the Rush common folder.
     * NOTE: sortedProjectJsons is sorted by the caller.
     */
    private static _generateTempNamesForProjects(sortedProjectJsons);
    /**
     * DO NOT CALL -- Use RushConfiguration.loadFromConfigurationFile() or Use RushConfiguration.loadFromDefaultLocation()
     * instead.
     */
    constructor(rushConfigurationJson: IRushConfigurationJson, rushJsonFilename: string);
    /**
     * The folder that contains rush.json for this project.
     */
    readonly rushJsonFolder: string;
    /**
     * The common folder specified in rush.json.  By default, this is the fully
     * resolved path for a subfolder of rushJsonFolder whose name is "common".
     * Example: "C:\MyRepo\common"
     */
    readonly commonFolder: string;
    /**
     * This is how we refer to the common folder, e.g. in error messages.
     * For example if commonFolder is "C:\MyRepo\common" then
     * commonFolderName="common".
     */
    readonly commonFolderName: string;
    /**
     * The cache folder specified in rush.json. If no folder is specified, this
     * value is undefined.
     * Example: "C:\MyRepo\common\npm-cache"
     */
    readonly cacheFolder: string;
    /**
     * The tmp folder specified in rush.json. If no folder is specified, this
     * value is undefined.
     * Example: "C:\MyRepo\common\npm-tmp"
     */
    readonly tmpFolder: string;
    /**
     * The folder containing the temp packages generated by "rush generate".
     * Example: "C:\MyRepo\common\temp_modules"
     */
    readonly tempModulesFolder: string;
    /**
     * The absolute path to the home directory for the current user.  On Windows,
     * it would be something like "C:\Users\YourName".
     */
    readonly homeFolder: string;
    /**
     * The filename of the build dependency data file.  By default this is
     * called 'rush-link.json' resides in the Rush common folder.
     * Its data structure is defined by IRushLinkJson.
     */
    readonly rushLinkJsonFilename: string;
    /**
     * The version of the locally installed NPM tool.  (Example: "1.2.3")
     */
    readonly npmToolVersion: string;
    /**
     * The absolute path to the locally installed NPM tool.  If "rush install" has not
     * been run, then this file may not exist yet.
     * Example: "C:\MyRepo\common\npm-local\node_modules\.bin\npm"
     */
    readonly npmToolFilename: string;
    /**
     * The minimum allowable folder depth for the projectFolder field in the rush.json file.
     * This setting provides a way for repository maintainers to discourage nesting of project folders
     * that makes the directory tree more difficult to navigate.  The default value is 2,
     * which implements a standard 2-level hierarchy of <categoryFolder>/<projectFolder>/package.json.
     */
    readonly projectFolderMinDepth: number;
    /**
     * The maximum allowable folder depth for the projectFolder field in the rush.json file.
     * This setting provides a way for repository maintainers to discourage nesting of project folders
     * that makes the directory tree more difficult to navigate.  The default value is 2,
     * which implements on a standard convention of <categoryFolder>/<projectFolder>/package.json.
     */
    readonly projectFolderMaxDepth: number;
    /**
     * The absolute path to a JSON file that tracks the NPM packages that were approved for usage
     * in this repository.  This is part of an optional approval workflow, whose purpose is to
     * review any new dependencies that are introduced (e.g. maybe a legal review is required, or
     * maybe we are trying to minimize bloat).  When "rush generate" is run, any new
     * package.json dependencies will be appended to this file.  When "rush install" is run
     * (e.g. as part of a PR build), an error will be reported if the file is not up to date.
     * The intent is that this file will be stored in Git and tracked by a branch policy which
     * notifies reviewers whenever a PR attempts to modify the file.
     *
     * The PackageReviewConfiguration class can load/save this file format.
     *
     * Example: "C:\MyRepo\common\reviews\PackageDependenies.json"
     */
    readonly packageReviewFile: string;
    /**
     * A list of category names that are valid for usage as the RushConfigurationProject.reviewCategory field.
     * This array will never be undefined.
     */
    readonly reviewCategories: Set<string>;
    /**
     * A list of regular expressions describing allowable e-mail patterns for Git commits.
     * They are case-insensitive anchored JavaScript RegExps.
     * Example: ".*@example\.com"
     * This array will never be undefined.
     */
    readonly gitAllowedEmailRegExps: string[];
    /**
     * An example valid e-mail address that conforms to one of the allowedEmailRegExps.
     * Example: "foxtrot@example\.com"
     * This will never be undefined, and will always be nonempty if gitAllowedEmailRegExps is used.
     */
    readonly gitSampleEmail: string;
    readonly projects: RushConfigurationProject[];
    readonly projectsByName: Map<string, RushConfigurationProject>;
    /**
     * Looks up a project in the projectsByName map.  If the project is not found,
     * then undefined is returned.
     */
    getProjectByName(projectName: string): RushConfigurationProject;
    /**
     * This is used e.g. by command-line interfaces such as "rush build --to example".
     * If "example" is not a project name, then it also looks for a scoped name
     * like "@something/example".  If exactly one project matches this heuristic, it
     * is returned.  Otherwise, undefined is returned.
     */
    findProjectByShorthandName(shorthandProjectName: string): RushConfigurationProject;
    private _populateDownstreamDependencies(dependencies, packageName);
}
