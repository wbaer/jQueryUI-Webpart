{"version":3,"sources":["test/Interleaver.test.ts"],"names":[],"mappings":"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","file":"test/Interleaver.test.js","sourcesContent":["/// <reference types=\"mocha\" />\r\n\r\nimport { assert } from 'chai';\r\nimport * as colors from 'colors';\r\nimport * as os from 'os';\r\n\r\nimport Interleaver, { ITaskWriter } from '../Interleaver';\r\n\r\nclass StringStream {\r\n  private _buffer: string[] = [];\r\n\r\n  public write(text: string): void {\r\n    this._buffer.push(text);\r\n  }\r\n\r\n  public read(): string {\r\n    return this._buffer.join('');\r\n  }\r\n\r\n  public reset(): void {\r\n    this._buffer = [];\r\n  }\r\n}\r\n\r\nconst stdout: StringStream = new StringStream();\r\nInterleaver.setStdOut(stdout);\r\n\r\ndescribe('Interleaver tests', () => {\r\n  // Reset task information before each test\r\n  beforeEach(() => {\r\n    Interleaver.reset();\r\n    stdout.reset();\r\n  });\r\n\r\n  describe('Testing register and close', () => {\r\n    it('cannot be directly instantiated', (done: MochaDone) => {\r\n      assert.throws(() => {\r\n        /* tslint:disable:no-unused-variable */\r\n        const a: Interleaver = new Interleaver();\r\n        /* tslint:enable:no-unused-variable */\r\n      });\r\n      done();\r\n    });\r\n\r\n    it('can register a task', (done: MochaDone) => {\r\n      const helloWorldWriter: ITaskWriter = Interleaver.registerTask('Hello World');\r\n      assert.isObject(helloWorldWriter);\r\n      done();\r\n    });\r\n\r\n    it('should not let you register two tasks with the same name', (done: MochaDone) => {\r\n      const taskName: string = 'Hello World';\r\n      assert.doesNotThrow(() => { Interleaver.registerTask(taskName); });\r\n      assert.throws(() => { Interleaver.registerTask(taskName); });\r\n      done();\r\n    });\r\n\r\n    it('should not let you close a task twice', (done: MochaDone) => {\r\n      const taskName: string = 'Hello World';\r\n      const task: ITaskWriter = Interleaver.registerTask(taskName);\r\n      task.close();\r\n      assert.throws(task.close);\r\n      done();\r\n    });\r\n\r\n    it('should not let you write to a closed task', (done: MochaDone) => {\r\n      const taskName: string = 'Hello World';\r\n      const task: ITaskWriter = Interleaver.registerTask(taskName);\r\n      task.close();\r\n      assert.throws(() => { task.write('1'); });\r\n      done();\r\n    });\r\n  });\r\n\r\n  describe('Testing write functions', () => {\r\n    it('writeLine should add a newline', (done: MochaDone) => {\r\n      const taskA: ITaskWriter = Interleaver.registerTask('A');\r\n      const text: string = 'Hello World';\r\n\r\n      taskA.writeLine(text);\r\n\r\n      assert.equal(taskA.getStdOutput(), text + os.EOL);\r\n      done();\r\n    });\r\n\r\n    it('should redirect warnings to stdout in yellow', (done: MochaDone) => {\r\n      const taskA: ITaskWriter = Interleaver.registerTask('A');\r\n      const warning: string = 'Warning - This is a warning';\r\n\r\n      taskA.writeError(warning);\r\n      assert.equal(stdout.read(), colors.yellow(warning));\r\n\r\n      taskA.close();\r\n\r\n      assert.equal(taskA.getStdOutput(), warning);\r\n      assert.equal(taskA.getStdError(), '');\r\n      done();\r\n    });\r\n\r\n    it('should write errors in red', (done: MochaDone) => {\r\n      const taskA: ITaskWriter = Interleaver.registerTask('A');\r\n      const error: string = 'Critical error';\r\n\r\n      taskA.writeError(error);\r\n      assert.equal(stdout.read(), colors.red(error));\r\n\r\n      taskA.close();\r\n\r\n      assert.equal(taskA.getStdOutput(), '');\r\n      assert.equal(taskA.getStdError(), error);\r\n\r\n      done();\r\n    });\r\n  });\r\n\r\n  describe('Testing that output is interleaved', () => {\r\n    it('should not write non-active tasks to stdout', (done: MochaDone) => {\r\n      const taskA: ITaskWriter = Interleaver.registerTask('A');\r\n      const taskB: ITaskWriter = Interleaver.registerTask('B');\r\n\r\n      taskA.write('1');\r\n      assert.equal(stdout.read(), '1');\r\n\r\n      taskB.write('2');\r\n      assert.equal(stdout.read(), '1');\r\n\r\n      taskA.write('3');\r\n      assert.equal(stdout.read(), '13');\r\n\r\n      taskA.close();\r\n      assert.equal(stdout.read(), '13');\r\n\r\n      taskB.close();\r\n      assert.equal(stdout.read(), '132');\r\n\r\n      assert.equal(taskA.getStdOutput(), '13');\r\n      assert.equal(taskB.getStdOutput(), '2');\r\n      done();\r\n    });\r\n\r\n    it('should not write anything when in quiet mode', (done: MochaDone) => {\r\n      const taskA: ITaskWriter = Interleaver.registerTask('A', true);\r\n      const taskB: ITaskWriter = Interleaver.registerTask('B', true);\r\n\r\n      taskA.write('1');\r\n      assert.equal(stdout.read(), '');\r\n\r\n      taskB.write('2');\r\n      assert.equal(stdout.read(), '');\r\n\r\n      taskA.write('3');\r\n      assert.equal(stdout.read(), '');\r\n\r\n      taskA.close();\r\n      assert.equal(stdout.read(), '');\r\n\r\n      taskB.close();\r\n      assert.equal(stdout.read(), '');\r\n\r\n      assert.equal(taskA.getStdOutput(), '13');\r\n      assert.equal(taskB.getStdOutput(), '2');\r\n      done();\r\n    });\r\n\r\n    it('should update the active task once the active task is closed', (done: MochaDone) => {\r\n      const taskA: ITaskWriter = Interleaver.registerTask('A');\r\n      const taskB: ITaskWriter = Interleaver.registerTask('B');\r\n\r\n      taskA.write('1');\r\n      assert.equal(stdout.read(), '1');\r\n\r\n      taskA.close();\r\n      assert.equal(stdout.read(), '1');\r\n\r\n      taskB.write('2');\r\n      assert.equal(stdout.read(), '12');\r\n\r\n      taskB.close();\r\n      assert.equal(stdout.read(), '12');\r\n\r\n      assert.equal(taskA.getStdOutput(), '1');\r\n      assert.equal(taskB.getStdOutput(), '2');\r\n      done();\r\n    });\r\n\r\n    it('should write completed tasks after the active task is completed', (done: MochaDone) => {\r\n      const taskA: ITaskWriter = Interleaver.registerTask('A');\r\n      const taskB: ITaskWriter = Interleaver.registerTask('B');\r\n\r\n      taskA.write('1');\r\n      assert.equal(stdout.read(), '1');\r\n\r\n      taskB.write('2');\r\n      assert.equal(stdout.read(), '1');\r\n\r\n      taskB.close();\r\n      assert.equal(stdout.read(), '1');\r\n\r\n      taskA.close();\r\n      assert.equal(stdout.read(), '12');\r\n\r\n      assert.equal(taskA.getStdOutput(), '1');\r\n      assert.equal(taskB.getStdOutput(), '2');\r\n      done();\r\n    });\r\n  });\r\n});\r\n"],"sourceRoot":"..\\..\\src"}