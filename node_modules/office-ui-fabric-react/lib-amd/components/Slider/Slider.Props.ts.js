define([], function() { return "import * as React from 'react';\r\n\r\nexport interface ISliderProps {\r\n  /**\r\n   * Description label of the Slider\r\n   */\r\n  label?: string;\r\n\r\n  /**\r\n   * The initial value of the Slider. Use this if you intend for the Slider to be an uncontrolled component.\r\n   * This value is mutually exclusive to value. Use one or the other.\r\n   */\r\n  defaultValue?: number;\r\n\r\n  /**\r\n   * The initial value of the Slider. Use this if you intend to pass in a new value as a result of onChange events.\r\n   * This value is mutually exclusive to defaultValue. Use one or the other.\r\n   */\r\n  value?: number;\r\n\r\n  /**\r\n   * The min value of the Slider\r\n   * @default 0\r\n   */\r\n  min?: number;\r\n\r\n  /**\r\n   * The max value of the Slider\r\n   * @default 10\r\n   */\r\n  max?: number;\r\n\r\n  /**\r\n   * The diffrrence between the two adjacent values of the Slider\r\n   * @default 1\r\n   */\r\n  step?: number;\r\n\r\n  /**\r\n   * Whether to show the value on the right of the Slider.\r\n   * If you want to show the value by yourself, you may want to set this value to false.\r\n   */\r\n  showValue?: boolean;\r\n\r\n  /**\r\n   * Callback when the value has been changed\r\n   */\r\n  onChange?: (value: number) => void;\r\n\r\n  /**\r\n   * A description of the Slider for the benefit of screen readers.\r\n   */\r\n  ariaLabel?: string;\r\n\r\n  /**\r\n   * Whether or not the Slider is disabled.\r\n   */\r\n  disabled?: boolean;\r\n\r\n  /**\r\n  * Optional className for slider.\r\n  */\r\n  className?: string;\r\n\r\n  /**\r\n   * Optional mixin for additional props on the thumb button within the slider.\r\n   */\r\n  buttonProps?: React.HTMLProps<HTMLButtonElement>;\r\n}\r\n\r\nexport interface ISlider {\r\n  value: number;\r\n\r\n  focus: () => void;\r\n}\r\n"; });