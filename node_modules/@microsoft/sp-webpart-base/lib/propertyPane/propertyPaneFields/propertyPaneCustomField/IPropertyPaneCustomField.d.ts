/**
 * PropertyPane CustomPropertyField props.
 *
 * @public
 */
export interface IPropertyPaneCustomFieldProps {
    /**
     * This API will be called once the custom field is mounted on the host element.
     *
     * @param domElement - DOM element on which the custom control needs to be mounted.
     * @param context (optional) - Instance specific context.  This context was passed in the constructor.
     */
    onRender: (domElement: HTMLElement, context?: any) => void;
    /**
     * An UNIQUE key indicates the identity of this contorl.
     *
     * The PropertyPane uses ReactJS to render its components. ReactJS uses keys to identify a component and if it should
     * be re-rendered or not. This is a performance feature in ReactJS. Please read the following link to understand how
     * to pick the value of the key.
     *
     * @see https://facebook.github.io/react/docs/lists-and-keys.html#keys
     */
    key: string;
    /**
     * This API is called when the component is unmounted from the host element.
     *
     * @param domElement - DOM element on which the custom control is mounted.
     * @param context (optional) - Instance specific context. This context was passed in the constructor.
     */
    onDispose?: (domElement: HTMLElement, context?: any) => void;
    /**
     * Instance specific context. This context is passed back to the web part in the
     * onRender and onDispose APIs. The web part can use this context to manage state
     * information.
     */
    context?: any;
}
