"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var React = require("react");
var office_ui_fabric_react_1 = require("office-ui-fabric-react");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var odsp_utilities_bundle_1 = require("@ms/odsp-utilities-bundle");
var CanvasControlType_1 = require("../../canvas/canvasControl/CanvasControlType");
var ToolboxGroup_1 = require("../toolboxGroup/ToolboxGroup");
var ToolboxItem_1 = require("../toolboxItem/ToolboxItem");
var ToolBoxItemClassifier_1 = require("../toolboxItem/ToolBoxItemClassifier");
var CanvasA11y_1 = require("../../a11y/CanvasA11y");
require("./Toolbox.scss");
var CanvasStrings_resx_1 = require("../../loc/CanvasStrings.resx");
var CLIENT_SIDE_TEAM_NEWS_FLIGHT = 953;
var LINK_PREVIEW_FLIGHT = 904;
var HERO_PEOPLE_FLIGHT = 905;
var NEWSFEED_ID = 'a5df8fdf-b508-4b66-98a6-d83bc2597f63';
var NEWSREEL_ID = '0ef418ba-5d19-4ade-9db0-b339873291d0';
var LINK_PREVIEW_ID = '6410b3b6-d440-4663-8744-378976dc041e';
var TITLE_REGION_ID = 'cbe7b0a9-3504-44dd-a3a3-0e5cacd07788';
var HERO_ID = 'c4bd7b2f-7b6e-4599-8485-16504575f590';
var PEOPLE_ID = '7f718435-ee4d-431c-bdbf-9c4ff326f46e';
var Toolbox = (function (_super) {
    __extends(Toolbox, _super);
    function Toolbox(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this._handleKeyDownCapture = _this._handleKeyDownCapture.bind(_this);
        _this.state = {
            horizontalPosition: props.horizontalPosition,
            verticalPosition: props.verticalPosition
        };
        return _this;
    }
    Toolbox.prototype.componentDidMount = function () {
        if (this._domNode) {
            this._domNode.addEventListener('keydown', this._handleKeyDownCapture, true);
        }
    };
    Toolbox.prototype.componentDidUpdate = function (prevProps) {
        if (this.props.isOpen !== prevProps.isOpen) {
            if (this.props.isOpen) {
                if (this.props.isLoading) {
                    this.context.store.a11yManager.ariaAlert(CanvasStrings_resx_1.default.ToolboxAriaLoadingAlert);
                }
                else {
                    if (prevProps.isLoading) {
                        this.context.store.a11yManager.ariaAlert(CanvasStrings_resx_1.default.ToolboxAriaLoadingFinishedAlert);
                    }
                    this.context.store.a11yManager.saveState();
                    this.context.store.a11yManager.navigateTo(this._domNode);
                    var localizedItemCount = odsp_utilities_bundle_1.StringHelper.formatWithLocalizedCountValue(CanvasStrings_resx_1.default.CanvasItems, CanvasStrings_resx_1.default.CanvasItemsInterval, this.props.toolboxItems.length + 1);
                    var message = odsp_utilities_bundle_1.StringHelper.format(CanvasStrings_resx_1.default.ToolboxNavigationArrowKeys, localizedItemCount);
                    this.context.store.a11yManager.ariaAlert(message);
                }
            }
            else {
                this.context.store.a11yManager.clearState();
            }
        }
    };
    Toolbox.prototype.componentWillReceiveProps = function (nextProps) {
        if (nextProps.isOpen && this.context.store.scrollableParent) {
            var _a = this.context.store.scrollableParent.getBoundingClientRect(), top_1 = _a.top, bottom = _a.bottom;
            var toolboxHeight = 330;
            var canvasTop = this.context.store.canvasElement.getBoundingClientRect().top;
            var hintOffset = 28;
            var verticalPosition = nextProps.verticalPosition;
            if ((verticalPosition + toolboxHeight + hintOffset + canvasTop > bottom) &&
                (verticalPosition - toolboxHeight - hintOffset > top_1)) {
                verticalPosition -= toolboxHeight + hintOffset;
            }
            this.setState({ verticalPosition: verticalPosition, horizontalPosition: nextProps.horizontalPosition });
        }
    };
    Toolbox.prototype.render = function () {
        var _this = this;
        var _a = this.props, errorMessage = _a.errorMessage, isLoading = _a.isLoading, isOpen = _a.isOpen, onItemClick = _a.onItemClick, toolboxItems = _a.toolboxItems;
        var toolboxContent;
        if (isLoading) {
            toolboxContent = (React.createElement("div", { className: 'ms-Spinner-container' },
                React.createElement(office_ui_fabric_react_1.Spinner, { type: office_ui_fabric_react_1.SpinnerType.large })));
        }
        else {
            var errorLabel = void 0;
            if (errorMessage) {
                errorLabel = React.createElement("div", { className: 'CanvasToolbox-Error' },
                    " ",
                    errorMessage,
                    " ");
            }
            var classifier = new ToolBoxItemClassifier_1.default();
            for (var _i = 0, toolboxItems_1 = toolboxItems; _i < toolboxItems_1.length; _i++) {
                var item = toolboxItems_1[_i];
                var webPartManifest = item.itemProps.webPartManifest;
                if (!sp_core_library_1._SPFlight.isEnabled(CLIENT_SIDE_TEAM_NEWS_FLIGHT) &&
                    (webPartManifest.id === NEWSREEL_ID || webPartManifest.id === NEWSFEED_ID)) {
                    continue;
                }
                if (sp_core_library_1.Environment.type !== sp_core_library_1.EnvironmentType.Local &&
                    webPartManifest.id === LINK_PREVIEW_ID &&
                    !sp_core_library_1._SPFlight.isEnabled(LINK_PREVIEW_FLIGHT)) {
                    continue;
                }
                if (sp_core_library_1.Environment.type !== sp_core_library_1.EnvironmentType.Local &&
                    (webPartManifest.id === HERO_ID || webPartManifest.id === PEOPLE_ID) &&
                    !sp_core_library_1._SPFlight.isEnabled(HERO_PEOPLE_FLIGHT)) {
                    continue;
                }
                if (webPartManifest.id === TITLE_REGION_ID) {
                    continue; 
                }
                item.onClick = onItemClick;
                classifier.registerItem(item.key, item);
            }
            var featuredItemViews_1 = [];
            featuredItemViews_1.push(React.createElement(ToolboxItem_1.default, { description: CanvasStrings_resx_1.default.TextWebpartDescription, displayName: CanvasStrings_resx_1.default.TextWebPartDisplayName, itemProps: { controlType: CanvasControlType_1.default.RTE, displayMode: sp_core_library_1.DisplayMode.Edit, id: undefined }, key: 0, msIconName: 'Font', onClick: onItemClick, automationId: 'RTE' }));
            var featuredItemProps = classifier.classify(true);
            featuredItemProps.forEach(function (item) {
                featuredItemViews_1.push(React.createElement(ToolboxItem_1.default, __assign({}, item)));
            });
            var featuredGroup = React.createElement(ToolboxGroup_1.default, { groupName: CanvasStrings_resx_1.default.ToolboxGroupNameFeatured, key: CanvasStrings_resx_1.default.ToolboxGroupNameFeatured, hasHeader: true }, featuredItemViews_1);
            var nonFeaturedItemViews_1 = [];
            var nonFeaturedItemProps = classifier.classify(false, function (item1, item2) {
                return item1.displayName.localeCompare(item2.displayName);
            });
            nonFeaturedItemProps.forEach(function (item) {
                nonFeaturedItemViews_1.push(React.createElement(ToolboxItem_1.default, __assign({}, item)));
            });
            var nonFeaturedGroup = React.createElement(ToolboxGroup_1.default, { groupName: CanvasStrings_resx_1.default.ToolboxGroupNameNonFeatured, key: CanvasStrings_resx_1.default.ToolboxGroupNameNonFeatured, hasHeader: false }, nonFeaturedItemViews_1);
            var sectionGroup = this._generateSectionItems(onItemClick);
            toolboxContent = (React.createElement(office_ui_fabric_react_1.FocusZone, { direction: office_ui_fabric_react_1.FocusZoneDirection.horizontal, isCircularNavigation: true },
                errorLabel,
                featuredGroup,
                (!(this.props.controlPosition && !this.props.controlPosition.sectionIndex)) || sectionGroup,
                nonFeaturedGroup));
        }
        return (React.createElement("div", { className: 'CanvasToolboxContainer' },
            React.createElement("div", { role: 'toolbar', className: 'CanvasToolbox', ref: function (ref) { return _this._domNode = ref; }, style: {
                    display: isOpen ? 'block' : 'none',
                    top: this.state.verticalPosition,
                    left: this.state.horizontalPosition,
                    right: this.state.horizontalPosition === undefined ? 0 : undefined
                } }, toolboxContent)));
    };
    Toolbox.prototype._createSectionItemProps = function (controlType) {
        return {
            controlType: controlType,
            displayMode: sp_core_library_1.DisplayMode.Edit,
            id: undefined
        };
    };
    Toolbox.prototype._generateSectionItems = function (onItemClick) {
        return (React.createElement(ToolboxGroup_1.default, { groupName: CanvasStrings_resx_1.default.ToolboxSectionHeader, key: 'Sections', hasHeader: true },
            React.createElement(ToolboxItem_1.default, { description: CanvasStrings_resx_1.default.ToolboxFullWidthColumnPart, displayName: CanvasStrings_resx_1.default.ToolboxFullWidthColumnPart, itemProps: this._createSectionItemProps(CanvasControlType_1.default.FullWidth), msIconName: 'LargeGrid', onClick: onItemClick }),
            React.createElement(ToolboxItem_1.default, { description: CanvasStrings_resx_1.default.ToolboxTwoColumnPart, displayName: CanvasStrings_resx_1.default.ToolboxTwoColumnPart, itemProps: this._createSectionItemProps(CanvasControlType_1.default.TwoColumns), msIconName: 'LargeGrid', onClick: onItemClick }),
            React.createElement(ToolboxItem_1.default, { description: CanvasStrings_resx_1.default.ToolboxThreeColumnPart, displayName: CanvasStrings_resx_1.default.ToolboxThreeColumnPart, itemProps: this._createSectionItemProps(CanvasControlType_1.default.ThreeColumns), msIconName: 'LargeGrid', onClick: onItemClick }),
            React.createElement(ToolboxItem_1.default, { description: CanvasStrings_resx_1.default.ToolboxOneThirdRightColumnPart, displayName: CanvasStrings_resx_1.default.ToolboxOneThirdRightColumnPart, itemProps: this._createSectionItemProps(CanvasControlType_1.default.OneThirdColumnRight), msIconName: 'LargeGrid', onClick: onItemClick }),
            React.createElement(ToolboxItem_1.default, { description: CanvasStrings_resx_1.default.ToolboxOneThirdLeftColumnPart, displayName: CanvasStrings_resx_1.default.ToolboxOneThirdLeftColumnPart, itemProps: this._createSectionItemProps(CanvasControlType_1.default.OneThirdColumnLeft), msIconName: 'LargeGrid', onClick: onItemClick })));
    };
    Toolbox.prototype._handleKeyDownCapture = function (e) {
        if (CanvasA11y_1.isEscape(e)) {
            this.context.store.a11yManager.restoreState();
            this.context.store.closeToolbox();
            e.stopPropagation();
            e.preventDefault();
        }
        else if (CanvasA11y_1.isTab(e)) {
            e.stopPropagation();
            e.preventDefault();
        }
    };
    return Toolbox;
}(React.Component));
Toolbox.contextTypes = {
    store: React.PropTypes.object.isRequired
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Toolbox;
