/*
 * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
 * See LICENSE in the project root for license information.
 */
"use strict";
var lodash_1 = require('lodash');
var os_1 = require('os');
var uglify = require('uglify-js');
/* tslint:disable:typedef */
var loaderUtils = require('loader-utils');
var SetWebpackPublicPathLoader = (function () {
    function SetWebpackPublicPathLoader() {
        throw new Error('Constructing "LoadThemedStylesLoader" is not supported.');
    }
    SetWebpackPublicPathLoader.getGlobalRegisterCode = function (debug) {
        if (debug === void 0) { debug = false; }
        var lines = [
            '(function(){',
            ("if (!" + SetWebpackPublicPathLoader.registryVarName + ") " + SetWebpackPublicPathLoader.registryVarName + "={};"),
            "var scripts = document.getElementsByTagName('script');",
            'if (scripts && scripts.length) {',
            '  for (var i = 0; i < scripts.length; i++) {',
            '    if (!scripts[i]) continue;',
            "    var path = scripts[i].getAttribute('src');",
            ("    if (path) " + SetWebpackPublicPathLoader.registryVarName + "[path]=true;"),
            '  }',
            '}',
            '})();'
        ];
        var joinedScript = SetWebpackPublicPathLoader.joinLines(lines);
        if (debug) {
            return "" + os_1.EOL + joinedScript;
        }
        else {
            var uglified = uglify.parse(joinedScript);
            uglified.figure_out_scope();
            var compressor = uglify.Compressor({
                dead_code: true
            });
            var compressed = uglified.transform(compressor);
            compressed.figure_out_scope();
            compressed.compute_char_frequency();
            compressed.mangle_names();
            return "" + os_1.EOL + compressed.print_to_string();
        }
    };
    SetWebpackPublicPathLoader.setOptions = function (options) {
        this.defaultOptions = options || {};
    };
    SetWebpackPublicPathLoader.pitch = function (remainingRequest) {
        /* tslint:disable:no-any */
        var self = this;
        /* tslint:enable:no-any */
        var options = SetWebpackPublicPathLoader.getOptions(self.query);
        var lines = [];
        if (options.scriptPath) {
            lines = [
                "var scripts = document.getElementsByTagName('script');",
                ("var regex = new RegExp('" + SetWebpackPublicPathLoader.escapeSingleQuotes(options.scriptPath) + "', 'i');"),
                'var found = false;',
                '',
                'if (scripts && scripts.length) {',
                '  for (var i = 0; i < scripts.length; i++) {',
                '    if (!scripts[i]) continue;',
                "    var path = scripts[i].getAttribute('src');",
                '    if (path && path.match(regex)) {',
                "      __webpack_public_path__ = path.substring(0, path.lastIndexOf('/') + 1);",
                '      found = true;',
                '      break;',
                '    }',
                '  }',
                '}',
                '',
                'if (!found) {',
                ("  for (var global in " + SetWebpackPublicPathLoader.registryVarName + ") {"),
                '    if (global && global.match(regex)) {',
                "      __webpack_public_path__ = global.substring(0, global.lastIndexOf('/') + 1);",
                '      break;',
                '    }',
                '  }',
                '}'
            ];
        }
        else {
            if (options.publicPath) {
                lines = [
                    'var publicPath = ' +
                        ("'" + SetWebpackPublicPathLoader.appendSlashAndEscapeSingleQuotes(options.publicPath) + "';")
                ];
            }
            else if (options.systemJs) {
                lines = [
                    "var publicPath = window.System ? window.System.baseURL || '' : '';",
                    "if (publicPath !== '' && publicPath.substr(-1) !== '/') publicPath += '/';"
                ];
            }
            else {
                self.emitWarning("Neither 'publicPath' nor 'systemJs' is defined," +
                    'so the public path will not be modified');
                return '';
            }
            if (options.urlPrefix && options.urlPrefix !== '') {
                lines.push('', 'publicPath += ' +
                    ("'" + SetWebpackPublicPathLoader.appendSlashAndEscapeSingleQuotes(options.urlPrefix) + "';"));
            }
            lines.push('', "__webpack_public_path__ = publicPath;");
        }
        return SetWebpackPublicPathLoader.joinLines(lines);
    };
    SetWebpackPublicPathLoader.joinLines = function (lines) {
        return lines.join(os_1.EOL).replace(new RegExp("" + os_1.EOL + os_1.EOL + "+", 'g'), "" + os_1.EOL + os_1.EOL);
    };
    SetWebpackPublicPathLoader.escapeSingleQuotes = function (str) {
        if (str) {
            return str.replace('\'', '\\\'');
        }
        else {
            return undefined;
        }
    };
    SetWebpackPublicPathLoader.appendSlashAndEscapeSingleQuotes = function (str) {
        if (str && str.substr(-1) !== '/') {
            str = str + '/';
        }
        return SetWebpackPublicPathLoader.escapeSingleQuotes(str);
    };
    SetWebpackPublicPathLoader.getOptions = function (query) {
        var options = {
            systemJs: SetWebpackPublicPathLoader.defaultOptions.systemJs,
            scriptPath: SetWebpackPublicPathLoader.defaultOptions.scriptPath,
            urlPrefix: SetWebpackPublicPathLoader.defaultOptions.urlPrefix,
            publicPath: SetWebpackPublicPathLoader.defaultOptions.publicPath
        };
        var queryOptions = loaderUtils.parseQuery(query);
        if (queryOptions.systemJs || queryOptions.publicPath) {
            // If ?systemJs or ?publicPath=... is set inline, override scriptPath
            options.scriptPath = undefined;
        }
        return lodash_1.merge(options, queryOptions);
    };
    SetWebpackPublicPathLoader.registryVarName = 'window.__setWebpackPublicPathLoaderSrcRegistry__';
    SetWebpackPublicPathLoader.defaultOptions = {
        systemJs: false,
        scriptPath: undefined,
        urlPrefix: undefined,
        publicPath: undefined
    };
    return SetWebpackPublicPathLoader;
}());
exports.SetWebpackPublicPathLoader = SetWebpackPublicPathLoader;

//# sourceMappingURL=SetWebpackPublicPathLoader.js.map
