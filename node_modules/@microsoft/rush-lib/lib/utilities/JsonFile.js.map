{"version":3,"sources":["utilities/JsonFile.ts"],"names":[],"mappings":"AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,8BAAgC;AAChC,uBAAyB;AACzB,yBAA2B;AAC3B,yCAAoC;AAEpC;;GAEG;AACH;IAAA;IAsBA,CAAC;IApBC,2BAA2B,CAAC,qCAAqC;IACnD,qBAAY,GAA1B,UAA2B,YAAoB;QAC7C,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAClC,MAAM,IAAI,KAAK,CAAC,2BAAyB,YAAc,CAAC,CAAC;QAC3D,CAAC;QAED,IAAM,MAAM,GAAW,GAAG,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;QACtD,IAAI,CAAC;YACH,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;QACtC,CAAC;QAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACf,MAAM,IAAI,KAAK,CAAC,qBAAkB,YAAY,QAAI,GAAG,EAAE,CAAC,GAAG,IAAG,OAAK,KAAK,CAAC,OAAS,CAAA,CAAC,CAAC;QACtF,CAAC;IACH,CAAC;IAEa,qBAAY,GAA1B,UAA2B,QAAa,EAAE,YAAoB;QAC5D,IAAM,WAAW,GAAW,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC;QAC1E,IAAM,UAAU,GAAW,mBAAS,CAAC,cAAc,CAAC,WAAW,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;QAC/E,GAAG,CAAC,aAAa,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;IAC9C,CAAC;IAEH,eAAC;AAAD,CAtBA,AAsBC,IAAA","file":"utilities/JsonFile.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as fsx from 'fs-extra';\r\nimport * as os from 'os';\r\nimport * as jju from 'jju';\r\nimport Utilities from './Utilities';\r\n\r\n/**\r\n * Utilities for reading/writing JSON files.\r\n */\r\nexport default class JsonFile {\r\n\r\n  /* tslint:disable:no-any */ // JSON objects are dynamically typed\r\n  public static loadJsonFile(jsonFilename: string): any {\r\n    if (!fsx.existsSync(jsonFilename)) {\r\n      throw new Error(`Input file not found: ${jsonFilename}`);\r\n    }\r\n\r\n    const buffer: Buffer = fsx.readFileSync(jsonFilename);\r\n    try {\r\n      return jju.parse(buffer.toString());\r\n    } catch (error) {\r\n      throw new Error(`Error reading \"${jsonFilename}\":` + os.EOL + `  ${error.message}`);\r\n    }\r\n  }\r\n\r\n  public static saveJsonFile(jsonData: any, jsonFilename: string): void {\r\n    const stringified: string = JSON.stringify(jsonData, undefined, 2) + '\\n';\r\n    const normalized: string = Utilities.getAllReplaced(stringified, '\\n', '\\r\\n');\r\n    fsx.writeFileSync(jsonFilename, normalized);\r\n  }\r\n  /* tslint:enable:no-any */\r\n}\r\n"],"sourceRoot":"..\\..\\src"}