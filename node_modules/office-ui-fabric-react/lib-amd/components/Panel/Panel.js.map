{"version":3,"sources":["components/Panel/Panel.tsx"],"names":[],"mappings":"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","file":"components/Panel/Panel.js","sourcesContent":["/* tslint:disable:no-unused-variable */\r\nimport * as React from 'react';\r\n/* tslint:enable:no-unused-variable */\r\n\r\nimport {\r\n  BaseComponent,\r\n  css,\r\n  getId,\r\n  getRTL\r\n} from '../../Utilities';\r\nimport { FocusTrapZone } from '../FocusTrapZone/index';\r\nimport { IPanelProps, PanelType } from './Panel.Props';\r\nimport { Layer } from '../Layer/Layer';\r\nimport { Overlay } from '../../Overlay';\r\nimport { Popup } from '../Popup/index';\r\nimport './Panel.scss';\r\n\r\nexport interface IPanelState {\r\n  isOpen?: boolean;\r\n  isAnimatingOpen?: boolean;\r\n  isAnimatingClose?: boolean;\r\n  id?: string;\r\n}\r\n\r\nexport class Panel extends BaseComponent<IPanelProps, IPanelState> {\r\n\r\n  public static defaultProps: IPanelProps = {\r\n    isOpen: false,\r\n    isBlocking: true,\r\n    hasCloseButton: true,\r\n    type: PanelType.smallFixedFar,\r\n  };\r\n\r\n  constructor(props: IPanelProps) {\r\n    super(props);\r\n\r\n    this._onPanelClick = this._onPanelClick.bind(this);\r\n    this._onPanelRef = this._onPanelRef.bind(this);\r\n\r\n    this.state = {\r\n      isOpen: !!props.isOpen,\r\n      isAnimatingOpen: props.isOpen,\r\n      isAnimatingClose: false,\r\n      id: getId('Panel')\r\n    };\r\n  }\r\n\r\n  public componentDidMount() {\r\n    if (this.state.isOpen) {\r\n      this._async.setTimeout(() => {\r\n        this.setState({\r\n          isAnimatingOpen: false\r\n        });\r\n      }, 2000);\r\n    }\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps: IPanelProps) {\r\n    if (newProps.isOpen !== this.state.isOpen) {\r\n      this.setState({\r\n        isOpen: true,\r\n        isAnimatingOpen: newProps.isOpen ? true : false,\r\n        isAnimatingClose: newProps.isOpen ? false : true\r\n      });\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    let {\r\n      children,\r\n      className = '',\r\n      type,\r\n      hasCloseButton,\r\n      isLightDismiss,\r\n      isBlocking,\r\n      headerText,\r\n      closeButtonAriaLabel,\r\n      headerClassName = '',\r\n      elementToFocusOnDismiss,\r\n      ignoreExternalFocusing,\r\n      forceFocusInsideTrap,\r\n      firstFocusableSelector\r\n    } = this.props;\r\n    let { isOpen, isAnimatingOpen, isAnimatingClose, id } = this.state;\r\n    let isLeft = type === PanelType.smallFixedNear ? true : false;\r\n    let isRTL = getRTL();\r\n    let isOnRightSide = isRTL ? isLeft : !isLeft;\r\n    const headerTextId = id + '-headerText';\r\n\r\n    let pendingCommandBarContent = '';\r\n\r\n    if (!isOpen) {\r\n      return null;\r\n    }\r\n\r\n    let header;\r\n    if (headerText) {\r\n      header = <p className={ css('ms-Panel-headerText', headerClassName) } id={ headerTextId }>{ headerText }</p>;\r\n    }\r\n\r\n    let closeButton;\r\n    if (hasCloseButton) {\r\n      closeButton = <button className='ms-Panel-closeButton ms-PanelAction-close' onClick={ this._onPanelClick } aria-label={ closeButtonAriaLabel } data-is-visible={ true }>\r\n        <i className='ms-Panel-closeIcon ms-Icon ms-Icon--Cancel'></i>\r\n      </button>;\r\n    }\r\n\r\n    let overlay;\r\n    if (isBlocking) {\r\n      overlay = <Overlay\r\n        isDarkThemed={ false }\r\n        onClick={ isLightDismiss ? this._onPanelClick : null }\r\n      />;\r\n    }\r\n\r\n    return (\r\n      <Layer>\r\n        <Popup\r\n          role='dialog'\r\n          ariaLabelledBy={ headerText && headerTextId }\r\n          onDismiss={ this.props.onDismiss }>\r\n          <div\r\n            ref={ this._onPanelRef }\r\n            className={\r\n              css('ms-Panel', className, {\r\n                'ms-Panel--openLeft': !isOnRightSide,  // because the RTL animations are not being used, we need to set a class\r\n                'ms-Panel--openRight': isOnRightSide,  // because the RTL animations are not being used, we need to set a class\r\n                'is-open': isOpen,\r\n                'ms-Panel-animateIn': isAnimatingOpen,\r\n                'ms-Panel-animateOut': isAnimatingClose,\r\n                'ms-Panel--smFluid': type === PanelType.smallFluid,\r\n                'ms-Panel--smLeft': type === PanelType.smallFixedNear,\r\n                'ms-Panel--sm': type === PanelType.smallFixedFar,\r\n                'ms-Panel--md': type === PanelType.medium,\r\n                'ms-Panel--lg': type === PanelType.large || type === PanelType.largeFixed,\r\n                'ms-Panel--fixed': type === PanelType.largeFixed,\r\n                'ms-Panel--xl': type === PanelType.extraLarge,\r\n                'ms-Panel--hasCloseButton': hasCloseButton\r\n              })\r\n            }\r\n          >\r\n            { overlay }\r\n            <FocusTrapZone\r\n              className='ms-Panel-main'\r\n              elementToFocusOnDismiss={ elementToFocusOnDismiss }\r\n              isClickableOutsideFocusTrap={ isLightDismiss }\r\n              ignoreExternalFocusing={ ignoreExternalFocusing }\r\n              forceFocusInsideTrap={ forceFocusInsideTrap }\r\n              firstFocusableSelector={ firstFocusableSelector }\r\n            >\r\n              <div className='ms-Panel-commands' data-is-visible={ true } >\r\n                { pendingCommandBarContent }\r\n                { closeButton }\r\n              </div>\r\n              <div className='ms-Panel-contentInner'>\r\n                { header }\r\n                <div className='ms-Panel-content'>\r\n                  { children }\r\n                </div>\r\n              </div>\r\n            </FocusTrapZone>\r\n          </div>\r\n        </Popup>\r\n      </Layer>\r\n    );\r\n  }\r\n\r\n  public componentDidUpdate(prevProps, prevState) {\r\n    if (\r\n      prevState.isAnimatingClose === false &&\r\n      this.state.isAnimatingClose === true &&\r\n      this.props.onDismiss) {\r\n      this.props.onDismiss();\r\n    }\r\n  }\r\n\r\n  public dismiss() {\r\n    if (this.state.isOpen) {\r\n      this.setState({\r\n        isAnimatingOpen: false,\r\n        isAnimatingClose: true\r\n      });\r\n    }\r\n  }\r\n\r\n  private _onPanelClick() {\r\n    this.dismiss();\r\n  }\r\n\r\n  private _onPanelRef(ref: HTMLDivElement) {\r\n    if (ref) {\r\n      this._events.on(ref, 'animationend', this._onAnimationEnd);\r\n    } else {\r\n      this._events.off();\r\n    }\r\n  }\r\n\r\n  private _onAnimationEnd(ev: AnimationEvent) {\r\n    if (ev.animationName.indexOf('In') > -1) {\r\n      this.setState({\r\n        isOpen: true,\r\n        isAnimatingOpen: false\r\n      });\r\n    }\r\n    if (ev.animationName.indexOf('Out') > -1) {\r\n      this.setState({\r\n        isOpen: false,\r\n        isAnimatingClose: false\r\n      });\r\n\r\n      if (this.props.onDismissed) {\r\n        this.props.onDismissed();\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}