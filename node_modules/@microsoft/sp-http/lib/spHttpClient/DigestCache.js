"use strict";
var sp_telemetry_1 = require("@ms/sp-telemetry");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var FetchProvider_1 = require("../httpClient/FetchProvider");
var DigestCache = (function () {
    function DigestCache(serviceScope) {
        var _this = this;
        this._digestsByUrl = new Map();
        serviceScope.whenFinished(function () {
            _this._fetchProvider = serviceScope.consume(FetchProvider_1.fetchProviderServiceKey);
            _this._timeProvider = serviceScope.consume(sp_core_library_1.TimeProvider.serviceKey);
        });
    }
    DigestCache.prototype.fetchDigest = function (webUrl) {
        var _this = this;
        var normalizedWebUrl = sp_core_library_1.UrlUtilities.removeEndSlash(webUrl);
        var cachedDigest = this._digestsByUrl.get(normalizedWebUrl);
        if (cachedDigest) {
            var timestamp = this._timeProvider.getTimestamp();
            if (timestamp < cachedDigest.expirationTimestamp) {
                sp_telemetry_1._TraceLogger.logVerbose(DigestCache._logSource, 'DigestCache: Reusing cached digest.  Expiration: ' + cachedDigest.expirationTimestamp);
                return Promise.resolve(cachedDigest.value);
            }
        }
        var digestUrl = normalizedWebUrl + '/_api/contextinfo';
        var rawRequest = new Request(digestUrl, {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-type': 'application/json;odata=verbose;charset=utf-8'
            },
            credentials: 'same-origin',
            cache: 'no-cache'
        });
        return this._fetchProvider.fetch(rawRequest).then(function (response) {
            return response.json();
        }).then(function (responseObject) {
            var digestValue = responseObject.FormDigestValue;
            var seconds = responseObject.FormDigestTimeoutSeconds;
            var expirationTimeMs = _this._timeProvider.getTimestamp() + 1000 * seconds;
            _this.addDigestToCache(normalizedWebUrl, digestValue, expirationTimeMs);
            sp_telemetry_1._TraceLogger.logVerbose(DigestCache._logSource, 'DigestCache: Fetched new digest');
            return digestValue;
        });
    };
    DigestCache.prototype.addDigestToCache = function (webUrl, digestValue, expirationTimestamp) {
        var normalizedWebUrl = sp_core_library_1.UrlUtilities.removeEndSlash(webUrl);
        var newCachedDigest = {
            value: digestValue,
            expirationTimestamp: expirationTimestamp - DigestCache.EXPIRATION_SLOP_MS
        };
        this._digestsByUrl.set(normalizedWebUrl, newCachedDigest);
    };
    DigestCache.prototype.clearDigest = function (webUrl) {
        var normalizedWebUrl = sp_core_library_1.UrlUtilities.removeEndSlash(webUrl);
        var found = this._digestsByUrl.delete(normalizedWebUrl);
        sp_telemetry_1._TraceLogger.logVerbose(DigestCache._logSource, "DigestCache: Requested to clear cache entry: " + (found ? 'found' : 'not found'));
        return found;
    };
    DigestCache.prototype.clearAllDigests = function () {
        this._digestsByUrl.clear();
    };
    return DigestCache;
}());
DigestCache.serviceKey = sp_core_library_1.ServiceKey.create('sp-client-base:DigestCache', DigestCache);
DigestCache.EXPIRATION_SLOP_MS = 3000;
DigestCache._logSource = sp_telemetry_1._LogSource.create('DigestCache');
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = DigestCache;
