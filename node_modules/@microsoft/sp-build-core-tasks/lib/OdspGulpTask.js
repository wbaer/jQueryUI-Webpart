"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var path = require("path");
var crypto = require("crypto");
var gulp_core_build_1 = require("@microsoft/gulp-core-build");
var OdspGulpTask = (function (_super) {
    __extends(OdspGulpTask, _super);
    function OdspGulpTask() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OdspGulpTask.prototype.executeTask = function (gulp, completeCallback) {
        throw new Error('executeTask must be implemented.');
    };
    Object.defineProperty(OdspGulpTask.prototype, "properties", {
        get: function () {
            return this.buildConfig.properties || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OdspGulpTask.prototype, "outputDirectory", {
        get: function () {
            if (!this._outputDirectory) {
                this._outputDirectory = path.join(this.buildConfig.rootPath, this.buildConfig.distFolder);
            }
            return this._outputDirectory;
        },
        enumerable: true,
        configurable: true
    });
    OdspGulpTask.prototype.getManifest = function (manifestPath) {
        if (!this.properties.manifests) {
            this.properties.manifests = {};
        }
        var manifests = this.properties.manifests;
        if (manifests[manifestPath] === undefined) {
            if (!manifestPath) {
                manifests[manifestPath] = null; // tslint:disable-line:no-null-keyword
            }
            else {
                manifests[manifestPath] = require(path.join(this.buildConfig.rootPath, manifestPath));
            }
        }
        return manifests[manifestPath];
    };
    OdspGulpTask.prototype.getPackageVersion = function () {
        var packageJson = require(path.join(this.buildConfig.rootPath, 'package.json'));
        var version = packageJson.version;
        // Remove pre-release name if any, because pre-release is not handled by SPFx yet.
        var indexOfDelimiter = version.indexOf('-');
        if (indexOfDelimiter > 0) {
            version = version.substr(0, indexOfDelimiter);
        }
        return version;
    };
    OdspGulpTask.prototype.getChecksum = function (data) {
        return crypto.createHash('md5').update(data).digest('hex');
    };
    return OdspGulpTask;
}(gulp_core_build_1.GulpTask));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = OdspGulpTask;

//# sourceMappingURL=OdspGulpTask.js.map
