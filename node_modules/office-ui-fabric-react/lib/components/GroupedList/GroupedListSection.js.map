{"version":3,"sources":["components/GroupedList/GroupedListSection.tsx"],"names":[],"mappings":"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","file":"components/GroupedList/GroupedListSection.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  IGroup,\r\n  IGroupDividerProps\r\n} from './GroupedList.Props';\r\n\r\nimport {\r\n  IDragDropContext,\r\n  IDragDropEvents,\r\n  IDragDropHelper\r\n} from '../../utilities/dragdrop/index';\r\n\r\nimport {\r\n  BaseComponent,\r\n  autobind\r\n} from '../../Utilities';\r\n\r\nimport {\r\n  ISelection,\r\n  SelectionMode,\r\n  SELECTION_CHANGE\r\n} from '../../utilities/selection/index';\r\n\r\nimport { GroupFooter } from './GroupFooter';\r\nimport { GroupHeader } from './GroupHeader';\r\n\r\nimport {\r\n  List\r\n} from '../../List';\r\nimport {\r\n  IDragDropOptions\r\n} from './../../utilities/dragdrop/interfaces';\r\nimport { assign, css } from '../../Utilities';\r\nimport { IViewport } from '../../utilities/decorators/withViewport';\r\nimport { IDisposable } from '@uifabric/utilities';\r\n\r\nexport interface IGroupedListSectionProps extends React.Props<GroupedListSection> {\r\n  /** Map of callback functions related to drag and drop functionality. */\r\n  dragDropEvents?: IDragDropEvents;\r\n\r\n  /** helper to manage drag/drop across item rows and groups */\r\n  dragDropHelper?: IDragDropHelper;\r\n\r\n  /** Event names and corresponding callbacks that will be registered to the group and the rendered elements */\r\n  eventsToRegister?: { eventName: string, callback: (context: IDragDropContext, event?: any) => void }[];\r\n\r\n  /** Information to pass in to the group footer. */\r\n  footerProps?: IGroupDividerProps;\r\n\r\n  /** Grouping item limit. */\r\n  getGroupItemLimit?: (group: IGroup) => number;\r\n\r\n  /** Optional grouping instructions. */\r\n  groupIndex?: number;\r\n\r\n  /** Optional group nesting level. */\r\n  groupNestingDepth?: number;\r\n\r\n  /** Optional grouping instructions. */\r\n  group?: IGroup;\r\n\r\n  /** Information to pass in to the group header. */\r\n  headerProps?: IGroupDividerProps;\r\n\r\n  /** List of items to render. */\r\n  items: any[];\r\n\r\n  /** Optional list props to pass to list renderer.  */\r\n  listProps?: any;\r\n\r\n  /** Rendering callback to render the group items. */\r\n  onRenderCell: (\r\n    nestingDepth?: number,\r\n    item?: any,\r\n    index?: number\r\n  ) => React.ReactNode;\r\n\r\n  /** Optional selection model to track selection state.  */\r\n  selection?: ISelection;\r\n\r\n  /** Controls how/if the details list manages selection. */\r\n  selectionMode?: SelectionMode;\r\n\r\n  /** Optional Viewport, provided by the parent component. */\r\n  viewport?: IViewport;\r\n\r\n  /** Override for rendering the group header. */\r\n  onRenderGroupHeader?: (props?: IGroupDividerProps, defaultRender?: (props?: IGroupDividerProps) => JSX.Element) => JSX.Element;\r\n\r\n  /** Override for rendering the group footer. */\r\n  onRenderGroupFooter?: (props?: IGroupDividerProps, defaultRender?: (props?: IGroupDividerProps) => JSX.Element) => JSX.Element;\r\n}\r\n\r\nexport interface IGroupedListSectionState {\r\n  isDropping?: boolean;\r\n  isSelected?: boolean;\r\n}\r\n\r\nconst DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\r\n\r\nexport class GroupedListSection extends BaseComponent<IGroupedListSectionProps, IGroupedListSectionState> {\r\n  public refs: {\r\n    [key: string]: React.ReactInstance,\r\n    root: HTMLElement,\r\n    list: List\r\n  };\r\n\r\n  private _subGroups: {\r\n    [key: string]: GroupedListSection;\r\n  };\r\n  private _dragDropSubscription: IDisposable;\r\n\r\n  constructor(props: IGroupedListSectionProps) {\r\n    super(props);\r\n\r\n    let { selection, group } = props;\r\n\r\n    this._subGroups = {};\r\n    this.state = {\r\n      isDropping: false,\r\n      isSelected: (selection && group) ? selection.isRangeSelected(group.startIndex, group.count) : false\r\n    };\r\n  }\r\n\r\n  public componentDidMount() {\r\n    let { dragDropHelper, selection } = this.props;\r\n\r\n    if (dragDropHelper) {\r\n      this._dragDropSubscription = dragDropHelper.subscribe(this.refs.root, this._events, this._getGroupDragDropOptions());\r\n    }\r\n\r\n    if (selection) {\r\n      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChange);\r\n    }\r\n  }\r\n\r\n  public componentWillUnmount() {\r\n    if (this._dragDropSubscription) {\r\n      this._dragDropSubscription.dispose();\r\n    }\r\n  }\r\n\r\n  public componentDidUpdate(previousProps: IGroupedListSectionProps) {\r\n    if (this.props.group !== previousProps.group ||\r\n      this.props.groupIndex !== previousProps.groupIndex ||\r\n      this.props.dragDropHelper !== previousProps.dragDropHelper) {\r\n      if (this._dragDropSubscription) {\r\n        this._dragDropSubscription.dispose();\r\n        delete this._dragDropSubscription;\r\n      }\r\n\r\n      if (this.props.dragDropHelper) {\r\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(this.refs.root, this._events, this._getGroupDragDropOptions());\r\n      }\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    let {\r\n      getGroupItemLimit,\r\n      group,\r\n      groupIndex,\r\n      headerProps,\r\n      footerProps,\r\n      viewport,\r\n      selectionMode,\r\n      onRenderGroupHeader = this._onRenderGroupHeader,\r\n      onRenderGroupFooter = this._onRenderGroupFooter\r\n    } = this.props;\r\n    let { isSelected } = this.state;\r\n    let renderCount = group && getGroupItemLimit ? getGroupItemLimit(group) : Infinity;\r\n    let isFooterVisible = group && !group.children && !group.isCollapsed && !group.isShowingAll &&\r\n      (group.count > renderCount || group.hasMoreData);\r\n    let hasNestedGroups = group && group.children && group.children.length > 0;\r\n\r\n    let dividerProps: IGroupDividerProps = {\r\n      group: group,\r\n      groupIndex: groupIndex,\r\n      groupLevel: group ? group.level : 0,\r\n      isSelected,\r\n      viewport: viewport,\r\n      selectionMode: selectionMode\r\n    };\r\n    let groupHeaderProps: IGroupDividerProps = assign({}, headerProps, dividerProps);\r\n    let groupFooterProps: IGroupDividerProps = assign({}, footerProps, dividerProps);\r\n\r\n    return (\r\n      <div\r\n        ref='root'\r\n        className={ css('ms-GroupedList-group', this._getDroppingClassName()) }\r\n      >\r\n        { onRenderGroupHeader(groupHeaderProps, this._onRenderGroupHeader) }\r\n        {\r\n          group && group.isCollapsed ?\r\n            null :\r\n            (\r\n              hasNestedGroups ?\r\n                (\r\n                  <List\r\n                    ref='list'\r\n                    items={ group.children }\r\n                    onRenderCell={ this._renderSubGroup }\r\n                    getItemCountForPage={ () => 1 }\r\n                  />\r\n                ) :\r\n                this._onRenderGroup(renderCount)\r\n            )\r\n        }\r\n        { isFooterVisible && onRenderGroupFooter(groupFooterProps, this._onRenderGroupFooter) }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  public forceUpdate() {\r\n    super.forceUpdate();\r\n    this.forceListUpdate();\r\n  }\r\n\r\n  public forceListUpdate() {\r\n    let { group } = this.props;\r\n\r\n    if (this.refs.list) {\r\n      this.refs.list.forceUpdate();\r\n\r\n      if (group && group.children && group.children.length > 0) {\r\n        let subGroupCount = group.children.length;\r\n\r\n        for (let i = 0; i < subGroupCount; i++) {\r\n          let subGroup = this.refs.list.refs['subGroup_' + String(i)] as GroupedListSection;\r\n\r\n          if (subGroup) {\r\n            subGroup.forceListUpdate();\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      let subGroup = this.refs['subGroup_' + String(0)] as GroupedListSection;\r\n\r\n      if (subGroup) {\r\n        subGroup.forceListUpdate();\r\n      }\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _onRenderGroupHeader(props: IGroupDividerProps) {\r\n    return <GroupHeader { ...props } />;\r\n  }\r\n\r\n  @autobind\r\n  private _onRenderGroupFooter(props: IGroupDividerProps) {\r\n    return <GroupFooter { ...props } />;\r\n  }\r\n\r\n  private _onSelectionChange() {\r\n    let { group, selection } = this.props;\r\n    let isSelected = selection.isRangeSelected(group.startIndex, group.count);\r\n\r\n    if (isSelected !== this.state.isSelected) {\r\n      this.setState({ isSelected });\r\n    }\r\n  }\r\n\r\n  private _onRenderGroup(renderCount: number) {\r\n    let {\r\n      group,\r\n      items,\r\n      onRenderCell,\r\n      listProps,\r\n      groupNestingDepth\r\n    } = this.props;\r\n    let count = group ? group.count : items.length;\r\n    let startIndex = group ? group.startIndex : 0;\r\n\r\n    return (\r\n      <List\r\n        items={ items }\r\n        onRenderCell={ (item, itemIndex) => onRenderCell(groupNestingDepth, item, itemIndex) }\r\n        ref={ 'list' }\r\n        renderCount={ Math.min(count, renderCount) }\r\n        startIndex={ startIndex }\r\n        { ...listProps }\r\n      />\r\n    );\r\n  }\r\n\r\n  @autobind\r\n  private _renderSubGroup(subGroup, subGroupIndex) {\r\n    let {\r\n      dragDropEvents,\r\n      dragDropHelper,\r\n      eventsToRegister,\r\n      getGroupItemLimit,\r\n      groupNestingDepth,\r\n      items,\r\n      headerProps,\r\n      footerProps,\r\n      listProps,\r\n      onRenderCell,\r\n      selection,\r\n      selectionMode,\r\n      viewport\r\n    } = this.props;\r\n\r\n    return (!subGroup || subGroup.count > 0) ? (\r\n      <GroupedListSection\r\n        ref={ 'subGroup_' + subGroupIndex }\r\n        key={ this._getGroupKey(subGroup, subGroupIndex) }\r\n        dragDropEvents={ dragDropEvents }\r\n        dragDropHelper={ dragDropHelper }\r\n        eventsToRegister={ eventsToRegister }\r\n        footerProps={ footerProps }\r\n        getGroupItemLimit={ getGroupItemLimit }\r\n        group={ subGroup }\r\n        groupIndex={ subGroupIndex }\r\n        groupNestingDepth={ groupNestingDepth }\r\n        headerProps={ headerProps }\r\n        items={ items }\r\n        listProps={ listProps }\r\n        onRenderCell={ onRenderCell }\r\n        selection={ selection }\r\n        selectionMode={ selectionMode }\r\n        viewport={ viewport }\r\n      />\r\n    ) : null;\r\n  }\r\n\r\n  private _getGroupKey(group, index) {\r\n    return 'group-' + ((group && group.key) ? group.key : String(group.level) + String(index));\r\n  }\r\n\r\n  /**\r\n   * collect all the data we need to enable drag/drop for a group\r\n   */\r\n  @autobind\r\n  private _getGroupDragDropOptions(): IDragDropOptions {\r\n    let { group, groupIndex, dragDropEvents, eventsToRegister } = this.props;\r\n    let options = {\r\n      eventMap: eventsToRegister,\r\n      selectionIndex: -1,\r\n      context: { data: group, index: groupIndex, isGroup: true },\r\n      canDrag: () => false, // cannot drag groups\r\n      canDrop: dragDropEvents.canDrop,\r\n      onDragStart: null,\r\n      updateDropState: this._updateDroppingState\r\n    };\r\n    return options;\r\n  }\r\n\r\n  /**\r\n   * update groupIsDropping state based on the input value, which is used to change style during drag and drop\r\n   *\r\n   * @private\r\n   * @param {boolean} newValue (new isDropping state value)\r\n   * @param {DragEvent} event (the event trigger dropping state change which can be dragenter, dragleave etc)\r\n   */\r\n  @autobind\r\n  private _updateDroppingState(newIsDropping: boolean, event: DragEvent) {\r\n    let { isDropping } = this.state;\r\n    let { dragDropEvents } = this.props;\r\n\r\n    if (!isDropping) {\r\n      if (dragDropEvents.onDragLeave) {\r\n        dragDropEvents.onDragLeave(event, null);\r\n      }\r\n    } else {\r\n      if (dragDropEvents.onDragEnter) {\r\n        dragDropEvents.onDragEnter(event, null);\r\n      }\r\n    }\r\n\r\n    if (isDropping !== newIsDropping) {\r\n      this.setState({ isDropping: newIsDropping });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * get the correct css class to reflect the dropping state for a given group\r\n   *\r\n   * If the group is the current drop target, return the default dropping class name\r\n   * Otherwise, return '';\r\n   *\r\n   */\r\n  private _getDroppingClassName(): string {\r\n    let { isDropping } = this.state;\r\n    let { group } = this.props;\r\n\r\n    let droppingClass = group && isDropping ? DEFAULT_DROPPING_CSS_CLASS : '';\r\n    return droppingClass;\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}