/// <reference types='mocha' />
"use strict";
var chai_1 = require("chai");
var VersionMismatchFinder_1 = require("../VersionMismatchFinder");
describe('VersionMismatchFinder', function () {
    it('finds no mismatches if there are none', function (done) {
        var projects = [
            {
                packageName: 'A',
                packageJson: {
                    dependencies: {
                        '@types/foo': '1.2.3',
                        'karma': '0.0.1'
                    }
                }
            },
            {
                packageName: 'B',
                packageJson: {
                    dependencies: {
                        '@types/foo': '1.2.3',
                        'karma': '0.0.1'
                    }
                }
            }
        ]; // tslint:disable-line:no-any
        var mismatchFinder = new VersionMismatchFinder_1.VersionMismatchFinder(projects);
        chai_1.assert.isNumber(mismatchFinder.numberOfMismatches);
        chai_1.assert.equal(mismatchFinder.numberOfMismatches, 0);
        chai_1.assert.equal(mismatchFinder.getMismatches().length, 0);
        done();
    });
    it('finds a mismatch in two packages', function (done) {
        var projects = [
            {
                packageName: 'A',
                packageJson: {
                    dependencies: {
                        '@types/foo': '1.2.3',
                        'karma': '0.0.1'
                    }
                }
            },
            {
                packageName: 'B',
                packageJson: {
                    dependencies: {
                        '@types/foo': '2.0.0',
                        'karma': '0.0.1'
                    }
                }
            }
        ]; // tslint:disable-line:no-any
        var mismatchFinder = new VersionMismatchFinder_1.VersionMismatchFinder(projects);
        chai_1.assert.isNumber(mismatchFinder.numberOfMismatches);
        chai_1.assert.equal(mismatchFinder.numberOfMismatches, 1);
        chai_1.assert.equal(mismatchFinder.getMismatches().length, 1);
        chai_1.assert.equal(mismatchFinder.getMismatches()[0], '@types/foo');
        chai_1.assert.includeMembers(mismatchFinder.getVersionsOfMismatch('@types/foo'), ['2.0.0', '1.2.3']);
        chai_1.assert.equal(mismatchFinder.getConsumersOfMismatch('@types/foo', '2.0.0'), 'B');
        chai_1.assert.equal(mismatchFinder.getConsumersOfMismatch('@types/foo', '1.2.3'), 'A');
        done();
    });
    it('won\'t let you access mismatches that don\t exist', function (done) {
        var projects = [
            {
                packageName: 'A',
                packageJson: {
                    dependencies: {
                        '@types/foo': '1.2.3',
                        'karma': '0.0.1'
                    }
                }
            },
            {
                packageName: 'B',
                packageJson: {
                    dependencies: {
                        '@types/foo': '2.0.0',
                        'karma': '0.0.1'
                    }
                }
            }
        ]; // tslint:disable-line:no-any
        var mismatchFinder = new VersionMismatchFinder_1.VersionMismatchFinder(projects);
        chai_1.assert.equal(mismatchFinder.getVersionsOfMismatch('@types/foobar'), undefined);
        chai_1.assert.equal(mismatchFinder.getConsumersOfMismatch('@types/fobar', '2.0.0'), undefined);
        chai_1.assert.equal(mismatchFinder.getConsumersOfMismatch('@types/foo', '9.9.9'), undefined);
        done();
    });
    it('finds two mismatches in two different pairs of projects', function (done) {
        var projects = [
            {
                packageName: 'A',
                packageJson: {
                    dependencies: {
                        '@types/foo': '1.2.3',
                        'karma': '0.0.1'
                    }
                }
            },
            {
                packageName: 'B',
                packageJson: {
                    dependencies: {
                        '@types/foo': '2.0.0',
                        'karma': '0.0.1'
                    }
                }
            },
            {
                packageName: 'C',
                packageJson: {
                    dependencies: {
                        'mocha': '1.2.3',
                        'karma': '0.0.1'
                    }
                }
            },
            {
                packageName: 'D',
                packageJson: {
                    dependencies: {
                        'mocha': '2.0.0',
                        'karma': '0.0.1'
                    }
                }
            }
        ]; // tslint:disable-line:no-any
        var mismatchFinder = new VersionMismatchFinder_1.VersionMismatchFinder(projects);
        chai_1.assert.isNumber(mismatchFinder.numberOfMismatches);
        chai_1.assert.equal(mismatchFinder.numberOfMismatches, 2);
        chai_1.assert.equal(mismatchFinder.getMismatches().length, 2);
        chai_1.assert.includeMembers(mismatchFinder.getMismatches(), ['@types/foo', 'mocha']);
        chai_1.assert.includeMembers(mismatchFinder.getVersionsOfMismatch('@types/foo'), ['2.0.0', '1.2.3']);
        chai_1.assert.includeMembers(mismatchFinder.getVersionsOfMismatch('mocha'), ['2.0.0', '1.2.3']);
        chai_1.assert.equal(mismatchFinder.getConsumersOfMismatch('@types/foo', '1.2.3'), 'A');
        chai_1.assert.equal(mismatchFinder.getConsumersOfMismatch('@types/foo', '2.0.0'), 'B');
        chai_1.assert.equal(mismatchFinder.getConsumersOfMismatch('mocha', '1.2.3'), 'C');
        chai_1.assert.equal(mismatchFinder.getConsumersOfMismatch('mocha', '2.0.0'), 'D');
        done();
    });
    it('finds three mismatches in three projects', function (done) {
        var projects = [
            {
                packageName: 'A',
                packageJson: {
                    dependencies: {
                        '@types/foo': '1.2.3',
                        'karma': '0.0.1'
                    }
                }
            },
            {
                packageName: 'B',
                packageJson: {
                    dependencies: {
                        '@types/foo': '2.0.0',
                        'karma': '0.0.1'
                    }
                }
            },
            {
                packageName: 'C',
                packageJson: {
                    dependencies: {
                        '@types/foo': '9.9.9',
                        'karma': '0.0.1'
                    }
                }
            }
        ]; // tslint:disable-line:no-any
        var mismatchFinder = new VersionMismatchFinder_1.VersionMismatchFinder(projects);
        chai_1.assert.isNumber(mismatchFinder.numberOfMismatches);
        chai_1.assert.equal(mismatchFinder.numberOfMismatches, 1);
        chai_1.assert.equal(mismatchFinder.getMismatches().length, 1);
        chai_1.assert.includeMembers(mismatchFinder.getMismatches(), ['@types/foo']);
        chai_1.assert.includeMembers(mismatchFinder.getVersionsOfMismatch('@types/foo'), ['2.0.0', '1.2.3', '9.9.9']);
        chai_1.assert.equal(mismatchFinder.getConsumersOfMismatch('@types/foo', '1.2.3'), 'A');
        chai_1.assert.equal(mismatchFinder.getConsumersOfMismatch('@types/foo', '2.0.0'), 'B');
        chai_1.assert.equal(mismatchFinder.getConsumersOfMismatch('@types/foo', '9.9.9'), 'C');
        done();
    });
    it('checks dev dependencies', function (done) {
        var projects = [
            {
                packageName: 'A',
                packageJson: {
                    dependencies: {
                        '@types/foo': '1.2.3',
                        'karma': '0.0.1'
                    }
                }
            },
            {
                packageName: 'B',
                packageJson: {
                    devDependencies: {
                        '@types/foo': '2.0.0',
                        'karma': '0.0.1'
                    }
                }
            }
        ]; // tslint:disable-line:no-any
        var mismatchFinder = new VersionMismatchFinder_1.VersionMismatchFinder(projects);
        chai_1.assert.isNumber(mismatchFinder.numberOfMismatches);
        chai_1.assert.equal(mismatchFinder.numberOfMismatches, 1);
        chai_1.assert.equal(mismatchFinder.getMismatches().length, 1);
        chai_1.assert.equal(mismatchFinder.getMismatches()[0], '@types/foo');
        chai_1.assert.includeMembers(mismatchFinder.getVersionsOfMismatch('@types/foo'), ['2.0.0', '1.2.3']);
        chai_1.assert.equal(mismatchFinder.getConsumersOfMismatch('@types/foo', '2.0.0'), 'B');
        chai_1.assert.equal(mismatchFinder.getConsumersOfMismatch('@types/foo', '1.2.3'), 'A');
        done();
    });
    it('checks peer dependencies', function (done) {
        var projects = [
            {
                packageName: 'A',
                packageJson: {
                    dependencies: {
                        '@types/foo': '1.2.3',
                        'karma': '0.0.1'
                    }
                }
            },
            {
                packageName: 'B',
                packageJson: {
                    peerDependencies: {
                        '@types/foo': '2.0.0',
                        'karma': '0.0.1'
                    }
                }
            }
        ]; // tslint:disable-line:no-any
        var mismatchFinder = new VersionMismatchFinder_1.VersionMismatchFinder(projects);
        chai_1.assert.isNumber(mismatchFinder.numberOfMismatches);
        chai_1.assert.equal(mismatchFinder.numberOfMismatches, 1);
        chai_1.assert.equal(mismatchFinder.getMismatches().length, 1);
        chai_1.assert.equal(mismatchFinder.getMismatches()[0], '@types/foo');
        chai_1.assert.includeMembers(mismatchFinder.getVersionsOfMismatch('@types/foo'), ['2.0.0', '1.2.3']);
        chai_1.assert.equal(mismatchFinder.getConsumersOfMismatch('@types/foo', '2.0.0'), 'B');
        chai_1.assert.equal(mismatchFinder.getConsumersOfMismatch('@types/foo', '1.2.3'), 'A');
        done();
    });
    it('checks optional dependencies', function (done) {
        var projects = [
            {
                packageName: 'A',
                packageJson: {
                    dependencies: {
                        '@types/foo': '1.2.3',
                        'karma': '0.0.1'
                    }
                }
            },
            {
                packageName: 'B',
                packageJson: {
                    optionalDependencies: {
                        '@types/foo': '2.0.0',
                        'karma': '0.0.1'
                    }
                }
            }
        ]; // tslint:disable-line:no-any
        var mismatchFinder = new VersionMismatchFinder_1.VersionMismatchFinder(projects);
        chai_1.assert.isNumber(mismatchFinder.numberOfMismatches);
        chai_1.assert.equal(mismatchFinder.numberOfMismatches, 1);
        chai_1.assert.equal(mismatchFinder.getMismatches().length, 1);
        chai_1.assert.equal(mismatchFinder.getMismatches()[0], '@types/foo');
        chai_1.assert.includeMembers(mismatchFinder.getVersionsOfMismatch('@types/foo'), ['2.0.0', '1.2.3']);
        chai_1.assert.equal(mismatchFinder.getConsumersOfMismatch('@types/foo', '2.0.0'), 'B');
        chai_1.assert.equal(mismatchFinder.getConsumersOfMismatch('@types/foo', '1.2.3'), 'A');
        done();
    });
});

//# sourceMappingURL=VersionMismatchFinder.test.js.map
