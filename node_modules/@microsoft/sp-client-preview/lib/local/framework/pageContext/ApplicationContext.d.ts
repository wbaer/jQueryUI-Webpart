import IOdataSitePage from '../httpClient/odataTypes/IOdataSitePage';
import IOdataContext from './IOdataContext';
import PageContext from './AppPageContext';
import PageContextItem from './PageContextItem';
/**
  * This interface is used with ApplicationContext.load()
  */
export interface IApplicationContextArgs {
    clientSideApplicationId: string;
    hostedByClassicPage: boolean;
}
/**
 * Tracks contextual information about the client-side application that
 * is currently running.
 */
export default class ApplicationContext extends PageContextItem implements IOdataContext<IOdataSitePage> {
    private _clientSideApplicationId;
    private _hostedByClassicPage;
    private _odataObject;
    constructor(pageContext: PageContext);
    /**
     * Assigns all properties of the object, then assigns the "state" property
     * to PageContextItemState.Ready.
     */
    load(args: IApplicationContextArgs): void;
    /**
     * Returns the client side component identifier for the client-side application.
     * This corresponds to the "id" field in the application's manifest JSON file.
     * Example: "00000000-0000-0000-0000-000000000000"
     */
    readonly clientSideApplicationId: string;
    /**
     * Indicates whether the application is currently being hosted by a classic page,
     * e.g. if a client side web part has been added to a classic publishing page.
     */
    readonly hostedByClassicPage: boolean;
    /**
     * Returns an ODATA object containing additional information for this item, if available.
     * Otherwise, this returns undefined.  If your application fetches this data itself, it
     * can call updateOdataObject() to update the context.
     */
    getOdataObject(): IOdataSitePage;
    /**
     * Updates the ODATA object that will be returned when getOdataObject() is called.
     * This allows the application to share its data with other objects (e.g. web parts)
     * to avoid unnecessary REST calls.
     */
    updateOdataObject(value: IOdataSitePage): void;
}
