/**
 * @file ICanvasLayout.ts
 * @copyright (c) Microsoft Corporation. All rights reserved.
 */
import { ICanvasControl } from '../canvasControl/ICanvasControl';
/**
 * Represents the various states of controls in the layout
 */
export interface ICanvasLayoutControlsState {
    /**
     * The id of the selected control
     */
    selectedControlId: string;
    /**
     * The id of the currently hovered control
     */
    hoveredControlId: string;
    /**
     * The id of the most recently deleted control
     */
    deletedControlLayout: IControlPosition;
    /**
     * The id of a control in the process of being deleted
     */
    deleteCandidateControlLayout: IControlPosition;
}
/**
 * Represents the contract for control layout
 */
export interface IControlPosition {
    /**
     * Represents the parent zone index
     */
    zoneIndex: number;
    /**
     * Represents the parent section index
     */
    sectionIndex: number;
    /**
     * Represents the control index
     */
    controlIndex: number;
    /**
     * Represents the relative space of the section to consume.
     *
     * Optional. Default is all of the section. If present, all siblings must
     * also define a factor.
     */
    sectionFactor?: number;
}
/**
 * Represents the contract for an item in a layout part
 */
export interface ILayoutItem {
    index: number;
}
/**
 * Represents the contract for canvas layout operations
 */
export interface ILayoutPart {
    /**
     * Add a control to the canvas layout
     * @param control Represents the control to be added
     * @returns the id of the control that was added
     */
    addControl(control: ICanvasControl): string;
    /**
     * Remove a control from the canvas layout
     * @param control Represents the position of the control to be removed
     * @returns the id of the control that was removed
     */
    removeControl(controlPosition: IControlPosition): string;
    /**
     * Fetch a control from the layout
     * @param controlPosition represents the position of the control
     * @returns the underlying control if available
     */
    fetchControl(controlPosition: IControlPosition): ICanvasControl;
    /**
     * Fetch all controls that are available in the layout
     * @returns all the controls associated with that layout
     */
    fetchAllControls(): ICanvasControl[];
    /**
     * Determines if the underlying layout is empty
     * @returns true if the pertinent layout is empty
     */
    isEmpty(): boolean;
    /**
     * Disposes the layout
     */
    dispose(): void;
}
/**
 * Represents the base props a Layout React component must extend
 */
export interface ILayoutPartComponentProps {
    selectedPosition: IControlPosition;
}
