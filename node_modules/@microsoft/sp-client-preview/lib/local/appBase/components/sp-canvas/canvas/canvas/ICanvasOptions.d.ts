/**
 * @copyright (c) Microsoft Corporation. All rights reserved.
 */
import { DisplayMode, ServiceScope } from '@microsoft/sp-core-library';
/**
 * SharePoint Client-side Applications can use the SharePoint Canvas to enable rich content authoring
 * as part of their experience. The SharePoint canvas provides Rich Text Editing capabilities, SharePoint
 * Client-side WebPart aggregation and hosting, and a beautiful railed design experience.
 *
 * Interface for the Canvas optional parameters.
 *
 * @param serviceScope - A context object that will provide dependencies needed by the canvas and
 *   any web parts that it loads.
 * @param mode - The initial DisplayMode of the Canvas.
 * @param serializedCanvasContent - Optional. Used to initialize a Canvas' state when render() is invoked. The
 *   string must have been created by a previous instance of the Canvas. If absent, an empty Canvas will
 *   be rendered. If present, the Canvas will rehydrate to represent the state of the Canvas when
 *   serialized.
 * @param handleCanvasChanged - Optional. When text is editied or canvas controls are added/removed this
 *   callback will be invoked. Web parts will also invoke this call back when there is interaction with
 *   the web part.
 * @param scrollThreshold - Optional. If the Canvas is inside a scrollable element, this value can be passed
 * to let the Canvas know how much of the initial scrolling must be ignored in re-positioning its inner elements.
 * This is useful when the Canvas has a non-zero top relative to its scrollable parent. In that case, a part of
 * the initial scrolling does not move the Canvas out of view and must be ignored by the Canvas. Defaults to zero.
 *
 * @param onRenderComplete - Optional. Method to be called when the the canvas has finished rendering and loading
 * webparts.
 *
 * @internal
 */
export interface ICanvasOptions {
    serviceScope: ServiceScope;
    mode: DisplayMode;
    serializedCanvasContent?: string;
    handleCanvasChanged?: () => void;
    scrollThreshold?: number;
    handleRenderComplete?: (loadTimeMS: number) => void;
    shouldCenterAlign?: boolean;
}
export default ICanvasOptions;
