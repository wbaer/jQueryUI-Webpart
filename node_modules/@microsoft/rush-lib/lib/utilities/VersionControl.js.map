{"version":3,"sources":["utilities/VersionControl.ts"],"names":[],"mappings":"AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,6CAA+C;AAE/C;IAAA;IAkCA,CAAC;IAjCe,gCAAiB,GAA/B,UAAgC,YAAqB;QACnD,IAAM,UAAU,GAAW,YAAY,GAAG,YAAY,GAAG,eAAe,CAAC;QACzE,IAAM,MAAM,GAAW,aAAa,CAAC,QAAQ,CAAC,cAAY,UAAU,0BAAuB,CAAC;aACzF,QAAQ,EAAE,CAAC;QACd,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC;YAC3B,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACN,IAAM,cAAc,GAAW,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBAC9C,EAAE,CAAC,CAAC,cAAc,GAAG,CAAC,IAAI,cAAc,GAAG,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;oBACxD,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,cAAc,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;gBAChD,CAAC;YACH,CAAC;YACD,MAAM,CAAC,SAAS,CAAC;QACnB,CAAC,CAAC,CAAC;IACP,CAAC;IAEa,8BAAe,GAA7B,UAA8B,MAAe,EAAE,YAAqB;QAClE,IAAM,UAAU,GAAW,YAAY,GAAG,YAAY,GAAG,eAAe,CAAC;QACzE,IAAM,MAAM,GAAW,aAAa;aACjC,QAAQ,CAAC,cAAY,UAAU,oCAAiC,CAAC;aACjE,QAAQ,EAAE,CAAC;QACd,IAAM,KAAK,GAAW,MAAM,GAAG,IAAI,MAAM,CAAC,MAAI,MAAQ,EAAE,GAAG,CAAC,GAAG,SAAS,CAAC;QACzE,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC;YAC7B,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACN,IAAM,WAAW,GAAW,CAAC,CAAC,IAAI,EAAE,CAAC;gBACrC,EAAE,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBAC7B,MAAM,CAAC,WAAW,CAAC;gBACrB,CAAC;YACH,CAAC;YACD,MAAM,CAAC,SAAS,CAAC;QACnB,CAAC,CAAC,CAAC,MAAM,CAAC,UAAA,CAAC;YACT,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;IACL,CAAC;IACH,qBAAC;AAAD,CAlCA,AAkCC,IAAA","file":"utilities/VersionControl.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as child_process from 'child_process';\r\n\r\nexport default class VersionControl {\r\n  public static getChangedFolders(targetBranch?: string): string[] {\r\n    const branchName: string = targetBranch ? targetBranch : 'origin/master';\r\n    const output: string = child_process.execSync(`git diff ${branchName}... --dirstat=files,0`)\r\n      .toString();\r\n    return output.split('\\n').map(s => {\r\n        if (s) {\r\n          const delimiterIndex: number = s.indexOf('%');\r\n          if (delimiterIndex > 0 && delimiterIndex + 1 < s.length) {\r\n            return s.substring(delimiterIndex + 1).trim();\r\n          }\r\n        }\r\n        return undefined;\r\n      });\r\n  }\r\n\r\n  public static getChangedFiles(prefix?: string, targetBranch?: string): string[] {\r\n    const branchName: string = targetBranch ? targetBranch : 'origin/master';\r\n    const output: string = child_process\r\n      .execSync(`git diff ${branchName}... --name-only --diff-filter=A`)\r\n      .toString();\r\n    const regex: RegExp = prefix ? new RegExp(`^${prefix}`, 'i') : undefined;\r\n    return output.split('\\n').map(s => {\r\n      if (s) {\r\n        const trimmedLine: string = s.trim();\r\n        if (trimmedLine.match(regex)) {\r\n          return trimmedLine;\r\n        }\r\n      }\r\n      return undefined;\r\n    }).filter(s => {\r\n      return s && s.length > 0;\r\n    });\r\n  }\r\n}"],"sourceRoot":"..\\..\\src"}