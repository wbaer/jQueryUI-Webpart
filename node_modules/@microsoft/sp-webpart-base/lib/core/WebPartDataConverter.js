'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var decorators_1 = require("@microsoft/decorators");
var lodash = require("@microsoft/sp-lodash-subset");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var ISerializedServerProcessedData_1 = require("./ISerializedServerProcessedData");
var WebPartDataConverter = WebPartDataConverter_1 = (function () {
    function WebPartDataConverter() {
    }
    WebPartDataConverter.isWebPartHtml = function (htmlString) {
        sp_core_library_1.Validate.isNonemptyString(htmlString, 'htmlString');
        return htmlString.indexOf('<div') === 0 && htmlString.indexOf(WebPartDataConverter_1._webPartDataAttribute) !== -1;
    };
    WebPartDataConverter.convertWebPartDataToHtml = function (webpartData) {
        sp_core_library_1.Validate.isNotNullOrUndefined(webpartData, 'web part data');
        var wpdata = lodash.cloneDeep(webpartData);
        WebPartDataConverter_1._initializeIfNeeded();
        var componentIdDiv = WebPartDataConverter_1._wpComponentIdDiv.cloneNode();
        componentIdDiv.textContent = wpdata.id;
        var htmlPropsDiv = WebPartDataConverter_1._wpHtmlPropsDiv.cloneNode();
        htmlPropsDiv.innerHTML = WebPartDataConverter_1.convertServerProcessedDataToHtml(wpdata.serverProcessedContent);
        wpdata.serverProcessedContent = undefined;
        var wpHtmlDiv = WebPartDataConverter_1._wpDiv.cloneNode();
        wpHtmlDiv.setAttribute(WebPartDataConverter_1._webPartDataAttribute, JSON.stringify(wpdata));
        wpHtmlDiv.appendChild(componentIdDiv);
        wpHtmlDiv.appendChild(htmlPropsDiv);
        var wrapper = document.createElement('div');
        wrapper.appendChild(wpHtmlDiv);
        return wrapper.innerHTML;
    };
    WebPartDataConverter.convertHtmlToWebPartData = function (htmlString) {
        var wpdata;
        var wrapper = document.createElement('div');
        wrapper.innerHTML = htmlString;
        var wpHtmlDiv = wrapper.firstChild;
        if (wpHtmlDiv && wpHtmlDiv.hasAttribute('data-sp-webpart')) {
            var wpHtmlDivWebPartAttributeData = wpHtmlDiv.getAttribute(WebPartDataConverter_1._webPartDataAttribute);
            if (wpHtmlDivWebPartAttributeData) {
                wpdata = JSON.parse(wpHtmlDivWebPartAttributeData);
            }
            if (wpdata) {
                var htmlPropsDiv = wpHtmlDiv.querySelector('[data-sp-htmlproperties]');
                wpdata.serverProcessedContent = WebPartDataConverter_1.convertServerProcessedHtmlToData(htmlPropsDiv.innerHTML);
            }
        }
        return wpdata || undefined;
    };
    WebPartDataConverter.convertServerProcessedDataToHtml = function (serverContent) {
        var result = '';
        if (serverContent) {
            if (serverContent.htmlStrings) {
                for (var propPath in serverContent.htmlStrings) {
                    var value = serverContent.htmlStrings[propPath];
                    result +=
                        WebPartDataConverter_1._getHtmlString(propPath, ISerializedServerProcessedData_1.ServerProcessedDataType.htmlString, value);
                }
            }
            if (serverContent.links) {
                for (var propPath in serverContent.links) {
                    var value = serverContent.links[propPath];
                    result +=
                        WebPartDataConverter_1._getHtmlString(propPath, ISerializedServerProcessedData_1.ServerProcessedDataType.link, value);
                }
            }
            if (serverContent.imageSources) {
                for (var propPath in serverContent.imageSources) {
                    var value = serverContent.imageSources[propPath];
                    result +=
                        WebPartDataConverter_1._getHtmlString(propPath, ISerializedServerProcessedData_1.ServerProcessedDataType.imageSource, value);
                }
            }
        }
        return result;
    };
    WebPartDataConverter.convertServerProcessedHtmlToData = function (htmlString) {
        var serverContent = {
            htmlStrings: {},
            links: {},
            imageSources: {}
        };
        if (!htmlString || htmlString === '') {
            return serverContent;
        }
        var tempNode = document.createElement('DIV');
        tempNode.innerHTML = htmlString;
        var nodes = tempNode.children;
        for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            var key = node.getAttribute('data-sp-prop-name');
            if (key) {
                switch (node.tagName) {
                    case 'DIV':
                        if (serverContent.htmlStrings) {
                            serverContent.htmlStrings[key] = node.innerHTML;
                        }
                        break;
                    case 'LINK':
                    case 'A':
                        var aTagAttribute = node.getAttribute('href');
                        if (aTagAttribute && serverContent.links) {
                            serverContent.links[key] = aTagAttribute;
                        }
                        break;
                    case 'IMG':
                    case 'SPIMG':
                        var srcAttribute = node.getAttribute('src');
                        if (serverContent.imageSources && srcAttribute) {
                            serverContent.imageSources[key] = srcAttribute;
                        }
                        var hrefAttribute = node.getAttribute('href');
                        if (hrefAttribute && serverContent && serverContent.imageSources &&
                            (serverContent.imageSources[key] === undefined || serverContent.imageSources[key] === null)) {
                            serverContent.imageSources[key] = hrefAttribute;
                        }
                        break;
                }
            }
        }
        return serverContent;
    };
    WebPartDataConverter._getHtmlString = function (propName, propType, propValue) {
        var htmlPropString = '';
        if (propName && typeof propValue === 'string' && propValue) {
            var sanitizedValue = WebPartDataConverter_1._normalizeHTML(propValue);
            switch (propType) {
                case ISerializedServerProcessedData_1.ServerProcessedDataType.htmlString:
                    htmlPropString = "<div data-sp-prop-name=\"" + propName + "\">" + sanitizedValue + "</div>";
                    break;
                case ISerializedServerProcessedData_1.ServerProcessedDataType.link:
                    htmlPropString = "<a data-sp-prop-name=\"" + propName + "\" href=\"" + sanitizedValue + "\"></a>";
                    break;
                case ISerializedServerProcessedData_1.ServerProcessedDataType.imageSource:
                    htmlPropString = "<img data-sp-prop-name=\"" + propName + "\" src=\"" + sanitizedValue + "\">";
                    break;
            }
        }
        return (htmlPropString);
    };
    WebPartDataConverter._normalizeHTML = function (htmlString) {
        if (!htmlString || htmlString === '') {
            return htmlString;
        }
        var tempDiv = document.createElement('DIV');
        tempDiv.innerHTML =
            "<div class='child1'></div>" +
                ("<div class='main'>" + htmlString + "</div>") +
                "<div class='child3'></div>";
        var children = tempDiv.children;
        if (!children[0] || children[0].className !== 'child1' ||
            !children[1] || children[1].className !== 'main' ||
            !children[2] || children[2].className !== 'child3') {
            return '';
        }
        var mainDiv = children[1];
        var scriptTags = mainDiv.querySelectorAll('script');
        for (var i = 0; i < scriptTags.length; i++) {
            var scriptTag = scriptTags[0];
            if (scriptTag && scriptTag.parentElement) {
                scriptTag.parentElement.removeChild(scriptTag);
            }
        }
        return mainDiv.innerHTML;
    };
    WebPartDataConverter._initializeIfNeeded = function () {
        if (!WebPartDataConverter_1._wpDiv) {
            WebPartDataConverter_1._wpDiv = document.createElement('div');
            WebPartDataConverter_1._wpDiv.setAttribute('data-sp-webpart', '');
            WebPartDataConverter_1._wpDiv.setAttribute('data-sp-webpartdataversion', '1.0');
            WebPartDataConverter_1._wpComponentIdDiv = document.createElement('div');
            WebPartDataConverter_1._wpComponentIdDiv.setAttribute('data-sp-componentid', '');
            WebPartDataConverter_1._wpHtmlPropsDiv = document.createElement('div');
            WebPartDataConverter_1._wpHtmlPropsDiv.setAttribute('data-sp-htmlproperties', '');
        }
    };
    return WebPartDataConverter;
}());
WebPartDataConverter._webPartDataAttribute = 'data-sp-webpartdata';
WebPartDataConverter = WebPartDataConverter_1 = __decorate([
    decorators_1.sealed
], WebPartDataConverter);
exports.WebPartDataConverter = WebPartDataConverter;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = WebPartDataConverter;
var WebPartDataConverter_1;
