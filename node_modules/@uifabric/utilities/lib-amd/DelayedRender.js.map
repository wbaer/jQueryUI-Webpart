{"version":3,"sources":["DelayedRender.tsx"],"names":[],"mappings":";;;;;;;;;;;;;IAiBA;;;;;;;;;;;;OAYG;IACH;QAAmC,iCAAyD;QAO1F,uBAAY,KAA0B;YAAtC,YACE,kBAAM,KAAK,CAAC,SAIb;YAHC,KAAI,CAAC,KAAK,GAAG;gBACX,UAAU,EAAE,KAAK;aAClB,CAAC;;QACJ,CAAC;QAEM,yCAAiB,GAAxB;YAAA,iBAOC;YANO,IAAA,wBAAK,CAAgB;YAC3B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;gBAC3B,KAAI,CAAC,QAAQ,CAAC;oBACZ,UAAU,EAAE,IAAI;iBACjB,CAAC,CAAC;YACL,CAAC,EAAE,KAAK,CAAC,CAAC;QACZ,CAAC;QAEM,4CAAoB,GAA3B;YACE,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAChC,CAAC;QAEM,8BAAM,GAAb;YACE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC;QACjF,CAAC;QACH,oBAAC;IAAD,CA9BA,AA8BC,CA9BkC,KAAK,CAAC,SAAS;IAClC,0BAAY,GAAG;QAC3B,KAAK,EAAE,CAAC;KACT,CAAC;IAHS,sCAAa","file":"DelayedRender.js","sourcesContent":["import * as React from 'react';\r\n\r\nexport interface IDelayedRenderProps extends React.Props<any> {\r\n  /**\r\n   * Number of milliseconds to delay rendering children.\r\n   * @default 0\r\n   */\r\n  delay?: number;\r\n}\r\n\r\nexport interface IDelayedRenderState {\r\n  /**\r\n   * Whether the component is rendered or not.\r\n   */\r\n  isRendered: boolean;\r\n}\r\n\r\n/**\r\n * Utility component for delaying the render of a child component after a given delay. This component\r\n * requires a single child component; don't pass in many components. Wrap multiple components in a DIV\r\n * if necessary.\r\n *\r\n * @example\r\n * <DelayedRender delay={ 3000 }>\r\n *  <div className='foo-List-loadingSpinner'>\r\n *    <p>I am loading</p>\r\n *    <Spinner />\r\n *  </div>\r\n * </DelayedRender>\r\n */\r\nexport class DelayedRender extends React.Component<IDelayedRenderProps, IDelayedRenderState> {\r\n  public static defaultProps = {\r\n    delay: 0\r\n  };\r\n\r\n  private _timeoutId;\r\n\r\n  constructor(props: IDelayedRenderProps) {\r\n    super(props);\r\n    this.state = {\r\n      isRendered: false\r\n    };\r\n  }\r\n\r\n  public componentDidMount() {\r\n    let { delay } = this.props;\r\n    this._timeoutId = setTimeout(() => {\r\n      this.setState({\r\n        isRendered: true\r\n      });\r\n    }, delay);\r\n  }\r\n\r\n  public componentWillUnmount() {\r\n    clearTimeout(this._timeoutId);\r\n  }\r\n\r\n  public render() {\r\n    return this.state.isRendered ? React.Children.only(this.props.children) : null;\r\n  }\r\n}\r\n"],"sourceRoot":"..\\src"}