"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = require("react");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_webpart_base_1 = require("@microsoft/sp-webpart-base");
var CanvasA11y_1 = require("../../a11y/CanvasA11y");
var WebPartZone = (function (_super) {
    __extends(WebPartZone, _super);
    function WebPartZone(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this._webPartManager = _this.context.store.webPartManager;
        _this.handleConfigureButtonClicked = _this.handleConfigureButtonClicked.bind(_this);
        _this.state = {
            displayMode: _this.props.displayMode
        };
        return _this;
    }
    WebPartZone.prototype.componentDidMount = function () {
        var _this = this;
        var context = {
            domElement: this._webPartDiv,
            instanceId: this.props.id,
            manifest: this.props.webPartManifest,
            displayMode: this.props.displayMode,
            webPartData: this.props.webPartData,
            addedFromPersistedData: this.props.addedFromPersistedData,
            shouldAddWebpartsToEupl: false
        };
        var webPartTelemetryData = {
            alias: context.manifest && context.manifest.alias,
            manifestId: context.manifest && context.manifest.id
        };
        var store = this.context.store;
        var qos = store.createQosScope('LoadWebPart');
        this._loadWebPartPromise = this._webPartManager.loadWebPart(context).then(function () {
            try {
                if (_this.state.displayMode === sp_core_library_1.DisplayMode.Edit && _this.props.id === store.selectedControlId) {
                    store.webPartManager.setPropertyPaneState(_this.props.id);
                }
                store.canvasRenderPerformance.webPartRendered(context);
                _this._isLoaded = true;
                qos.writeSuccess(webPartTelemetryData);
            }
            catch (err) {
                qos.writeUnexpectedFailure('Exception', err, webPartTelemetryData);
            }
        }, function (error) {
            if (window['_isTransitioning']) {
                qos.writeExpectedFailure('Rejected', error, webPartTelemetryData);
                location.reload(true);
            }
            else {
                qos.writeUnexpectedFailure('Rejected', error, webPartTelemetryData);
            }
        });
    };
    WebPartZone.prototype.shouldComponentUpdate = function (newProps, newState) {
        return false;
    };
    WebPartZone.prototype.render = function () {
        var _this = this;
        return (React.createElement("div", { ref: function (htmlElement) { return _this._webPartDiv = htmlElement; }, style: { width: '100%' } }));
    };
    Object.defineProperty(WebPartZone.prototype, "instanceId", {
        get: function () {
            return this.props.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WebPartZone.prototype, "isFocusable", {
        get: function () {
            return !!CanvasA11y_1.getFirstFocusableChild(this._webPartDiv);
        },
        enumerable: true,
        configurable: true
    });
    WebPartZone.prototype.focus = function () {
        if (!this.context.store.a11yManager.navigateInside(this._webPartDiv)) {
            this.context.store.a11yManager.navigateOutOf(this._webPartDiv);
        }
    };
    WebPartZone.prototype.handleConfigureButtonClicked = function (shouldToggle) {
        if (this._isLoaded) {
            this._webPartManager.setPropertyPaneState(this.props.id, shouldToggle ? sp_webpart_base_1.PropertyPaneState.Toggle : sp_webpart_base_1.PropertyPaneState.Open);
        }
    };
    WebPartZone.prototype.handleDeleteButtonClicked = function () {
        var _this = this;
        this._loadWebPartPromise.then(function () { return _this._webPartManager.onWebPartDelete(_this.props.id); });
    };
    WebPartZone.prototype.serialize = function () {
        var webPartData = this._isLoaded ? this._webPartManager.serialize(this.props.id).get(this.props.id) : this.props.webPartData;
        var serialization = JSON.parse(JSON.stringify(this.props));
        serialization.webPartData = webPartData;
        return serialization;
    };
    WebPartZone.prototype.setDisplayMode = function (newDisplayMode) {
        var _this = this;
        this.setState({
            displayMode: newDisplayMode
        });
        var qos = this.context.store.createQosScope("SetWebPartDisplayModeTo" + newDisplayMode);
        this._loadWebPartPromise.then(function () {
            _this._webPartManager.setDisplayMode(newDisplayMode, _this.props.id);
            qos.writeSuccess();
        }, function (error) { return qos.writeUnexpectedFailure('Rejected', error, { 'id': _this.props.webPartId }); });
    };
    return WebPartZone;
}(React.Component));
WebPartZone.contextTypes = {
    store: React.PropTypes.object.isRequired
};
WebPartZone.webPartManagerInitialized = false;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = WebPartZone;
