/// <reference types="mocha" />
"use strict";
var chai_1 = require('chai');
var StreamCollator_1 = require('../StreamCollator');
var PersistentStream_1 = require('../PersistentStream');
var collator;
var stdout, taskA, taskB;
describe('StreamCollator tests', function () {
    beforeEach(function () {
        collator = new StreamCollator_1.default();
        stdout = new PersistentStream_1.default();
        taskA = new PersistentStream_1.default();
        taskB = new PersistentStream_1.default();
        taskA.on('data', function () { });
        taskB.on('data', function () { });
        collator.pipe(stdout);
        collator.register(taskA);
        collator.register(taskB);
    });
    it('should write text to stdout', function (done) {
        var text = 'Hello World';
        testWrite(taskA, text, stdout, 'data', function () {
            chai_1.assert.equal(stdout.readAll(), text);
            done();
        });
    });
    it('should not write non-active tasks to stdout', function (done) {
        testWrite(taskA, '1', collator, 'data', function () {
            chai_1.assert.equal(stdout.readAll(), '1');
            taskB.write('2');
            testWrite(taskA, '3', stdout, 'data', function () {
                chai_1.assert.equal(stdout.readAll(), '13');
                taskA.end();
                chai_1.assert.equal(stdout.readAll(), '13');
                testEnd(taskB, taskB, 'end', function () {
                    chai_1.assert.equal(stdout.readAll(), '132');
                    chai_1.assert.equal(taskA.readAll(), '13');
                    chai_1.assert.equal(taskB.readAll(), '2');
                    done();
                });
            });
        });
    });
    it('should close automatically when all registered streams close', function (done) {
        testWrite(taskA, '1', stdout, 'data', function () {
            chai_1.assert.equal(stdout.readAll(), '1');
            taskB.write('2');
            testWrite(taskA, '3', stdout, 'data', function () {
                chai_1.assert.equal(stdout.readAll(), '13');
                taskA.end();
                chai_1.assert.equal(stdout.readAll(), '13');
                testEnd(taskB, collator, 'end', function () {
                    chai_1.assert.equal(stdout.readAll(), '132');
                    chai_1.assert.equal(taskA.readAll(), '13');
                    chai_1.assert.equal(taskB.readAll(), '2');
                    done();
                });
            });
        });
    });
    it('should update the active task once the active task is closed', function (done) {
        testWrite(taskA, '1', collator, 'data', function () {
            chai_1.assert.equal(stdout.readAll(), '1');
            taskA.end();
            chai_1.assert.equal(stdout.readAll(), '1');
            testWrite(taskB, '2', stdout, 'data', function () {
                chai_1.assert.equal(stdout.readAll(), '12');
                testEnd(taskB, stdout, 'data', function () {
                    chai_1.assert.equal(stdout.readAll(), '12');
                    chai_1.assert.equal(taskA.readAll(), '1');
                    chai_1.assert.equal(taskB.readAll(), '2');
                    done();
                });
            });
        });
    });
    it('should write completed tasks after the active task is completed', function (done) {
        testWrite(taskA, '1', collator, 'data', function () {
            chai_1.assert.equal(stdout.readAll(), '1');
            taskB.write('2');
            chai_1.assert.equal(stdout.readAll(), '1');
            testEnd(taskB, taskB, 'end', function () {
                chai_1.assert.equal(stdout.readAll(), '1');
                testEnd(taskA, taskA, 'end', function () {
                    testActionOnStream(function () { }, stdout, 'data', function () {
                        chai_1.assert.equal(stdout.readAll(), '12');
                        chai_1.assert.equal(taskA.readAll(), '1');
                        chai_1.assert.equal(taskB.readAll(), '2');
                        done();
                    });
                });
            });
        });
    });
    function testEnd(stream1, stream2, event, cb) {
        testActionOnStream(function () { stream1.end(); }, stream2, event, cb);
    }
    function testWrite(stream1, text, stream2, event, cb) {
        testActionOnStream(function () { stream1.write(text); }, stream2, event, cb);
    }
    function testActionOnStream(action, stream, event, cb) {
        var wrapper = function () {
            stream.removeListener(event, wrapper);
            cb();
        };
        stream.on(event, wrapper);
        action();
    }
});

//# sourceMappingURL=StreamModerator.test.js.map
