"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var React = require("react");
var ReactDOM = require("react-dom");
var office_ui_fabric_react_1 = require("office-ui-fabric-react");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var CanvasControlFactory_1 = require("../canvasControl/CanvasControlFactory");
var CanvasStore_1 = require("./CanvasStore");
var ControlZone_1 = require("../controlZone/ControlZone");
var CanvasA11y_1 = require("../../a11y/CanvasA11y");
var CanvasToolboxHint_1 = require("../canvasToolboxHint/CanvasToolboxHint");
var ConfirmationDialog_1 = require("../confirmationDialog/ConfirmationDialog");
var CanvasLayout_1 = require("../canvasLayout/CanvasLayout");
var CreateEmptyZoneLayout_1 = require("./CreateEmptyZoneLayout");
var CanvasZone_1 = require("../canvasZone/CanvasZone");
var Toolbar_1 = require("../../toolbar/toolbar/Toolbar");
var Toolbox_1 = require("../../toolbox/toolbox/Toolbox");
var CanvasStrings_resx_1 = require("../../loc/CanvasStrings.resx");
var CanvasComponent = (function (_super) {
    __extends(CanvasComponent, _super);
    function CanvasComponent(props, context) {
        return _super.call(this, props, context) || this;
    }
    CanvasComponent.prototype.getChildContext = function () {
        return {
            store: this.props.store
        };
    };
    CanvasComponent.prototype.componentDidMount = function () {
        var canvasElement = ReactDOM.findDOMNode(this);
        this.props.store.canvasElement = canvasElement;
        this.props.store.a11yManager = new CanvasA11y_1.CanvasA11yManager(canvasElement);
        var canvasContainer = canvasElement;
        var hasScrollbar = false;
        do {
            canvasContainer = canvasContainer.parentElement;
            if (canvasContainer) {
                var overflowY = window.getComputedStyle(canvasContainer)['overflow-y'];
                hasScrollbar = (overflowY === 'scroll' || overflowY === 'auto');
            }
        } while (!hasScrollbar && canvasContainer && canvasContainer.tagName !== 'BODY');
        this.props.store.scrollableParent = canvasContainer;
    };
    CanvasComponent.prototype.render = function () {
        return CanvasStore_1.default.isLayoutSupported ? this._renderWithLayout() : this._renderWithoutLayout();
    };
    CanvasComponent.prototype._renderWithLayout = function () {
        var store = this.props.store;
        var displayMode = store.displayMode;
        var toolboxProps = store.toolboxProps;
        var deletedControlLayout = store.deletedControlLayout;
        var canvasLayout = store.canvasLayout;
        var selectedLayout = canvasLayout.fetchControlPositionById(store.selectedControlId);
        var shouldCenterAlign = store.shouldCenterAlign;
        var zoneComponents = [];
        var zones = canvasLayout.zones;
        var numZones = zones.length;
        zones.forEach(function (curZone, curIdx) {
            zoneComponents.push(React.createElement(CanvasZone_1.default, { fullWidth: curZone.sections[0] && curZone.sections[0].factor === 0, selectedPosition: selectedLayout, key: curZone.index, zone: curZone, shouldCenterAlign: shouldCenterAlign }));
            var nextZoneIndex = (curIdx + 1 === numZones) ?
                curZone.index + 1 :
                zones[curIdx + 1].index;
            var nextZoneLayout = CreateEmptyZoneLayout_1.CreateEmptyZoneLayout(nextZoneIndex);
            zoneComponents.push(React.createElement(CanvasToolboxHint_1.default, { ariaLabel: CanvasStrings_resx_1.default.ToolboxHintTitle, isVisible: true, shouldFocus: deletedControlLayout.zoneIndex === nextZoneIndex, row: undefined, layout: nextZoneLayout, key: "hint." + nextZoneLayout.zoneIndex, shouldCenterAlign: shouldCenterAlign }));
        });
        store.deletedControlLayout = CanvasLayout_1.default.undefinedControlPosition;
        var className = office_ui_fabric_react_1.css('Canvas', 'Canvas--withLayout', 'ms-Grid', {
            'Canvas--edit': displayMode === sp_core_library_1.DisplayMode.Edit
        });
        var firstZoneIdx = zones.length > 0 ?
            zones[0].index :
            CanvasLayout_1.default.firstLayoutIndex;
        var firstZoneLayout = CreateEmptyZoneLayout_1.CreateEmptyZoneLayout(firstZoneIdx);
        var toolBoxHintHasFocus = deletedControlLayout.zoneIndex === firstZoneLayout.zoneIndex;
        return (React.createElement("div", { className: 'CanvasComponent' },
            displayMode === sp_core_library_1.DisplayMode.Edit ? React.createElement("div", { className: 'CanvasSectionBarBg' }) : undefined,
            React.createElement("div", { className: className, role: displayMode === sp_core_library_1.DisplayMode.Edit ? 'application' : undefined },
                React.createElement(CanvasToolboxHint_1.default, { ariaLabel: CanvasStrings_resx_1.default.ToolboxHintTitle, isVisible: true, shouldFocus: toolBoxHintHasFocus, row: undefined, layout: firstZoneLayout, shouldCenterAlign: shouldCenterAlign }),
                zoneComponents,
                React.createElement(Toolbox_1.default, __assign({}, toolboxProps)),
                React.createElement(ConfirmationDialog_1.default, __assign({}, store.confirmationDialogProps)))));
    };
    CanvasComponent.prototype._renderWithoutLayout = function () {
        var store = this.props.store;
        var controlsProps = store.controlsProps;
        var deletedRow = store.deletedRow;
        var displayMode = store.displayMode;
        var toolboxProps = store.toolboxProps;
        var shouldCenterAlign = store.shouldCenterAlign;
        var rows = [];
        var row = 0;
        if (controlsProps) {
            for (var _i = 0, controlsProps_1 = controlsProps; _i < controlsProps_1.length; _i++) {
                var control = controlsProps_1[_i];
                var newControl = CanvasControlFactory_1.default.CreateCanvasControl(control, store);
                if (newControl) {
                    var isSelected = store.selectedControlId === control.id;
                    if (isSelected && row) {
                        rows.pop();
                        rows.push(React.createElement(CanvasToolboxHint_1.default, { ariaLabel: CanvasStrings_resx_1.default.ToolboxHintTitle, isVisible: true, key: row, row: row, shouldCenterAlign: shouldCenterAlign }));
                    }
                    rows.push(React.createElement(ControlZone_1.default, { displayMode: displayMode, id: control.id, isSelected: isSelected, key: control.id, row: row },
                        newControl,
                        React.createElement(Toolbar_1.default, { controlType: control.controlType, displayMode: displayMode, id: control.id, row: row, onConfigureButtonClick: store.handleConfigureButtonClicked, onDeleteButtonClick: store.handleDeleteControlButtonClicked })));
                    ++row;
                    rows.push(React.createElement(CanvasToolboxHint_1.default, { ariaLabel: CanvasStrings_resx_1.default.ToolboxHintTitle, isVisible: toolboxProps.row === row, shouldFocus: deletedRow === row, key: row, row: row, shouldCenterAlign: shouldCenterAlign }));
                }
            }
        }
        store.deletedRow = undefined;
        var className = office_ui_fabric_react_1.css('Canvas', {
            'Canvas--edit': displayMode === sp_core_library_1.DisplayMode.Edit
        });
        return (React.createElement("div", { className: className, role: displayMode === sp_core_library_1.DisplayMode.Edit ? 'application' : undefined },
            React.createElement(CanvasToolboxHint_1.default, { ariaLabel: CanvasStrings_resx_1.default.ToolboxHintTitle, shouldFocus: deletedRow === 0, isVisible: rows[0] && rows[0].props.isSelected || toolboxProps.row === 0, row: 0, shouldCenterAlign: shouldCenterAlign }),
            rows,
            React.createElement(Toolbox_1.default, __assign({}, toolboxProps)),
            React.createElement(ConfirmationDialog_1.default, __assign({}, store.confirmationDialogProps))));
    };
    return CanvasComponent;
}(React.Component));
CanvasComponent.childContextTypes = {
    store: React.PropTypes.object.isRequired
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = CanvasComponent;
