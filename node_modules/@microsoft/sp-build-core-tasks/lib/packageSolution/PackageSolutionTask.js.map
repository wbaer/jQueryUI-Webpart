{"version":3,"sources":["packageSolution/PackageSolutionTask.ts"],"names":[],"mappings":"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","file":"packageSolution/PackageSolutionTask.js","sourcesContent":["'use strict';\r\n\r\nimport * as gulp from 'gulp';\r\nimport * as gutil from 'gulp-util';\r\nimport * as path from 'path';\r\nimport * as through2 from 'through2';\r\n\r\nimport { GulpTask, IBuildConfig } from '@microsoft/gulp-core-build';\r\nimport ISolution from './packageSolution/models/packageDefinition/ISolution';\r\nimport createPackage from './packageSolution/createPackage';\r\nimport { IClientSideComponentManifest } from '@microsoft/sp-module-interfaces';\r\nimport ManifestValidator,\r\n       { IManifestValidatorResult } from '@microsoft/sp-module-interfaces/lib/manifestSchemaValidator';\r\n\r\nexport interface IPackageSolutionTaskConfig {\r\n  paths?: {\r\n    /**\r\n     * The packaging root folder. Defaults to './sharepoint'. All other paths are relative to this folder.\r\n     */\r\n    packageDir?: string;\r\n\r\n    /**\r\n     * The folder to write the raw package to disk for debugging. Defaults to 'solution/debug'\r\n     */\r\n    debugDir?: string;\r\n\r\n    /**\r\n     * The name of the sppkg to create (including extension) Defaults to 'ClientSolution.sppkg'\r\n     */\r\n    zippedPackage?: string;\r\n\r\n    /**\r\n     * The folder containing the custom feature xml to import into the package. Defaults to 'feature_xml'.\r\n     * Note that all files in this folder will be included in the SPPKG, however, you must create a .rels\r\n     * file for your custom feature for it to be included in the package manifest.\r\n     */\r\n    featureXmlDir?: string;\r\n\r\n    /**\r\n     * The glob to match against to find manifest files. Looks in dist/ when running in normal, but deploy/ for\r\n     *  production.\r\n     */\r\n    manifestsMatch?: string;\r\n\r\n    /**\r\n     * The path to the folder where manifests are stored. Defaults to buildConfig.distFolder\r\n     */\r\n    manifestDir?: string;\r\n\r\n    /**\r\n     * The directory containing Sharepoint assets (such as feature elements, element manifests, and upgrade actions),\r\n     * which will be automatically included in the sharepoint package. Defaults to 'assets'.\r\n     */\r\n    sharepointAssetDir?: string;\r\n  };\r\n\r\n  /**\r\n   * The definition of this solution's package, features, and components\r\n   */\r\n  solution?: ISolution;\r\n}\r\n\r\nexport class PackageSolutionTask extends GulpTask<IPackageSolutionTaskConfig> {\r\n  public name: string = 'package-solution';\r\n\r\n  public taskConfig: IPackageSolutionTaskConfig = {\r\n    paths: {\r\n      packageDir: 'sharepoint',\r\n      debugDir: path.join('solution', 'debug'),\r\n      zippedPackage: path.join('solution', 'ClientSolution.sppkg'),\r\n      featureXmlDir: 'feature_xml',\r\n      sharepointAssetDir: 'assets',\r\n      manifestsMatch: '*.json'\r\n    },\r\n    solution: {\r\n      'name': 'A Sample Solution',\r\n      'id': '00000000-0000-0000-0000-000000000000'\r\n    }\r\n  };\r\n\r\n  private _hasPrependedPaths: boolean = false;\r\n\r\n  public loadSchema(): Object {\r\n    return require('./package-solution.schema.json');\r\n  }\r\n\r\n  public executeTask(gulp: gulp.Gulp, completeCallback: () => void): NodeJS.ReadWriteStream {\r\n    if (!this.taskConfig.paths.manifestDir) {\r\n      this.taskConfig.paths.manifestDir = this.buildConfig.distFolder;\r\n    }\r\n\r\n    this._prependBaseToConfigPaths();\r\n\r\n    const manifestMap: Map<string, IClientSideComponentManifest> = new Map<string, IClientSideComponentManifest>();\r\n    let foundAnyManifests: boolean = false;\r\n    return gulp.src(this.taskConfig.paths.manifestsMatch)\r\n        .pipe(through2.obj((file: gutil.File, enc: string, callback: () => void) => {\r\n          foundAnyManifests = true;\r\n          const manifest: IClientSideComponentManifest =\r\n            JSON.parse((file.contents as Buffer).toString(enc));\r\n\r\n          const validationResult: IManifestValidatorResult = ManifestValidator.validateManifest(manifest);\r\n          if (!validationResult.result) {\r\n            this.log(`Ignoring manifest due to validation error: (${file.path}) use '--verbose' for more information`);\r\n            this.logVerbose(ManifestValidator.getFormattedErrorMessage(validationResult.errors));\r\n            callback();\r\n            return;\r\n          }\r\n\r\n          this.log(`Found manifest: ${file.path}`);\r\n          manifestMap.set(manifest.id, manifest);\r\n          callback();\r\n        },\r\n        (callback: (err?: Error | string | void) => void) => {\r\n          if (!manifestMap.size) {\r\n            if (foundAnyManifests) {\r\n              callback(new Error(`Some manifests were found in '${this.taskConfig.paths.manifestsMatch}' ` +\r\n                       ', but were not valid. Ensure paths.manifestsMatch is correct'));\r\n            } else {\r\n              callback(new Error(`No manifests were found in '${this.taskConfig.paths.manifestsMatch}'. ` +\r\n                       'Ensure a build has completed successfully and that paths.manifestsMatch is correct'));\r\n            }\r\n          }\r\n          createPackage(this.taskConfig, manifestMap).then(callback, callback);\r\n        }));\r\n  }\r\n\r\n  public getCleanMatch(buildConfig: IBuildConfig): string[] {\r\n    this.buildConfig = buildConfig;\r\n\r\n    if (!this.taskConfig.paths.manifestDir) {\r\n      this.taskConfig.paths.manifestDir = this.buildConfig.distFolder;\r\n    }\r\n\r\n    this._prependBaseToConfigPaths();\r\n    return [\r\n      this.taskConfig.paths.debugDir,\r\n      this.taskConfig.paths.zippedPackage\r\n    ];\r\n  }\r\n\r\n  private _prependBaseToConfigPaths(): void {\r\n    if (!this._hasPrependedPaths) {\r\n      this.taskConfig.paths.manifestsMatch =\r\n        path.join(this.taskConfig.paths.manifestDir, this.taskConfig.paths.manifestsMatch);\r\n      this.taskConfig.paths.debugDir =\r\n        path.join(this.taskConfig.paths.packageDir, this.taskConfig.paths.debugDir);\r\n      this.taskConfig.paths.zippedPackage =\r\n        path.join(this.taskConfig.paths.packageDir, this.taskConfig.paths.zippedPackage);\r\n      this.taskConfig.paths.featureXmlDir =\r\n        path.join(this.taskConfig.paths.packageDir, this.taskConfig.paths.featureXmlDir);\r\n      this.taskConfig.paths.sharepointAssetDir =\r\n        path.join(this.taskConfig.paths.packageDir, this.taskConfig.paths.sharepointAssetDir);\r\n      this._hasPrependedPaths = true;\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}