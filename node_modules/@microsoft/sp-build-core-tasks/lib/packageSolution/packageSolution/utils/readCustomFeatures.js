/**
 * @file readCustomFeatures.ts
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * Reads custom feature XML from folder specified by config. This function looks for all `.rels` files in
 * the `/_rels` folder, assumes that a Feature.xml file of the same name exists in the root folder. It
 * returns an object with a list of IXml files to include in the package, as well as the paths to all the
 * feature.xml files, which is later referenced by the `AppManifest.xml.rels` file, thereby including the
 * custom feature in the package.
 */
"use strict";
var path = require("path");
var constants_1 = require("../config/constants");
var getFiles_1 = require("./getFiles");
/**
 * Reads custom feature XML from folder specified by config. This function looks for all `.rels` files in
 * the `/_rels` folder, assumes that a Feature.xml file of the same name exists in the root folder. It
 * returns an object with a list of IXml files to include in the package, as well as the paths to all the
 * feature.xml files, which is later referenced by the `AppManifest.xml.rels` file, thereby including the
 * custom feature in the package.
 * @todo we allow multiple featureXML globs to be specified
 */
function readCustomFeatures(options) {
    return getCustomFeatureXmlFilenames(options.paths.featureXmlDir)
        .then(function (filenames) {
        return getCustomFiles(options.paths.featureXmlDir)
            .then(function (files) {
            return {
                files: files,
                customFeatureFilepath: filenames
            };
        });
    });
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = readCustomFeatures;
/** Reads the list of feature xml filenames from a specified rels folder */
function getCustomFeatureXmlFilenames(featureXmlDir) {
    return getFiles_1.getRelativeFilePaths(path.join(featureXmlDir, constants_1.default.RelsFolder), "*" + constants_1.default.RelsXml, 'Found custom feature file: ')
        .then(function (filenames) {
        return filenames.map(function (filename) { return filename.replace(constants_1.default.RelsExtensionRegex, ''); });
    });
}
/** Loads a directory of files into IXml objects */
function getCustomFiles(featureXmlDir) {
    return getFiles_1.getFiles(featureXmlDir, path.join('**', '*.*'), 'Found custom file: ');
}

//# sourceMappingURL=readCustomFeatures.js.map
