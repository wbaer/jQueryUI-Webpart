// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ErrorDetector_1 = require("./ErrorDetector");
/**
 * Encapsulates information about an error
 */
var TaskError = (function () {
    function TaskError(type, message) {
        this._type = type;
        this._message = message;
    }
    TaskError.prototype.toString = function (mode) {
        var errorMessage = "[" + this._type + "] '" + this._message + "'";
        return this._appendPrefix(errorMessage, mode);
    };
    TaskError.prototype._appendPrefix = function (errorMessage, mode) {
        if (mode === ErrorDetector_1.ErrorDetectionMode.VisualStudioOnline) {
            return "##vso[task.logissue type=error;]" + errorMessage;
        }
        return errorMessage;
    };
    return TaskError;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = TaskError;
/**
 * TestTaskError extends TaskError
 */
var BuildTaskError = (function (_super) {
    __extends(BuildTaskError, _super);
    function BuildTaskError(type, message, file, line, offset) {
        var _this = _super.call(this, type, message) || this;
        _this._file = file;
        _this._line = line;
        _this._offset = offset;
        return _this;
    }
    BuildTaskError.prototype.toString = function (mode) {
        // Example: "C:\Project\Blah.ts(123,1): [tslint] error no-any: 'any' is not allowed"
        var errorMessage = this._file + "(" + this._line + "," + this._offset + "): [" + this._type + "] " + this._message;
        return this._appendPrefix(errorMessage, mode);
    };
    return BuildTaskError;
}(TaskError));
exports.BuildTaskError = BuildTaskError;

//# sourceMappingURL=TaskError.js.map
