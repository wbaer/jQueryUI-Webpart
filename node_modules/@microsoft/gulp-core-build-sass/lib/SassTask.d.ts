/// <reference types="es6-promise" />
/// <reference types="node" />
import { GulpTask } from '@microsoft/gulp-core-build';
import gulp = require('gulp');
export interface ISassTaskConfig {
    /** An optional parameter for text to include in the generated typescript file. */
    preamble?: string;
    /** An optional parameter for text to include at the end of the generated typescript file. */
    postamble?: string;
    /** An array of glob patterns for locating SASS files. */
    sassMatch?: string[];
    /**
     * If this option is specified, ALL files will be treated as a module.scss and will
     * automatically generate a corresponding TypeScript file. All classes will be
     * appended with a hash to help ensure uniqueness on a page. This file can be
     * imported directly, and will contain an object describing the mangled class names.
     */
    useCSSModules?: boolean;
    /**
     * If true, we will generate a CSS in the lib folder. If false, the CSS is directly embedded
     * into the TypeScript file
     */
    dropCssFiles?: boolean;
    /**
     * If files are matched by sassMatch which do not end in .module.scss, log a warning.
     */
    warnOnNonCSSModules?: boolean;
}
export declare class SassTask extends GulpTask<ISassTaskConfig> {
    name: string;
    taskConfig: ISassTaskConfig;
    cleanMatch: string[];
    loadSchema(): Object;
    executeTask(gulp: gulp.Gulp, completeCallback?: (result?: string) => void): Promise<{}> | NodeJS.ReadWriteStream | void;
    private _processFiles(gulp, srcPattern, completeCallback, postCSSPlugins, checkFile?);
    private _generateModuleStub(cssFileName, json);
    private generateScopedName(name, fileName, css);
}
