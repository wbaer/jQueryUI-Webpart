"use strict";
var CanvasZonePropertyPaneControl_1 = require("../canvasLayout/CanvasZonePropertyPaneControl");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var CanvasZonePart_1 = require("./CanvasZonePart");
var CanvasLayout = (function () {
    function CanvasLayout(webPartManager, renderCallBack) {
        this._webPartManager = webPartManager;
        this._render = renderCallBack;
        this._initialize();
    }
    CanvasLayout._generateNewLayoutIndex = function (sortedChildren, currentIdx) {
        if (!sortedChildren) {
            return undefined;
        }
        var sortedIndexes = sortedChildren.map(function (child) {
            return child.index;
        }).filter(function (item) {
            return item < currentIdx;
        });
        var newIdx = currentIdx;
        if (sortedIndexes.length > 0) {
            newIdx += sortedIndexes[sortedIndexes.length - 1];
        }
        return newIdx / 2;
    };
    Object.defineProperty(CanvasLayout.prototype, "zones", {
        get: function () {
            var canvasZones = [];
            this._zonePartMap.forEach(function (zone) {
                canvasZones.push(zone);
            });
            return canvasZones.sort(function (zone1, zone2) {
                return zone1.index - zone2.index;
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CanvasLayout.prototype, "controlsState", {
        get: function () {
            return this._activeControlsState;
        },
        enumerable: true,
        configurable: true
    });
    CanvasLayout.prototype.fetchControlComponentById = function (controlId) {
        var componentValue = this._controlComponentMap.get(controlId);
        return componentValue && componentValue.component;
    };
    CanvasLayout.prototype.fetchControlPositionById = function (controlId) {
        if (!controlId) {
            return CanvasLayout.undefinedControlPosition;
        }
        var componentValue = this._controlComponentMap.get(controlId);
        if (componentValue) {
            return componentValue.position;
        }
        return CanvasLayout.undefinedControlPosition;
    };
    CanvasLayout.prototype.fetchZone = function (index) {
        return this._zonePartMap.get(index);
    };
    CanvasLayout.prototype.addControlComponent = function (controlId, controlComponent) {
        var componentValue = this._controlComponentMap.get(controlId);
        sp_core_library_1.Validate.isNotNullOrUndefined(componentValue, 'componentValue');
        componentValue.component = controlComponent;
        this._controlComponentMap.set(controlId, componentValue);
    };
    CanvasLayout.prototype.addControl = function (canvasControl) {
        if (!canvasControl ||
            !canvasControl.position ||
            canvasControl.position.zoneIndex === undefined) {
            return undefined;
        }
        var curZoneIndex = canvasControl.position.zoneIndex;
        var controlId;
        var zone = this._zonePartMap.get(curZoneIndex);
        if (!zone) {
            var newCanvasZone = new CanvasZonePart_1.default(curZoneIndex, this._controlComponentMap, this._webPartManager);
            if (canvasControl.position.sectionIndex === undefined) {
                canvasControl.position.sectionIndex = CanvasLayout.firstLayoutIndex;
            }
            controlId = newCanvasZone.addControl(canvasControl);
            if (controlId) {
                this._zonePartMap.set(curZoneIndex, newCanvasZone);
            }
            this._webPartManager.setPropertyPaneControl(newCanvasZone.index.toString(), new CanvasZonePropertyPaneControl_1.default(newCanvasZone, this._render));
        }
        else {
            if (canvasControl.position.sectionIndex !== undefined) {
                controlId = zone.addControl(canvasControl);
            }
            else {
                canvasControl.position.zoneIndex = CanvasLayout._generateNewLayoutIndex(this.zones, curZoneIndex);
                if (canvasControl.position.zoneIndex === undefined) {
                    return undefined;
                }
                var newSecondaryZone = new CanvasZonePart_1.default(canvasControl.position.zoneIndex, this._controlComponentMap, this._webPartManager);
                canvasControl.position.sectionIndex = CanvasLayout.firstLayoutIndex;
                controlId = newSecondaryZone.addControl(canvasControl);
                if (controlId) {
                    this._zonePartMap.set(canvasControl.position.zoneIndex, newSecondaryZone);
                }
                this._webPartManager.setPropertyPaneControl(newSecondaryZone.index.toString(), new CanvasZonePropertyPaneControl_1.default(newSecondaryZone, this._render));
            }
        }
        if (controlId) {
            var componentValue = {
                component: undefined,
                position: canvasControl.position
            };
            this._controlComponentMap.set(controlId, componentValue);
        }
        return controlId;
    };
    CanvasLayout.prototype.removeControl = function (controlPosition) {
        if (!controlPosition) {
            return undefined;
        }
        var zone = this._zonePartMap.get(controlPosition.zoneIndex);
        if (!zone) {
            return undefined;
        }
        var controlId = zone.removeControl(controlPosition);
        if (controlId) {
            if (zone.isEmpty()) {
                zone.dispose();
                this._zonePartMap.delete(controlPosition.zoneIndex);
            }
            this._controlComponentMap.delete(controlId);
        }
        return controlId;
    };
    CanvasLayout.prototype.removeZone = function (index) {
        var zone = this._zonePartMap.get(index);
        if (zone) {
            var controls = zone.fetchAllControls();
            var numControls = controls.length;
            for (var i = 0; i < numControls; ++i) {
                this._controlComponentMap.delete(controls[i].id);
            }
            zone.dispose();
            this._zonePartMap.delete(index);
        }
    };
    CanvasLayout.prototype.fetchControl = function (controlPosition) {
        if (!controlPosition) {
            return undefined;
        }
        var zone = this._zonePartMap.get(controlPosition.zoneIndex);
        if (!zone) {
            return undefined;
        }
        return zone.fetchControl(controlPosition);
    };
    CanvasLayout.prototype.fetchAllControls = function () {
        var canvasControls = [];
        this.zones.forEach(function (zone) {
            var controls = zone.fetchAllControls();
            canvasControls = canvasControls.concat(controls);
        });
        return canvasControls;
    };
    CanvasLayout.prototype.isEmpty = function () {
        return this.fetchAllControls().length === 0;
    };
    CanvasLayout.prototype.dispose = function () {
        this._zonePartMap.clear();
        this._controlComponentMap.clear();
        this._resetActiveControlState();
    };
    CanvasLayout.prototype._initialize = function () {
        this._zonePartMap = new Map();
        this._controlComponentMap = new Map();
        this._resetActiveControlState();
    };
    CanvasLayout.prototype._resetActiveControlState = function () {
        this._activeControlsState = {
            hoveredControlId: undefined,
            selectedControlId: undefined,
            deletedControlLayout: CanvasLayout.undefinedControlPosition,
            deleteCandidateControlLayout: CanvasLayout.undefinedControlPosition
        };
    };
    return CanvasLayout;
}());
CanvasLayout.firstLayoutIndex = 1;
CanvasLayout.undefinedControlPosition = {
    zoneIndex: undefined,
    sectionIndex: undefined,
    controlIndex: undefined
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = CanvasLayout;
