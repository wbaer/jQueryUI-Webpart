{"version":3,"sources":["components/Button/BaseButton.tsx"],"names":[],"mappings":"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","file":"components/Button/BaseButton.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  BaseComponent,\r\n  css,\r\n  assign,\r\n  getId,\r\n  getNativeProps,\r\n  buttonProperties,\r\n  anchorProperties\r\n} from '../../Utilities';\r\nimport { IButtonProps, IButton } from './Button.Props';\r\n\r\nexport class BaseButton extends BaseComponent<IButtonProps, {}> implements IButton {\r\n\r\n  /**\r\n   * _baseClassName can be overridden by subclasses to provide a unique class prefix to the class name used for\r\n   * sub parts of the render template.\r\n   */\r\n  protected _baseClassName = 'ms-Button';\r\n\r\n  /**\r\n   * _variantClassName can be overridden by subclasses to add an extra default class name to the root element.\r\n   */\r\n  protected _variantClassName = '';\r\n\r\n  private _buttonElement: HTMLButtonElement;\r\n  private _labelId: string;\r\n  private _descriptionId: string;\r\n  private _ariaDescriptionId: string;\r\n\r\n  constructor(props: IButtonProps, rootClassName: string, deprecationMap: any) {\r\n    super(props, { 'rootProps': null });\r\n    this._labelId = getId();\r\n    this._descriptionId = getId();\r\n    this._ariaDescriptionId = getId();\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const { className, description, ariaLabel, ariaDescription, href, disabled } = this.props;\r\n    const { _ariaDescriptionId, _labelId, _descriptionId } = this;\r\n    const renderAsAnchor: boolean = !!href;\r\n    const tag = renderAsAnchor ? 'a' : 'button';\r\n    const nativeProps = getNativeProps(\r\n      assign({}, this.props.rootProps, this.props),\r\n      renderAsAnchor ? anchorProperties : buttonProperties,\r\n      [\r\n        'disabled' // Let disabled buttons be focused and styled as disabled.\r\n      ]);\r\n\r\n    // Check for ariaDescription, description or aria-describedby in the native props to determine source of aria-describedby\r\n    // otherwise default to null.\r\n    let ariaDescribedBy;\r\n\r\n    if (ariaDescription) {\r\n      ariaDescribedBy = _ariaDescriptionId;\r\n    } else if (description) {\r\n      ariaDescribedBy = _descriptionId;\r\n    } else if (nativeProps['aria-describedby']) {\r\n      ariaDescribedBy = nativeProps['aria-describedby'];\r\n    } else {\r\n      ariaDescribedBy = null;\r\n    }\r\n\r\n    let buttonProps = assign(\r\n      nativeProps,\r\n      {\r\n        className: css(\r\n          className,\r\n          this._baseClassName,\r\n          this._variantClassName,\r\n          { 'disabled': disabled }\r\n        ),\r\n        ref: this._resolveRef('_buttonElement'),\r\n        'aria-label': ariaLabel,\r\n        'aria-labelledby': ariaLabel ? null : _labelId,\r\n        'aria-describedby': ariaDescribedBy\r\n      }\r\n    );\r\n\r\n    return this.onRenderContent(tag, buttonProps);\r\n  }\r\n\r\n  public focus(): void {\r\n    if (this._buttonElement) {\r\n      this._buttonElement.focus();\r\n    }\r\n  }\r\n\r\n  protected onRenderContent(tag, buttonProps): JSX.Element {\r\n    return React.createElement(\r\n      tag,\r\n      buttonProps,\r\n      this.onRenderIcon(),\r\n      this.onRenderLabel(),\r\n      this.onRenderDescription(),\r\n      this.onRenderAriaDescription(),\r\n      this.onRenderChildren()\r\n    );\r\n  }\r\n\r\n  protected onRenderIcon() {\r\n    let { icon } = this.props;\r\n\r\n    return icon ? (\r\n      <span className={ `${this._baseClassName}-icon` }>\r\n        <i className={ `ms-Icon ms-Icon--${icon}` } />\r\n      </span>\r\n    ) : (\r\n        null\r\n      );\r\n  }\r\n\r\n  protected onRenderLabel() {\r\n    let { children, label } = this.props;\r\n\r\n    // For backwards compat, we should continue to take in the label content from children.\r\n    if (label === undefined && typeof (children) === 'string') {\r\n      label = children;\r\n    }\r\n\r\n    return label ? (\r\n      <span className={ `${this._baseClassName}-label` } id={ this._labelId } >\r\n        { label }\r\n      </span>\r\n    ) : (null);\r\n  }\r\n\r\n  protected onRenderChildren() {\r\n    let { children, label } = this.props;\r\n\r\n    // There is no label and the label will be rendered, we don't want the label to appear twice.\r\n    // If there is a label and the children are of type string it was likely intentional and both\r\n    // should render.\r\n    if (label === undefined && typeof (children) === 'string') {\r\n      return null;\r\n    }\r\n\r\n    return children;\r\n  }\r\n\r\n  protected onRenderDescription() {\r\n    let { description } = this.props;\r\n\r\n    // ms-Button-description is only shown when the button type is compound.\r\n    // In other cases it will not be displayed.\r\n    return description ? (\r\n      <span className={ `${this._baseClassName}-description` } id={ this._descriptionId }>{ description }</span>\r\n    ) : (\r\n        null\r\n      );\r\n  }\r\n\r\n  protected onRenderAriaDescription() {\r\n    let { ariaDescription } = this.props;\r\n\r\n    // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan,\r\n    // otherwise it will be assigned to descriptionSpan.\r\n    return ariaDescription ? (\r\n      <span className='ms-u-screenReaderOnly' id={ this._ariaDescriptionId }>{ ariaDescription }</span>\r\n    ) : (\r\n        null\r\n      );\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}