"use strict";
var chai_1 = require("chai");
var enzyme_1 = require("enzyme");
var React = require("react");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_page_context_1 = require("@microsoft/sp-page-context");
var sp_http_1 = require("@microsoft/sp-http");
var ConfirmationDialog_1 = require("../confirmationDialog/ConfirmationDialog");
var office_ui_fabric_react_1 = require("office-ui-fabric-react");
var CanvasStore_1 = require("../canvasComponent/CanvasStore");
var CanvasA11y_1 = require("../../a11y/CanvasA11y");
describe('Confirmation Dialog tests', function () {
    var confirmationDialogProps;
    var onConfirmation;
    var onDismiss;
    var confirmationDialogElement;
    var rootScope = sp_core_library_1.ServiceScope.startNewRoot();
    rootScope.provide(sp_http_1.SPHttpClient.serviceKey, new sp_http_1.SPHttpClient(rootScope));
    rootScope.provide(sp_page_context_1.PageContext.serviceKey, new sp_page_context_1.PageContext(rootScope));
    rootScope.finish();
    var canvasStore;
    var render;
    var a11yManager;
    beforeEach(function () {
        onConfirmation = sinon.spy();
        onDismiss = sinon.spy();
        render = sinon.spy();
        canvasStore =
            new CanvasStore_1.default(rootScope, render, sp_core_library_1.DisplayMode.Edit);
        a11yManager = new CanvasA11y_1.CanvasA11yManager(document.createElement('div'), true);
        canvasStore.a11yManager = a11yManager;
        confirmationDialogProps = {
            isOpen: true,
            onConfirmation: onConfirmation,
            onDismiss: onDismiss,
            title: 'mockConfirmationDialog',
            message: 'this is a mock dialog'
        };
        var context = { store: canvasStore };
        confirmationDialogElement = enzyme_1.shallow(React.createElement(ConfirmationDialog_1.default, confirmationDialogProps), { context: context });
        confirmationDialogElement.setContext(context);
    });
    it('should render the dialog expected', function (done) {
        chai_1.expect(confirmationDialogElement.find(office_ui_fabric_react_1.Dialog).length).to.be.eq(1);
        done();
    });
    it('should render the dialog footer expected', function (done) {
        chai_1.expect(confirmationDialogElement.find(office_ui_fabric_react_1.DialogFooter).length).to.be.eq(1);
        done();
    });
    it('should render the buttons as expected', function (done) {
        chai_1.expect(confirmationDialogElement.find(office_ui_fabric_react_1.Button).length).to.be.eq(2);
        done();
    });
    it('should call the click handler for confirm button as expected', function (done) {
        chai_1.expect(confirmationDialogElement.find("[data-automation-id='confirmButton']").length).to.be.eq(1);
        confirmationDialogElement.find("[data-automation-id='confirmButton']").simulate('click');
        chai_1.expect(onConfirmation.calledOnce).to.be.true;
        done();
    });
    it('should call the click handler for cancel button as expected', function (done) {
        chai_1.expect(confirmationDialogElement.find("[data-automation-id='cancelButton']").length).to.be.eq(1);
        confirmationDialogElement.find("[data-automation-id='cancelButton']").simulate('click');
        chai_1.expect(onDismiss.calledOnce).to.be.true;
        done();
    });
});
