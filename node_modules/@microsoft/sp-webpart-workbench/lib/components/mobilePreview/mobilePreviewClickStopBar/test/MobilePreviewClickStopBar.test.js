"use strict";
var chai_1 = require("chai");
var React = require("react");
var enzyme_1 = require("enzyme");
var MobilePreview_1 = require("../../mobilePreview/MobilePreview");
var MobilePreviewClickStopBar_1 = require("../../mobilePreviewClickStopBar/MobilePreviewClickStopBar");
var MobilePreviewClickStop_1 = require("../../mobilePreviewClickStop/MobilePreviewClickStop");
var MobilePreviewDimensionInput_1 = require("../../mobilePreviewDimensionInput/MobilePreviewDimensionInput");
var MobilePreviewRotate_1 = require("../../mobilePreviewRotate/MobilePreviewRotate");
describe('Testing MobilePreview click stop bar', function () {
    var mobilePreview;
    var clickStopBar;
    var deviceList = {
        phones: [
            { name: 'Phone 1', width: 100, height: 200 },
            { name: 'Phone 2', width: 200, height: 100 },
            { name: 'Phone 3', width: 50, height: 80 }
        ],
        tablets: [
            { name: 'Tablet 1', width: 300, height: 400 },
            { name: 'Tablet 2', width: 400, height: 300 },
            { name: 'Tablet 3', width: 200, height: 200 }
        ],
        desktops: []
    };
    beforeEach(function () {
        mobilePreview = enzyme_1.mount(React.createElement(MobilePreview_1.default, {
            deviceType: MobilePreview_1.DeviceType.Phone,
            devices: deviceList
        }));
        clickStopBar = mobilePreview.find(MobilePreviewClickStopBar_1.default);
    });
    afterEach(function () {
        mobilePreview.unmount();
    });
    it('renders the correct number of click stops', function () {
        chai_1.assert.equal(clickStopBar.find(MobilePreviewClickStop_1.default).length, 3, '3 click stops for 3 devices');
    });
    it('renders click stops in correct order', function () {
        chai_1.assert.equal(mobilePreview.state('currentOrientation'), MobilePreview_1.DeviceOrientation.Portrait, 'current orientation should now be Portrait');
        chai_1.assert.equal(clickStopBar.find(MobilePreviewClickStop_1.default).first().props().device.name, 'Phone 2', 'longest click stop');
        chai_1.assert.equal(clickStopBar.find(MobilePreviewClickStop_1.default).at(1).props().device.name, 'Phone 1', 'middle click stop');
        chai_1.assert.equal(clickStopBar.find(MobilePreviewClickStop_1.default).last().props().device.name, 'Phone 3', 'shortest click stop');
    });
    it('renders click stops correctly after switching to tablet mode', function () {
        mobilePreview.setState({
            currentDevice: deviceList.tablets[0],
            currentOrientation: MobilePreview_1.DeviceOrientation.Landscape,
            deviceType: MobilePreview_1.DeviceType.Tablet,
            url: mobilePreview.state('url')
        });
        chai_1.assert.equal(mobilePreview.state('deviceType'), MobilePreview_1.DeviceType.Tablet, 'Device type is now tablet');
        chai_1.assert.equal(mobilePreview.state('currentOrientation'), MobilePreview_1.DeviceOrientation.Landscape, 'current orientation should now be Landscape');
        chai_1.assert.equal(clickStopBar.find(MobilePreviewClickStop_1.default).first().props().device.name, 'Tablet 2', 'longest click stop');
        chai_1.assert.equal(clickStopBar.find(MobilePreviewClickStop_1.default).at(1).props().device.name, 'Tablet 1', 'middle click stop');
        chai_1.assert.equal(clickStopBar.find(MobilePreviewClickStop_1.default).last().props().device.name, 'Tablet 3', 'shortest click stop');
    });
    it('renders correct click stops after a rotate', function () {
        chai_1.assert.equal(mobilePreview.state('currentOrientation'), MobilePreview_1.DeviceOrientation.Portrait, 'current orientation should now be Portrait');
        mobilePreview.find(MobilePreviewRotate_1.default).find('a').simulate('click');
        chai_1.assert.equal(mobilePreview.state('currentOrientation'), MobilePreview_1.DeviceOrientation.Landscape, 'current orientation should now be Landscape');
        chai_1.assert.equal(clickStopBar.find(MobilePreviewClickStop_1.default).first().props().device.name, 'Phone 1', 'longest click stop');
        chai_1.assert.equal(clickStopBar.find(MobilePreviewClickStop_1.default).at(1).props().device.name, 'Phone 2', 'middle click stop');
        chai_1.assert.equal(clickStopBar.find(MobilePreviewClickStop_1.default).last().props().device.name, 'Phone 3', 'shortest click stop');
    });
    it('shows the Custom Device label when a user changes the dimensions', function () {
        var input = mobilePreview.find(MobilePreviewDimensionInput_1.default).find('input').first();
        input.simulate('change', { target: { value: 60 } });
        chai_1.assert.equal(clickStopBar.find('#clickStopBarLabel').text(), 'Custom Device', ' label says "Custom Device"');
    });
    it('changes back to device label from Custom Device when clicking a click stop', function () {
        var input = mobilePreview.find(MobilePreviewDimensionInput_1.default).find('input').first();
        input.simulate('change', { target: { value: 60 } });
        clickStopBar.find(MobilePreviewClickStop_1.default).first().simulate('click');
        chai_1.assert.notEqual(clickStopBar.find('#clickStopBarLabel').text(), 'Custom Device', ' label no longer says "Custom Device"');
    });
});
