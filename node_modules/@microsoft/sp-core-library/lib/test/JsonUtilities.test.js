"use strict";
var chai_1 = require("chai");
var chai_2 = require("chai");
var index_1 = require("./index");
var JsonUtilities_1 = require("../JsonUtilities");
describe('Json tests', function () {
    var jsonObject = {
        simpleStringField: 'abc xyz',
        stringFieldWithSpecialCharacters: 'abc\b\t\n\f\r"\'\\xyz',
        objectField: {
            subField: 'abc xyz'
        }
    };
    it('Returns null for null or undefined json', function () {
        chai_2.expect(JsonUtilities_1.default.encode(index_1.TEST_NULL)).to.be.undefined;
        chai_2.expect(JsonUtilities_1.default.encode(index_1.TEST_UNDEFINED)).to.be.undefined;
    });
    it('Encodes json correctly', function () {
        chai_1.assert.strictEqual(JsonUtilities_1.default.encode('\b'), '\\b', 'backspace character');
        chai_1.assert.strictEqual(JsonUtilities_1.default.encode('\t'), '\\t', 'tab character');
        chai_1.assert.strictEqual(JsonUtilities_1.default.encode('\n'), '\\n', 'new line character');
        chai_1.assert.strictEqual(JsonUtilities_1.default.encode('\f'), '\\f', 'form feed character');
        chai_1.assert.strictEqual(JsonUtilities_1.default.encode('\r'), '\\r', 'carriage return character');
        chai_1.assert.strictEqual(JsonUtilities_1.default.encode('"'), '\\"', 'double quote character');
        chai_1.assert.strictEqual(JsonUtilities_1.default.encode('\''), '\\\'', 'single quote character');
        chai_1.assert.strictEqual(JsonUtilities_1.default.encode('\\'), '\\\\', 'single quote character');
        chai_1.assert.strictEqual(JsonUtilities_1.default.encode('\u2048'), '\u2048', 'unicode character');
        chai_1.assert.strictEqual(JsonUtilities_1.default.encode(JSON.stringify(jsonObject)), '{\\"simpleStringField\\":\\"abc xyz\\",\\"stringFieldWithSpecialCharacters\\":\\"abc\\\\b\\\\t\\\\n\\\\f\\\\r\\\\\\"\\\'\\\\\\\\xyz\\",\\"objectField\\":{\\"subField\\":\\"abc xyz\\"}}', 'json object');
    });
});
