/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file Wrapper around the O365Shell global, preventing other files from needing to access the global
 */
import { IO365Shell, IO365ShellRenderSettings } from './IO365Shell';
import ISuiteNavData from './models/ISuiteNavData';
import FlexPaneWrapper from './FlexPaneWrapper';
import NavigationWrapper from './NavigationWrapper';
export default class O365ShellWrapper implements IO365Shell {
    FlexPane: FlexPaneWrapper;
    Navigation: NavigationWrapper;
    private _postRenderSignal;
    constructor();
    /**
     * Sets the data to be consumed by the O365Shell
     */
    SetData(shellData: ISuiteNavData): void;
    /**
     * Instructs the 0365 shell to render
     */
    Render(renderSettings: IO365ShellRenderSettings, postRendercallback: () => void): void;
    /**
     * Instructs the 0365 shell to render async
     */
    RenderAsync(renderSettings: IO365ShellRenderSettings, renderCallback: () => void, postRenderCallback: () => void): void;
    /**
     * Load shell plus (extra features like notifications). Only functions properly on SPO.
     */
    LoadShellPlus(): void;
    /**
     * Not provided by O365Shell. Tells whether the O365Shell global exists.
     */
    DoesShellExist(): boolean;
    /**
     * This is not provided by O365Shell. It invokes a given callback when a member/function
     * name is defined. This is useful when a component is trying to access a O365Shell
     * member but is not in charge of loading it.
     *
     * @params member name to be checked for avaliability
     * @parmas callback function to be called if the member is avaliable
     */
    OnHasMember(memberName: string, callback: () => void): void;
    /**
    * This is not provided by O365Shell. It just checks if a given member/function name
    * is defined on the global shell object, as an alternative to if (O365Shell.Whatever) { ... }.
    */
    private _hasMember(memberName);
}
