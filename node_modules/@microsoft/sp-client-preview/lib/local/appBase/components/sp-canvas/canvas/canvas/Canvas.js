"use strict";
var React = require("react");
var reactDOM = require("react-dom");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var CanvasComponent_1 = require("../canvasComponent/CanvasComponent");
var CreateEmptyZoneLayout_1 = require("../canvasComponent/CreateEmptyZoneLayout");
var CanvasStore_1 = require("../canvasComponent/CanvasStore");
if (CanvasStore_1.default.isLayoutSupported) {
    require('./LayoutCanvas.css');
}
else {
    require('./Canvas.css');
}
var Canvas = (function () {
    function Canvas(container, canvasOptions) {
        this._render = this._render.bind(this);
        this._container = container;
        this._store = new CanvasStore_1.default(canvasOptions.serviceScope, this._render, canvasOptions.mode, canvasOptions.serializedCanvasContent, canvasOptions.handleCanvasChanged, canvasOptions.scrollThreshold, canvasOptions.handleRenderComplete, canvasOptions.shouldCenterAlign);
    }
    Canvas.prototype.render = function (serializedCanvas) {
        this.dispose();
        this._store.webPartManager.dispose();
        window.addEventListener('blur', this._store.handleWindowBlur, true);
        this._store.deserialize(serializedCanvas);
        this._render();
    };
    Object.defineProperty(Canvas.prototype, "count", {
        get: function () {
            return this._store.controlsProps.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Canvas.prototype, "previewImageUrl", {
        get: function () {
            return this._store.tryGeneratePreviewImageUrl();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Canvas.prototype, "displayMode", {
        get: function () {
            return this._store.displayMode;
        },
        set: function (newMode) {
            this._store.displayMode = newMode;
        },
        enumerable: true,
        configurable: true
    });
    Canvas.prototype.dispose = function () {
        window.removeEventListener('blur', this._store.handleWindowBlur, true);
        reactDOM.unmountComponentAtNode(this._container);
    };
    Canvas.prototype.openToolbox = function (row) {
        var didToolboxOpen = false;
        if (this._store.displayMode === sp_core_library_1.DisplayMode.Edit &&
            0 <= row &&
            row <= this._store.controlsProps.length) {
            var hint = document.querySelectorAll('.CanvasToolboxHint')[row];
            if (CanvasStore_1.default.isLayoutSupported) {
                this._store.openToolbox(CreateEmptyZoneLayout_1.CreateEmptyZoneLayout(row), hint.offsetTop);
            }
            else {
                this._store.openToolbox(row, hint.offsetTop);
            }
            didToolboxOpen = true;
        }
        return didToolboxOpen;
    };
    Canvas.prototype.serialize = function () {
        return this._store.serialize();
    };
    Canvas.prototype._render = function () {
        var props = {
            store: this._store
        };
        var coreElement = React.createElement(CanvasComponent_1.default, props);
        this._coreComponent = reactDOM.render(coreElement, this._container);
    };
    return Canvas;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Canvas;
