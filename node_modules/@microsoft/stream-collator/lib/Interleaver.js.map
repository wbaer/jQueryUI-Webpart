{"version":3,"sources":["Interleaver.ts"],"names":[],"mappings":"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","file":"Interleaver.js","sourcesContent":["/**\r\n * @file Interleaver.ts\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n *\r\n * A factory which creates streams designed for processes running in parallel to write their output to.\r\n */\r\n\r\nimport * as colors from 'colors';\r\nimport * as os from 'os';\r\n\r\n/**\r\n * An writable interface for managing output of simultaneous processes.\r\n * @todo #168347: should we export a WritableStream or Buffer or similar?\r\n */\r\nexport interface ITaskWriter {\r\n  write(data: string): void;      // Writes a string to the buffer\r\n  writeLine(data: string): void;  // Writes a string with a newline character at the end\r\n  writeError(data: string): void; // Writes an error to the stderr stream\r\n  getStdOutput(): string;         // Returns standard output buffer as a string\r\n  getStdError(): string;          // Returns standard error buffer as a string\r\n  close(): void;                  // Closes the stream and marks the simultaneous process as completed\r\n}\r\n\r\nenum TaskWriterState {\r\n  Open = 1,\r\n  ClosedUnwritten = 2,\r\n  Written = 3\r\n}\r\n\r\ninterface ITaskWriterInfo {\r\n  state: TaskWriterState;\r\n  quietMode: boolean;\r\n  stdout: string[];\r\n  stderr: string[];\r\n}\r\n\r\nenum ITaskOutputStream {\r\n  stdout = 1,\r\n  stderr = 2,\r\n  warning = 3\r\n}\r\n\r\n/**\r\n * A static class which manages the output of multiple threads.\r\n * @todo #168348: make this class not be static\r\n * @todo #168349: add ability to inject stdout WritableStream\r\n * @todo #168350: add unit testing\r\n */\r\nexport default class Interleaver {\r\n  private static _tasks: Map<string, ITaskWriterInfo> = new Map<string, ITaskWriterInfo>();\r\n  private static _activeTask: string = undefined;\r\n  private static _stdout: { write: (text: string) => void } = process.stdout;\r\n\r\n  /**\r\n   * Resets the default output stream\r\n   */\r\n  public static setStdOut(stdout: { write: (text: string) => void }): void {\r\n    this._stdout = stdout;\r\n  }\r\n\r\n  /**\r\n   * Registers a task into the list of active buffers and returns a ITaskWriter for the\r\n   * calling process to use to manage output.\r\n   */\r\n  public static registerTask(taskName: string, quietMode: boolean = false): ITaskWriter {\r\n    if (this._tasks.has(taskName)) {\r\n      throw new Error('A task with that name has already been registered');\r\n    }\r\n\r\n    this._tasks.set(taskName, {\r\n      quietMode: quietMode,\r\n      state: TaskWriterState.Open,\r\n      stderr: [],\r\n      stdout: []\r\n    });\r\n\r\n    if (this._activeTask === undefined) {\r\n      this._activeTask = taskName;\r\n    }\r\n\r\n    return {\r\n      close: (): void => this._completeTask(taskName),\r\n      getStdError: (): string => this._getTaskOutput(taskName, ITaskOutputStream.stderr),\r\n      getStdOutput: (): string => this._getTaskOutput(taskName),\r\n      write: (data: string): void => this._writeTaskOutput(taskName, data),\r\n      writeError: (data: string): void => {\r\n        const stream: ITaskOutputStream = (data.indexOf('Warning - ') === 0) ?\r\n          ITaskOutputStream.warning : // Warning written to stderr\r\n          ITaskOutputStream.stderr;\r\n\r\n        this._writeTaskOutput(taskName, data, stream);\r\n      },\r\n      writeLine: (data: string): void => this._writeTaskOutput(taskName, data + os.EOL)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Removes information about all running tasks\r\n   */\r\n  public static reset(): void {\r\n    this._activeTask = undefined;\r\n    this._tasks = new Map<string, ITaskWriterInfo>();\r\n  }\r\n\r\n  /**\r\n   * Adds the text to the tasks's buffer, and writes it to the console if it is the active task\r\n   */\r\n  private static _writeTaskOutput(taskName: string, data: string,\r\n    stream: ITaskOutputStream = ITaskOutputStream.stdout): void {\r\n\r\n    const taskInfo: ITaskWriterInfo = this._tasks.get(taskName);\r\n    if (!taskInfo || taskInfo.state !== TaskWriterState.Open) {\r\n      throw new Error('The task is not registered or has been completed and written.');\r\n    }\r\n    const outputBuffer: string[] = (stream === ITaskOutputStream.stderr ? taskInfo.stderr : taskInfo.stdout);\r\n\r\n    if (!this._activeTask) {\r\n      this._activeTask = taskName;\r\n      this._writeTask(taskName, taskInfo);\r\n      taskInfo.state = TaskWriterState.Open;\r\n    }\r\n\r\n    outputBuffer.push(data);\r\n    if (this._activeTask === taskName) {\r\n      if (stream === ITaskOutputStream.stdout && !taskInfo.quietMode) {\r\n        this._stdout.write(data);\r\n      } else if (stream === ITaskOutputStream.warning && !taskInfo.quietMode) {\r\n        this._stdout.write(colors.yellow(data));\r\n      } else if (stream === ITaskOutputStream.stderr) {\r\n        this._stdout.write(colors.red(data));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the current value of the task's buffer\r\n   */\r\n  private static _getTaskOutput(taskName: string, stream: ITaskOutputStream = ITaskOutputStream.stdout): string {\r\n    const taskInfo: ITaskWriterInfo = this._tasks.get(taskName);\r\n    return (stream === ITaskOutputStream.stdout ? taskInfo.stdout : taskInfo.stderr).join('');\r\n  }\r\n\r\n  /**\r\n   * Marks a task as completed. There are 3 cases:\r\n   *  - If the task was the active task, also write out all completed, unwritten tasks\r\n   *  - If there is no active task, write the output to the screen\r\n   *  - If there is an active task, mark the task as completed and wait for active task to complete\r\n   */\r\n  private static _completeTask(taskName: string): void {\r\n    const taskInfo: ITaskWriterInfo = this._tasks.get(taskName);\r\n    if (!taskInfo || taskInfo.state !== TaskWriterState.Open) {\r\n      throw new Error('The task is not registered or has been completed and written.');\r\n    }\r\n\r\n    if (this._activeTask === undefined) {\r\n      this._writeTask(taskName, taskInfo);\r\n    } else if (taskName === this._activeTask) {\r\n      this._activeTask = undefined;\r\n      taskInfo.state = TaskWriterState.Written;\r\n      this._writeAllCompletedTasks();\r\n    } else {\r\n      taskInfo.state = TaskWriterState.ClosedUnwritten;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper function which writes all completed tasks\r\n   */\r\n  private static _writeAllCompletedTasks(): void {\r\n    this._tasks.forEach((task: ITaskWriterInfo, taskName: string) => {\r\n      if (task && task.state === TaskWriterState.ClosedUnwritten) {\r\n        this._writeTask(taskName, task);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Write and delete task\r\n   */\r\n  private static _writeTask(taskName: string, taskInfo: ITaskWriterInfo): void {\r\n    taskInfo.state = TaskWriterState.Written;\r\n    if (!taskInfo.quietMode) {\r\n      this._stdout.write(taskInfo.stdout.join(''));\r\n    }\r\n    this._stdout.write(colors.red(taskInfo.stderr.join('')));\r\n  }\r\n\r\n  /**\r\n   * A constructor which throws an exception if used\r\n   */\r\n  constructor() {\r\n    throw Error('do not use constructor directly, only static functions');\r\n  }\r\n}\r\n"],"sourceRoot":"..\\src"}