import * as React from 'react';
/**
 * Used to pass the environment type (classic page or not) to WebPartForm.
 *
 * @internal
 */
export interface IWebPartFormProps extends React.HTMLProps<HTMLElement> {
    isClassicSharePointPage: boolean;
}
/**
 * The WebPartForm class is used to make <form/> tag be compatible with SharePoint classic page.
 *
 * @remarks: The classic Sharepoint pages are contained in a container form. Browsers don't work well with embeding
 * form tags into one another. This component will render a form tag in modern pages and a div in classic pages.
 * Preferably, just use a div. To use this component, just need to replace <form/> with <WebPartForm/> and pass the
 * props 'isClassicSharePoint' as environment type. Wherever this component is consumed, it'll render the right tag
 * (div or form) based on current environment type.
 *
 * @internal
 */
export default class WebPartForm extends React.Component<IWebPartFormProps, {}> {
    private _webpartDiv;
    constructor(props: IWebPartFormProps);
    render(): JSX.Element;
    /**
     * Used to replace onsubmit with onKeyDown in <div/> since onsubmit is not support by <div/>. The <form/> may have
     * both onkeydown and onsubmit as its props, in this case it calls onkeydonw first then onsubmit.
     */
    private _handleKeyDown(evt);
    /**
     * Used to call onsubmit explicitly when input/button is clicked inside a <div/>.
     */
    private _handleClick(event);
    /**
     * Find the input/button element that can trigger a form submit.
     */
    private readonly _submitElement;
}
