"use strict";
var chai_1 = require("chai");
var ServiceScope_1 = require("../ServiceScope");
var ServiceKey_1 = require("../ServiceKey");
var aServiceKey = ServiceKey_1.default.createCustom('sp-client-base:A', function (serviceScope) { return new A(serviceScope, 'autocreated-A'); });
var bServiceKey = ServiceKey_1.default.createCustom('sp-client-base:B', function (serviceScope) {
    var b = new B(serviceScope);
    b.name = 'autocreated-B';
    return b;
});
var cServiceKey = ServiceKey_1.default.createCustom('sp-client-base:C', function (serviceScope) {
    var c = new C(serviceScope);
    c.name = 'autocreated-C';
    return c;
});
var A = (function () {
    function A(serviceScope, name) {
        var _this = this;
        this.name = name;
        serviceScope.whenFinished(function () {
            _this.b = serviceScope.consume(bServiceKey);
            _this.c = serviceScope.consume(cServiceKey);
        });
    }
    return A;
}());
var B = (function () {
    function B(serviceScope) {
        var _this = this;
        this.name = 'B';
        serviceScope.whenFinished(function () {
            _this.a = serviceScope.consume(aServiceKey);
            _this.c = serviceScope.consume(cServiceKey);
        });
    }
    return B;
}());
var C = (function () {
    function C(serviceScope) {
        var _this = this;
        this.name = 'C';
        serviceScope.whenFinished(function () {
            _this.a = serviceScope.consume(aServiceKey);
            _this.b = serviceScope.consume(bServiceKey);
        });
    }
    return C;
}());
describe('ServiceScope tests', function () {
    describe('Circular dependency tests (A, B, C)', function () {
        it('should autocreate objects if they are not provided by any scope', function (done) {
            var rootScope = ServiceScope_1.default.startNewRoot();
            rootScope.finish();
            var childScope = rootScope.startNewChild();
            childScope.finish();
            var a = childScope.consume(aServiceKey);
            var b = childScope.consume(bServiceKey);
            var c = childScope.consume(cServiceKey);
            chai_1.assert.equal(a.name, 'autocreated-A');
            chai_1.assert.equal(a.b.name, 'autocreated-B');
            chai_1.assert.equal(a.c.name, 'autocreated-C');
            chai_1.assert.equal(b.name, 'autocreated-B');
            chai_1.assert.equal(b.a.name, 'autocreated-A');
            chai_1.assert.equal(b.c.name, 'autocreated-C');
            chai_1.assert.equal(c.name, 'autocreated-C');
            chai_1.assert.equal(c.a.name, 'autocreated-A');
            chai_1.assert.equal(c.b.name, 'autocreated-B');
            var a2 = rootScope.consume(aServiceKey);
            var b2 = rootScope.consume(bServiceKey);
            var c2 = rootScope.consume(cServiceKey);
            chai_1.assert.equal(a, a2);
            chai_1.assert.equal(b, b2);
            chai_1.assert.equal(c, c2);
            done();
        });
        it('should NOT autocreate objects if they are provded', function (done) {
            var rootScope = ServiceScope_1.default.startNewRoot();
            rootScope.finish();
            var childScope = rootScope.startNewChild();
            var a = childScope.provide(aServiceKey, new A(childScope, 'A'));
            var b = childScope.createAndProvide(bServiceKey, B);
            var c = childScope.createAndProvide(cServiceKey, C);
            childScope.finish();
            chai_1.assert.equal(a.name, 'A'); 
            chai_1.assert.equal(a.b.name, 'B'); 
            chai_1.assert.equal(a.c.name, 'C'); 
            chai_1.assert.equal(b.name, 'B');
            chai_1.assert.equal(b.a.name, 'A');
            chai_1.assert.equal(b.c.name, 'C');
            chai_1.assert.equal(c.name, 'C');
            chai_1.assert.equal(c.a.name, 'A');
            chai_1.assert.equal(c.b.name, 'B');
            var a2 = childScope.consume(aServiceKey);
            var b2 = childScope.consume(bServiceKey);
            var c2 = childScope.consume(cServiceKey);
            chai_1.assert.equal(a, a2);
            chai_1.assert.equal(b, b2);
            chai_1.assert.equal(c, c2);
            done();
        });
        it('should allow new instances to be introduced in a child scope', function (done) {
            var rootScope = ServiceScope_1.default.startNewRoot();
            rootScope.finish();
            var childScope = rootScope.startNewChild();
            var a = childScope.provide(aServiceKey, new A(childScope, 'A'));
            var b = childScope.createAndProvide(bServiceKey, B);
            var c = childScope.createAndProvide(cServiceKey, C);
            childScope.finish();
            var grandChildScope = childScope.startNewChild();
            var otherA = grandChildScope.provide(aServiceKey, new A(grandChildScope, 'other-A'));
            var otherB = grandChildScope.createAndProvide(bServiceKey, B);
            otherB.name = 'other-B';
            grandChildScope.finish();
            chai_1.assert.equal(otherA.name, 'other-A');
            chai_1.assert.equal(otherA.b.name, 'other-B');
            chai_1.assert.equal(otherA.c.name, 'C');
            chai_1.assert.equal(otherB.name, 'other-B');
            chai_1.assert.equal(otherB.a.name, 'other-A');
            chai_1.assert.equal(otherB.c.name, 'C');
            var c2 = grandChildScope.consume(cServiceKey);
            chai_1.assert.equal(c2.name, 'C');
            chai_1.assert.equal(c2.a.name, 'A'); 
            chai_1.assert.equal(c2.b.name, 'B'); 
            done();
        });
        it('should support creating objects without adding to any scope', function (done) {
            var rootScope = ServiceScope_1.default.startNewRoot();
            var a = new A(rootScope, 'A');
            var b = new B(rootScope);
            rootScope.finish();
            var c = new C(rootScope);
            chai_1.assert.equal(a.name, 'A');
            chai_1.assert.equal(a.b.name, 'autocreated-B');
            chai_1.assert.equal(a.c.name, 'autocreated-C');
            chai_1.assert.equal(b.name, 'B');
            chai_1.assert.equal(b.a.name, 'autocreated-A');
            chai_1.assert.equal(b.c.name, 'autocreated-C');
            chai_1.assert.equal(c.name, 'C');
            chai_1.assert.equal(c.a.name, 'autocreated-A');
            chai_1.assert.equal(c.b.name, 'autocreated-B');
            done();
        });
    });
});
