import { ServiceScope } from '@microsoft/sp-core-library';
import { IClientSideComponentManifest } from '@microsoft/sp-module-interfaces';
/**
 * The base context interface for client-side components.
 *
 * @remarks
 * A "context" object is a collection of well-known services and other
 * objects that are likely to be needed by any business logic working with
 * a component.  Each component type has its own specialized extension of
 * this interface, e.g. IWebPartContext for web parts, ICodePartContext for
 * code parts, etc.
 *
 * @internalremarks
 *
 * NOTE: The context object is a convenience that avoids the overhead of
 * properly factoring the dependencies for each class in your project,
 * in a situation where most classes have essentially the same dependencies.
 * If lots of members are added to the context without displine, it can
 * easily devolve into a poor engineering practice (where "everything depends
 * on everything else").  Think carefully before adding more objects to this
 * interface.
 *
 * Only add data properties or well-defined classes with ubiquitous applicability.
 * Do not add loose functions, callbacks, or settable properties.
 *
 * @public
 */
interface IClientSideComponentContext {
    /**
     * Manifest for the client side component.
     */
    readonly manifest: IClientSideComponentManifest;
    /**
     * Service scope instance that is scoped to this particular web part.
     */
    readonly serviceScope: ServiceScope;
}
export default IClientSideComponentContext;
