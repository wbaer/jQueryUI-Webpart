/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file PropertyPanePage related interfaces.
 */
import { IPropertyPaneGroup } from '../propertyPaneGroup/IPropertyPaneGroup';
/**
 * PropertyPanePage props.
 *
 * @internal
 */
export interface IPropertyPanePageProps {
    /**
     * Description of the page.
     */
    pageDescription: string;
    /**
     * Indicates whether the groups on the PropertyPanePage should be displayed as an Accordion or not.
     * Defaullt value is false.
     */
    displayGroupsAsAccordion: boolean;
    /**
     * Callback triggered when there is a change in any of the PropertyPaneFields.
     */
    onChange: (targetProperty: string, value: boolean | string) => void;
    /**
     * An array of PropertyPaneGroups to be displayed.
     */
    propertyGroups: IPropertyPaneGroup[];
    /**
     * Properties bag of the web part.
     */
    properties: any;
    /**
     * Callback to set the entry state of the PropertyPane.
     * This callback internally is responsible for changing the state of 'Apply'/'Cancel' buttons and
     * update the invalidEntries dictionary.
     */
    setEntryState: (targetProperty: string, isValidEntry: boolean) => void;
    /**
     * Callback method, which sets the PropertyPanePage element as the container for all the elements
     * within the ProeprtyPanePage. This is used to get the first focussable element within the container
     * to set the focus to.
     */
    setContainerDiv: (propertypanepage: HTMLDivElement) => void;
}
/**
 * PropertyPanePage interface.
 *
 * @public
 */
export interface IPropertyPanePage {
    /**
     * Indicates whether the groups on the PropertyPanePage are displayed as accordion or not.
     */
    displayGroupsAsAccordion?: boolean;
    /**
     * PropertyPane page header.
     */
    header?: IPropertyPanePageHeader;
    /**
     * List of groups to be displayed on the PropertyPane page.
     */
    groups: IPropertyPaneGroup[];
}
/**
 * PropertyPane header.
 *   This header remains same for all the pages.
 *
 * @public
 */
export interface IPropertyPanePageHeader {
    /**
     * Header to display.
     */
    description: string;
    /**
     * Image url for the background image.
     */
    image?: string;
}
