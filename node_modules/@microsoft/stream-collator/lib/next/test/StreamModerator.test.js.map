{"version":3,"sources":["next/test/StreamModerator.test.ts"],"names":[],"mappings":"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","file":"next/test/StreamModerator.test.js","sourcesContent":["/// <reference types=\"mocha\" />\r\n\r\nimport { assert } from 'chai';\r\nimport StreamCollator from '../StreamCollator';\r\nimport PersistentStream from '../PersistentStream';\r\n\r\nlet collator: StreamCollator<NodeJS.ReadableStream>;\r\nlet stdout: PersistentStream, taskA: PersistentStream, taskB: PersistentStream;\r\n\r\ndescribe('StreamCollator tests', () => {\r\n  beforeEach(() => {\r\n    collator = new StreamCollator();\r\n    stdout = new PersistentStream();\r\n    taskA = new PersistentStream();\r\n    taskB = new PersistentStream();\r\n\r\n    taskA.on('data', () => { /* no-op */ });\r\n    taskB.on('data', () => { /* no-op */ });\r\n\r\n    collator.pipe(stdout);\r\n\r\n    collator.register(taskA);\r\n    collator.register(taskB);\r\n  });\r\n\r\n  it('should write text to stdout', (done: MochaDone) => {\r\n    const text: string = 'Hello World';\r\n\r\n    testWrite(taskA, text, stdout, 'data', () => {\r\n      assert.equal(stdout.readAll(), text);\r\n      done();\r\n    });\r\n  });\r\n\r\n  it('should not write non-active tasks to stdout', (done: MochaDone) => {\r\n    testWrite(taskA, '1', collator, 'data', () => {\r\n      assert.equal(stdout.readAll(), '1');\r\n\r\n      taskB.write('2');\r\n      testWrite(taskA, '3', stdout, 'data', () => {\r\n        assert.equal(stdout.readAll(), '13');\r\n\r\n        taskA.end();\r\n        assert.equal(stdout.readAll(), '13');\r\n\r\n        testEnd(taskB,\r\n          taskB, 'end',\r\n          () => {\r\n            assert.equal(stdout.readAll(), '132');\r\n            assert.equal(taskA.readAll(), '13');\r\n            assert.equal(taskB.readAll(), '2');\r\n            done();\r\n          }\r\n        );\r\n      });\r\n    });\r\n  });\r\n\r\n  it('should close automatically when all registered streams close', (done: MochaDone) => {\r\n    testWrite(taskA, '1', stdout, 'data', () => {\r\n      assert.equal(stdout.readAll(), '1');\r\n\r\n      taskB.write('2');\r\n      testWrite(taskA, '3', stdout, 'data', () => {\r\n        assert.equal(stdout.readAll(), '13');\r\n\r\n        taskA.end();\r\n        assert.equal(stdout.readAll(), '13');\r\n\r\n        testEnd(taskB,\r\n          collator, 'end',\r\n          () => {\r\n            assert.equal(stdout.readAll(), '132');\r\n            assert.equal(taskA.readAll(), '13');\r\n            assert.equal(taskB.readAll(), '2');\r\n            done();\r\n          }\r\n        );\r\n      });\r\n    });\r\n  });\r\n\r\n  it('should update the active task once the active task is closed', (done: MochaDone) => {\r\n    testWrite(taskA, '1', collator, 'data', () => {\r\n      assert.equal(stdout.readAll(), '1');\r\n\r\n      taskA.end();\r\n      assert.equal(stdout.readAll(), '1');\r\n\r\n      testWrite(\r\n        taskB, '2',\r\n        stdout, 'data',\r\n        () => {\r\n          assert.equal(stdout.readAll(), '12');\r\n\r\n          testEnd(taskB,\r\n            stdout, 'data',\r\n            () => {\r\n              assert.equal(stdout.readAll(), '12');\r\n              assert.equal(taskA.readAll(), '1');\r\n              assert.equal(taskB.readAll(), '2');\r\n              done();\r\n            }\r\n          );\r\n        }\r\n      );\r\n    });\r\n  });\r\n\r\n  it('should write completed tasks after the active task is completed', (done: MochaDone) => {\r\n    testWrite(taskA, '1', collator, 'data', () => {\r\n      assert.equal(stdout.readAll(), '1');\r\n\r\n      taskB.write('2');\r\n      assert.equal(stdout.readAll(), '1');\r\n\r\n      testEnd(taskB,\r\n        taskB, 'end',\r\n        () => {\r\n          assert.equal(stdout.readAll(), '1');\r\n\r\n          testEnd(taskA,\r\n            taskA, 'end', () => {\r\n              testActionOnStream(() => { /* no-op */ }, stdout, 'data',\r\n                () => {\r\n                  assert.equal(stdout.readAll(), '12');\r\n                  assert.equal(taskA.readAll(), '1');\r\n                  assert.equal(taskB.readAll(), '2');\r\n                  done();\r\n                }\r\n              );\r\n            }\r\n          );\r\n        }\r\n      );\r\n    });\r\n  });\r\n\r\n  function testEnd(stream1: NodeJS.WritableStream, stream2: NodeJS.EventEmitter,\r\n    event: string, cb: () => void): void {\r\n    testActionOnStream(\r\n      () => { stream1.end(); },\r\n      stream2,\r\n      event,\r\n      cb\r\n    );\r\n  }\r\n\r\n  function testWrite(stream1: NodeJS.WritableStream, text: string,\r\n    stream2: NodeJS.EventEmitter, event: string, cb: () => void): void {\r\n    testActionOnStream(\r\n      () => { stream1.write(text); },\r\n      stream2,\r\n      event,\r\n      cb\r\n    );\r\n  }\r\n\r\n  function testActionOnStream(action: () => void,\r\n    stream: NodeJS.EventEmitter, event: string, cb: () => void): void {\r\n    const wrapper: () => void = () => {\r\n      stream.removeListener(event, wrapper);\r\n      cb();\r\n    };\r\n    stream.on(event, wrapper);\r\n    action();\r\n  }\r\n\r\n});\r\n"],"sourceRoot":"..\\..\\..\\src"}