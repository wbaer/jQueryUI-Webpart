"use strict";
var ManifestStore_1 = require("./../stores/ManifestStore");
var componentConstants = require("./componentConstants");
function initializeNpmModule() {
    ensureReactIsLoaded();
    ManifestStore_1.default.instance.registerManifests([
        require("@ms/sp-telemetry/dist/" + componentConstants.spTelemetryComponentId + ".manifest.json"),
        require("@ms/odsp-utilities-bundle/dist/" + componentConstants.odspUtilitiesBundleComponentId + ".manifest.json")
    ], false);
}
exports.initializeNpmModule = initializeNpmModule;
function ensureReactIsLoaded() {
    var url = require('url');
    var relativeReactUrl = '__RELATIVE_REACT_PATH__'; 
    var relativeReactDomUrl = '__RELATIVE_REACT_DOM_PATH__'; 
    var store = ManifestStore_1.default.instance;
    var reactIsPopulated = !!store.tryGetManifest(componentConstants.reactComponentId);
    var reactDomIsPopulated = !!store.tryGetManifest(componentConstants.reactDomComponentId);
    if (!reactIsPopulated && relativeReactUrl !== '__RELATIVE_' + 'REACT_PATH__') {
        var reactUrl = url.resolve(__webpack_public_path__, relativeReactUrl);
        var reactManifest = {
            id: componentConstants.reactComponentId,
            manifestVersion: 2,
            componentType: 'Library',
            alias: 'react',
            version: '__REACT_VERSION__',
            loaderConfig: {
                internalModuleBaseUrls: [],
                entryModuleId: 'react',
                scriptResources: {
                    'react': {
                        type: 'path',
                        path: reactUrl
                    }
                }
            }
        };
        store.registerManifests([reactManifest], false);
        reactIsPopulated = true;
    }
    if (!reactDomIsPopulated && relativeReactDomUrl !== '__RELATIVE_' + 'REACT_DOM_PATH__') {
        var reactDomUrl = url.resolve(__webpack_public_path__, relativeReactDomUrl);
        var reactDomManifest = {
            id: componentConstants.reactDomComponentId,
            manifestVersion: 2,
            componentType: 'Library',
            alias: 'react-dom',
            version: '__REACT_DOM_VERSION__',
            loaderConfig: {
                internalModuleBaseUrls: [],
                entryModuleId: 'react-dom',
                scriptResources: {
                    'react-dom': {
                        type: 'path',
                        path: reactDomUrl
                    },
                    'react': {
                        type: 'component',
                        id: componentConstants.reactComponentId,
                        version: '__REACT_VERSION__' 
                    }
                }
            }
        };
        store.registerManifests([reactDomManifest], false);
        reactDomIsPopulated = true;
    }
    if (!reactIsPopulated || !reactDomIsPopulated) {
        throw new Error('The loader was unable to locate React and/or React-DOM. This indicates a problem occured ' +
            'during npm install. Try deleting and re-running npm install.');
    }
}
