"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var office_ui_fabric_react_1 = require("office-ui-fabric-react");
var sp_telemetry_1 = require("@ms/sp-telemetry");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var CKLoader_1 = require("./CKLoader");
require("./CKTextEditor.scss");
var CKEditorFlights_1 = require("./CKEditorFlights");
var ImageUtilities_1 = require("../common/ImageUtilities");
var office_ui_fabric_react_2 = require("office-ui-fabric-react");
var CKTextEditor = (function () {
    function CKTextEditor(config, currentHTML, editorElement, selectionChangeCallback, textChangeCallback, startUpFocus, onReadyCallback, onImagePasteCallBack, onPasteCallback, onContextMenuCallBack) {
        this._config = config;
        this._editorElement = editorElement;
        this._handleSelectionChange = selectionChangeCallback;
        this._handleTextChange = textChangeCallback;
        this._onReadyCallback = onReadyCallback;
        this._startupFocus = startUpFocus;
        this._onImagePasteCallBack = onImagePasteCallBack;
        this._onPasteCallback = onPasteCallback;
        this._onContextMenuCallBack = onContextMenuCallBack;
        this._initialize(currentHTML);
        this._blockStyles =
            this._config.supportedFormatsArray.filter(function (format) { return format.isBlockStyle; });
        this._async = new office_ui_fabric_react_2.Async(this);
    }
    CKTextEditor.preloadEditor = function (config) {
        try {
            CKTextEditor.moduleLoader.loadModule(config.editorSource);
        }
        catch (error) {
            sp_telemetry_1._TraceLogger.logError(CKTextEditor.logSource, error);
        }
    };
    CKTextEditor.createNewEditor = function (config, currentHTML, editorElement, selectionChangeCallback, textChangeCallback, startupFocus, onImagePasteCallBack, onPasteCallback, onContextMenuCallBack) {
        return new Promise(function (resolve) {
            CKTextEditor.moduleLoader.loadModule(config.editorSource).then(function () {
                var editor = new CKTextEditor(config, currentHTML, editorElement, selectionChangeCallback, textChangeCallback, startupFocus, function () { resolve(editor); }, onImagePasteCallBack, onPasteCallback, onContextMenuCallBack);
            }).catch(function (error) {
                sp_telemetry_1._TraceLogger.logError(CKTextEditor.logSource, error);
            });
        });
    };
    CKTextEditor._getSelectedLink = function (editor) {
        var selection = editor.getSelection();
        var selectedElement = selection.getSelectedElement();
        if (!selectedElement || !selectedElement.is('a')) {
            var ranges = selection.getRanges();
            if (ranges && ranges.length) {
                ranges[0].shrink(CKEDITOR.SHRINK_TEXT);
                selectedElement = editor.elementPath(ranges[0].getCommonAncestor()).contains('a', true);
            }
        }
        return selectedElement;
    };
    Object.defineProperty(CKTextEditor, "_IS_CKEDITOR_TABLEPASTE_FLIGHTED", {
        get: function () {
            return sp_core_library_1._SPFlight.isEnabled(CKEditorFlights_1.CKEDITOR_TABLEPASTE_FLIGHT_ID);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CKTextEditor, "_IS_CKEDITOR_IMAGEPASTE_FLIGHTED", {
        get: function () {
            return sp_core_library_1._SPFlight.isEnabled(CKEditorFlights_1.CKEDITOR_IMAGEPASTE_FLIGHT_ID);
        },
        enumerable: true,
        configurable: true
    });
    CKTextEditor.prototype._initialize = function (currentHTML) {
        this._editorElement.contentEditable = 'true';
        var config = {
            allowedContent: 'strong b em i u h2 h3 h4 blockquote ul ol li a[href, target];\
        p h2 h3 h4 li(ql-align-*,ql-indent-*,quote-true); *{text-align}',
            on: {
                change: this._handleTextChange,
                selectionChange: this._handleSelectionChangeConvert
            },
            removePlugins: 'toolbar,contextmenu,menubutton,scayt,liststyle,table,tabletools,magicline,link',
            extraPlugins: 'justify',
            removeButtons: '',
            stylesSet: false,
            toolbar: [],
            startupFocus: this._startupFocus
        };
        if (CKTextEditor._IS_CKEDITOR_TABLEPASTE_FLIGHTED) {
            var allowedStyles = 'width,border,line-height,padding,margin-bottom,margin-top;\
          ,margin-left,margin-right,font-size,border-bottom,border-left;\
          border-top,border-right,text-align';
            config.extraAllowedContent = {
                'tbody thead tfoot tr th td caption col colgroup footer': true,
                'table': {
                    attributes: 'width,border,cellpadding,cellspacing,align',
                    styles: '*'
                },
                'tr': {
                    attributes: 'height,rowspan,colspan,align',
                    styles: allowedStyles
                },
                'td': {
                    attributes: 'width,colspan,rowspan,align',
                    styles: allowedStyles
                },
                'th': {
                    attributes: 'align',
                    styles: allowedStyles
                }
            };
            config.removePlugins = 'toolbar,menubutton,scayt,liststyle,magicline,link';
            config.keystrokes = [
                [CKEDITOR.CTRL + CKEDITOR.SHIFT + 68, 'rowDelete'],
                [CKEDITOR.CTRL + CKEDITOR.SHIFT + 65, 'rowInsertBefore'],
                [CKEDITOR.CTRL + CKEDITOR.SHIFT + 90, 'rowInsertAfter'] 
            ];
        }
        config.disableNativeSpellChecker = false;
        this._editor = CKEDITOR.inline(this._editorElement, config);
        this._editor.setData(currentHTML);
        this._addCustomToolbarCommands();
    };
    CKTextEditor.prototype._addCustomToolbarCommands = function () {
        this._editor.addCommand('unlink', {
            exec: function (editor) {
                var linkStyle = new CKEDITOR.style({
                    element: 'a',
                    type: CKEDITOR.STYLE_INLINE,
                    alwaysRemoveElement: 1
                });
                editor.removeStyle(linkStyle);
                return true;
            }
        });
        this._editor.addCommand('link', {
            contextSensitive: true,
            exec: function (editor, data) {
                if (!data) {
                    editor.execCommand('unlink');
                }
                else {
                    var elem = CKTextEditor._getSelectedLink(editor);
                    if (elem) {
                        elem.setAttribute('href', data);
                        elem.setAttribute('target', '_blank');
                    }
                    else {
                        var linkStyle = new CKEDITOR.style({
                            name: 'link',
                            element: 'a',
                            type: CKEDITOR.STYLE_INLINE,
                            attributes: { 'href': data, 'target': '_blank' }
                        });
                        editor.applyStyle(linkStyle);
                    }
                }
                return true;
            },
            refresh: function (editor, path) {
                var element = path.lastElement && path.lastElement.getAscendant('a', true);
                if (element && element.getName() === 'a' && element.getAttribute('href') && element.getChildCount()) {
                    this.setState(CKEDITOR.TRISTATE_ON);
                }
                else {
                    this.setState(CKEDITOR.TRISTATE_OFF);
                }
            }
        });
        this._editor.addCommand('heading2', this._getHeadingCommandDefinition('h2'));
        this._editor.addCommand('heading3', this._getHeadingCommandDefinition('h3'));
        this._editor.addCommand('heading4', this._getHeadingCommandDefinition('h4'));
        this._editor.on('blur', this._handleSelectionChangeConvert);
        this._editor.on('loaded', this._handlePluginsLoaded);
        this._editor.on('instanceReady', this._handleInstanceReady);
        this._editor.on('paste', this._handlePaste);
        this._editor.on('beforePaste', this._onBeforePaste);
        this._editor.on('afterPaste', this._handleAfterPaste);
        if (CKTextEditor._IS_CKEDITOR_TABLEPASTE_FLIGHTED) {
            var self_1 = this;
            this._editor.on('contentDom', function () {
                this.editable().attachListener(this.editable(), 'contextmenu', function (evt) {
                    var target = evt.data.getTarget() && evt.data.getTarget().$;
                    if (target) {
                        var tagName = target.tagName;
                        var parentTagName = target.parentElement && target.parentElement.tagName;
                        if (tagName === 'TD' || parentTagName === 'TD') {
                            evt.stop();
                            evt.data.preventDefault();
                            self_1._onContextMenuCallBack(true, target);
                        }
                    }
                }, undefined, undefined, 0);
            });
        }
    };
    CKTextEditor.prototype.clearFormatting = function (start, end) {
        this.format(start, end, { removeFormat: true });
        var sel = this._editor.getSelection();
        if (sel) {
            var ckRange = sel.getRanges();
            var range = { start: 0, end: 0 };
            if (ckRange && ckRange.length > 0) {
                range.start = ckRange[0].startOffset;
                range.end = ckRange[0].endOffset;
                var formatsToClear = {};
                for (var _i = 0, _a = this._blockStyles; _i < _a.length; _i++) {
                    var format = _a[_i];
                    formatsToClear[format.editorKey] = false;
                }
                this.format(start, end, formatsToClear, true);
            }
        }
    };
    CKTextEditor.prototype.destroy = function () {
        this._editorElement.removeEventListener('keyup', this._fakeSelectionChange);
        this._editorElement.removeEventListener('mouseup', this._fakeSelectionChange);
        var data = this._editor.getData();
        this._editor.destroy();
        return data;
    };
    CKTextEditor.prototype.focus = function () {
        this._editor.focus();
    };
    CKTextEditor.prototype.format = function (start, end, formats, applyAllFormatsToLine) {
        for (var formatKey in formats) {
            var command = this._editor.getCommand(formatKey);
            if (command) {
                if (formats[formatKey] !== (command.state === CKEDITOR.TRISTATE_ON)) {
                    command.exec(formats[formatKey]);
                }
            }
        }
    };
    CKTextEditor.prototype.formatTable = function (format, target) {
        var command = this._editor.getCommand(format);
        var sel = this._editor.getSelection();
        var temp = CKEDITOR.dom.element.get(target);
        if (sel) {
            sel.selectElement(temp);
            this._editor.selectionChange(true);
            if (!(sel.getStartElement() && sel.getStartElement().getAscendant('table'))) {
                return;
            }
        }
        if (command) {
            command.enable();
            command.exec(format);
        }
    };
    CKTextEditor.prototype.getBounds = function (position) {
        var left = 0, top = 0;
        var sel = this._editor.getSelection();
        if (sel) {
            var ranges = sel.getRanges();
            if (ranges && ranges.length) {
                var node = ranges[0].startContainer.$;
                var docRange = document.createRange();
                docRange.selectNodeContents(node);
                var selectionRects = docRange.getClientRects();
                if (selectionRects && selectionRects.length) {
                    var editorRect = this._editor.element.$.getBoundingClientRect();
                    left = selectionRects[0].left - editorRect.left;
                    top = selectionRects[0].top - editorRect.top;
                }
            }
        }
        return { left: left, top: top };
    };
    CKTextEditor.prototype.getFormatValue = function (start, end, format) {
        if (format.key === 'link') {
            var selectedLink = CKTextEditor._getSelectedLink(this._editor);
            return selectedLink ? selectedLink.getAttribute('href') : false;
        }
        return false;
    };
    CKTextEditor.prototype.getSelection = function () {
        var sel = this._editor.getSelection();
        if (sel) {
            var ranges = sel ? sel.getRanges() : undefined;
            if (ranges && ranges.length) {
                if (this._editor.element.contains(ranges[0].getCommonAncestor())) {
                    this._lastSelectedRanges = ranges;
                }
                return {
                    start: ranges[0].startOffset,
                    end: ranges[0].endOffset
                };
            }
        }
        return undefined;
    };
    CKTextEditor.prototype.getText = function (range) {
        return this._editor.getData();
    };
    CKTextEditor.prototype.getHTML = function () {
        return this._editor.getData();
    };
    CKTextEditor.prototype.getEditorType = function () {
        return 'CKEditor';
    };
    CKTextEditor.prototype.isFormatAppliedToRange = function (start, end, format) {
        var command = this._editor.getCommand(format.editorKey);
        return command && (command.state === CKEDITOR.TRISTATE_ON);
    };
    CKTextEditor.prototype.onReady = function (callback) {
        this._onReadyCallback = callback;
    };
    CKTextEditor.prototype.setSelection = function (range) {
        this.focus();
        var sel = this._editor.getSelection();
        if (sel) {
            if (this._lastSelectedRanges) {
                sel.selectRanges(this._lastSelectedRanges);
            }
            else {
                var ckRange = sel.getRanges();
                if (ckRange && ckRange.length > 0 && range.start !== -1) {
                    ckRange[0].startOffset = range.start;
                    ckRange[0].endOffset = range.end;
                    try {
                        sel.selectRanges(ckRange);
                    }
                    catch (error) {
                        sp_telemetry_1._TraceLogger.logError(CKTextEditor.logSource, error);
                    }
                }
            }
        }
    };
    CKTextEditor.prototype._handleSelectionChangeConvert = function (evt) {
        var sel = this._editor.getSelection();
        var newRange = undefined;
        var forceUpdate = false;
        if (evt) {
            switch (evt.name) {
                case 'selectionChange':
                    sel = evt.data.selection;
                    break;
                case 'blur':
                    sel = undefined;
                    break;
            }
            var ranges = sel ? sel.getRanges() : undefined;
            newRange = ranges && ranges.length ? {
                start: ranges[0].startOffset,
                end: ranges[0].endOffset
            } : undefined;
            forceUpdate = ranges && ranges.length &&
                this._lastSelectedRanges && this._lastSelectedRanges.length &&
                ranges[0].startContainer !== this._lastSelectedRanges[0].startContainer;
        }
        this._handleSelectionChange(newRange, forceUpdate);
    };
    CKTextEditor.prototype._isHeadingActive = function (tagName, path) {
        path = path || this._editor.elementPath();
        var element = path.lastElement && path.lastElement.getAscendant(tagName, true);
        return (element && element.getName() === tagName);
    };
    CKTextEditor.prototype._getHeadingCommandDefinition = function (tagName) {
        var isHeadingActive = this._isHeadingActive;
        return {
            contextSensitive: true,
            exec: function (editor) {
                var styleDef;
                switch (tagName) {
                    case 'h2':
                        styleDef = editor.config.format_h2;
                        break;
                    case 'h3':
                        styleDef = editor.config.format_h3;
                        break;
                    case 'h4':
                        styleDef = editor.config.format_h4;
                        break;
                }
                if (!styleDef) {
                    return false;
                }
                var style = new CKEDITOR.style(styleDef);
                if (isHeadingActive(tagName)) {
                    editor.removeStyle(style);
                }
                else {
                    editor.applyStyle(style);
                }
                return true;
            },
            refresh: function (editor, path) {
                this.setState(isHeadingActive(tagName, path) ? CKEDITOR.TRISTATE_ON : CKEDITOR.TRISTATE_OFF);
            }
        };
    };
    CKTextEditor.prototype._fakeSelectionChange = function () {
        this._handleSelectionChangeConvert();
    };
    CKTextEditor.prototype._handlePluginsLoaded = function (evt) {
        var _loop_1 = function (command) {
            if (this_1._config.supportedFormatsArray.filter(function (format) { return format.editorKey === command; }).length) {
                this_1._editor.commands[command].on('state', this_1._handleSelectionChangeConvert);
            }
        };
        var this_1 = this;
        for (var command in this._editor.commands) {
            _loop_1(command);
        }
        this._editorElement.addEventListener('keyup', this._fakeSelectionChange);
        this._editorElement.addEventListener('mouseup', this._fakeSelectionChange);
    };
    CKTextEditor.prototype._handleInstanceReady = function () {
        this._onReadyCallback();
    };
    CKTextEditor.prototype._handleAfterPaste = function () {
        var _this = this;
        this._async.setTimeout(function () {
            if (_this._onPasteCallback && !_this._isAfterPasteCalled) {
                _this._onPasteCallback(false);
                _this._isAfterPasteCalled = true;
            }
        }, CKTextEditor._PASTETIMEOUT);
    };
    CKTextEditor.prototype._handlePaste = function (evt) {
        var pastedData = evt.data && evt.data.dataValue;
        if (pastedData) {
            var tables = pastedData.match(CKTextEditor._TABLE_REGEX);
            if (tables && tables.length > 0) {
                sp_telemetry_1._EngagementLogger.logEvent('Table.Paste');
                if (CKTextEditor._IS_CKEDITOR_TABLEPASTE_FLIGHTED) {
                    var extraParagraph = '<p></p>';
                    if (this._editor.getData() === '' && tables.length === 1) {
                        evt.data.dataValue = extraParagraph + pastedData;
                    }
                    evt.data.dataValue += extraParagraph;
                    if (CKTextEditor._IS_CKEDITOR_IMAGEPASTE_FLIGHTED) {
                        this._onImagePasteInsideTable(pastedData);
                    }
                }
            }
        }
        if (CKTextEditor._IS_CKEDITOR_IMAGEPASTE_FLIGHTED) {
            if (pastedData) {
                var images = pastedData.match(CKTextEditor._IMAGE_REGEX_WITH_SRC);
                if (images && images.length > 0 && CKTextEditor._IS_CKEDITOR_IMAGEPASTE_FLIGHTED) {
                    this._onImagePasteInDataValue(evt, images, pastedData);
                }
            }
            else if (evt.data.dataTransfer) {
                for (var i = 0; i < evt.data.dataTransfer.getFilesCount(); i++) {
                    sp_telemetry_1._EngagementLogger.logEvent(CKTextEditor._IMAGE_PASTE);
                    this._onImagePasteInChrome(evt.data.dataTransfer.getFile(i));
                }
            }
        }
        this._handleAfterPaste();
    };
    CKTextEditor.prototype._onBeforePaste = function () {
        var _this = this;
        this._async.setTimeout(function () {
            if (_this._onPasteCallback) {
                _this._onPasteCallback(true);
                _this._isAfterPasteCalled = false;
            }
        }, CKTextEditor._PASTETIMEOUT);
    };
    CKTextEditor.prototype._onImagePasteInDataValue = function (evt, images, pastedData) {
        var pastedRTEData = this._removeImagesFromPasteData(pastedData);
        if (pastedRTEData.length === 0) {
            var orignalRTEData = this._splitRTEContentAtSelection();
            if (orignalRTEData) {
                var isImageFileValid = false;
                for (var _i = 0, images_1 = images; _i < images_1.length; _i++) {
                    var img = images_1[_i];
                    var src = img.match(CKTextEditor._IMAGE_REGEX_SRC)[1];
                    if (src.length > 0 && src.indexOf('file://') === -1) {
                        evt.cancel();
                        evt.stop();
                        sp_telemetry_1._EngagementLogger.logEvent(CKTextEditor._IMAGE_PASTE);
                        var rteData = '';
                        if (orignalRTEData.postSelectionData) {
                            rteData = orignalRTEData.postSelectionData;
                        }
                        this._onImagePasteCallBack(true, this._handleBase64Image(src), rteData);
                    }
                    else {
                        sp_telemetry_1._EngagementLogger.logEvent('InvalidImageFile.Paste');
                        this._onImagePasteCallBack(false);
                        isImageFileValid = true;
                    }
                }
                if (!isImageFileValid && orignalRTEData.preSelectionData) {
                    this._editor.setData(orignalRTEData.preSelectionData);
                }
            }
        }
        else {
            sp_telemetry_1._EngagementLogger.logEvent('ImageWrappedWithText.Paste');
            this._onImagePasteCallBack(false);
        }
    };
    CKTextEditor.prototype._handleBase64Image = function (src) {
        var contentType = ImageUtilities_1.Base64MimeType(src);
        var b64Data = src.split(',').pop();
        return ImageUtilities_1.Base64toBlob(b64Data, contentType);
    };
    CKTextEditor.prototype._onImagePasteInsideTable = function (pastedData) {
        if (this._isImagePastedInsideTable(pastedData)) {
            sp_telemetry_1._EngagementLogger.logEvent('ImageInsideTable.Paste');
            this._onImagePasteCallBack(false);
        }
    };
    CKTextEditor.prototype._isImagePastedInsideTable = function (data) {
        var tables = data.match(CKTextEditor._TABLE_REGEX);
        if (tables) {
            for (var _i = 0, tables_1 = tables; _i < tables_1.length; _i++) {
                var table = tables_1[_i];
                if (table.match(CKTextEditor._IMAGE_REGEX)) {
                    return true;
                }
            }
            return false;
        }
    };
    CKTextEditor.prototype._removeImagesFromPasteData = function (pastedData) {
        var images = pastedData.match(CKTextEditor._IMAGE_REGEX);
        if (!images) {
            return [];
        }
        var data = [];
        var temp = [];
        for (var _i = 0, images_2 = images; _i < images_2.length; _i++) {
            var img = images_2[_i];
            temp = pastedData.split(img);
            if (temp.length > 1) {
                data.push(temp[0]);
                pastedData = temp[1];
            }
        }
        if (temp[1]) {
            data.push(temp[1]);
        }
        return data;
    };
    CKTextEditor.prototype._splitRTEContentAtSelection = function () {
        var innerHTML = this._editor.getData();
        if (this._validHTML(innerHTML) && this._isCurrentSelectionTagValid()) {
            var data = [];
            var tempId = sp_core_library_1.Guid.newGuid().toString();
            var tempElement = CKEDITOR.dom.element.createFromHtml('<div>' + tempId + '</div>');
            var tempHTML = tempElement.$.outerHTML;
            this._editor.insertElement(tempElement);
            innerHTML = this._editor.getData();
            data = innerHTML.split(tempHTML);
            var editorData = {
                preSelectionData: data[0],
                postSelectionData: data[1]
            };
            return editorData;
        }
        else {
            return undefined;
        }
    };
    CKTextEditor.prototype._isCurrentSelectionTagValid = function () {
        var tagName = this._editor.getSelection().getStartElement().$ &&
            this._editor.getSelection().getStartElement().$.tagName;
        if (tagName === 'A') {
            return false;
        }
        tagName = this._editor.getSelection().getStartElement().$.parentElement &&
            this._editor.getSelection().getStartElement().$.parentElement.tagName;
        return tagName !== 'TD' && tagName !== 'LI';
    };
    CKTextEditor.prototype._validHTML = function (html) {
        html = html.replace(/<[^>]*\/\s?>/g, ''); 
        html = html.replace(/<(br|hr|img).*?>/g, ''); 
        var openingTags = html.match(/<[^\/].*?>/g) || []; 
        var closingTags = html.match(/<\/.+?>/g) || []; 
        return openingTags.length === closingTags.length ? true : false;
    };
    CKTextEditor.prototype._onImagePasteInChrome = function (src) {
        var data = this._splitRTEContentAtSelection();
        if (data) {
            this._editor.setData(data.preSelectionData);
            this._onImagePasteCallBack(true, src, data.postSelectionData);
        }
    };
    return CKTextEditor;
}());
CKTextEditor.moduleLoader = new CKLoader_1.default();
CKTextEditor.logSource = sp_telemetry_1._LogSource.create('SPRteCKTextEditor');
CKTextEditor._IMAGE_REGEX = new RegExp('<img.+?\/>', 'gi');
CKTextEditor._TABLE_REGEX = new RegExp('<table([\\w\\W]+?)\/table>', 'gi');
CKTextEditor._IMAGE_REGEX_WITH_SRC = new RegExp('<img.*?src="(.*?)"', 'gi');
CKTextEditor._IMAGE_REGEX_SRC = new RegExp('<img.*?src="(.*?)"', 'i');
CKTextEditor._IMAGE_PASTE = 'Image.Paste';
CKTextEditor._PASTETIMEOUT = 5;
__decorate([
    office_ui_fabric_react_1.autobind
], CKTextEditor.prototype, "_initialize", null);
__decorate([
    office_ui_fabric_react_1.autobind
], CKTextEditor.prototype, "_handleSelectionChangeConvert", null);
__decorate([
    office_ui_fabric_react_1.autobind
], CKTextEditor.prototype, "_isHeadingActive", null);
__decorate([
    office_ui_fabric_react_1.autobind
], CKTextEditor.prototype, "_getHeadingCommandDefinition", null);
__decorate([
    office_ui_fabric_react_1.autobind
], CKTextEditor.prototype, "_fakeSelectionChange", null);
__decorate([
    office_ui_fabric_react_1.autobind
], CKTextEditor.prototype, "_handlePluginsLoaded", null);
__decorate([
    office_ui_fabric_react_1.autobind
], CKTextEditor.prototype, "_handleInstanceReady", null);
__decorate([
    office_ui_fabric_react_1.autobind
], CKTextEditor.prototype, "_handleAfterPaste", null);
__decorate([
    office_ui_fabric_react_1.autobind
], CKTextEditor.prototype, "_handlePaste", null);
__decorate([
    office_ui_fabric_react_1.autobind
], CKTextEditor.prototype, "_onBeforePaste", null);
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = CKTextEditor;
