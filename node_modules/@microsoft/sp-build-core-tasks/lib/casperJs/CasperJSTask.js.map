{"version":3,"sources":["casperJs/CasperJSTask.ts"],"names":[],"mappings":";;;;;;AAAE,8DAEkC;AAEpC,+CAAqC;AACrC,2BAA6B;AAC7B,2BAA6B;AAE7B,0CAA4C;AAC5C,2BAA6B;AAC7B,2CAA6C;AAE7C;;;;;;GAMG;AAEH;IAAkC,gCAAc;IAAhD;QAAA,qEAoGC;QAnGQ,UAAI,GAAW,gBAAgB,CAAC;;IAmGzC,CAAC;IAjGQ,kCAAW,GAAlB,UAAmB,IAAe,EAAE,gBAA2C;QAA/E,iBA6DC;QA5DC,IAAM,kBAAkB,GAAW,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QACvE,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,0BAA0B,CAAC,CAAC;QACpF,OAAO,CAAC,GAAG,CAAC,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;QACvE,OAAO,CAAC,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAC/B,kBAAkB,EAClB,sEAAsE,CAAC,CAAC;QAE1E,IAAM,sBAAsB,GAAsB,EAAE,CAAC;QACrD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,SAAmB;YACzE,EAAE,CAAC,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACzB,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;gBACvC,gBAAgB,EAAE,CAAC;YACrB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,2BAA2B;gBAC3B,IAAM,OAAK,GAAQ,WAAW,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;gBAC9C,IAAM,QAAM,GAAW,IAAI,CAAC,YAAY,CAAC,UAAC,GAAkB,EAAE,GAAmB;oBAC/E,IAAM,IAAI,GAAQ,YAAY,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;oBACzC,0BAA0B;oBAC1B,OAAK,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;gBACxB,CAAC,CAAC,CAAC;gBAEH,IAAI,MAAI,GAAW,KAAI,CAAE,oBAAoB,EAAE,CAAC;gBAChD,QAAM,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,CAAwB;oBAC1C,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,YAAY,CAAC,CAAC,CAAC;wBAC5B,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;wBAC3C,MAAI,GAAG,KAAI,CAAE,oBAAoB,EAAE,CAAC;wBACpC,UAAU,CAAC;4BACP,QAAM,CAAC,KAAK,EAAE,CAAC;4BACf,QAAM,CAAC,MAAM,CAAC,MAAI,CAAC,CAAC;wBACtB,CAAC,EAAE,IAAI,CAAC,CAAC;oBACX,CAAC;gBACH,CAAC,CAAC,CAAC;gBAEH,QAAM,CAAC,MAAM,CAAC,MAAI,CAAC,CAAC;wCAEb,CAAC;oBACR,IAAM,OAAO,GACb,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS;wBACtB,OAAO,CAAC,GAAG,CAAC,UAAU,GAAG,cAAc;wBACvC,gBAAgB,GAAG,OAAO,CAAC,GAAG,CAAC,WAAW;wBAC1C,YAAY;wBACZ,SAAS,CAAC,CAAC,CAAC;wBACZ,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBAEpB,QAAM,CAAC,EAAE,CAAC,WAAW,EAAE;wBACrB,OAAO,CAAC,GAAG,CAAC,oBAAoB,GAAG,MAAI,CAAC,CAAC;wBACzC,sBAAsB,CAAC,IAAI,CAAC,KAAI,CAAC,8BAA8B,CAAC,OAAO,GAAG,mBAAmB,GAAG,MAAI,CAAC,CAAC,CAAC;wBACvG,EAAE,CAAC,CAAC,sBAAsB,CAAC,MAAM,KAAK,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;4BACvD,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC,IAAI,CAAC,UAAC,MAAgB;gCACxD,IAAM,YAAY,GAAW,KAAI,CAAC,2BAA2B,CAAC,MAAM,CAAC,CAAC;gCACtE,OAAO,CAAC,GAAG,CAAC,eAAe,GAAG,SAAS,CAAC,MAAM,GAAG,QAAQ,CAAC,CAAC;gCAC3D,YAAY,KAAK,EAAE,GAAG,gBAAgB,EAAE,GAAG,gBAAgB,CAAC,YAAY,CAAC,CAAC;gCAC1E,QAAM,CAAC,KAAK,EAAE,CAAC;4BACjB,CAAC,CAAC,CAAC;wBACL,CAAC;oBACH,CAAC,CAAC,CAAC;gBACL,CAAC;gBArBD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE;4BAAxC,CAAC;iBAqBT;YACH,CAAC;QACH,CAAC,CAAC,CAAC;QACH,MAAM,CAAC;IACT,CAAC;IAEO,kDAA2B,GAAnC,UAAoC,MAAgB;QAClD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,UAAC,KAAa;YACjC,MAAM,CAAC,KAAK,KAAK,EAAE,CAAC;QACtB,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;IACZ,CAAC;IAEO,gCAAS,GAAjB,UAAkB,GAAW;QAC3B,MAAM,CAAC,IAAI,OAAO,CAChB,UAAC,QAAqC;YACpC,IAAI,CAAC,oBAAoB,EAAE,EAAC,GAAG,EAAE,GAAG,EAAC,EAAE,UAAC,EAAE,EAAE,KAAK;gBAC/C,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,UAAC,IAAY;oBAC9B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;gBACjC,CAAC,CAAC,CAAC,CAAC;YACN,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,qDAA8B,GAAtC,UAAuC,GAAW;QAChD,MAAM,CAAC,IAAI,OAAO,CAChB,UAAC,QAAmC;YAClC,oBAAI,CAAC,GAAG,EAAE,UAAC,KAAa,EAAE,MAAc,EAAE,MAAc;gBACtD,OAAO,CAAC,GAAG,CAAC,mBAAmB,GAAG,MAAM,CAAC,CAAC;gBAC1C,QAAQ,CAAC,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,MAAM,CAAC,UAAC,KAAa;oBAC5C,MAAM,CAAC,KAAK,IAAI,KAAK,KAAK,EAAE,CAAC;gBAC/B,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YACjB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,2CAAoB,GAA5B;QACE,IAAM,QAAQ,GAAW,KAAK,CAAC;QAC/B,IAAM,QAAQ,GAAW,CAAC,CAAC;QAC3B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,QAAQ,GAAG,QAAQ,GAAG,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC;IAC1E,CAAC;IACH,mBAAC;AAAD,CApGA,AAoGC,CApGiC,0BAAQ,GAoGzC;AApGY,oCAAY","file":"casperJs/CasperJSTask.js","sourcesContent":["  import {\r\n  GulpTask\r\n} from '@microsoft/gulp-core-build';\r\nimport * as gulp from 'gulp';\r\nimport { exec } from 'child_process';\r\nimport * as path from 'path';\r\nimport * as http from 'http';\r\nimport { Server, ServerRequest, ServerResponse } from 'http';\r\nimport * as serveStatic from 'serve-static';\r\nimport * as glob from 'glob';\r\nimport * as finalhandler from 'finalhandler';\r\n\r\n/**\r\n * CasperJS is a browser navigation scripting & testing utility written in Javascript for PhantomJS or SlimerJS.\r\n * This CasperJS task searches for files with the extension casperjstest.js and spawns child processes to execute\r\n * CasperJS tests. Test results will be reported to the build system and all errors will cause a build break.\r\n * PhantomJS has a known bug where it doesn't output errors to sterr, so some of the detailed error information\r\n * will be contained in the test result output.\r\n */\r\n\r\nexport class CasperJSTask extends GulpTask<void> {\r\n  public name: string = 'casperjs-tests';\r\n\r\n  public executeTask(gulp: gulp.Gulp, completeCallback: (result?: string) => void): NodeJS.ReadWriteStream {\r\n    const osdpBuildTasksRoot: string = path.resolve(__dirname, '..', '..');\r\n    process.env.CASPER_PATH = path.join(osdpBuildTasksRoot, '\\\\node_modules\\\\casperjs');\r\n    process.env.CASPER_BIN = path.join(process.env.CASPER_PATH, '\\\\bin\\\\');\r\n    process.env.PHANTOMJS = path.join(\r\n      osdpBuildTasksRoot,\r\n      '\\\\node_modules\\\\phantomjs-prebuilt\\\\lib\\\\phantom\\\\bin\\\\phantomjs.exe');\r\n\r\n    const casperTestPromiseArray: Promise<string>[] = [];\r\n    this._getFiles(path.join(process.cwd(), '\\\\lib')).then((fileNames: string[]) => {\r\n      if (fileNames.length < 1) {\r\n        console.log('No casperJS tests found');\r\n        completeCallback();\r\n      } else {\r\n        /* tslint:disable:no-any */\r\n        const serve: any = serveStatic(process.cwd());\r\n        const server: Server = http.createServer((req: ServerRequest, res: ServerResponse) => {\r\n          const done: any = finalhandler(req, res);\r\n          /* tslint:enable:no-any */\r\n          serve(req, res, done);\r\n        });\r\n\r\n        let port: number = this. _getRandomPortNumber();\r\n        server.on('error', (e: NodeJS.ErrnoException) => {\r\n          if (e.code === 'EADDRINUSE') {\r\n            console.log('Address in use, retrying...');\r\n            port = this. _getRandomPortNumber();\r\n            setTimeout(() => {\r\n                server.close();\r\n                server.listen(port);\r\n              }, 1000);\r\n            }\r\n          });\r\n\r\n          server.listen(port);\r\n\r\n        for (let i: number = 0; i < fileNames.length; i++) {\r\n          const command: string =\r\n          [process.env.PHANTOMJS,\r\n          process.env.CASPER_BIN + 'bootstrap.js',\r\n          '--casper-path=' + process.env.CASPER_PATH,\r\n          '--cli test',\r\n          fileNames[i],\r\n          '--url='].join(' ');\r\n\r\n          server.on('listening', () => {\r\n            console.log('Listening to port ' + port);\r\n            casperTestPromiseArray.push(this._startCasperTestOnChildProcess(command + 'http://localhost:' + port));\r\n            if (casperTestPromiseArray.length === fileNames.length) {\r\n              Promise.all(casperTestPromiseArray).then((errors: string[]) => {\r\n                const errorMessage: string = this._createCasperJSErrorMessage(errors);\r\n                console.log('tests run on ' + fileNames.length + ' files');\r\n                errorMessage === '' ? completeCallback() : completeCallback(errorMessage);\r\n                server.close();\r\n              });\r\n            }\r\n          });\r\n        }\r\n      }\r\n    });\r\n    return;\r\n  }\r\n\r\n  private _createCasperJSErrorMessage(errors: string[]): string {\r\n    return errors.filter((value: string) => {\r\n      return value !== '';\r\n    }).join();\r\n  }\r\n\r\n  private _getFiles(dir: string): Promise<string[]> {\r\n    return new Promise<string[]>(\r\n      (complete?: (result: string[]) => void) => {\r\n        glob('**/*.caspertest.js', {cwd: dir}, (er, files) => {\r\n          complete(files.map((name: string) => {\r\n            return path.resolve(dir, name);\r\n          }));\r\n        });\r\n      });\r\n  }\r\n\r\n  private _startCasperTestOnChildProcess(cmd: string): Promise<string> {\r\n    return new Promise<string>(\r\n      (complete?: (result: string) => void) => {\r\n        exec(cmd, (error: string, stdout: string, stderr: string) => {\r\n          console.log('CasperJS Output: ' + stdout);\r\n          complete([stderr, error].filter((value: string) => {\r\n            return value && value !== '';\r\n          }).join('\\n'));\r\n        });\r\n      });\r\n  }\r\n\r\n  private _getRandomPortNumber(): number {\r\n    const MAX_PORT: number = 65535;\r\n    const MIN_PORT: number = 0;\r\n    return Math.floor(Math.random() * (MAX_PORT - MIN_PORT + 1)) + MIN_PORT;\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}