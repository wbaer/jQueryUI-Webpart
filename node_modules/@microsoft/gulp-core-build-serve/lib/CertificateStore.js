"use strict";
var path = require("path");
var fs = require("fs");
var os_1 = require("os");
var encoding = 'utf8';
var CertificateStore = (function () {
    function CertificateStore() {
    }
    Object.defineProperty(CertificateStore, "instance", {
        get: function () {
            if (!CertificateStore._instance) {
                CertificateStore._instance = new CertificateStore();
                CertificateStore._instance._initialize();
            }
            return CertificateStore._instance;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CertificateStore.prototype, "certificatePath", {
        get: function () {
            return this._certificatePath;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CertificateStore.prototype, "certificateData", {
        get: function () {
            if (!this._certificateData) {
                if (fs.existsSync(this._certificatePath)) {
                    this._certificateData = fs.readFileSync(this._certificatePath, encoding);
                }
                else {
                    return undefined;
                }
            }
            return this._certificateData;
        },
        set: function (certificate) {
            if (certificate) {
                fs.writeFileSync(this._certificatePath, certificate);
            }
            else if (fs.existsSync(this._certificatePath)) {
                fs.unlinkSync(this._certificatePath);
            }
            this._certificateData = certificate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CertificateStore.prototype, "keyData", {
        get: function () {
            if (!this._keyData) {
                if (fs.existsSync(this._keyPath)) {
                    this._keyData = fs.readFileSync(this._keyPath, encoding);
                }
                else {
                    return undefined;
                }
            }
            return this._keyData;
        },
        set: function (key) {
            if (key) {
                fs.writeFileSync(this._keyPath, key, { encoding: encoding });
            }
            else if (fs.existsSync(this._keyPath)) {
                fs.unlinkSync(this._keyPath);
            }
            this._keyData = key;
        },
        enumerable: true,
        configurable: true
    });
    CertificateStore.prototype._initialize = function () {
        var unresolvedUserFolder = os_1.homedir();
        this._userProfilePath = path.resolve(unresolvedUserFolder);
        if (!fs.existsSync(this._userProfilePath)) {
            throw new Error('Unable to determine the current user\'s home directory');
        }
        this._gcbServeDataPath = path.join(this._userProfilePath, '.gcb-serve-data');
        if (!fs.existsSync(this._gcbServeDataPath)) {
            fs.mkdirSync(this._gcbServeDataPath);
        }
        this._certificatePath = path.join(this._gcbServeDataPath, 'gcb-serve.cer');
        this._keyPath = path.join(this._gcbServeDataPath, 'gcb-serve.key');
    };
    return CertificateStore;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = CertificateStore;

//# sourceMappingURL=CertificateStore.js.map
