"use strict";
var chai_1 = require("chai");
var enzyme_1 = require("enzyme");
var React = require("react");
var SPRte_1 = require("../rte/SPRte");
var CanvasControlType_1 = require("../../sp-canvas/canvas/canvasControl/CanvasControlType");
var CanvasStore_1 = require("../../sp-canvas/canvas/canvasComponent/CanvasStore");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_page_context_1 = require("@microsoft/sp-page-context");
var sp_http_1 = require("@microsoft/sp-http");
var SPRteFormattingBar_1 = require("../formattingbar/SPRteFormattingBar");
var SPRteLinkDialog_1 = require("../formattingbar/SPRteLinkDialog");
describe('SPRTE tests', function () {
    var sprteElement;
    var mockProps;
    var onChange;
    var rootScope = sp_core_library_1.ServiceScope.startNewRoot();
    rootScope.provide(sp_http_1.SPHttpClient.serviceKey, new sp_http_1.SPHttpClient(rootScope));
    rootScope.provide(sp_page_context_1.PageContext.serviceKey, new sp_page_context_1.PageContext(rootScope));
    rootScope.finish();
    var canvasStore;
    var render;
    beforeEach(function () {
        onChange = sinon.spy();
        render = sinon.spy();
        mockProps = {
            controlType: CanvasControlType_1.default.RTE,
            displayMode: sp_core_library_1.DisplayMode.Edit,
            id: 'RTEControl',
            innerHTML: 'Hello World',
            onChange: onChange
        };
        canvasStore =
            new CanvasStore_1.default(rootScope, render, sp_core_library_1.DisplayMode.Edit);
        var context = { store: canvasStore };
        sprteElement = enzyme_1.mount(React.createElement(SPRte_1.default, mockProps), { context: context });
        sprteElement.setContext(context);
        sprteElement.setState({ isFormattingBarHidden: false });
    });
    afterEach(function () {
        sprteElement.unmount();
    });
    it('calls componentDidMount after mounting', function (done) {
        var spy = sinon.spy(SPRte_1.default.prototype, 'componentDidMount');
        sprteElement = enzyme_1.mount(React.createElement(SPRte_1.default, mockProps));
        chai_1.assert(spy.calledOnce);
        done();
    });
    it('should render the formatting bar when it is set to visible', function (done) {
        chai_1.expect(sprteElement.find(SPRteFormattingBar_1.default).length).to.be.eq(1);
        sprteElement.setState({ isFormattingBarHidden: true });
        chai_1.expect(sprteElement.find(SPRteFormattingBar_1.default).length).to.be.eq(0);
        done();
    });
    it('should render the link dialog in edit mode', function (done) {
        chai_1.expect(sprteElement.find(SPRteLinkDialog_1.default).length).to.be.eq(1);
        done();
    });
    it('should render the text box in edit mode', function (done) {
        chai_1.expect(sprteElement.find("[data-automation-id='textBox']").length).to.be.eq(1);
        done();
    });
    it('should render the bold button in edit mode', function (done) {
        chai_1.expect(sprteElement.find("[data-automation-id='bold-button']").length).to.be.eq(1);
        done();
    });
    it('should render the italic button in edit mode', function (done) {
        chai_1.expect(sprteElement.find("[data-automation-id='italic-button']").length).to.be.eq(1);
        done();
    });
    it('should render the underline button in edit mode', function (done) {
        chai_1.expect(sprteElement.find("[data-automation-id='underline-button']").length).to.be.eq(1);
        done();
    });
    it('should render the link button in edit mode', function (done) {
        chai_1.expect(sprteElement.find("[data-automation-id='link-button']").length).to.be.eq(1);
        done();
    });
    it('should render the clear formatting button in edit mode', function (done) {
        chai_1.expect(sprteElement.find("[data-automation-id='clearFormatting-button']").length).to.be.eq(1);
        done();
    });
    it('should render the align left button in edit mode', function (done) {
        chai_1.expect(sprteElement.find("[data-automation-id='alignLeft-button']").length).to.be.eq(1);
        done();
    });
    it('should render the center button in edit mode', function (done) {
        chai_1.expect(sprteElement.find("[data-automation-id='alignCenter-button']").length).to.be.eq(1);
        done();
    });
    it('should render the align right in edit mode', function (done) {
        chai_1.expect(sprteElement.find("[data-automation-id='alignRight-button']").length).to.be.eq(1);
        done();
    });
    it('should render the bulleted list in edit mode', function (done) {
        chai_1.expect(sprteElement.find("[data-automation-id='bullet-button']").length).to.be.eq(1);
        done();
    });
    it('should render the numbered list in edit mode', function (done) {
        chai_1.expect(sprteElement.find("[data-automation-id='list-button']").length).to.be.eq(1);
        done();
    });
    it('should render the h2 in edit mode', function (done) {
        chai_1.expect(sprteElement.find("[data-automation-id='h2-button']").length).to.be.eq(1);
        done();
    });
    it('should render the h3 in edit mode', function (done) {
        chai_1.expect(sprteElement.find("[data-automation-id='h3-button']").length).to.be.eq(1);
        done();
    });
    it('should render the normal text in edit mode', function (done) {
        chai_1.expect(sprteElement.find("[data-automation-id='normalText-button']").length).to.be.eq(1);
        done();
    });
    it('should render the pull quote in edit mode', function (done) {
        chai_1.expect(sprteElement.find("[data-automation-id='blockquote-button']").length).to.be.eq(1);
        done();
    });
});
