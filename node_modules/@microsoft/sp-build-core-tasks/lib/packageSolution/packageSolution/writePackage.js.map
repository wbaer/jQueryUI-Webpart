{"version":3,"sources":["packageSolution/packageSolution/writePackage.ts"],"names":[],"mappings":"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","file":"packageSolution/packageSolution/writePackage.js","sourcesContent":["/**\r\n * @file writePackage.ts\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n *\r\n * Writes a package xml object to disk, in both raw and zipped format\r\n */\r\n\r\n/* tslint:disable:no-any */\r\n\r\nimport mkdirp = require('mkdirp');\r\nimport * as path from 'path';\r\nimport rmdir = require('rimraf');\r\nimport fs = require('fs');\r\nimport JSZip = require('node-zip');\r\n\r\nimport { log } from '@microsoft/gulp-core-build';\r\n\r\nimport IXml from './models/packageXml/IXml';\r\nimport IOpenDocumentConventionXml from './models/packageXml/IOpenDocumentConventionXml';\r\nimport IPackageXml from './models/packageXml/IPackageXml';\r\nimport IFeatureXml from './models/packageXml/IFeatureXml';\r\nimport IIcon from './models/packageXml/IIcon';\r\nimport { IPackageSolutionTaskConfig } from '../PackageSolutionTask';\r\nimport { serial } from '../utilities';\r\n\r\n/**\r\n * Writes the ISolutionXml object containing the solution package xml to the disk using provided config\r\n */\r\nexport default\r\n  function writePackage(solution: IPackageXml, config: IPackageSolutionTaskConfig): Promise<any> {\r\n  const zip: JSZip = new JSZip();\r\n\r\n  return cleanRawPackageDirectory(config)\r\n    .then(() => Promise.all(\r\n      [\r\n        writeODCFile(solution.manifest, config, zip),\r\n        writeXmlFile(solution.relationships, config, zip),\r\n        writeXmlFile(solution.contentTypesXml, config, zip),\r\n        writeIcon(solution.icon, config, zip)\r\n      ]\r\n      .concat(solution.customFiles.map((customFile: IXml) => writeXmlFile(customFile, config, zip)))\r\n      .concat(solution.features.map((feature: IFeatureXml) => writeFeature(feature, config, zip)))\r\n    ))\r\n    .then(() => {\r\n      return writeFile(config.paths.zippedPackage,\r\n        zip.generate({ base64: false, compression: 'DEFLATE' }), 'binary');\r\n    });\r\n}\r\n\r\n/**\r\n * Ensures that the contents of config.paths.debugDir have been deleted\r\n */\r\nexport function cleanRawPackageDirectory(config: IPackageSolutionTaskConfig): Promise<void> {\r\n  return new Promise<void>((complete: () => void, reject: (error: Error) => void) => {\r\n    rmdir(config.paths.debugDir, (error: Error) => {\r\n      if (error) {\r\n        reject(error);\r\n        return;\r\n      }\r\n      log(`Cleaned ${config.paths.debugDir}`);\r\n      complete();\r\n    });\r\n  });\r\n}\r\n\r\nexport function writeFeature(\r\n  feature: IFeatureXml,\r\n  config: IPackageSolutionTaskConfig,\r\n  zip: ZipPackage\r\n): Promise<any> {\r\n  return Promise.all([\r\n    writeODCFile(feature, config, zip),\r\n    writeXmlFile(feature.config, config, zip)]\r\n    .concat(feature.assets.elementFiles.map((asset: IXml) => writeXmlFile(asset, config, zip)))\r\n    .concat(feature.assets.elementManifests.map((asset: IXml) => writeXmlFile(asset, config, zip)))\r\n    .concat(feature.assets.upgradeActions.map((asset: IXml) => writeXmlFile(asset, config, zip)))\r\n    .concat(feature.components.map((component: IXml) => writeXmlFile(component, config, zip))));\r\n}\r\n\r\n/**\r\n * Write the app icon related files: The icon file itself, and the config.xml\r\n * If there is no icon it does nothing.\r\n * If the icon path is invalid, it throws an error.\r\n */\r\nexport function writeIcon(icon: IIcon, config: IPackageSolutionTaskConfig, zip: ZipPackage): Promise<any> {\r\n  if (icon) {\r\n    const filepath: string = path.join(config.paths.packageDir, icon.path);\r\n    if (fs.statSync(filepath).isFile()) {\r\n      return Promise.all([\r\n        readFile(filepath).then((data) => writeFileToPath(icon.path, data, config, zip)),\r\n        writeXmlFile(icon.config, config, zip),\r\n        writeXmlFile(icon.relationships, config, zip)]);\r\n    } else {\r\n      throw new Error(`Icon with path \"${icon.path}\" was not found.`);\r\n    }\r\n  }\r\n}\r\n\r\nexport function writeXmlFile(file: IXml, config: IPackageSolutionTaskConfig, zip: ZipPackage): Promise<void> {\r\n  return writeFileToPath(file.filename, file.xml, config, zip);\r\n}\r\n\r\nexport function writeODCFile(file: IOpenDocumentConventionXml, config: IPackageSolutionTaskConfig,\r\n                      zip: ZipPackage): Promise<any> {\r\n  return Promise.all([\r\n    writeFileToPath(file.filename, file.xml, config, zip),\r\n    writeXmlFile(file.relationships, config, zip)]) ;\r\n}\r\n\r\n/**\r\n * Physically writes a file to disk, and adds to an in-memory zip package\r\n */\r\nfunction writeFileToPath(filename: string, contents: string | Buffer, config: IPackageSolutionTaskConfig,\r\n                         zip: ZipPackage): Promise<void> {\r\n  const filepath: string = path.join(config.paths.debugDir, filename);\r\n  return serial([\r\n    () => ensureDirectory(filepath),\r\n    () => writeFile(filepath, contents),\r\n    () => addFileToZip(filename, contents, zip)]);\r\n}\r\n\r\n/**\r\n * Returns a promise which ensures a directory on disk exists using mkdirp\r\n */\r\nfunction ensureDirectory(filepath: string): Promise<void> {\r\n  return new Promise<void>((complete: () => any, reject: (error: Error) => void) => {\r\n    const directories: string[] = filepath.split(path.sep);\r\n    directories.pop();\r\n    const pathToFile: string = directories.join(path.sep);\r\n\r\n    mkdirp(pathToFile, (err: Error) => {\r\n      if (err) {\r\n        reject(err);\r\n        return;\r\n      }\r\n      complete();\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Wraps fs.readFile in a promise\r\n */\r\nfunction readFile(filename: string, flag?: string): Promise<string | Buffer> {\r\n  return new Promise<string | Buffer>(\r\n    (complete: (data: string | Buffer) => void, reject: (error: Error) => void) => {\r\n      fs.readFile(filename, (error: Error, data: Buffer) => {\r\n        if (error) {\r\n          reject(error);\r\n          return;\r\n        }\r\n        complete(data);\r\n      });\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * Wraps fs.writeFile in a promise\r\n */\r\nfunction writeFile(filename: string, contents: string | Buffer, flag?: string): Promise<void> {\r\n  return new Promise<void>((complete: () => void, reject: (error: Error) => void) => {\r\n    fs.writeFile(filename, contents, flag, (error: Error) => {\r\n      if (error) {\r\n        reject(error);\r\n        return;\r\n      }\r\n      log(`Created file: ${filename}`);\r\n      complete();\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Adds a file to a zip package\r\n */\r\nfunction addFileToZip(filepath: string, content: string | Buffer, zip: ZipPackage): Promise<void> {\r\n  return new Promise<void>((complete: () => void, reject: (error: Error) => void) => {\r\n    const directories: string[] = filepath.split(path.sep);\r\n    const file: string = directories.pop();\r\n    for (const dir of directories) {\r\n      zip = zip.folder(dir);\r\n    }\r\n    zip.file(file, content);\r\n    complete();\r\n  });\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}