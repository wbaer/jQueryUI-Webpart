"use strict";
var os_1 = require("os");
var lodash_1 = require("lodash");
var path = require("path");
var LoaderBase = (function () {
    function LoaderBase() {
    }
    LoaderBase.prototype.getWebpackLoader = function () {
        var self = this;
        return function (content) {
            var context = this;
            var request = context.request;
            return self._processRequest(request, context);
        };
    };
    Object.defineProperty(LoaderBase.prototype, "shouldExportBasePackage", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LoaderBase.prototype, "externalPackageName", {
        get: function () {
            return this.packageName;
        },
        enumerable: true,
        configurable: true
    });
    LoaderBase.prototype._processRequest = function (request, context) {
        var requestSections = request.split('!');
        var packagePath = requestSections[requestSections.length - 1];
        var posixPackagePath = packagePath.replace(/\\/g, '/');
        var simplifiedPathsRegExp = new RegExp("(?:/" + lodash_1.escapeRegExp(this.packageName) + "/lib/)(.+)");
        var simplifiedPaths = posixPackagePath.match(simplifiedPathsRegExp);
        var lines = [];
        if (simplifiedPaths) {
            var identifiersPath = simplifiedPaths[1].trim().match(/(?:\/*)(.+)(?:\.js)$/)[1];
            var identifiers_1 = this.getIdentifier(identifiersPath);
            lines.push("// Loading " + this.packageName + "/" + simplifiedPaths[1]);
            if (identifiers_1) {
                lines.push.apply(lines, [
                    "var package = require('" + this.externalPackageName + "');"
                ]);
                if (identifiers_1.export) {
                    lines.push.apply(lines, [
                        "module.exports = package." + identifiers_1.export + ";"
                    ]);
                }
                else {
                    lines.push.apply(lines, [
                        "module.exports = " + (this.shouldExportBasePackage || identifiers_1.exportPackage ? 'package' : '{}') + ";"
                    ].concat(Object.keys(identifiers_1.exportMap || {}).map(function (identifier) {
                        return "module.exports." + identifier + " = package." + identifiers_1.exportMap[identifier] + ";";
                    })));
                }
            }
            else {
                // We didn't match a well-defined export, so we should emit a warning and pass through
                var issuer = context._module.issuer;
                if (issuer) {
                    issuer = issuer.substr(issuer.lastIndexOf('!') + 1);
                }
                context.emitWarning(this.packageFriendlyName + " path \"" + simplifiedPaths[0] + "\" does not correspond to a " +
                    ("well-defined export. Large portions of " + this.packageName + " may be unintentionally ") +
                    ("bundled. This request originated in \"" + (issuer || '-- UNKNOWN MODULE --') + "\"."));
                lines.push.apply(lines, this._getPassthroughLines(requestSections));
            }
        }
        else {
            // If we're here, this isn't a reference to the package we care about, so we should pass through
            lines.push.apply(lines, this._getPassthroughLines(requestSections));
        }
        return lines.join(os_1.EOL);
    };
    LoaderBase.prototype._getPassthroughLines = function (requestSections) {
        var filename = path.basename(this.filename);
        var filenameRegExp = new RegExp(lodash_1.escapeRegExp(filename), 'i');
        // Remove this loader from the loader chain to make sure we don't end up in an infinite loop
        var passthroughRequestSections = requestSections.filter(function (section) { return !section.match(filenameRegExp); });
        // Use "!!" prefix to disable all configured loaders because they're already specified in the remaining request.
        return [
            "module.exports = require(" + JSON.stringify("!!" + passthroughRequestSections.join('!')) + ");"
        ];
    };
    return LoaderBase;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = LoaderBase;

//# sourceMappingURL=LoaderBase.js.map
