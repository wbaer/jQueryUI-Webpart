"use strict";
var path = require("path");
var Resolve_1 = require("@microsoft/sp-build-core-tasks/lib/utilities/Resolve");
var gulp_core_build_1 = require("@microsoft/gulp-core-build");
var build = require("./../index");
var debugMode = process.argv.indexOf('--debug') !== -1;
var shipMode = process.argv.indexOf('--ship') !== -1 ||
    process.argv.indexOf('--production') !== -1;
var configResources = build.karma.resources; // tslint:diable-line:no-any
var bindPolyfillPath = configResources.bindPolyfillPath;
var spBuildWebRoot = path.join(__dirname, '..', '..');
var spPolyfillsRoot = Resolve_1.resolvePackage('@microsoft/sp-polyfills', spBuildWebRoot);
var spPolyfillsPath = path.join(spPolyfillsRoot, 'lib', 'FrameworkPolyfills.js');
var webpackConfig = build.configureWebpack.getKarmaConfig((debugMode ? [] : [
    {
        test: /\.js$/,
        // @todo VSO:247624 - clean this up when localized resources are properly loaded
        exclude: /(test|node_modules|bower_components|globalize-locales|resx-strings|localized_timezone_cities)/,
        loader: configResources.istanbulInstrumenterLoaderPath
    }
]), [{
        'jsdom': 'window',
        'cheerio': 'window',
        'react/addons': true,
        'react/lib/ExecutionEnvironment': true,
        'react/lib/ReactContext': true
    }]);
webpackConfig.context = gulp_core_build_1.getConfig().rootPath;
var testsJsFilePath = path.join(gulp_core_build_1.getConfig().tempFolder, 'tests.js');
module.exports = function (config) {
    var karmaConfig = {
        // base path that will be used to resolve all patterns (eg. files, exclude)
        basePath: gulp_core_build_1.getConfig().rootPath,
        // frameworks to use
        // available frameworks: https://npmjs.org/browse/keyword/karma-adapter
        frameworks: ['mocha', 'sinon-chai'],
        // list of files / patterns to load in the browser
        files: [bindPolyfillPath].concat([
            spPolyfillsPath,
            testsJsFilePath
        ]),
        // list of files to exclude
        exclude: [],
        // webpack config for bundling tests.
        webpack: webpackConfig,
        webpackMiddleware: {
            noInfo: true,
            quiet: !debugMode
        },
        // preprocess matching files before serving them to the browser
        // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor
        preprocessors: (_a = {},
            _a[testsJsFilePath] = ['webpack'],
            _a[path.join(gulp_core_build_1.getConfig().libFolder, '**/*.js')] = ['webpack'],
            _a[spPolyfillsPath] = ['webpack'],
            _a),
        plugins: configResources.plugins.concat([
            require('./karma-test-result-reporter')
        ]),
        // test results reporter to use
        // possible values: 'dots', 'progress'
        // available reporters: https://npmjs.org/browse/keyword/karma-reporter
        reporters: ['test-result', 'mocha-clean', 'coverage'],
        testResultReporter: {
            outputFile: path.join(gulp_core_build_1.getConfig().tempFolder, 'testResult/result.json')
        },
        coverageReporter: {
            dir: path.join(gulp_core_build_1.getConfig().tempFolder, 'coverage'),
            reporters: [
                {
                    type: 'html',
                    subdir: 'js'
                },
                {
                    type: 'json',
                    subdir: './',
                    file: 'js-coverage.json'
                }
            ]
        },
        // web server port
        port: 9876,
        // enable / disable colors in the output (reporters and logs)
        colors: true,
        // level of logging
        // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG
        logLevel: (shipMode ? config.LOG_INFO : config.LOG_DEBUG),
        // enable / disable watching file and executing tests whenever any file changes
        autoWatch: false,
        // start these browsers
        // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher
        browsers: ['PhantomJS'],
        // Continuous Integration mode
        // if true, Karma captures browsers, runs the tests and exits
        singleRun: true,
        // Increase timeouts to reduce random CI failure
        // See https://github.com/karma-runner/karma/issues/598
        captureTimeout: 10000,
        browserDisconnectTimeout: 5000,
        browserDisconnectTolerance: 5,
        browserNoActivityTimeout: 20000 // default 10000
    };
    config.set(karmaConfig);
    var _a;
};

//# sourceMappingURL=karma.config.js.map
