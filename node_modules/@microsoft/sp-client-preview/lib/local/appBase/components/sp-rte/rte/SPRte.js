"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var React = require("react");
var CKTextEditor_1 = require("../ckeditor/CKTextEditor");
var QuillEditor_1 = require("../quill/QuillEditor");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_telemetry_1 = require("@ms/sp-telemetry");
var CanvasStore_1 = require("../../sp-canvas/canvas/canvasComponent/CanvasStore");
var CanvasControlType_1 = require("../../sp-canvas/canvas/canvasControl/CanvasControlType");
var sp_lodash_subset_1 = require("@microsoft/sp-lodash-subset");
var BaseRte_1 = require("./BaseRte");
var SPRteQuillConfiguration_1 = require("./SPRteQuillConfiguration");
var SPRteCKEditorConfiguration_1 = require("./SPRteCKEditorConfiguration");
var office_ui_fabric_react_1 = require("office-ui-fabric-react");
var CKEditorFlights_1 = require("../ckeditor/CKEditorFlights");
var SPRte = (function (_super) {
    __extends(SPRte, _super);
    function SPRte(props) {
        var _this = _super.call(this, props, SPRte._IS_CKEDITOR_FLIGHTED ?
            { editor: CKTextEditor_1.default, config: new SPRteCKEditorConfiguration_1.default, loader: CKTextEditor_1.default.moduleLoader } :
            { editor: QuillEditor_1.default, config: new SPRteQuillConfiguration_1.default(), loader: QuillEditor_1.default.moduleLoader }) || this;
        _this.TAG_NAME = 'Canvas.';
        _this._restoreScrollTopOnNextFocus = false;
        _this._isPasting = false;
        _this._handleScroll = _this._async.debounce(_this._handleScroll, 100);
        return _this;
    }
    SPRte.prototype._createNewEditor = function (innerHTML, startupFocus) {
        return this._options.editor.createNewEditor(this._config, innerHTML, this._editorElement, this._handleSelectionChange, this._handleTextChange.bind(this), startupFocus, this._onImagePaste.bind(this), this._onPaste.bind(this), this._onContextualMenu.bind(this));
    };
    SPRte.prototype._onImagePaste = function (isImageValid, imageBlob, innerHTML) {
        _super.prototype._onImagePaste.call(this, isImageValid, imageBlob, innerHTML);
        if (isImageValid) {
            this._createImageWebPartAndSplitRTE(innerHTML, imageBlob, this.props.position, this.props.id);
        }
    };
    Object.defineProperty(SPRte, "_IS_CKEDITOR_FLIGHTED", {
        get: function () {
            return sp_core_library_1._SPFlight.isEnabled(CKEditorFlights_1.CKEDITOR_FLIGHT_ID);
        },
        enumerable: true,
        configurable: true
    });
    SPRte.prototype.componentDidMount = function () {
        var _this = this;
        if (this.state.displayMode === sp_core_library_1.DisplayMode.Edit) {
            if (!this._createNewEditorMonitor) {
                this._createNewEditorMonitor = new sp_telemetry_1._QosMonitor(BaseRte_1.CREATE_EDITOR_MONITOR);
            }
            this._createNewEditor(this.props.innerHTML || '', true).then(function (editor) {
                _this._afterEditorCreated(editor);
                _this.context.store.webPartManager.setPropertyPaneState(undefined);
                if (!_this.props.addedFromPersistedData) {
                    _this.focus();
                }
                _this._createNewEditorMonitor.writeSuccess();
            }, function (error) {
                _this._createNewEditorMonitor.writeUnexpectedFailure(BaseRte_1.CREATE_EDITOR_MONITOR_FAILURE, error, { 'innerHTML': _this.props.innerHTML });
            });
        }
    };
    SPRte.prototype.componentDidUpdate = function (prevProps, prevState) {
        _super.prototype.componentDidUpdate.call(this, prevProps, prevState);
        if (this.state.displayMode === sp_core_library_1.DisplayMode.Edit && this.context.store && this.context.store.scrollableParent) {
            this._formattingbar ?
                this.context.store.scrollableParent.addEventListener('scroll', this._handleScroll) :
                this.context.store.scrollableParent.removeEventListener('scroll', this._handleScroll);
        }
    };
    SPRte.prototype._closeLinkDialog = function () {
        this._restoreScrollTopOnNextFocus = true;
        this.context.store.scrollableParent.scrollTop = this._currentScrollTop;
        _super.prototype._closeLinkDialog.call(this);
    };
    SPRte.prototype._openLinkDialog = function (defaultAddress) {
        if (defaultAddress === void 0) { defaultAddress = ''; }
        _super.prototype._openLinkDialog.call(this, defaultAddress);
        this._currentScrollTop = this.context.store.scrollableParent.scrollTop;
    };
    SPRte.prototype._restoreOnFocus = function () {
        var restore = _super.prototype._restoreOnFocus.call(this);
        if (this._restoreScrollTopOnNextFocus && this._currentScrollTop) {
            this._restoreScrollTopOnNextFocus = false;
            this.context.store.scrollableParent.scrollTop = this._currentScrollTop;
            restore = true;
        }
        return restore;
    };
    SPRte.prototype.focus = function () {
        this._currentScrollTop = this.context.store.scrollableParent.scrollTop;
        _super.prototype.focus.call(this);
        this.context.store.scrollableParent.scrollTop = this._currentScrollTop;
    };
    SPRte.prototype._handleTextChange = function () {
        _super.prototype._handleTextChange.call(this);
        if (this._isPasting) {
            this._onAfterPaste();
        }
        if (this.state.displayMode === sp_core_library_1.DisplayMode.Edit && this.props.onChange) {
            this.props.onChange();
        }
    };
    SPRte.prototype._updateFormattingBar = function (isHidden) {
        if (!this._editorElement) {
            return;
        }
        var updatePosition = true;
        var newState = {
            formattingBarPosition: {
                left: SPRte._TOOLBAR_DEFAULT_POSITION.left,
                top: SPRte._TOOLBAR_DEFAULT_POSITION.top,
                position: SPRte._TOOLBAR_DEFAULT_POSITION.position,
                right: SPRte._TOOLBAR_DEFAULT_POSITION.right
            },
            isFormattingBarHidden: isHidden
        };
        if (isHidden && this._formattingbarElement) {
            if (this._editableDiv && document.activeElement && document.activeElement === this._editableDiv) {
                isHidden = false;
            }
            else {
                var buttonNodes = this._formattingbarElement.querySelectorAll('.ToolbarButton');
                for (var i = 0; i < buttonNodes.length; i++) {
                    if (this._isSelectionChangeFromToolbar || document.activeElement.isEqualNode(buttonNodes[i])) {
                        this._isSelectionChangeFromToolbar = false;
                        newState.isFormattingBarHidden = false;
                        newState.formattingBarPosition = this.state.formattingBarPosition;
                        isHidden = false;
                        updatePosition = false;
                        break;
                    }
                }
            }
            if (isHidden && !document.activeElement.isContentEditable) {
                window.getSelection().removeAllRanges();
            }
        }
        if (!isHidden) {
            newState.isFormattingBarHidden = false;
            if (updatePosition) {
                newState.formattingBarPosition = this._getFormattingBarPosition();
            }
        }
        this.setState(newState);
    };
    SPRte.prototype._onBeforePaste = function () {
        this._currentScrollTop = this.context.store.scrollableParent.scrollTop;
        this._isPasting = true;
    };
    SPRte.prototype._handleScroll = function () {
        if (this.state.formattingBarPosition) {
            var isSticky = this.state.formattingBarPosition.position === 'fixed';
            if (this._shouldFormattingBarStick() ? !isSticky : isSticky) {
                var newState = {
                    formattingBarPosition: this._getFormattingBarPosition(),
                    isLinkDialogOpen: false
                };
                this.setState(newState);
            }
        }
    };
    SPRte.prototype._getFormattingBarPosition = function () {
        var floatRight = this._isRtl || this._isRTEInLastColumn();
        var left = floatRight ? undefined : SPRte._TOOLBAR_DEFAULT_POSITION.left;
        var top = SPRte._TOOLBAR_DEFAULT_POSITION.top;
        var right = floatRight ? 0 : SPRte._TOOLBAR_DEFAULT_POSITION.right;
        var position = 'absolute';
        var isFloating = false;
        if (this._formattingbarElement) {
            if (this._currentSelection && this._currentSelection.start !== this._currentSelection.end) {
                var startBounds = this._editor.getBounds(this._currentSelection.start);
                var endBounds = this._editor.getBounds(Math.max(0, this._currentSelection.end - 1));
                if (startBounds.top === endBounds.top) {
                    isFloating = true;
                    endBounds.left = startBounds.left <= endBounds.left ? endBounds.left : this._editorElement.offsetWidth;
                    var toolbarLeft = (startBounds.left + endBounds.left) / 2 - this._formattingbarWidth / 2;
                    var controlZoneWidth = this._editorElement.offsetWidth + SPRte._CONTROLZONE_PADDING_HORIZONTAL * 2;
                    left = toolbarLeft + this._formattingbarWidth <= controlZoneWidth ?
                        Math.max(toolbarLeft, SPRte._TOOLBAR_DEFAULT_POSITION.left) :
                        controlZoneWidth - this._formattingbarWidth;
                    top = startBounds.top < SPRte._LINE_HEIGHT ?
                        SPRte._TOOLBAR_DEFAULT_POSITION.top :
                        startBounds.top + SPRte._TOOLBAR_DEFAULT_POSITION.top;
                    position = 'absolute';
                    if (left === 0) {
                        if (this._isRtl) {
                            right = undefined;
                        }
                        else if (this._isRTEInLastColumn()) {
                            left = undefined;
                            right = 0;
                        }
                    }
                }
            }
            if (!isFloating && this._shouldFormattingBarStick()) {
                if (floatRight) {
                    right = right + window.innerWidth -
                        this._editorElement.getBoundingClientRect().right - SPRte._CONTROLZONE_PADDING_HORIZONTAL;
                }
                else {
                    left = SPRte._TOOLBAR_DEFAULT_POSITION.left +
                        this._editorElement.getBoundingClientRect().left - SPRte._CONTROLZONE_PADDING_HORIZONTAL;
                }
                top = this.context.store.canvasElement.getBoundingClientRect().top +
                    this.context.store.scrollableParent.scrollTop - this.context.store.scrollThreshold;
                position = 'fixed';
            }
        }
        return { left: left, top: top, position: position, right: right };
    };
    SPRte.prototype._onAfterPaste = function () {
        var _this = this;
        sp_telemetry_1._EngagementLogger.logEvent(this.TAG_NAME + 'CopyPaste');
        this._isPasting = false;
        this.context.store.scrollableParent.scrollTop = this._currentScrollTop;
        window.setTimeout(function () {
            _this.context.store.scrollableParent.scrollTop = _this._currentScrollTop;
            var range = _this._editor.getSelection();
            if (range) {
                var viewportHeight = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
                var cursorTop = _this._editor.getBounds(range.start).top;
                var editorTop = _this._editableDiv.getBoundingClientRect().top;
                if (editorTop + cursorTop > viewportHeight) {
                    _this.context.store.scrollableParent.scrollTop =
                        _this._currentScrollTop + editorTop + cursorTop - viewportHeight + SPRte._LINE_HEIGHT;
                }
            }
        }, 10);
    };
    SPRte.prototype._shouldFormattingBarStick = function () {
        if (this._editorElement && this.context.store.canvasElement) {
            var editorRelativeTop = this._editorElement.getBoundingClientRect().top - this.context.store.canvasElement.getBoundingClientRect().top;
            return this.context.store.scrollableParent.scrollTop >
                this.context.store.scrollThreshold + SPRte._BASE_SCROLL_THRESHOLD +
                    editorRelativeTop + SPRte._TOOLBAR_DEFAULT_POSITION.top;
        }
    };
    SPRte.prototype._isRTEInLastColumn = function () {
        return CanvasStore_1.default.isLayoutSupported && this.props.position && this.props.position.sectionIndex === 3;
    };
    SPRte.prototype._createImageWebPartAndSplitRTE = function (innerHTML, imageSource, position, id) {
        var itemPropsRTE = {
            controlType: CanvasControlType_1.default.RTE,
            displayMode: this.state.displayMode,
            id: sp_core_library_1.Guid.newGuid().toString(),
            innerHTML: innerHTML
        };
        var imageWebPartManifestId = 'd1d91016-032f-456d-98a4-721247c305e8';
        var itemPropsImageWebPart = this.context.store.getToolBoxItem(imageWebPartManifestId);
        if (itemPropsImageWebPart) {
            itemPropsImageWebPart.webPartData.properties.imageBlob = imageSource;
            itemPropsImageWebPart.webPartData.id = sp_core_library_1.Guid.newGuid().toString();
            if (CanvasStore_1.default.isLayoutSupported) {
                this._addRTEAndImageWebPartWithLayout(position, itemPropsRTE, itemPropsImageWebPart);
            }
            else {
                this._addRTEAndImageWebPartWithoutLayout(id, itemPropsRTE, itemPropsImageWebPart);
            }
        }
    };
    SPRte.prototype._addRTEAndImageWebPartWithLayout = function (position, itemPropsRTE, itemPropsImageWebPart) {
        var controls = this.context.store.canvasLayout.fetchAllControls();
        var currentIndex = sp_lodash_subset_1.findIndex(controls, function (control) {
            return position === control.position;
        });
        var nextIndex = currentIndex + 1;
        var nextControlPosition;
        if (nextIndex < controls.length - 1) {
            nextControlPosition = sp_lodash_subset_1.clone(controls[nextIndex].position);
            this.context.store.addControlToCanvas(sp_lodash_subset_1.clone(nextControlPosition), itemPropsImageWebPart, true);
            this.context.store.addControlToCanvas(sp_lodash_subset_1.clone(nextControlPosition), itemPropsRTE, true);
        }
        else {
            nextControlPosition = sp_lodash_subset_1.clone(position);
            nextControlPosition.controlIndex = position.controlIndex + 1;
            this.context.store.addControlToCanvas(sp_lodash_subset_1.clone(nextControlPosition), itemPropsRTE, true);
            this.context.store.addControlToCanvas(sp_lodash_subset_1.clone(nextControlPosition), itemPropsImageWebPart, true);
        }
    };
    SPRte.prototype._addRTEAndImageWebPartWithoutLayout = function (id, itemPropsRTE, itemPropsImageWebPart) {
        var controls = this.context.store.controlsProps;
        var currentIndex = sp_lodash_subset_1.findIndex(controls, function (control) {
            return id === control.id;
        });
        this.context.store.addControlToCanvas(currentIndex + 1, itemPropsImageWebPart, true);
        this.context.store.addControlToCanvas(currentIndex + 2, itemPropsImageWebPart, true);
    };
    return SPRte;
}(BaseRte_1.BaseRte));
SPRte.contextTypes = {
    store: React.PropTypes.object.isRequired
};
SPRte._TOOLBAR_DEFAULT_POSITION = {
    left: 0,
    top: -36,
    position: 'absolute',
    right: undefined
};
SPRte._BASE_SCROLL_THRESHOLD = -10;
SPRte._CONTROLZONE_PADDING_HORIZONTAL = 8;
SPRte._LINE_HEIGHT = 23;
__decorate([
    office_ui_fabric_react_1.autobind
], SPRte.prototype, "_onBeforePaste", null);
__decorate([
    office_ui_fabric_react_1.autobind
], SPRte.prototype, "_handleScroll", null);
__decorate([
    office_ui_fabric_react_1.autobind
], SPRte.prototype, "_onAfterPaste", null);
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SPRte;
