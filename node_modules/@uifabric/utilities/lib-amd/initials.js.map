{"version":3,"sources":["initials.ts"],"names":[],"mappings":"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","file":"initials.js","sourcesContent":["/** Regex to detect words within paraenthesis in a string where gi implies global and case-insensitive. */\r\nconst CHARS_WITHIN_PARENTHESIS_REGEX: RegExp = new RegExp('\\\\(([^)]*)\\\\)', 'gi');\r\n\r\n/**\r\n *  Matches any non-word characters with respect to the Unicode codepoints; generated by\r\n * https://mothereff.in/regexpu for regex /\\W /u where u stands for Unicode support (ES6 feature).\r\n * More info here: http://stackoverflow.com/questions/280712/javascript-unicode-regexes.\r\n * gi implies global and case-insensitive.\r\n */\r\n/* tslint:disable:max-line-length */\r\nconst UNICODE_ALPHANUMERIC_CHARS_REGEX =\r\n  new RegExp(\r\n    '(?:[\\0-/:-@\\[-\\^`\\{-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]) ',\r\n    'gi');\r\n/* tslint:enable:max-line-length */\r\n\r\n/** Regex to detect multiple spaces in a string where gi implies global and case-insensitive. */\r\nconst MULTIPLE_WHITESPACES_REGEX_TOKEN: RegExp = new RegExp('\\\\s+', 'gi');\r\n\r\n/** Regex to detect Arabic text. */\r\nconst ARABIC_LANGUAGE_REGEX = new RegExp('[\\u0621-\\u064A\\u0660-\\u0669]');\r\n\r\n/** Regex to detect Korean text. */\r\nconst KOREAN_LANGUAGE_REGEX = new RegExp('[\\u1100-\\u11FF|\\u3130-\\u318F|\\uA960-\\uA97F|\\uAC00-\\uD7AF|\\uD7B0-\\uD7FF]');\r\n\r\n/** Regex to detect Chinese text. */\r\n/* tslint:disable:max-line-length */\r\nconst CHINESE_LANGUAGE_REGEX = new RegExp('[\\u4E00-\\u9FCC\\u3400-\\u4DB5\\uFA0E\\uFA0F\\uFA11\\uFA13\\uFA14\\uFA1F\\uFA21\\uFA23\\uFA24\\uFA27-\\uFA29]|[\\ud840-\\ud868][\\udc00-\\udfff]|\\ud869[\\udc00-\\uded6\\udf00-\\udfff]|[\\ud86a-\\ud86c][\\udc00-\\udfff]|\\ud86d[\\udc00-\\udf34\\udf40-\\udfff]|\\ud86e[\\udc00-\\udc1d]');\r\n/* tslint:enable:max-line-length */\r\n\r\nfunction getInitialsArabic(displayName: string, isRtl: boolean): string {\r\n  const name = displayName.replace(/\\s/, '');\r\n\r\n  return isRtl ? name[name.length - 1] : name[0];\r\n}\r\n\r\nfunction getInitialsAsian(displayName: string, isRtl: boolean): string {\r\n  const name = displayName.replace(/\\s/, '');\r\n\r\n  // For short names, only display a single character of the family name\r\n  if (name.length <= 2) {\r\n    return isRtl ? name[0] : name[name.length - 1];\r\n  }\r\n\r\n  // For long names, display the two most significant characters of the family name\r\n  return isRtl ? name.substr(0, 2) : name.substr(name.length - 2, name.length);\r\n}\r\n\r\nfunction getInitialsLatin(displayName: string, isRtl: boolean): string {\r\n  let initials = '';\r\n\r\n  const splits: string[] = displayName.split(' ');\r\n\r\n  if (splits.length === 2) {\r\n    initials += splits[0].charAt(0).toUpperCase();\r\n    initials += splits[1].charAt(0).toUpperCase();\r\n  } else if (splits.length === 3) {\r\n    initials += splits[0].charAt(0).toUpperCase();\r\n    initials += splits[2].charAt(0).toUpperCase();\r\n  } else if (splits.length !== 0) {\r\n    initials += splits[0].charAt(0).toUpperCase();\r\n  }\r\n\r\n  if (isRtl && initials.length > 1) {\r\n    return initials.charAt(1) + initials.charAt(0);\r\n  }\r\n\r\n  return initials;\r\n}\r\n\r\nfunction cleanupDisplayName(displayName: string): string {\r\n  // Do not consider the suffixes within parenthesis while computing the initials.\r\n  displayName = displayName.replace(CHARS_WITHIN_PARENTHESIS_REGEX, '');\r\n\r\n  // Ignore non-word characters\r\n  displayName = displayName.replace(UNICODE_ALPHANUMERIC_CHARS_REGEX, '');\r\n\r\n  // Make whitespace consistent\r\n  displayName = displayName.replace(MULTIPLE_WHITESPACES_REGEX_TOKEN, ' ');\r\n  displayName = displayName.trim();\r\n\r\n  return displayName;\r\n}\r\n\r\n/** Get (up to 2 characters) initials based on display name of the persona. */\r\nexport function getInitials(displayName: string, isRtl: boolean): string {\r\n  if (displayName == null) {\r\n    return '';\r\n  }\r\n\r\n  displayName = cleanupDisplayName(displayName);\r\n\r\n  if (ARABIC_LANGUAGE_REGEX.test(displayName)) {\r\n    return getInitialsArabic(displayName, isRtl);\r\n  }\r\n\r\n  if (KOREAN_LANGUAGE_REGEX.test(displayName) || CHINESE_LANGUAGE_REGEX.test(displayName)) {\r\n    return getInitialsAsian(displayName, isRtl);\r\n  }\r\n\r\n  return getInitialsLatin(displayName, isRtl);\r\n}\r\n"],"sourceRoot":"..\\src"}