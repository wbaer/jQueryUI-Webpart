"use strict";
var chai_1 = require("chai");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_page_context_1 = require("@microsoft/sp-page-context");
var sp_http_1 = require("@microsoft/sp-http");
var CanvasControlFactory_1 = require("../canvasControl/CanvasControlFactory");
var CanvasControlType_1 = require("../canvasControl/CanvasControlType");
var CanvasStore_1 = require("../canvasComponent/CanvasStore");
describe('Canvas Control Factory tests', function () {
    var rootScope = sp_core_library_1.ServiceScope.startNewRoot();
    rootScope.provide(sp_http_1.SPHttpClient.serviceKey, new sp_http_1.SPHttpClient(rootScope));
    rootScope.provide(sp_page_context_1.PageContext.serviceKey, new sp_page_context_1.PageContext(rootScope));
    rootScope.finish();
    var canvasStore;
    var render;
    beforeEach(function () {
        render = sinon.spy();
        canvasStore =
            new CanvasStore_1.default(rootScope, render, sp_core_library_1.DisplayMode.Edit);
    });
    it('should create SPRte control as expected', function () {
        var controlProps = {
            controlType: CanvasControlType_1.default.RTE,
            displayMode: sp_core_library_1.DisplayMode.Edit,
            id: 'RTEControl'
        };
        var control = CanvasControlFactory_1.default.CreateCanvasControl(controlProps, canvasStore);
        chai_1.expect(control).to.not.be.null;
        chai_1.expect(control.props.controlType).to.equal(CanvasControlType_1.default.RTE, 'canvasControlType is RTE');
        chai_1.expect(control.props.displayMode).to.equal(sp_core_library_1.DisplayMode.Edit, 'displayMode is Edit');
        chai_1.expect(control.props.id).to.equal('RTEControl', 'id is RTEControl');
    });
    it('should create WebPartZone control as expected', function () {
        var controlProps = {
            controlType: CanvasControlType_1.default.WebPartZone,
            displayMode: sp_core_library_1.DisplayMode.Edit,
            id: 'WebPartZoneControl'
        };
        var control = CanvasControlFactory_1.default.CreateCanvasControl(controlProps, canvasStore);
        chai_1.expect(control).to.not.be.null;
        chai_1.expect(control.props.controlType).to.equal(CanvasControlType_1.default.WebPartZone, 'canvasControlType is WebPartZone');
        chai_1.expect(control.props.displayMode).to.equal(sp_core_library_1.DisplayMode.Edit, 'displayMode is Edit');
        chai_1.expect(control.props.id).to.equal('WebPartZoneControl', 'id is WebPartZoneControl');
    });
});
