"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var decorators_1 = require("@microsoft/decorators");
var SPHttpClientCommonConfiguration_1 = require("./SPHttpClientCommonConfiguration");
var HttpClient_1 = require("../httpClient/HttpClient");
var SPHttpClientBatchConfiguration = (function (_super) {
    __extends(SPHttpClientBatchConfiguration, _super);
    function SPHttpClientBatchConfiguration(flags, overrideFlags) {
        return _super.call(this, flags, overrideFlags) || this;
    }
    SPHttpClientBatchConfiguration.prototype.initializeFlags = function () {
        _super.prototype.initializeFlags.call(this);
    };
    SPHttpClientBatchConfiguration.prototype.overrideWith = function (sourceFlags) {
        return new SPHttpClientBatchConfiguration(this.flags, sourceFlags);
    };
    return SPHttpClientBatchConfiguration;
}(SPHttpClientCommonConfiguration_1.default));
__decorate([
    decorators_1.override
], SPHttpClientBatchConfiguration.prototype, "initializeFlags", null);
__decorate([
    decorators_1.override
], SPHttpClientBatchConfiguration.prototype, "overrideWith", null);
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SPHttpClientBatchConfiguration;
exports.predefinedConfigurations = {
    v1: new SPHttpClientBatchConfiguration(HttpClient_1.default.configurations.v1, {
        jsonRequest: true,
        jsonResponse: true
    })
};
