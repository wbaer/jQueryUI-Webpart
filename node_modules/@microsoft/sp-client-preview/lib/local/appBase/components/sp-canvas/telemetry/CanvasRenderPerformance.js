"use strict";
var sp_telemetry_1 = require("@ms/sp-telemetry");
var CanvasRenderPerformance = (function () {
    function CanvasRenderPerformance(handleRenderingDone) {
        this._renderedWebparts = [];
        this._webPartsRenderedStatus = new Map();
        this._handleRenderingDone = handleRenderingDone;
        this._allWebPartsAdded = false;
        this._constructionTime = Date.now();
    }
    CanvasRenderPerformance.getPerformanceTag = function (alias, instanceId) {
        return "WebPart." + alias + "." + instanceId;
    };
    CanvasRenderPerformance.prototype.addWebpart = function (webpartId) {
        this._webPartsRenderedStatus.set(webpartId, false);
    };
    CanvasRenderPerformance.prototype.doneAddingWebparts = function () {
        this._allWebPartsAdded = true;
        if (this._haveAllWebpartsRendered()) {
            this._onAllWebpartsRendered();
        }
    };
    CanvasRenderPerformance.prototype.webPartRendered = function (context) {
        this._renderedWebparts.push(context);
        this._webPartsRenderedStatus.set(context.instanceId, true);
        if (this._haveAllWebpartsRendered() && this._allWebPartsAdded) {
            this._onAllWebpartsRendered();
        }
    };
    CanvasRenderPerformance.prototype._onAllWebpartsRendered = function () {
        var lastEndTime = 0;
        var viewportHeight = window.innerHeight;
        this._renderedWebparts.forEach(function (webpart) {
            var topOffset = webpart.domElement && webpart.domElement.getBoundingClientRect().top;
            if (topOffset < viewportHeight && topOffset > 0) {
                var tag = CanvasRenderPerformance.getPerformanceTag(webpart.manifest && webpart.manifest.alias || 'Unknown', webpart.instanceId);
                sp_telemetry_1._PerformanceLogger.addComponent(tag);
                var compEndTime = sp_telemetry_1._PerformanceLogger.getComponentEndTime(tag);
                if (lastEndTime < compEndTime) {
                    lastEndTime = compEndTime;
                }
            }
        });
        if (lastEndTime === 0) {
            lastEndTime = this._constructionTime;
        }
        if (this._handleRenderingDone) {
            this._handleRenderingDone(lastEndTime);
        }
    };
    CanvasRenderPerformance.prototype._haveAllWebpartsRendered = function () {
        var renderComplete = true;
        this._webPartsRenderedStatus.forEach(function (status) {
            if (status === false) {
                renderComplete = false;
            }
        });
        return renderComplete;
    };
    return CanvasRenderPerformance;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = CanvasRenderPerformance;
