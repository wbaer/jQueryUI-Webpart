/// <reference types="mocha" />
"use strict";
var chai_1 = require('chai');
var colors = require('colors');
var os = require('os');
var Interleaver_1 = require('../Interleaver');
var StringStream = (function () {
    function StringStream() {
        this._buffer = [];
    }
    StringStream.prototype.write = function (text) {
        this._buffer.push(text);
    };
    StringStream.prototype.read = function () {
        return this._buffer.join('');
    };
    StringStream.prototype.reset = function () {
        this._buffer = [];
    };
    return StringStream;
}());
var stdout = new StringStream();
Interleaver_1.default.setStdOut(stdout);
describe('Interleaver tests', function () {
    // Reset task information before each test
    beforeEach(function () {
        Interleaver_1.default.reset();
        stdout.reset();
    });
    describe('Testing register and close', function () {
        it('cannot be directly instantiated', function (done) {
            chai_1.assert.throws(function () {
                /* tslint:disable:no-unused-variable */
                var a = new Interleaver_1.default();
                /* tslint:enable:no-unused-variable */
            });
            done();
        });
        it('can register a task', function (done) {
            var helloWorldWriter = Interleaver_1.default.registerTask('Hello World');
            chai_1.assert.isObject(helloWorldWriter);
            done();
        });
        it('should not let you register two tasks with the same name', function (done) {
            var taskName = 'Hello World';
            chai_1.assert.doesNotThrow(function () { Interleaver_1.default.registerTask(taskName); });
            chai_1.assert.throws(function () { Interleaver_1.default.registerTask(taskName); });
            done();
        });
        it('should not let you close a task twice', function (done) {
            var taskName = 'Hello World';
            var task = Interleaver_1.default.registerTask(taskName);
            task.close();
            chai_1.assert.throws(task.close);
            done();
        });
        it('should not let you write to a closed task', function (done) {
            var taskName = 'Hello World';
            var task = Interleaver_1.default.registerTask(taskName);
            task.close();
            chai_1.assert.throws(function () { task.write('1'); });
            done();
        });
    });
    describe('Testing write functions', function () {
        it('writeLine should add a newline', function (done) {
            var taskA = Interleaver_1.default.registerTask('A');
            var text = 'Hello World';
            taskA.writeLine(text);
            chai_1.assert.equal(taskA.getStdOutput(), text + os.EOL);
            done();
        });
        it('should redirect warnings to stdout in yellow', function (done) {
            var taskA = Interleaver_1.default.registerTask('A');
            var warning = 'Warning - This is a warning';
            taskA.writeError(warning);
            chai_1.assert.equal(stdout.read(), colors.yellow(warning));
            taskA.close();
            chai_1.assert.equal(taskA.getStdOutput(), warning);
            chai_1.assert.equal(taskA.getStdError(), '');
            done();
        });
        it('should write errors in red', function (done) {
            var taskA = Interleaver_1.default.registerTask('A');
            var error = 'Critical error';
            taskA.writeError(error);
            chai_1.assert.equal(stdout.read(), colors.red(error));
            taskA.close();
            chai_1.assert.equal(taskA.getStdOutput(), '');
            chai_1.assert.equal(taskA.getStdError(), error);
            done();
        });
    });
    describe('Testing that output is interleaved', function () {
        it('should not write non-active tasks to stdout', function (done) {
            var taskA = Interleaver_1.default.registerTask('A');
            var taskB = Interleaver_1.default.registerTask('B');
            taskA.write('1');
            chai_1.assert.equal(stdout.read(), '1');
            taskB.write('2');
            chai_1.assert.equal(stdout.read(), '1');
            taskA.write('3');
            chai_1.assert.equal(stdout.read(), '13');
            taskA.close();
            chai_1.assert.equal(stdout.read(), '13');
            taskB.close();
            chai_1.assert.equal(stdout.read(), '132');
            chai_1.assert.equal(taskA.getStdOutput(), '13');
            chai_1.assert.equal(taskB.getStdOutput(), '2');
            done();
        });
        it('should not write anything when in quiet mode', function (done) {
            var taskA = Interleaver_1.default.registerTask('A', true);
            var taskB = Interleaver_1.default.registerTask('B', true);
            taskA.write('1');
            chai_1.assert.equal(stdout.read(), '');
            taskB.write('2');
            chai_1.assert.equal(stdout.read(), '');
            taskA.write('3');
            chai_1.assert.equal(stdout.read(), '');
            taskA.close();
            chai_1.assert.equal(stdout.read(), '');
            taskB.close();
            chai_1.assert.equal(stdout.read(), '');
            chai_1.assert.equal(taskA.getStdOutput(), '13');
            chai_1.assert.equal(taskB.getStdOutput(), '2');
            done();
        });
        it('should update the active task once the active task is closed', function (done) {
            var taskA = Interleaver_1.default.registerTask('A');
            var taskB = Interleaver_1.default.registerTask('B');
            taskA.write('1');
            chai_1.assert.equal(stdout.read(), '1');
            taskA.close();
            chai_1.assert.equal(stdout.read(), '1');
            taskB.write('2');
            chai_1.assert.equal(stdout.read(), '12');
            taskB.close();
            chai_1.assert.equal(stdout.read(), '12');
            chai_1.assert.equal(taskA.getStdOutput(), '1');
            chai_1.assert.equal(taskB.getStdOutput(), '2');
            done();
        });
        it('should write completed tasks after the active task is completed', function (done) {
            var taskA = Interleaver_1.default.registerTask('A');
            var taskB = Interleaver_1.default.registerTask('B');
            taskA.write('1');
            chai_1.assert.equal(stdout.read(), '1');
            taskB.write('2');
            chai_1.assert.equal(stdout.read(), '1');
            taskB.close();
            chai_1.assert.equal(stdout.read(), '1');
            taskA.close();
            chai_1.assert.equal(stdout.read(), '12');
            chai_1.assert.equal(taskA.getStdOutput(), '1');
            chai_1.assert.equal(taskB.getStdOutput(), '2');
            done();
        });
    });
});

//# sourceMappingURL=Interleaver.test.js.map
