"use strict";
var chai_1 = require("chai");
var CKTextEditor_1 = require("../ckeditor/CKTextEditor");
var SPRteCKEditorConfiguration_1 = require("../rte/SPRteCKEditorConfiguration");
describe('CKTextEditor tests', function () {
    if (UNIT_TEST) {
        return;
    }
    var ckEditorConfiguration;
    var ckeditor;
    var selectionChangeCallback;
    var textChangeCallBack;
    var editorElement;
    var mockData = '<div><a href="https://bing.com">mock link</a> this is my mock text</div>';
    beforeEach(function (done) {
        ckEditorConfiguration = new SPRteCKEditorConfiguration_1.default();
        ckEditorConfiguration.editorSource = 'https://cdn.ckeditor.com/4.6.0/standard-all/';
        selectionChangeCallback = sinon.spy();
        textChangeCallBack = sinon.spy();
        editorElement = document.createElement('div');
        document.body.appendChild(editorElement);
        CKTextEditor_1.default.createNewEditor(ckEditorConfiguration, mockData, editorElement, selectionChangeCallback, textChangeCallBack, true).then(function (editor) {
            if (editor) {
                ckeditor = editor;
            }
            done();
        }).catch(function (error) {
            console.log(error);
            done();
        });
    });
    afterEach(function (done) {
        document.body.removeChild(editorElement);
        if (ckeditor) {
            ckeditor.destroy();
        }
        done();
    });
    it('should create a new editor as expected', function (done) {
        if (ckeditor) {
            chai_1.expect(ckeditor).not.to.be.undefined;
            chai_1.assert.deepEqual(ckeditor.getEditorType(), 'CKEditor');
            chai_1.expect(ckeditor.getHTML()).to.be.not.undefined;
        }
        done();
    });
    it('should set the selection as expected', function (done) {
        if (ckeditor) {
            ckeditor.focus();
            var expectedRange = { start: 0, end: 5 };
            var actualRange = setSelection(expectedRange);
            chai_1.assert.deepEqual(actualRange, expectedRange, 'range should be equal');
        }
        done();
    });
    it('should apply different formats as expected', function (done) {
        if (ckeditor) {
            var format = ckEditorConfiguration.formats.get('bold');
            var formats = {};
            formats[format.editorKey] = true;
            var expectedRange = { start: 0, end: 5 };
            var actualRange = setSelection(expectedRange);
            var _a = [actualRange.start, actualRange.end], start = _a[0], end = _a[1];
            ckeditor.format(start, end, formats);
            chai_1.expect(ckeditor.isFormatAppliedToRange(start, end, format)).to.be.true;
            format = ckEditorConfiguration.formats.get('h2');
            formats[format.editorKey] = true;
            ckeditor.format(start, end, formats);
            chai_1.expect(ckeditor.isFormatAppliedToRange(start, end, format)).to.be.true;
        }
        done();
    });
    it('should get the format value attribute for link only', function (done) {
        if (ckeditor) {
            var format = ckEditorConfiguration.formats.get('link');
            var expectedRange = { start: 0, end: 9 };
            var range = setSelection(expectedRange);
            var _a = [range.start, range.end], start = _a[0], end = _a[1];
            chai_1.expect(ckeditor.getFormatValue(start, end, format)).to.be.eq('https://bing.com');
            format = ckEditorConfiguration.formats.get('h3');
            chai_1.expect(ckeditor.getFormatValue(0, 10, format)).to.be.false;
        }
        done();
    });
    it('should return the text as expected', function (done) {
        if (ckeditor) {
            chai_1.assert.deepEqual(ckeditor.getText(), mockData.replace(/div/g, 'p') + '\n', 'text value should be same');
        }
        done();
    });
    it('should return the inner html as expected', function (done) {
        if (ckeditor) {
            chai_1.assert.deepEqual(ckeditor.getHTML(), mockData.replace(/div/g, 'p') + '\n', 'html should be same');
        }
        done();
    });
    function setSelection(range) {
        if (ckeditor) {
            ckeditor.setSelection(range);
            return ckeditor.getSelection();
        }
        return undefined;
    }
});
