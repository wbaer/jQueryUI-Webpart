/// <reference types="es6-promise" />
import { IBounds } from '../rte/IBounds';
import { IRange } from '../rte/IRange';
import { IRichTextFormat } from '../rte/IRichTextFormat';
import { IRichTextEditor } from '../rte/IRichTextEditor';
import { IRichTextEditorLoader } from '../rte/IRichTextEditorLoader';
import { IRichTextEditorConfiguration } from '../rte/IRichTextEditorConfiguration';
import './QuillEditor.scss';
/**
 * Implmentation of IRichTextEditor for Quill 1.0.0-beta.9
 */
export default class QuillEditor implements IRichTextEditor {
    static moduleLoader: IRichTextEditorLoader;
    private _config;
    private _editorElement;
    private _quill;
    private _quillModule;
    private _quillEditorElement;
    private _handleSelectionChange;
    private _handleTextChange;
    private _platform;
    /**
     * @return Promise of the instance that resolves once the editor is loaded on the element
     *
     * Static wrapper for constructing an instance
     */
    static createNewEditor(config: IRichTextEditorConfiguration, currentHTML: string, editorElement: HTMLDivElement, selectionChangeCallback: (range: IRange) => void, textChangeCallback: () => void, startupFocus?: boolean): Promise<QuillEditor>;
    private static _createQosScope(scenario);
    private static _handleMonitoredException(qos, err);
    /**
     * Use createNewEditor instead of constructor to ensure using the editor after it's loaded
     * Note: TypeScript doesn't allow private constructors
     */
    constructor(config: IRichTextEditorConfiguration, currentHTML: string, editorElement: HTMLDivElement, selectionChangeCallback: (range: IRange) => void, textChangeCallback: () => void);
    clearFormatting(start: number, end: number): void;
    destroy(): string;
    focus(): void;
    /**
     * Applies the format to the table in the RTE
     */
    formatTable(format: string, target: Element): void;
    /**
     * @param start - Start position of selection
     * @param end - End position of selection
     * @param formats - Map of key:value pairs for formats to apply
     * @param applyAllFormatsToLine - Forces all formats to be applied to the whole line(s). If not provided,
     * formats are divided into two buckets (line vs non-line) based on their isLine field
     *
     * A unified method for applying Quill formats to any selection
     */
    format(start: number, end: number, formats: Object, applyAllFormatsToLine?: boolean): void;
    getBounds(position: number): IBounds;
    getFormatValue(start: number, end: number, format: IRichTextFormat): boolean | string;
    getSelection(): IRange;
    getText(range?: IRange): string;
    getHTML(): string;
    getEditorType(): string;
    /**
     * @param format - Name of the format to apply from QUILL_FORMATS or SPRTE_FORMATS
     * @param start - Start value of range
     * @param end - End value of range
     *
     * @return A dictionary of string=>boolean indicating if the format is applied to the given range
     */
    isFormatAppliedToRange(start: number, end: number, format: IRichTextFormat): boolean;
    setSelection(range: IRange): void;
    private _findWrappingElementByTagName(position, tagName);
    private _handleSelectionChangeConvert(range);
    /**
     * Matcher for copy pasting content. This only matches Chrome/FireFox.
     * @param quill - Quill instance
     * @param tagName - the tag or query selector for matcher eg a, img, table
     * @param formatName - the format being applied
     * @param quillModule - quill module
     * */
    private _addMatcher(quill, tagName, formatName, quillModule);
    /**
     * Initialize Quill with whitelist of formats, prevent default css,
     * add custom formats, and registering event handlers.
     */
    private _initialize(currentHTML);
}
