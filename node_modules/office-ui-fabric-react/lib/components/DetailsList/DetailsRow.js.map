{"version":3,"sources":["components/DetailsList/DetailsRow.tsx"],"names":[],"mappings":"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","file":"components/DetailsList/DetailsRow.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  EventGroup,\r\n  assign,\r\n  css,\r\n  shallowCompare\r\n} from '../../Utilities';\r\nimport { IColumn, CheckboxVisibility } from './DetailsList.Props';\r\nimport { DetailsRowCheck, IDetailsRowCheckProps } from './DetailsRowCheck';\r\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\r\nimport { DetailsRowFields } from './DetailsRowFields';\r\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\r\nimport { ISelection, SelectionMode, SELECTION_CHANGE } from '../../utilities/selection/interfaces';\r\nimport {\r\n  IDragDropHelper,\r\n  IDragDropEvents,\r\n  IDragDropOptions,\r\n} from './../../utilities/dragdrop/interfaces';\r\nimport { IViewport } from '../../utilities/decorators/withViewport';\r\nimport { IDisposable } from '@uifabric/utilities';\r\nimport './DetailsRow.scss';\r\n\r\nexport interface IDetailsRowProps extends React.Props<DetailsRow> {\r\n  item: any;\r\n  itemIndex: number;\r\n  columns: IColumn[];\r\n  selectionMode: SelectionMode;\r\n  selection: ISelection;\r\n  eventsToRegister?: { eventName: string, callback: (item?: any, index?: number, event?: any) => void }[];\r\n  onDidMount?: (row?: DetailsRow) => void;\r\n  onWillUnmount?: (row?: DetailsRow) => void;\r\n  onRenderCheck?: (props: IDetailsRowCheckProps) => JSX.Element;\r\n  onRenderItemColumn?: (item?: any, index?: number, column?: IColumn) => any;\r\n  dragDropEvents?: IDragDropEvents;\r\n  dragDropHelper?: IDragDropHelper;\r\n  groupNestingDepth?: number;\r\n  viewport?: IViewport;\r\n  checkboxVisibility?: CheckboxVisibility;\r\n  getRowAriaLabel?: (item: any) => string;\r\n  checkButtonAriaLabel?: string;\r\n}\r\n\r\nexport interface IDetailsRowSelectionState {\r\n  isSelected: boolean;\r\n  anySelected: boolean;\r\n}\r\n\r\nexport interface IDetailsRowState {\r\n  selectionState?: IDetailsRowSelectionState;\r\n  columnMeasureInfo?: {\r\n    index: number;\r\n    column: IColumn;\r\n    onMeasureDone: (measuredWidth: number) => void;\r\n  };\r\n  isDropping?: boolean;\r\n  groupNestingDepth?: number;\r\n}\r\n\r\nconst DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\r\n\r\nexport class DetailsRow extends React.Component<IDetailsRowProps, IDetailsRowState> {\r\n  public refs: {\r\n    [key: string]: React.ReactInstance,\r\n    root: HTMLElement,\r\n    cellMeasurer: HTMLElement\r\n  };\r\n\r\n  private _events: EventGroup;\r\n  private _hasSetFocus: boolean;\r\n  private _droppingClassNames: string;\r\n  private _hasMounted: boolean;\r\n  private _dragDropSubscription: IDisposable;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      selectionState: this._getSelectionState(props),\r\n      columnMeasureInfo: null,\r\n      isDropping: false,\r\n      groupNestingDepth: props.groupNestingDepth\r\n    };\r\n\r\n    this._hasSetFocus = false;\r\n\r\n    this._events = new EventGroup(this);\r\n    this._droppingClassNames = '';\r\n    this._updateDroppingState = this._updateDroppingState.bind(this);\r\n  }\r\n\r\n  public componentDidMount() {\r\n    let { dragDropHelper } = this.props;\r\n\r\n    if (dragDropHelper) {\r\n      this._dragDropSubscription = dragDropHelper.subscribe(this.refs.root, this._events, this._getRowDragDropOptions());\r\n    }\r\n\r\n    this._events.on(this.props.selection, SELECTION_CHANGE, this._onSelectionChanged);\r\n\r\n    if (this.props.onDidMount && this.props.item) {\r\n      // If the item appears later, we should wait for it before calling this method.\r\n      this._hasMounted = true;\r\n      this.props.onDidMount(this);\r\n    }\r\n  }\r\n\r\n  public componentDidUpdate(previousProps: IDetailsRowProps) {\r\n    let state = this.state;\r\n    let { item, onDidMount } = this.props;\r\n    let { columnMeasureInfo } = state;\r\n\r\n    if (this.props.itemIndex !== previousProps.itemIndex ||\r\n      this.props.item !== previousProps.item ||\r\n      this.props.dragDropHelper !== previousProps.dragDropHelper) {\r\n      if (this._dragDropSubscription) {\r\n        this._dragDropSubscription.dispose();\r\n        delete this._dragDropSubscription;\r\n      }\r\n\r\n      if (this.props.dragDropHelper) {\r\n        this.props.dragDropHelper.subscribe(this.refs.root, this._events, this._getRowDragDropOptions());\r\n      }\r\n    }\r\n\r\n    if (columnMeasureInfo && columnMeasureInfo.index >= 0) {\r\n      let newWidth = this.refs.cellMeasurer.getBoundingClientRect().width;\r\n\r\n      columnMeasureInfo.onMeasureDone(newWidth);\r\n\r\n      this.setState({\r\n        columnMeasureInfo: null\r\n      });\r\n    }\r\n\r\n    if (item && onDidMount && !this._hasMounted) {\r\n      this._hasMounted = true;\r\n      onDidMount(this);\r\n    }\r\n  }\r\n\r\n  public componentWillUnmount() {\r\n    let { item, onWillUnmount } = this.props;\r\n\r\n    this._events.dispose();\r\n\r\n    // Only call the onWillUnmount callback if we have an item.\r\n    if (onWillUnmount && item) {\r\n      onWillUnmount(this);\r\n    }\r\n\r\n    if (this._dragDropSubscription) {\r\n      this._dragDropSubscription.dispose();\r\n      delete this._dragDropSubscription;\r\n    }\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps: IDetailsRowProps) {\r\n    this.setState({\r\n      selectionState: this._getSelectionState(newProps),\r\n      groupNestingDepth: newProps.groupNestingDepth\r\n    });\r\n  }\r\n\r\n  public render() {\r\n    const {\r\n      columns,\r\n      dragDropEvents,\r\n      item,\r\n      itemIndex,\r\n      onRenderCheck = this._onRenderCheck,\r\n      onRenderItemColumn,\r\n      selectionMode,\r\n      viewport,\r\n      checkboxVisibility,\r\n      getRowAriaLabel,\r\n      checkButtonAriaLabel,\r\n      selection\r\n    } = this.props;\r\n    const { selectionState: { isSelected, anySelected }, columnMeasureInfo, isDropping, groupNestingDepth } = this.state;\r\n    const isDraggable = Boolean(dragDropEvents && dragDropEvents.canDrag && dragDropEvents.canDrag(item));\r\n    const droppingClassName = isDropping ? (this._droppingClassNames ? this._droppingClassNames : DEFAULT_DROPPING_CSS_CLASS) : '';\r\n    const ariaLabel = getRowAriaLabel ? getRowAriaLabel(item) : null;\r\n    const canSelect = selection.canSelectItem(item);\r\n    const isContentUnselectable = selectionMode === SelectionMode.multiple;\r\n\r\n    return (\r\n      <div\r\n        ref='root'\r\n        role='row'\r\n        aria-label={ ariaLabel }\r\n        className={ css('ms-DetailsRow ms-u-fadeIn400', droppingClassName, {\r\n          'is-contentUnselectable': isContentUnselectable,\r\n          'is-selected': isSelected,\r\n          'is-check-visible': checkboxVisibility === CheckboxVisibility.always\r\n        }) }\r\n        data-is-focusable={ true }\r\n        data-selection-index={ itemIndex }\r\n        data-item-index={ itemIndex }\r\n        data-is-draggable={ isDraggable }\r\n        data-automationid='DetailsRow'\r\n        style={ { minWidth: viewport ? viewport.width : 0 } }\r\n        aria-selected={ isSelected }\r\n      >\r\n        <FocusZone direction={ FocusZoneDirection.horizontal }>\r\n          { (selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden) && (\r\n            <span role='gridcell'>\r\n              { onRenderCheck({\r\n                isSelected,\r\n                anySelected,\r\n                ariaLabel: checkButtonAriaLabel,\r\n                canSelect\r\n              }) }\r\n            </span>\r\n          ) }\r\n\r\n          { GroupSpacer({ count: groupNestingDepth }) }\r\n\r\n          { item && (\r\n            <DetailsRowFields\r\n              columns={ columns }\r\n              item={ item }\r\n              itemIndex={ itemIndex }\r\n              onRenderItemColumn={ onRenderItemColumn } />\r\n          ) }\r\n\r\n          { columnMeasureInfo && (\r\n            <span className='ms-DetailsRow-cellMeasurer ms-DetailsRow-cell' ref='cellMeasurer'>\r\n              <DetailsRowFields\r\n                columns={ [columnMeasureInfo.column] }\r\n                item={ item }\r\n                itemIndex={ itemIndex }\r\n                onRenderItemColumn={ onRenderItemColumn } />\r\n            </span>\r\n          ) }\r\n        </FocusZone>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * measure cell at index. and call the call back with the measured cell width when finish measure\r\n   *\r\n   * @param {number} index (the cell index)\r\n   * @param {(width: number) => void} onMeasureDone (the call back function when finish measure)\r\n   */\r\n  public measureCell(index: number, onMeasureDone: (width: number) => void) {\r\n    let column = assign({}, this.props.columns[index]) as IColumn;\r\n\r\n    column.minWidth = 0;\r\n    column.maxWidth = 999999;\r\n\r\n    delete column.calculatedWidth;\r\n\r\n    this.setState({\r\n      columnMeasureInfo: {\r\n        index,\r\n        column,\r\n        onMeasureDone\r\n      }\r\n    });\r\n  }\r\n\r\n  public focus() {\r\n    if (this.refs && this.refs.root) {\r\n      this.refs.root.tabIndex = 0;\r\n      this.refs.root.focus();\r\n    }\r\n  }\r\n\r\n  protected _onRenderCheck(props: IDetailsRowCheckProps) {\r\n    return <DetailsRowCheck { ...props } />;\r\n  }\r\n\r\n  private _getSelectionState(props: IDetailsRowProps): IDetailsRowSelectionState {\r\n    let { itemIndex, selection } = props;\r\n\r\n    return {\r\n      isSelected: selection.isIndexSelected(itemIndex),\r\n      anySelected: selection.getSelectedCount() > 0\r\n    };\r\n  }\r\n\r\n  private _onSelectionChanged() {\r\n    let selectionState = this._getSelectionState(this.props);\r\n\r\n    if (!shallowCompare(selectionState, this.state.selectionState)) {\r\n      this.setState({\r\n        selectionState: selectionState\r\n      });\r\n    }\r\n  }\r\n\r\n  private _getRowDragDropOptions(): IDragDropOptions {\r\n    const {\r\n      item,\r\n      itemIndex,\r\n      dragDropEvents,\r\n      eventsToRegister\r\n    } = this.props;\r\n    let options = {\r\n      eventMap: eventsToRegister,\r\n      selectionIndex: itemIndex,\r\n      context: { data: item, index: itemIndex },\r\n      canDrag: dragDropEvents.canDrag,\r\n      canDrop: dragDropEvents.canDrop,\r\n      onDragStart: dragDropEvents.onDragStart,\r\n      updateDropState: this._updateDroppingState\r\n    };\r\n    return options;\r\n  }\r\n\r\n  /**\r\n   * update isDropping state based on the input value, which is used to change style during drag and drop\r\n   *\r\n   * when change to true, that means drag enter. we will add default dropping class name\r\n   * or the custom dropping class name (return result from onDragEnter) to the root elemet.\r\n   *\r\n   * when change to false, that means drag leave. we will remove the dropping class name from root element.\r\n   *\r\n   * @private\r\n   * @param {boolean} newValue (new isDropping state value)\r\n   * @param {DragEvent} event (the event trigger dropping state change which can be dragenter, dragleave etc)\r\n   */\r\n  private _updateDroppingState(newValue: boolean, event: DragEvent) {\r\n    let { selectionState, isDropping } = this.state;\r\n    let { dragDropEvents, item } = this.props;\r\n\r\n    if (!newValue) {\r\n      if (dragDropEvents.onDragLeave) {\r\n        dragDropEvents.onDragLeave(item, event);\r\n      }\r\n    } else {\r\n      if (dragDropEvents.onDragEnter) {\r\n        this._droppingClassNames = dragDropEvents.onDragEnter(item, event);\r\n      }\r\n    }\r\n\r\n    if (isDropping !== newValue) {\r\n      this.setState({ selectionState: selectionState, isDropping: newValue });\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}