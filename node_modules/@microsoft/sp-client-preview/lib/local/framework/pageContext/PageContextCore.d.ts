import IOdataContext from './IOdataContext';
import ISPPageContextInfo from '../httpClient/odataTypes/ISPPageContextInfo';
import { IODataBasePermission } from '@microsoft/sp-odata-types';
import { SPPermission } from '@microsoft/sp-page-context';
import PageContext from './AppPageContext';
import PageContextItem from './PageContextItem';
export interface IPageContextCoreArgs {
    MenuData: Object;
    currentCultureName: string;
    currentUICultureName: string;
    correlationId: string;
    spoEnvironment: string;
    farmLabel: string;
    groupColor: string;
    hasManageWebPermission: boolean;
    isWebWelcomePage: boolean;
    layoutsUrl: string;
    listPermsMask: Object;
    siteAbsoluteUrl: string;
    siteClientTag: string;
    siteId: string;
    sitePagesEnabled: boolean;
    siteServerRelativeUrl: string;
    siteSubscriptionId: string;
    systemUserKey: string;
    themedCssFolderUrl: string;
    userDisplayName: string;
    userLoginName: string;
    webAbsoluteUrl: string;
    webId: string;
    webLogoUrl: string;
    webServerRelativeUrl: string;
    webTitle: string;
    webTemplate: string;
    webPermMasks: IODataBasePermission;
}
/**
  * This class is primarily used with the PageContext class.  It provides contextual
  * information for the SharePoint site collection that is hosting the page.
  */
export default class PageContextCore extends PageContextItem implements IOdataContext<ISPPageContextInfo> {
    private _menuData;
    private _currentCultureName;
    private _currentUICultureName;
    private _initialCorrelationId;
    private _spoEnvironment;
    private _farmLabel;
    private _groupColor;
    private _hasManageWebPermission;
    private _isWebWelcomePage;
    private _layoutsUrl;
    private _listPermsMask;
    private _siteAbsoluteUrl;
    private _siteClientTag;
    private _siteId;
    private _sitePagesEnabled;
    private _siteServerRelativeUrl;
    private _siteSubscriptionId;
    private _systemUserKey;
    private _themedCssFolderUrl;
    private _userDisplayName;
    private _userLoginName;
    private _webAbsoluteUrl;
    private _webId;
    private _webLogoUrl;
    private _webServerRelativeUrl;
    private _webTitle;
    private _webTemplate;
    private _odataObject;
    private _webPermMasks;
    constructor(pageContext: PageContext);
    /**
     * Assigns all properties of the object, then assigns the "state" property
     * to PageContextItemState.Ready.
     */
    load(args: IPageContextCoreArgs): void;
    /**
     * Common menu data that is shared throughout all Sharepoint applications.
     */
    readonly menuData: Object;
    /**
     * The culture used for rendering date/time components.
     */
    readonly currentCultureName: string;
    /**
     * The culture used for rendering UI components.
     */
    readonly currentUICultureName: string;
    /**
     * The GUID that identifies the CorrelationId of the request.
     */
    readonly initialCorrelationId: string;
    /**
     * The name of the SPO Environment (eDog, MSIT, Prod, ...) for this request.
     */
    readonly spoEnvironment: string;
    /**
     * The farm Label for this request. (US_2_Content)
     */
    readonly farmLabel: string;
    /**
     * The group Color (ie "0xFFFFFF"") (only from Group Sites)
     */
    readonly groupColor: string;
    /**
     * The relative layout url of the web
     */
    readonly layoutsUrl: string;
    /**
     * Indicates if the user has ManageWeb Permissions for the site this request was in.
     */
    readonly hasManageWebPermission: boolean;
    /**
     * Indicates if the current page is the current web's welcome page.
     */
    readonly isWebWelcomePage: boolean;
    /**
     * The Mask of list Permissions for the current user in the list of this request.
     */
    readonly listPermsMask: Object;
    /**
     * The AbsoluteUrl of this request.
     */
    readonly siteAbsoluteUrl: string;
    /**
     * The site's version number of sharepoint.
     */
    readonly siteClientTag: string;
    /**
       * The site's id on sharepoint.
       */
    readonly siteId: string;
    /**
     * Does the site have Site-Pages feature enabled.
     */
    readonly sitePagesEnabled: boolean;
    /**
     * The server relative Url to the SPSite
     */
    readonly siteServerRelativeUrl: string;
    /**
     * The siteSubscriptionId of the Tenant for which this request was made.
     */
    readonly siteSubscriptionId: string;
    /**
     * The string that represents the unique user.
     */
    readonly systemUserKey: string;
    /**
     * The url for the themed CSS if this site has a theme appplied, otherwise null.
     */
    readonly themedCssFolderUrl: string;
    /**
     * The absolute url to the SPWeb
     */
    readonly userDisplayName: string;
    /**
     * The absolute url to the SPWeb
     */
    readonly userLoginName: string;
    /**
     * The absolute url to the SPWeb
     */
    readonly webAbsoluteUrl: string;
    /**
     * The absolute url to the SPWeb
     */
    readonly webId: string;
    /**
     * The server relative Url to the web Logo
     */
    readonly webLogoUrl: string;
    /**
     * The server Relative url to the SPWeb
     */
    readonly webServerRelativeUrl: string;
    /**
     * The Title of the Web
     */
    readonly webTitle: string;
    /**
     * The site template used to create the web.
     */
    readonly webTemplate: string;
    /**
     * Returns an ODATA object containing additional information for this list, if available.
     * Otherwise, this returns undefined.  If your application fetches this data itself, it
     * can call updateOdataObject() to update the context.
     */
    getOdataObject(): ISPPageContextInfo;
    /**
     * Updates the ODATA object that will be returned when getOdataObject() is called.
     * This allows the application to share its data with other objects (e.g. web parts)
     * to avoid unnecessary REST calls.
     */
    updateOdataObject(value: ISPPageContextInfo): void;
    /**
     * The permissions mask of the current user on the web.
     */
    readonly userPermissionsForWeb: SPPermission;
}
