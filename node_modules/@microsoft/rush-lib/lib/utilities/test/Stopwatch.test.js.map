{"version":3,"sources":["utilities/test/Stopwatch.test.ts"],"names":[],"mappings":"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","file":"utilities/test/Stopwatch.test.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/// <reference types='mocha' />\r\n\r\nimport { assert } from 'chai';\r\n\r\nimport { Stopwatch, StopwatchState } from '../Stopwatch';\r\n\r\nfunction pseudoTimeMilliseconds(times: number[]): () => number {\r\n  return () => times.shift();\r\n}\r\n\r\nfunction pseudoTimeSeconds(times: number[]): () => number {\r\n  return pseudoTimeMilliseconds(times.map(time => time * 1000));\r\n}\r\n\r\ndescribe('Stopwatch', () => {\r\n  it('allows a static invocation as a quick shorthand', (done: MochaDone) => {\r\n    assert.equal(Stopwatch.start().reset().toString(), '0.00 seconds (stopped)');\r\n    done();\r\n  });\r\n\r\n  it('stopping before starting does nothing', (done: MochaDone) => {\r\n    const watch: Stopwatch = new Stopwatch();\r\n    watch.stop();\r\n    assert.equal(watch.toString(), '0.00 seconds (stopped)');\r\n    done();\r\n  });\r\n\r\n  it('can\\'t start twice', (done: MochaDone) => {\r\n    const watch: Stopwatch = new Stopwatch();\r\n    assert.throws(() => {\r\n      watch.start();\r\n      watch.start();\r\n    });\r\n    done();\r\n  });\r\n\r\n  it('reflects the proper state', (done: MochaDone) => {\r\n    const watch: Stopwatch = new Stopwatch();\r\n    assert.equal(watch.state, StopwatchState.Stopped);\r\n    watch.start();\r\n    assert.equal(watch.state, StopwatchState.Started);\r\n    watch.stop();\r\n    assert.equal(watch.state, StopwatchState.Stopped);\r\n    watch.reset();\r\n    assert.equal(watch.state, StopwatchState.Stopped);\r\n    done();\r\n  });\r\n\r\n  it('gives 0.00 seconds after being reset', (done: MochaDone) => {\r\n    const watch: Stopwatch = new Stopwatch();\r\n    watch.start();\r\n    watch.reset();\r\n    assert.equal(watch.toString(), '0.00 seconds (stopped)');\r\n    done();\r\n  });\r\n\r\n  it('gives 0.00 seconds when not running', (done: MochaDone) => {\r\n    const watch: Stopwatch = new Stopwatch();\r\n    assert.equal(watch.toString(), '0.00 seconds (stopped)');\r\n    done();\r\n  });\r\n\r\n  it('uses the latest time when the clock is not stopped', (done: MochaDone) => {\r\n    const watch: Stopwatch = new Stopwatch(pseudoTimeSeconds([0, 1, 2]));\r\n    watch.start();\r\n    assert.equal(watch.toString(), '1.00 seconds');\r\n    assert.equal(watch.toString(), '2.00 seconds');\r\n    done();\r\n  });\r\n\r\n  it('uses the stop time when the clock is stopped', (done: MochaDone) => {\r\n    const watch: Stopwatch = new Stopwatch(pseudoTimeSeconds([0, 1, 2]));\r\n    watch.start();\r\n    watch.stop();\r\n    assert.equal(watch.toString(), '1.00 seconds');\r\n    assert.equal(watch.toString(), '1.00 seconds');\r\n    done();\r\n  });\r\n\r\n  it('gives elapsed seconds when < 1 minute', (done: MochaDone) => {\r\n    const watch: Stopwatch = new Stopwatch(pseudoTimeSeconds([0, 1, 2, 3.25]));\r\n    watch.start();\r\n    watch.stop();\r\n    assert.equal(watch.toString(), '1.00 seconds');\r\n    done();\r\n  });\r\n\r\n  it('gives elapsed minutes and seconds when > 1 minute', (done: MochaDone) => {\r\n    const watch: Stopwatch = new Stopwatch(pseudoTimeSeconds([0, 400]));\r\n    watch.start();\r\n    watch.stop();\r\n    assert.equal(watch.toString(), '6 minutes 40.0 seconds');\r\n    done();\r\n  });\r\n\r\n  it('gives elapsed minute and seconds when time >=60 <=119 seconds', (done: MochaDone) => {\r\n    const watch: Stopwatch = new Stopwatch(pseudoTimeSeconds([0, 61.25]));\r\n    watch.start();\r\n    watch.stop();\r\n    assert.equal(watch.toString(), '1 minute 1.3 seconds');\r\n    done();\r\n  });\r\n});\r\n"],"sourceRoot":"..\\..\\..\\src"}