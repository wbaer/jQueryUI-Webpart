"use strict";
var chai_1 = require("chai");
var sp_lodash_subset_1 = require("@microsoft/sp-lodash-subset");
var test_1 = require("@microsoft/sp-core-library/lib/test");
var MockPageContextData_1 = require("./MockPageContextData");
var PageContext_1 = require("../PageContext");
describe('PageContext tests', function () {
    var pageContext;
    var pageContextData;
    beforeEach(function () {
        pageContext = new PageContext_1.default(test_1.TEST_UNDEFINED);
        pageContextData = sp_lodash_subset_1.cloneDeep(MockPageContextData_1.default);
    });
    it('Should succeed to initialize a PageContext with valid IPageContextData', function () {
        pageContext.initialize(MockPageContextData_1.default);
        chai_1.assert.isTrue(pageContext.isInitialized);
    });
    it('Should fail to initialize a PageContext with invalid ISPWebData', function () {
        pageContextData.web.title = test_1.TEST_UNDEFINED;
        chai_1.assert.throws(function () { return pageContext.initialize(pageContextData); });
        chai_1.assert.isFalse(pageContext.isInitialized);
    });
    it('Should fail to initialize a PageContext with invalid ICultureInfoData', function () {
        pageContextData.cultureInfo.isRightToLeft = test_1.TEST_UNDEFINED;
        chai_1.assert.throws(function () { return pageContext.initialize(pageContextData); });
        chai_1.assert.isFalse(pageContext.isInitialized);
    });
    it('Should fail to initialize a PageContext with invalid ISPUserData', function () {
        pageContextData.user = test_1.TEST_UNDEFINED;
        chai_1.assert.throws(function () { return pageContext.initialize(pageContextData); });
        chai_1.assert.isFalse(pageContext.isInitialized);
    });
    it('Should succeed to initialize a PageContext with no ISPListData', function () {
        pageContextData.list = test_1.TEST_UNDEFINED;
        pageContext.initialize(pageContextData);
        chai_1.assert.isTrue(pageContext.isInitialized);
    });
    it('Should succeed to initialize a PageContext with no ISPListItemData', function () {
        pageContextData.listItem = test_1.TEST_UNDEFINED;
        pageContext.initialize(pageContextData);
        chai_1.assert.isTrue(pageContext.isInitialized);
    });
    it('Should fail to initialize a PageContext with invalid ISPSite', function () {
        pageContextData.site.serverRelativeUrl = test_1.TEST_UNDEFINED;
        chai_1.assert.throws(function () { return pageContext.initialize(pageContextData); });
        chai_1.assert.isFalse(pageContext.isInitialized);
    });
    it('Should fail to initialize a PageContext with invalid ISPListData', function () {
        if (pageContextData.list) {
            pageContextData.list.title = test_1.TEST_UNDEFINED;
        }
        chai_1.assert.throws(function () { return pageContext.initialize(pageContextData); });
        chai_1.assert.isFalse(pageContext.isInitialized);
    });
    it('Should fail to initialize a PageContext with invalid ISPListItemData', function () {
        if (pageContextData.listItem) {
            pageContextData.listItem.id = test_1.TEST_UNDEFINED;
        }
        chai_1.assert.throws(function () { return pageContext.initialize(pageContextData); });
        chai_1.assert.isFalse(pageContext.isInitialized);
    });
});
