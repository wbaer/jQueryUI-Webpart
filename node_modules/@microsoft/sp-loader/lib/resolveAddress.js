"use strict";
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_telemetry_1 = require("@ms/sp-telemetry");
var SPSystemJsComponentLoader_1 = require("./SPSystemJsComponentLoader");
var telemetryConstants = require("./utilities/telemetryConstants");
var SPLoader_resx_1 = require("./SPLoader.resx");
function resolveAddress(manifest, resourceName) {
    sp_core_library_1.Validate.isNotNullOrUndefined(manifest, 'manifest');
    sp_core_library_1.Validate.isNonemptyString(resourceName, 'resourceName');
    if (!manifest.loaderConfig.scriptResources.hasOwnProperty(resourceName)) {
        var error = new Error(sp_core_library_1.Text.format(SPLoader_resx_1.default.resourceNotFoundError, resourceName, manifest.id, manifest.alias));
        sp_telemetry_1._TraceLogger.logError(telemetryConstants.resolveAddressLogSource, error);
        throw error;
    }
    var moduleConfiguration = manifest.loaderConfig.scriptResources[resourceName];
    var address = resolveModuleConfiguration(resourceName, moduleConfiguration);
    if (!address.match(/^https?\:\/\//)) {
        var moduleBaseUrl = manifest.loaderConfig.internalModuleBaseUrls[0].replace(/\/+$/, '');
        address = moduleBaseUrl + "/" + address;
    }
    return address;
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = resolveAddress;
function resolveModuleConfiguration(moduleName, moduleConfiguration) {
    if (moduleConfiguration) {
        switch (moduleConfiguration.type) {
            case 'component':
                var failoverPath = moduleConfiguration.failoverPath;
                if (!failoverPath) {
                    throw new Error(SPLoader_resx_1.default.noFailoverPathError);
                }
                return resolvePath(failoverPath);
            case 'path':
                return resolvePath(moduleConfiguration.path);
            case 'localizedPath':
                return resolvePath(resolveLocalizedModuleConfiguration(moduleConfiguration));
            case null: 
            case undefined:
            default:
                return moduleName;
        }
    }
    else {
        return moduleName;
    }
}
function resolvePath(path) {
    if (typeof path === 'string') {
        return path;
    }
    else {
        return path.default;
    }
}
function resolveLocalizedModuleConfiguration(moduleConfiguration) {
    var currentLocale = SPSystemJsComponentLoader_1.default._currentLocale;
    if (moduleConfiguration.paths) {
        if (currentLocale) {
            for (var locale in moduleConfiguration.paths) {
                if (locale && locale.toUpperCase() === currentLocale.toUpperCase() && moduleConfiguration.paths[locale]) {
                    return moduleConfiguration.paths[locale];
                }
            }
        }
    }
    return moduleConfiguration.defaultPath;
}
