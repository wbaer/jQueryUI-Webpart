import { KeyboardEvent as ReactKeyboardEvent } from 'react';
export declare enum KeyCodes {
    Enter = 13,
    Escape = 27,
    Tab = 9,
    F10 = 121,
    P = 80,
}
export declare function isEscape(e: KeyboardEvent | ReactKeyboardEvent<void>): boolean;
export declare function isEnter(e: KeyboardEvent | ReactKeyboardEvent<any>): boolean;
export declare function isShiftTab(e: KeyboardEvent | ReactKeyboardEvent<void>): boolean;
export declare function isTab(e: KeyboardEvent | ReactKeyboardEvent<void>): boolean;
export declare function isKey(keyCode: number, e: KeyboardEvent | ReactKeyboardEvent<void>, allowAlt?: boolean, allowCtrl?: boolean, allowShift?: boolean): boolean;
export declare function getFocusableChildren(elem: HTMLElement, ignoreTabIndex?: boolean): HTMLElement[];
export declare function isElementFocusable(elem: HTMLElement, ignoreTabIndex?: boolean): boolean;
export declare function getFocusableParent(elem: HTMLElement, topElement?: HTMLElement): HTMLElement;
export declare function getFirstFocusableChild(elem: HTMLElement, ignoreTabIndex?: boolean): HTMLElement;
export declare function getFocusableDescendants(elem: HTMLElement, ignoreTabIndex?: boolean): HTMLElement[];
export declare function getFocusableSiblings(elem: HTMLElement, topElement?: HTMLElement): HTMLElement[];
export declare function getNextFocusableElement(elem: HTMLElement, topElement?: HTMLElement): HTMLElement;
export declare function getPrevFocusableElement(elem: HTMLElement, topElement?: HTMLElement): HTMLElement;
export declare function isElementFocusableChildOf(elem: HTMLElement, ancestor: HTMLElement): boolean;
export declare function navigateInside(elem: HTMLElement): boolean;
export declare function navigateTo(elem: HTMLElement): boolean;
export declare function navigateOutOf(elem: HTMLElement, topElement?: HTMLElement): void;
export declare class CanvasA11yManager {
    static _SKIP_FLAG: string;
    private _canvasElement;
    private _randId;
    private _savedFocusedElement;
    constructor(canvasElement: HTMLElement, shouldHandleKeyDown?: boolean);
    ariaAlert(message: string): void;
    navigateInside(elem: HTMLElement): boolean;
    navigateTo(elem: HTMLElement): boolean;
    navigateOutOf(elem: HTMLElement): void;
    clearState(): void;
    restoreState(): boolean;
    saveState(elem?: HTMLElement): void;
    skipEvent(e: KeyboardEvent): void;
    private _shouldSkipEvent(e);
    private _handleKeyDown(e);
}
