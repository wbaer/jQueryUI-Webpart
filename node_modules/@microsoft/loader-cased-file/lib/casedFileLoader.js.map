{"version":3,"sources":["casedFileLoader.ts"],"names":[],"mappings":";AAAA,4BAA4B;AAC5B,IAAM,UAAU,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AAC1C,IAAM,WAAW,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AAC5C,2BAA2B;AAE3B,IAAM,eAAe,GAAW,mBAAmB,CAAC;AAMpD,2BAA2B;AAC3B,yBAAwC,OAAY;IACpD,0BAA0B;IACxB,IAAM,KAAK,GAA0B,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACxE,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACpD,uCAAuC;QACvC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;QAE3D,yEAAyE;QACzE,IAAI,eAAqB,CAAC;QAC1B,2BAA2B;QAC3B,IAAI,mBAAsB,CAAC;QAC3B,0BAA0B;QAC1B,IAAM,iBAAiB,GAAO;YAC5B,2BAA2B;YAC3B,QAAQ,EAAE,UAAC,GAAW,EAAE,aAAkB;gBAC1C,0BAA0B;gBACxB,eAAa,GAAG,GAAG,CAAC;gBACpB,mBAAiB,GAAG,aAAa,CAAC;YACpC,CAAC;SACF,CAAC;QAEF,iGAAiG;QACjG,+BAA+B;QAC/B,GAAG,CAAC,CAAC,IAAM,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC;YAC5B,EAAE,CAAC,CAAC,CAAC,iBAAiB,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBAChD,4BAA4B;gBAC5B,IAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACrC,2BAA2B;gBAC3B,iBAAiB,CAAC,QAAQ,CAAC,GAAG,aAAa,CAAC;YAC9C,CAAC;QACH,CAAC;QAED,IAAM,gBAAgB,GAAW,UAAU,CAAC,IAAI,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC;QAE7E,IAAM,YAAY,GAAW,eAAa,CAAC,WAAW,EAAE,CAAC;QACzD,IAAM,aAAa,GAAW,IAAI,CAAC,SAAS,CAAC,eAAa,CAAC,CAAC;QAC5D,IAAM,aAAa,GAAW,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;QAE3D,sCAAsC;QACtC,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,mBAAiB,CAAC,CAAC;QAE/C,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC;IAChE,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,2CAA2C;QAC3C,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACxC,CAAC;AACH,CAAC;;AA9CD,kCA8CC;AAED,qFAAqF;AACrF,2BAA2B;AAC1B,eAAuB,CAAC,GAAG,GAAG,IAAI,CAAC;AACpC,0BAA0B","file":"casedFileLoader.js","sourcesContent":["/* tslint:disable:typedef */\r\nconst fileLoader = require('file-loader');\r\nconst loaderUtils = require('loader-utils');\r\n/* tslint:enable:typedef */\r\n\r\nconst nameLowerRegExp: RegExp = /\\[name\\:lower\\]/ig;\r\n\r\ninterface ICasedFileLoaderQuery {\r\n  name?: string;\r\n}\r\n\r\n/* tslint:disable:no-any */\r\nexport default function casedFileLoader(content: any): string {\r\n/* tslint:enable:no-any */\r\n  const query: ICasedFileLoaderQuery = loaderUtils.parseQuery(this.query);\r\n  if (query.name && query.name.match(nameLowerRegExp)) {\r\n    // Replace \"[name:lower]\" with \"[name]\"\r\n    this.query = this.query.replace(nameLowerRegExp, '[name]');\r\n\r\n    // Create a fake context replacing \"emitFile\" with our own implementation\r\n    let fileLoaderUrl: string;\r\n    /* tslint:disable:no-any */\r\n    let fileLoaderContent: any;\r\n    /* tslint:enable:no-any */\r\n    const fileLoaderContext: {} = {\r\n      /* tslint:disable:no-any */\r\n      emitFile: (url: string, loaderContent: any): void => {\r\n      /* tslint:enable:no-any */\r\n        fileLoaderUrl = url;\r\n        fileLoaderContent = loaderContent;\r\n      }\r\n    };\r\n\r\n    // Copy all of the properties of \"this\" to our fake context, but make sure we don't overwrite our\r\n    // implementation of \"emitFile\"\r\n    for (const property in this) {\r\n      if (!fileLoaderContext.hasOwnProperty(property)) {\r\n        /* tslint:disable:typedef */\r\n        const propertyValue = this[property];\r\n        /* tslint:enable:typedef */\r\n        fileLoaderContext[property] = propertyValue;\r\n      }\r\n    }\r\n\r\n    const fileLoaderResult: string = fileLoader.call(fileLoaderContext, content);\r\n\r\n    const lowercaseUrl: string = fileLoaderUrl.toLowerCase();\r\n    const oldEncodedUrl: string = JSON.stringify(fileLoaderUrl);\r\n    const newEncodedUrl: string = JSON.stringify(lowercaseUrl);\r\n\r\n    // Pass content out of the file loader\r\n    this.emitFile(lowercaseUrl, fileLoaderContent);\r\n\r\n    return fileLoaderResult.replace(oldEncodedUrl, newEncodedUrl);\r\n  } else {\r\n    // Pass through to the standard file loader\r\n    return fileLoader.call(this, content);\r\n  }\r\n}\r\n\r\n// Set this loader as \"raw,\" so we get the file's raw bitstream, not a decoded string\r\n/* tslint:disable:no-any */\r\n(casedFileLoader as any).raw = true;\r\n/* tslint:enable:no-any */\r\n"],"sourceRoot":"..\\src"}