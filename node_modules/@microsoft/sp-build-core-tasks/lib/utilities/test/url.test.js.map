{"version":3,"sources":["utilities/test/url.test.ts"],"names":[],"mappings":";AAAA,6BAA8B;AAC9B,8BAAgC;AAEhC,QAAQ,CAAC,mBAAmB,EAAE;IAC5B,QAAQ,CAAC,iBAAiB,EAAE;QAC1B,EAAE,CAAC,+BAA+B,EAAE;YAClC,aAAM,CAAC,WAAW,CAAC,GAAG,CAAC,eAAe,EAAE,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE;YACzC,aAAM,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,CAAC;YAClD,aAAM,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,MAAM,CAAC,CAAC;YACnD,aAAM,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,UAAU,CAAC,EAAE,UAAU,CAAC,CAAC;YAC1D,aAAM,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,uBAAuB,CAAC,EAAE,sBAAsB,CAAC,CAAC;YACnF,aAAM,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,2BAA2B,CAAC,EAAE,2BAA2B,CAAC,CAAC;QAC9F,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE;YACxC,aAAM,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,KAAK,EAAE,KAAK,CAAC,EAAE,SAAS,CAAC,CAAC;YAC3D,aAAM,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,SAAS,CAAC,CAAC;YAC7D,aAAM,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,SAAS,CAAC,CAAC;YAC7D,aAAM,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,MAAM,EAAE,OAAO,CAAC,EAAE,SAAS,CAAC,CAAC;YAC9D,aAAM,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE,SAAS,CAAC,CAAC;YAC/D,aAAM,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE,SAAS,CAAC,CAAC;YAChE,aAAM,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,OAAO,EAAE,YAAY,CAAC,EAAE,aAAa,CAAC,CAAC;YACxE,aAAM,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE,UAAU,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,EAAE;YAClD,aAAM,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,EAAE,aAAa,CAAC,CAAC;YACtE,aAAM,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC,EAAE,aAAa,CAAC,CAAC;YACxE,aAAM,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC,EAAE,aAAa,CAAC,CAAC;YACxE,aAAM,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC,EAAE,aAAa,CAAC,CAAC;YACxE,aAAM,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE,aAAa,CAAC,CAAC;YAC1E,aAAM,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,aAAa,CAAC,CAAC;YACzE,aAAM,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,MAAM,EAAE,MAAM,EAAE,UAAU,CAAC,EAAE,iBAAiB,CAAC,CAAC;YACjF,aAAM,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC,EAAE,iBAAiB,CAAC,CAAC;YACpF,aAAM,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC,EAAE,kBAAkB,CAAC,CAAC;QACxF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE;YACzC,IAAM,OAAO,GAAa,EAAE,CAAC;YAC7B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC;gBACtC,OAAO,CAAC,IAAI,CAAC,KAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAG,CAAC,CAAC;YACnC,CAAC;YAED,aAAM,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,OAAnB,GAAG,EAAoB,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qBAAqB,EAAE;QAC9B,EAAE,CAAC,iCAAiC,EAAE;YACpC,aAAM,CAAC,KAAK,CAAC,GAAG,CAAC,mBAAmB,CAAC,KAAK,CAAC,EAAE,MAAM,CAAC,CAAC;YACrD,aAAM,CAAC,KAAK,CAAC,GAAG,CAAC,mBAAmB,CAAC,SAAS,CAAC,EAAE,UAAU,CAAC,CAAC;YAC7D,aAAM,CAAC,KAAK,CAAC,GAAG,CAAC,mBAAmB,CAAC,MAAM,CAAC,EAAE,OAAO,CAAC,CAAC;YACvD,aAAM,CAAC,KAAK,CAAC,GAAG,CAAC,mBAAmB,CAAC,OAAO,CAAC,EAAE,QAAQ,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE;YACrC,aAAM,CAAC,KAAK,CAAC,GAAG,CAAC,mBAAmB,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,CAAC;YACtD,aAAM,CAAC,KAAK,CAAC,GAAG,CAAC,mBAAmB,CAAC,UAAU,CAAC,EAAE,UAAU,CAAC,CAAC;YAC9D,aAAM,CAAC,KAAK,CAAC,GAAG,CAAC,mBAAmB,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,CAAC;YACxD,aAAM,CAAC,KAAK,CAAC,GAAG,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAE,QAAQ,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,EAAE;YAClD,aAAM,CAAC,KAAK,CAAC,GAAG,CAAC,mBAAmB,CAAC,OAAO,CAAC,EAAE,MAAM,CAAC,CAAC;YACvD,aAAM,CAAC,KAAK,CAAC,GAAG,CAAC,mBAAmB,CAAC,WAAW,CAAC,EAAE,UAAU,CAAC,CAAC;YAC/D,aAAM,CAAC,KAAK,CAAC,GAAG,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAE,OAAO,CAAC,CAAC;YACzD,aAAM,CAAC,KAAK,CAAC,GAAG,CAAC,mBAAmB,CAAC,SAAS,CAAC,EAAE,QAAQ,CAAC,CAAC;YAC3D,aAAM,CAAC,KAAK,CAAC,GAAG,CAAC,mBAAmB,CAAC,wCAAwC,CAAC,EAAE,QAAQ,CAAC,CAAC;QAC5F,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"utilities/test/url.test.js","sourcesContent":["import { assert } from 'chai';\r\nimport * as url from './../url';\r\n\r\ndescribe('URL utility tests', () => {\r\n  describe('joinUrlSegments', () => {\r\n    it('correctly handles 0 arguments', () => {\r\n      assert.isUndefined(url.joinUrlSegments());\r\n    });\r\n\r\n    it('correctly handles the singleton case', () => {\r\n      assert.equal(url.joinUrlSegments('test'), 'test');\r\n      assert.equal(url.joinUrlSegments('test/'), 'test');\r\n      assert.equal(url.joinUrlSegments('test/url'), 'test/url');\r\n      assert.equal(url.joinUrlSegments('https://test.net:123/'), 'https://test.net:123');\r\n      assert.equal(url.joinUrlSegments('https://test.net:123/test'), 'https://test.net:123/test');\r\n    });\r\n\r\n    it('correctly combines two URL segments', () => {\r\n      assert.equal(url.joinUrlSegments('foo', 'bar'), 'foo/bar');\r\n      assert.equal(url.joinUrlSegments('foo/', '/bar'), 'foo/bar');\r\n      assert.equal(url.joinUrlSegments('foo/', 'bar/'), 'foo/bar');\r\n      assert.equal(url.joinUrlSegments('foo/', '/bar/'), 'foo/bar');\r\n      assert.equal(url.joinUrlSegments('foo//', '/bar/'), 'foo/bar');\r\n      assert.equal(url.joinUrlSegments('foo//', '//bar/'), 'foo/bar');\r\n      assert.equal(url.joinUrlSegments('foo//', '//bar/baz/'), 'foo/bar/baz');\r\n      assert.equal(url.joinUrlSegments('/foo/', '/bar/'), '/foo/bar');\r\n    });\r\n\r\n    it('correclty combines more than two URL segments', () => {\r\n      assert.equal(url.joinUrlSegments('foo', 'bar', 'baz'), 'foo/bar/baz');\r\n      assert.equal(url.joinUrlSegments('foo/', '/bar', 'baz'), 'foo/bar/baz');\r\n      assert.equal(url.joinUrlSegments('foo/', 'bar/', 'baz'), 'foo/bar/baz');\r\n      assert.equal(url.joinUrlSegments('foo/', 'bar', '/baz'), 'foo/bar/baz');\r\n      assert.equal(url.joinUrlSegments('foo/', '/bar', '/baz/'), 'foo/bar/baz');\r\n      assert.equal(url.joinUrlSegments('foo/', '/bar', '/baz'), 'foo/bar/baz');\r\n      assert.equal(url.joinUrlSegments('foo/', '/bar', '/baz/ban'), 'foo/bar/baz/ban');\r\n      assert.equal(url.joinUrlSegments('foo/', '/bar', '/baz', 'ban'), 'foo/bar/baz/ban');\r\n      assert.equal(url.joinUrlSegments('/foo/', '/bar', '/baz', 'ban'), '/foo/bar/baz/ban');\r\n    });\r\n\r\n    it('correclty combines many URL segments', () => {\r\n      const testSet: string[] = [];\r\n      for (let i: number = 0; i < 1000; i++) {\r\n        testSet.push(`${i}${i}${i}${i}`);\r\n      }\r\n\r\n      assert.equal(url.joinUrlSegments(...testSet), testSet.join('/'));\r\n    });\r\n  });\r\n\r\n  describe('ensureTrailingSlash', () => {\r\n    it('correctly adds a trailing slash', () => {\r\n      assert.equal(url.ensureTrailingSlash('foo'), 'foo/');\r\n      assert.equal(url.ensureTrailingSlash('foo/bar'), 'foo/bar/');\r\n      assert.equal(url.ensureTrailingSlash('/foo'), '/foo/');\r\n      assert.equal(url.ensureTrailingSlash('//foo'), '//foo/');\r\n    });\r\n\r\n    it('correctly keeps a trailing slash', () => {\r\n      assert.equal(url.ensureTrailingSlash('foo/'), 'foo/');\r\n      assert.equal(url.ensureTrailingSlash('foo/bar/'), 'foo/bar/');\r\n      assert.equal(url.ensureTrailingSlash('/foo/'), '/foo/');\r\n      assert.equal(url.ensureTrailingSlash('//foo/'), '//foo/');\r\n    });\r\n\r\n    it('correctly collapses existing trailing slashes', () => {\r\n      assert.equal(url.ensureTrailingSlash('foo//'), 'foo/');\r\n      assert.equal(url.ensureTrailingSlash('foo/bar//'), 'foo/bar/');\r\n      assert.equal(url.ensureTrailingSlash('/foo//'), '/foo/');\r\n      assert.equal(url.ensureTrailingSlash('//foo//'), '//foo/');\r\n      assert.equal(url.ensureTrailingSlash('//foo/////////////////////////////////'), '//foo/');\r\n    });\r\n  });\r\n});\r\n"],"sourceRoot":"..\\..\\..\\src"}