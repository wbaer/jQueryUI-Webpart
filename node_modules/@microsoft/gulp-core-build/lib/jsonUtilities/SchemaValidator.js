/// <reference types="jju" />
"use strict";
var os = require("os");
var fs = require("fs");
var path = require("path");
var Validator = require("z-schema");
var jju = require("jju");
var schemaKey = '$schema';
/**
 * Wrapper functions around z-schema which help improve ease of use
 */
var SchemaValidator = (function () {
    function SchemaValidator() {
    }
    /**
     * A function which validates a dataFile against a schemFile, both specified
     * as paths. It will throw if there is an issue with the file,
     * otherwise it will return the validated datafile.
     */
    SchemaValidator.readAndValidateJson = function (dataFilePath, schemaFilePath) {
        var data = this.readCommentedJsonFile(dataFilePath);
        var schema = this.readCommentedJsonFile(schemaFilePath);
        this.validate(data, schema, dataFilePath);
        return data;
    };
    /**
     * A function which validates a data object against a schema object.
     * It will throw if there is an issue with the data object.
     * For an improved error message, pass the filename in the optional third parameter
     */
    SchemaValidator.validate = function (data, schema, dataFilePath) {
        if (!this._schemaValidator.validate(data, schema)) {
            var errors = this._schemaValidator.getLastErrors();
            throw this.getFormattedErrorMessage(errors, dataFilePath);
        }
        return undefined;
    };
    SchemaValidator.readCommentedJsonFile = function (filename) {
        var contents = fs.readFileSync(filename);
        var rawConfig;
        try {
            rawConfig = jju.parse(contents.toString());
        }
        catch (error) {
            throw new Error("Error reading '" + filename + "':" + os.EOL + ("  " + error.message));
        }
        // it would eventually be nice to infer the schema based on this value
        delete rawConfig[schemaKey];
        return rawConfig;
    };
    SchemaValidator.getFormattedErrorMessage = function (errors, dataFilePath) {
        var errorMessage = (dataFilePath ? "Error parsing file '" + path.basename(dataFilePath) + "'" + os.EOL : '') +
            this._extractInnerErrorMessages(errors).join(os.EOL);
        return os.EOL + 'ERROR: ' + errorMessage + os.EOL + os.EOL;
    };
    SchemaValidator._extractInnerErrorMessages = function (errors) {
        var _this = this;
        var errorList = [];
        errors.map(function (error) { errorList.push.apply(errorList, _this._formatZSchemaError(error)); });
        return errorList;
    };
    SchemaValidator._formatZSchemaError = function (error) {
        var _this = this;
        var innerErrors = [];
        error.inner.forEach(function (innerErr) {
            innerErrors.push.apply(innerErrors, _this._formatZSchemaError(innerErr));
        });
        return ["(" + error.path + ") " + error.message].concat(innerErrors);
    };
    ;
    return SchemaValidator;
}());
SchemaValidator._schemaValidator = new Validator({
    breakOnFirstError: true,
    noExtraKeywords: true,
    noTypeless: true
});
exports.SchemaValidator = SchemaValidator;

//# sourceMappingURL=SchemaValidator.js.map
