/**
 * An IThemingInstruction can specify a rawString to be preserved or a theme slot and a default value
 * to use if that slot is not specified by the theme.
 */
define(["require", "exports"], function (require, exports) {
    "use strict";
    // IE needs to inject styles using cssText. However, we need to evaluate this lazily, so this
    // value will initialize as undefined, and later will be set once on first loadStyles injection.
    var _injectStylesWithCssText;
    // Store the theming state in __themeState__ global scope for reuse in the case of duplicate
    // load-themed-styles hosted on the page.
    var _root = (typeof window === 'undefined') ? global : window; // tslint:disable-line:no-any
    var _themeState = _root.__themeState__ = _root.__themeState__ || {
        theme: undefined,
        lastStyleElement: undefined,
        registeredStyles: []
    };
    /**
     * Matches theming tokens. For example, "[theme: themeSlotName, default: #FFF]" (including the quotes).
     */
    /* tslint:disable: max-line-length */
    var _themeTokenRegex = /[\'\"]\[theme:\s*(\w+)\s*(?:\,\s*default:\s*([\\"\']?[\.\,\(\)\#\-\s\w]*[\.\,\(\)\#\-\w][\"\']?))?\s*\][\'\"]/g;
    /* tslint:enable: max-line-length */
    /** Maximum style text length, for supporting IE style restrictions. */
    var MAX_STYLE_CONTENT_SIZE = 10000;
    /**
     * Loads a set of style text. If it is registered too early, we will register it when the window.load
     * event is fired.
     * @param {string | ThemableArray} styles Themable style text to register.
     */
    function loadStyles(styles) {
        var styleParts = Array.isArray(styles) ? styles : splitStyles(styles);
        if (_injectStylesWithCssText === undefined) {
            _injectStylesWithCssText = shouldUseCssText();
        }
        applyThemableStyles(styleParts);
    }
    exports.loadStyles = loadStyles;
    /**
     * Allows for customizable loadStyles logic. e.g. for server side rendering application
     * @param {(styles: string) => void} a loadStyles callback that gets called when styles are loaded or reloaded
     */
    function configureLoadStyles(callback) {
        _themeState.loadStyles = callback;
    }
    exports.configureLoadStyles = configureLoadStyles;
    /**
     * Loads a set of style text. If it is registered too early, we will register it when the window.load event
     * is fired.
     * @param {string} styleText Style to register.
     * @param {IStyleRecord} styleRecord Existing style record to re-apply.
     */
    function applyThemableStyles(stylesArray, styleRecord) {
        if (_themeState.loadStyles) {
            var styles = resolveThemableArray(stylesArray);
            _themeState.loadStyles(styles);
        }
        else {
            _injectStylesWithCssText ?
                registerStylesIE(stylesArray, styleRecord) :
                registerStyles(stylesArray, styleRecord);
        }
    }
    /**
     * Registers a set theme tokens to find and replace. If styles were already registered, they will be
     * replaced.
     * @param {theme} theme JSON object of theme tokens to values.
     */
    function loadTheme(theme) {
        _themeState.theme = theme;
        // reload styles.
        reloadStyles();
    }
    exports.loadTheme = loadTheme;
    /**
     * Reloads styles.
     */
    function reloadStyles() {
        if (_themeState.theme) {
            for (var _i = 0, _a = _themeState.registeredStyles; _i < _a.length; _i++) {
                var styleRecord = _a[_i];
                applyThemableStyles(styleRecord.themableStyle, styleRecord);
            }
        }
    }
    /**
     * Find theme tokens and replaces them with provided theme values.
     * @param {string} styles Tokenized styles to fix.
     */
    function detokenize(styles) {
        if (styles) {
            styles = resolveThemableArray(splitStyles(styles));
        }
        return styles;
    }
    exports.detokenize = detokenize;
    /**
     * Resolves ThemingInstruction objects in an array and joins the result into a string.
     * @param {ThemableArray} splitStyleArray ThemableArray to resolve and join.
     */
    function resolveThemableArray(splitStyleArray) {
        var theme = _themeState.theme;
        var resolvedCss;
        if (splitStyleArray) {
            // Resolve the array of theming instructions to an array of strings.
            // Then join the array to produce the final CSS string.
            var resolvedArray = splitStyleArray.map(function (currentValue) {
                var themeSlot = currentValue.theme;
                if (themeSlot) {
                    // A theming annotation. Resolve it.
                    var themedValue = theme ? theme[themeSlot] : undefined;
                    var defaultValue = currentValue.defaultValue;
                    // Warn to console if we hit an unthemed value even when themes are provided.
                    // Allow the themedValue to be undefined to explicitly request the default value.
                    if (theme && !themedValue && console && !(themeSlot in theme)) {
                        /* tslint:disable: max-line-length */
                        console.warn("Theming value not provided for \"" + themeSlot + "\". Falling back to \"" + (defaultValue || 'inherit') + "\".");
                    }
                    return themedValue || defaultValue || 'inherit';
                }
                else {
                    // A non-themable string. Preserve it.
                    return currentValue.rawString;
                }
            });
            resolvedCss = resolvedArray.join('');
        }
        return resolvedCss;
    }
    /**
     * Split tokenized CSS into an array of strings and theme specification objects
     * @param {string} styles Tokenized styles to split.
     */
    function splitStyles(styles) {
        var result = [];
        if (styles) {
            var pos = 0; // Current position in styles.
            var tokenMatch = void 0;
            while (tokenMatch = _themeTokenRegex.exec(styles)) {
                var matchIndex = tokenMatch.index;
                if (matchIndex > pos) {
                    result.push({
                        rawString: styles.substring(pos, matchIndex)
                    });
                }
                result.push({
                    theme: tokenMatch[1],
                    defaultValue: tokenMatch[2] // May be undefined
                });
                // index of the first character after the current match
                pos = _themeTokenRegex.lastIndex;
            }
            // Push the rest of the string after the last match.
            result.push({
                rawString: styles.substring(pos)
            });
        }
        return result;
    }
    exports.splitStyles = splitStyles;
    /**
     * Registers a set of style text. If it is registered too early, we will register it when the
     * window.load event is fired.
     * @param {ThemableArray} styleArray Array of IThemingInstruction objects to register.
     * @param {IStyleRecord} styleRecord May specify a style Element to update.
     */
    function registerStyles(styleArray, styleRecord) {
        var head = document.getElementsByTagName('head')[0];
        var styleElement = document.createElement('style');
        styleElement.type = 'text/css';
        styleElement.appendChild(document.createTextNode(resolveThemableArray(styleArray)));
        if (styleRecord) {
            head.replaceChild(styleElement, styleRecord.styleElement);
            styleRecord.styleElement = styleElement;
        }
        else {
            head.appendChild(styleElement);
        }
        if (!styleRecord) {
            _themeState.registeredStyles.push({
                styleElement: styleElement,
                themableStyle: styleArray
            });
        }
    }
    /**
     * Registers a set of style text, for IE 9 and below, which has a ~30 style element limit so we need
     * to register slightly differently.
     * @param {ThemableArray} styleArray Array of IThemingInstruction objects to register.
     * @param {IStyleRecord} styleRecord May specify a style Element to update.
     */
    function registerStylesIE(styleArray, styleRecord) {
        var head = document.getElementsByTagName('head')[0];
        var lastStyleElement = _themeState.lastStyleElement, registeredStyles = _themeState.registeredStyles;
        var stylesheet = lastStyleElement ? lastStyleElement.styleSheet : undefined;
        var lastStyleContent = stylesheet ? stylesheet.cssText : '';
        var lastRegisteredStyle = registeredStyles[registeredStyles.length - 1];
        var resolvedStyleText = resolveThemableArray(styleArray);
        if (!lastStyleElement || (lastStyleContent.length + resolvedStyleText.length) > MAX_STYLE_CONTENT_SIZE) {
            lastStyleElement = document.createElement('style');
            lastStyleElement.type = 'text/css';
            if (styleRecord) {
                head.replaceChild(lastStyleElement, styleRecord.styleElement);
                styleRecord.styleElement = lastStyleElement;
            }
            else {
                head.appendChild(lastStyleElement);
            }
            if (!styleRecord) {
                lastRegisteredStyle = {
                    styleElement: lastStyleElement,
                    themableStyle: styleArray
                };
                registeredStyles.push(lastRegisteredStyle);
            }
        }
        lastStyleElement.styleSheet.cssText += detokenize(resolvedStyleText);
        Array.prototype.push.apply(lastRegisteredStyle.themableStyle, styleArray); // concat in-place
        // Preserve the theme state.
        _themeState.lastStyleElement = lastStyleElement;
    }
    /**
     * Checks to see if styleSheet exists as a property off of a style element.
     * This will determine if style registration should be done via cssText (<= IE9) or not
     */
    function shouldUseCssText() {
        var useCSSText = false;
        if (typeof document !== 'undefined') {
            var emptyStyle = document.createElement('style');
            emptyStyle.type = 'text/css';
            useCSSText = !!emptyStyle.styleSheet;
        }
        return useCSSText;
    }
});
