/// <reference types="mocha" />
"use strict";
var chai_1 = require('chai');
var colors = require('colors');
var DualTaskStream_1 = require('../DualTaskStream');
var helloWorld = 'Hello, world!';
describe('DualTaskStream', function () {
    it('passes stdout values through unmodified', function (done) {
        var stream = new DualTaskStream_1.default();
        stream.on('data', function (data) {
            chai_1.assert.equal(data.toString(), helloWorld);
            done();
        });
        stream.stdout.write(helloWorld);
    });
    it('writes stderr values in red', function (done) {
        var stream = new DualTaskStream_1.default();
        stream.on('data', function (data) {
            chai_1.assert.equal(data.toString(), colors.red(helloWorld));
            done();
        });
        stream.stderr.write(helloWorld);
    });
    it('writes warnings written to stderr in yellow to stdout', function (done) {
        var stream = new DualTaskStream_1.default();
        var helloWorld = 'Warning - ' + helloWorld; /* tslint:disable-line */
        stream.on('data', function (data) {
            chai_1.assert.equal(data.toString(), colors.yellow(helloWorld));
            chai_1.assert.equal(stream.stdout.readAll(), colors.yellow(helloWorld));
            done();
        });
        stream.stderr.write(helloWorld);
    });
    it('doesn\'t write data in quiet mode', function (done) {
        var stream = new DualTaskStream_1.default(true);
        stream.stdout.write(helloWorld);
        stream.stdout.end();
        chai_1.assert.isNull(stream.read());
        done();
    });
    it('doesn\'t write warnings from stderr in quiet mode', function (done) {
        var stream = new DualTaskStream_1.default(true);
        var helloWorld = 'Warning - ' + helloWorld; /* tslint:disable-line */
        stream.stderr.write(helloWorld);
        stream.stderr.end();
        chai_1.assert.isNull(stream.read());
        done();
    });
    it('end() closes both substreams', function (done) {
        var stream = new DualTaskStream_1.default(true);
        var stderrClosed, stdoutClosed = false;
        var finishedIfBothStreamsClosed = function () {
            if (stderrClosed && stdoutClosed) {
                done();
            }
        };
        stream.stderr.on('end', function () {
            stderrClosed = true;
            finishedIfBothStreamsClosed();
        });
        stream.stdout.on('end', function () {
            stdoutClosed = true;
            finishedIfBothStreamsClosed();
        });
        stream.end();
    });
    it('end() closes both substreams even if stdout is complete', function (done) {
        var stream = new DualTaskStream_1.default(true);
        var stderrClosed, stdoutClosed = false;
        var finishedIfBothStreamsClosed = function () {
            if (stderrClosed && stdoutClosed) {
                done();
            }
        };
        stream.stderr.on('end', function () {
            stderrClosed = true;
            finishedIfBothStreamsClosed();
        });
        stream.stdout.on('end', function () {
            stdoutClosed = true;
            finishedIfBothStreamsClosed();
        });
        stream.stdout.end();
        stream.end();
    });
    it('end() closes both substreams even if stderr is complete', function (done) {
        var stream = new DualTaskStream_1.default(true);
        var stderrClosed, stdoutClosed = false;
        var finishedIfBothStreamsClosed = function () {
            if (stderrClosed && stdoutClosed) {
                done();
            }
        };
        stream.stderr.on('end', function () {
            stderrClosed = true;
            finishedIfBothStreamsClosed();
        });
        stream.stdout.on('end', function () {
            stdoutClosed = true;
            finishedIfBothStreamsClosed();
        });
        stream.stderr.end();
        stream.end();
    });
    it('can call end twice without error', function (done) {
        var stream = new DualTaskStream_1.default(true);
        var stderrClosed, stdoutClosed = false;
        var finishedIfBothStreamsClosed = function () {
            if (stderrClosed && stdoutClosed) {
                chai_1.assert.doesNotThrow(function () { stream.end(); });
                done();
            }
        };
        stream.stderr.on('end', function () {
            stderrClosed = true;
            finishedIfBothStreamsClosed();
        });
        stream.stdout.on('end', function () {
            stdoutClosed = true;
            finishedIfBothStreamsClosed();
        });
        stream.end();
    });
});

//# sourceMappingURL=DualTaskStream.test.js.map
