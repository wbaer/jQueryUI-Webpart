/// <reference types="mocha" />
"use strict";
var chai_1 = require("chai");
var ts = require("typescript");
var path = require("path");
var Extractor_1 = require("../Extractor");
var TestFileComparer_1 = require("../TestFileComparer");
var ApiJsonGenerator_1 = require("../generators/ApiJsonGenerator");
/* tslint:disable:no-function-expression - Mocha uses a poorly scoped "this" pointer */
var capturedErrors = [];
function testErrorHandler(message, fileName, lineNumber) {
    capturedErrors.push({ message: message, fileName: fileName, lineNumber: lineNumber });
}
describe('DocItemLoader tests', function () {
    this.timeout(10000);
    describe('Basic Tests', function () {
        it('Example 3', function () {
            var inputFolder = './testInputs/example3';
            var outputFile = './lib/example3-output.json';
            var expectedFile = path.join(inputFolder, 'example3-output.json');
            var compilerOptions = {
                target: ts.ScriptTarget.ES5,
                module: ts.ModuleKind.CommonJS,
                moduleResolution: ts.ModuleResolutionKind.NodeJs,
                rootDir: inputFolder,
                typeRoots: ['./'] // We need to ignore @types in these tests
            };
            var extractor = new Extractor_1.default({
                compilerOptions: compilerOptions,
                errorHandler: testErrorHandler
            });
            extractor.loadExternalPackages('./testInputs/external-api-json');
            extractor.analyze({
                entryPointFile: path.join(inputFolder, 'index.ts')
            });
            var apiJsonGenerator = new ApiJsonGenerator_1.default();
            apiJsonGenerator.writeJsonFile(outputFile, extractor);
            chai_1.assert.equal(capturedErrors.length, 3);
            chai_1.assert.equal(capturedErrors[0].message, 'Unable to find referenced member \"MyClass.methodWithTwoParams\"');
            chai_1.assert.equal(capturedErrors[1].message, 'circular reference');
            chai_1.assert.equal(capturedErrors[2].message, 'Unable to link to "Internal" API item');
            TestFileComparer_1.default.assertFileMatchesExpected(outputFile, expectedFile);
        });
    });
});

//# sourceMappingURL=DocItemLoader.test.js.map
