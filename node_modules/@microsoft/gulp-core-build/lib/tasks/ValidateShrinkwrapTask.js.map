{"version":3,"sources":["tasks/ValidateShrinkwrapTask.ts"],"names":[],"mappings":";;;;;;AAAA,uCAAsC;AAEtC,2BAA6B;AAC7B,+BAAiC;AAoBjC;;;;;;;GAOG;AACH;IAA4C,0CAAc;IACxD,8DAA8D;IAC9D;QAAA,YACE,iBAAO,SAER;QADC,KAAI,CAAC,IAAI,GAAG,qBAAqB,CAAC;;IACpC,CAAC;IAED;;;OAGG;IACI,4CAAW,GAAlB,UAAmB,IAAmB;QACpC,IAAM,iBAAiB,GAAW,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;QACvF,IAAM,gBAAgB,GAAW,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,qBAAqB,CAAC,CAAC;QAE7F,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;YACxC,IAAI,CAAC,QAAQ,CAAC,iCAAiC,GAAG,iBAAiB,CAAC,CAAC;YACrE,MAAM,CAAC;QACT,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;YAC9C,IAAI,CAAC,QAAQ,CAAC,iCAAiC,GAAG,gBAAgB,CAAC,CAAC;YACpE,MAAM,CAAC;QACT,CAAC;QAED,IAAM,WAAW,GAAgB,OAAO,CAAC,iBAAiB,CAAC,CAAC;QAC5D,IAAM,cAAc,GAAmB,OAAO,CAAC,gBAAgB,CAAC,CAAC;QAEjE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,CAAC,YAAY,CAAC,CAAC;QACtE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,eAAe,EAAE,cAAc,CAAC,YAAY,CAAC,CAAC;QAEzE,MAAM,CAAC;IACT,CAAC;IAEO,0CAAS,GAAjB,UAAkB,UAAsB,EAAE,aAA4B;QACpE,GAAG,CAAC,CAAC,IAAM,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC;YAC7B,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACvC,IAAI,CAAC,QAAQ,CAAC,4BAA0B,GAAG,wBAAqB,CAAC,CAAC;YACpE,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC1E,IAAI,CAAC,QAAQ,CAAC,4BAA0B,GAAG,UAAK,aAAa,CAAC,GAAG,CAAC,CAAC,OAAO,8DACtC,UAAU,CAAC,GAAG,CAAC,MAAG,CAAC,CAAC;YAC1D,CAAC;QACH,CAAC;IACH,CAAC;IACH,6BAAC;AAAD,CA1CA,AA0CC,CA1C2C,mBAAQ,GA0CnD;AA1CY,wDAAsB","file":"tasks/ValidateShrinkwrapTask.js","sourcesContent":["import { GulpTask } from './GulpTask';\r\nimport gulpType = require('gulp');\r\nimport * as path from 'path';\r\nimport * as semver from 'semver';\r\n\r\ntype ShrinkwrapDep = { [name: string]: { version: string } };\r\ntype PackageDep = { [name: string]: string };\r\n\r\n/**\r\n * Partial representation of the contents of a `package.json` file\r\n */\r\ninterface INpmPackage {\r\n  dependencies: PackageDep;\r\n  devDependencies: PackageDep;\r\n}\r\n\r\n/**\r\n * Partial representation of the contents of an `npm-shrinkwrap.json` file\r\n */\r\ninterface INpmShrinkwrap {\r\n  dependencies: ShrinkwrapDep;\r\n}\r\n\r\n/**\r\n * This task attempts to detect if package.json file has been updated without the\r\n * shrinkwrap file being regenerated.\r\n *\r\n * It does this by checking that every dependency and dev dependency exists in the\r\n * shrinkwrap file and that the version in the shrinkwrap file satisfies what is\r\n * defined in the package.json file.\r\n */\r\nexport class ValidateShrinkwrapTask extends GulpTask<void> {\r\n  /** Instantiates an instance of the ValidateShrinkwrap task */\r\n  constructor() {\r\n    super();\r\n    this.name = 'validate-shrinkwrap';\r\n  }\r\n\r\n  /**\r\n   * Iterates through dependencies listed in a project's package.json and ensures that they are all\r\n   * resolvable in the npm-shrinkwrap file.\r\n   */\r\n  public executeTask(gulp: gulpType.Gulp): NodeJS.ReadWriteStream {\r\n    const pathToPackageJson: string = path.join(this.buildConfig.rootPath, 'package.json');\r\n    const pathToShrinkwrap: string = path.join(this.buildConfig.rootPath, 'npm-shrinkwrap.json');\r\n\r\n    if (!this.fileExists(pathToPackageJson)) {\r\n      this.logError('Failed to find package.json at ' + pathToPackageJson);\r\n      return;\r\n    } else if (!this.fileExists(pathToShrinkwrap)) {\r\n      this.logError('Failed to find package.json at ' + pathToShrinkwrap);\r\n      return;\r\n    }\r\n\r\n    const packagejson: INpmPackage = require(pathToPackageJson);\r\n    const shrinkwrapjson: INpmShrinkwrap = require(pathToShrinkwrap);\r\n\r\n    this._validate(packagejson.dependencies, shrinkwrapjson.dependencies);\r\n    this._validate(packagejson.devDependencies, shrinkwrapjson.dependencies);\r\n\r\n    return;\r\n  }\r\n\r\n  private _validate(packageDep: PackageDep, shrinkwrapDep: ShrinkwrapDep): void {\r\n    for (const pkg in packageDep) {\r\n      if (!shrinkwrapDep.hasOwnProperty(pkg)) {\r\n        this.logError(`Failed to find package ${pkg} in shrinkwrap file`);\r\n      } else if (!semver.satisfies(shrinkwrapDep[pkg].version, packageDep[pkg])) {\r\n        this.logError(`Shrinkwrap version for ${pkg} (${shrinkwrapDep[pkg].version}) does not\r\n          satisfy package.json version of ${packageDep[pkg]}.`);\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}