"use strict";
var sp_telemetry_1 = require("@ms/sp-telemetry");
var SPComponentLoaderProxy_1 = require("./SPComponentLoaderProxy");
var ManifestStore_1 = require("./stores/ManifestStore");
var componentConstants = require("./utilities/componentConstants");
var telemetryConstants = require("./utilities/telemetryConstants");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var SPLoader_resx_1 = require("./SPLoader.resx");
var SPApplicationLoader = (function () {
    function SPApplicationLoader() {
    }
    SPApplicationLoader.loadApplication = function (preloadedData) {
        var qosMonitor = new sp_telemetry_1._QosMonitor(telemetryConstants.startQosScenarioName);
        function error(message, failureId) {
            var error = new Error(message);
            sp_telemetry_1._TraceLogger.logError(telemetryConstants.startLogSource, error);
            qosMonitor.writeUnexpectedFailure(failureId, error);
            throw error;
        }
        return Promise.resolve().then(function () {
            var platformManifest = ManifestStore_1.default.instance.tryGetManifest(componentConstants.spApplicationBaseComponentId);
            if (!platformManifest) {
                error(sp_core_library_1.Text.format(SPLoader_resx_1.default.manifestNotFoundByIdError, componentConstants.spApplicationBaseComponentId), telemetryConstants.missingPlatformManifestFailure);
            }
            var applicationId = preloadedData.clientSideApplicationId;
            var applicationManifest = ManifestStore_1.default.instance.tryGetManifest(applicationId);
            if (!applicationManifest) {
                error(sp_core_library_1.Text.format(SPLoader_resx_1.default.manifestNotFoundByIdError, applicationId), telemetryConstants.missingApplicationManifestFailure);
            }
            return Promise.all([
                SPComponentLoaderProxy_1.default.loadComponent(platformManifest),
                SPComponentLoaderProxy_1.default.loadComponent(applicationManifest)
            ]).then(function (modules) {
                var platform = modules[0]; 
                var application = modules[1]; 
                if (platform && application) {
                    return platform._spShell.start(application, preloadedData).then(function (result) {
                        qosMonitor.writeSuccess();
                        return result;
                    }).catch(function (e) {
                        error(sp_core_library_1.Text.format(SPLoader_resx_1.default.applicationFailedToInitializeError, e), telemetryConstants.shellStartFailure);
                    });
                }
                else if (!platform) {
                    error(sp_core_library_1.Text.format(SPLoader_resx_1.default.platformFailedToLoadError, componentConstants.spApplicationBaseComponentId, componentConstants.spApplicationBaseName), telemetryConstants.platformFailedToLoadFailure);
                }
                else {
                    error(sp_core_library_1.Text.format(SPLoader_resx_1.default.applicationFailedToLoadError, applicationManifest.id, applicationManifest.loaderConfig.entryModuleId), telemetryConstants.applicationFailedToLoadFailure);
                }
            }).catch(function (e) {
                return error(sp_core_library_1.Text.format(SPLoader_resx_1.default.applicationFailedToLoadWithMessageError, applicationManifest.id, applicationManifest.loaderConfig.entryModuleId, e), undefined);
            });
        });
    };
    return SPApplicationLoader;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SPApplicationLoader;
