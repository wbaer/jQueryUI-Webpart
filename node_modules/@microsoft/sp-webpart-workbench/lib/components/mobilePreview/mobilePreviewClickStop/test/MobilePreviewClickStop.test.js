"use strict";
var chai_1 = require("chai");
var React = require("react");
var enzyme_1 = require("enzyme");
var MobilePreview_1 = require("../../mobilePreview/MobilePreview");
var MobilePreviewClickStop_1 = require("../../mobilePreviewClickStop/MobilePreviewClickStop");
var MobilePreviewRotate_1 = require("../../mobilePreviewRotate/MobilePreviewRotate");
describe('Testing MobilePreview click stops', function () {
    var mobilePreview;
    var clickStops;
    var deviceList = {
        phones: [
            { name: 'Phone 1', width: 100, height: 100 },
            { name: 'Phone 2', width: 200, height: 300 },
            { name: 'Phone 3', width: 50, height: 50 }
        ],
        tablets: [
            { name: 'Tablet 1', width: 300, height: 400 },
            { name: 'Tablet 2', width: 400, height: 300 },
            { name: 'Tablet 3', width: 200, height: 200 }
        ],
        desktops: []
    };
    beforeEach(function () {
        mobilePreview = enzyme_1.mount(React.createElement(MobilePreview_1.default, {
            deviceType: MobilePreview_1.DeviceType.Phone,
            devices: deviceList
        }));
        clickStops = mobilePreview.find(MobilePreviewClickStop_1.default);
    });
    afterEach(function () {
        mobilePreview.unmount();
    });
    it('creates the correct number of click stops', function () {
        chai_1.assert.equal(clickStops.length, 3);
    });
    it('has correct name and width', function () {
        chai_1.assert.equal(clickStops.first().prop('device').name, 'Phone 2');
        chai_1.expect(clickStops.first().html()).to.match(/width: ?200/i);
    });
    it('reflects selected when clicked', function () {
        chai_1.assert.equal(clickStops.first().prop('selected'), false);
        clickStops.first().simulate('click');
        chai_1.assert.equal(clickStops.first().prop('selected'), true);
    });
    it('relfects that only one click stop is selected', function () {
        chai_1.assert.equal(clickStops.last().prop('selected'), true);
        chai_1.assert.equal(clickStops.at(1).prop('selected'), false);
        chai_1.assert.equal(clickStops.first().prop('selected'), false);
    });
    it('reflects that a device is still selected after a rotation', function () {
        chai_1.assert.equal(clickStops.last().prop('selected'), true);
        mobilePreview.find(MobilePreviewRotate_1.default);
        chai_1.assert.equal(clickStops.last().prop('selected'), true);
    });
});
