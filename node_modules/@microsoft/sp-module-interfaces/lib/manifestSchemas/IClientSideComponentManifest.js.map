{"version":3,"sources":["manifestSchemas/IClientSideComponentManifest.ts"],"names":[],"mappings":"AAAA;;;;GAIG","file":"manifestSchemas/IClientSideComponentManifest.js","sourcesContent":["/**\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n *\r\n * @file Client side component manifest definition.\r\n */\r\n\r\nimport { IClientSideComponentLoaderConfiguration } from './IClientSideComponentLoaderConfiguration';\r\n\r\n// TODO Task 299457 ILocalizedString should be two different types\r\n/**\r\n * Definition: A set of localized strings.\r\n * Supported values:\r\n * * An Id referring to a localized resource. In this case it requires an 'id' key.\r\n * * A dictionary of locale keys to strings. In this case it requires a 'default' key.\r\n * Example 1: \"My Application\"\r\n *          {\r\n *            \"id\": \"$myStrings:myStrings.MyApplication;\"\r\n *          }\r\n * Example 2: \"My Application\"\r\n *          {\r\n *            \"default\": \"My Application\"\r\n *            \"en-us\": \"My Application\",\r\n *            \"fr-fr\": \"Ma demande\",\r\n *            \"zh\": \"我的應用程式\"\r\n *          }\r\n *\r\n * Notes on strings id:\r\n * Ids have the following structure: $<resourceName>:<expression>;\r\n * resourceName needs to be a localizedResource in the config.json.\r\n * expression is an expression that will be evaluated to access the string from the resource module.\r\n *\r\n * If your resource is a dictionary, access it through \"$resource:resource.MyString;\"\r\n * or \"$resource:resource[\\\"MyString\\\"];\"\r\n * For more complex cases, run an appropriate expression to access your resource and return the string.\r\n *\r\n */\r\nexport interface ILocalizedString {\r\n  default?: string;\r\n  id?: string;\r\n  [locale: string]: string | undefined;\r\n}\r\n\r\n// @betadocumentation - (SPPPLAT VSO#218656)\r\n/**\r\n * All client side components built on the SharePoint framework need a valid component manifest. This interface\r\n * represents properties that are required by all types of client side components like Applications and Web Parts.\r\n * Component specific manifests will extend this interface to add properties required by that component type.\r\n *\r\n * The schema of this manifest is owned and vesioned by Microsoft. Following rules should be followed while changing\r\n * this schema. This set of rules can also be called the \"manifest upgrade rules\".\r\n *\r\n *   -  For minor changes, new properties can be added to this schema in a backwards-compatible way. i.e. the code\r\n *      that processes the manifest should be able to handle the absense of those new properties.\r\n *   -  Try to model your changes as minor SemVer increments.  Major version changes should be avoided because they\r\n *      impose a migration cost on developers.\r\n *   -  The 'manifestVersion' should be bumped for all small or big changes.\r\n *\r\n * @internalremarks - This schema should be at all times kept in sync with the server-side code file\r\n *   SPClientSideComponentManifest.cs.\r\n *\r\n * @public\r\n */\r\nexport interface IClientSideComponentManifest {\r\n\r\n  /**\r\n   * Definition: Version of the component manifest schema. The value of this field is controlled by Microsoft. The\r\n   *  purpose of this field is to help manage upgrades of the component manifest schema. A component developer needs to\r\n   *  only confirm that they are using the correct value per the manifest schema. Please read the \"manifest upgrade\r\n   *  rules\" for more details on when the schema could change. Note, manifest schema version upgrade will be considered\r\n   *  a big API change event and will be advertised broadly.\r\n   * Usage: To help support multiple manifest schema versions.\r\n   * Required: yes\r\n   * Localized: no\r\n   * Supported values: +ve integer.\r\n   * Example: 1\r\n   */\r\n  manifestVersion: number;\r\n\r\n  /**\r\n   * Definition: Type of client side component. Components with the \"Application\" type are defined by the\r\n   *  \"IClientSideApplicationManifest\" interface. Components with the \"WebPart\" type are defined by the\r\n   *  \"IClientSideWebPartManifest\" interface. Components with the \"Library\" type are defined by the\r\n   *  \"IClientSideLibraryManifest\" interface.\r\n   * Usage: To help bundling, loading, enumeration, and initialization of components based on their contents.\r\n   * Required: yes\r\n   * Localized: no\r\n   * Supported values: \"Application\", \"WebPart\", \"Library\", \"CodePart\"\r\n   * Example: \"Application\"\r\n   */\r\n  componentType: 'Application' | 'WebPart' | 'Library' | 'CodePart';\r\n\r\n  /**\r\n   * Definition: A universally unique component id. Each client side component is required to have this id. Once an\r\n   *  id has been used for a component, it cannot be changed. A change in this value is treated same as the creation of\r\n   *  a new component. Two components are never expected to have the same id.\r\n   * Usage: Uniquely identify a client side component.\r\n   * Required: yes\r\n   * Localized: no\r\n   * Supported values: any GUID\r\n   * Example: \"dbef608d-3ad5-4f8f-b139-d916f2f0a294\"\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * Definition: A short name usually given by developer. It does not need to be localized and is expected to stay\r\n   * the same through the lifetime of the component. If an application overrides the ClientSideApplication.alias\r\n   * property, ClientSideApplication.alias is given precedence over the value provided in the manifest.\r\n   * Usage: A short name to identify a client side component by developer.\r\n   * Required: no\r\n   * Localized: no\r\n   * Supported values: Allowed characters are a-z, A-Z, and '-'. Not longer than 40 characters.\r\n   * Example: \"NewFeed\"\r\n   *\r\n   * @internalremarks - telemetry data is categorized based on alias. If alias changes, new telemetry date for this\r\n   * component will be put in a new category. It breaks history data if alias changes.\r\n   */\r\n  alias: string;\r\n\r\n  /**\r\n   * Definition: An auto-generated value for internal use. Do not add or use it.\r\n   * Usage: Not to be used by third party developers.\r\n   * Required: no\r\n   *\r\n   * @internal\r\n   *\r\n   * @internalremarks - this property indicates whether the component is first-party or third-party. IsInternal is true\r\n   * for first-party, false for third-party. The value is controlled by server side code. It is used when framework\r\n   * needs to differentiate between behaviors for first-party components and third-party, like in telemetry.\r\n   */\r\n  isInternal?: boolean;\r\n\r\n  /**\r\n   * Definition: Client side component version. The value of this field is expected to be controlled by the developer\r\n   *  of the client side component. The purpose of this field is to help client side component developers upgrade their\r\n   *  client side components in a managed way. This helps the consumers of the client side component make decisions\r\n   *  about when and how to upgrade the client side component. As the developer evolves the code for their client side\r\n   *  component, they can decide to bump the MAJOR, MINOR or PATCH version of the component. All incompatible API\r\n   *  changes should result in a MAJOR version bump. Backwards compatible functionality changes should result in a\r\n   *  MINOR version bump, and backwards compatible bug fixes should result in a PATCH version bump. Please see\r\n   *  http://semver.org for more details on how to manage the version of your components.\r\n   * Usage: Versioning and evolving a client side component safely in a controlled way.\r\n   * Required: yes\r\n   * Localized: no\r\n   * Supported values: string representing a semantic version (http://semver.org) i.e. MAJOR.MINOR.PATCH\r\n   * Example: \"1.0.0\"\r\n   */\r\n  version: string;\r\n\r\n  /**\r\n   * Definition: This portion of the configuration describes how the component is to be loaded and initialized by a\r\n   *  client. It contains an enumeration of scripts that the component requires along with a single entrypoint script.\r\n   * Usage: Loading a component.\r\n   * Required: yes\r\n   *\r\n   * @see IClientSideComponentLoaderConfiguration.ts for more information and examples.\r\n   */\r\n  loaderConfig: IClientSideComponentLoaderConfiguration;\r\n}"],"sourceRoot":"..\\..\\src"}