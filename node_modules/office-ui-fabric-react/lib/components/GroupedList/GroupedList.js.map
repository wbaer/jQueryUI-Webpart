{"version":3,"sources":["components/GroupedList/GroupedList.tsx"],"names":[],"mappings":"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","file":"components/GroupedList/GroupedList.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  BaseComponent,\r\n  autobind,\r\n  assign,\r\n  css\r\n} from '../../Utilities';\r\nimport {\r\n  IGroupedList,\r\n  IGroupedListProps,\r\n  IGroup\r\n} from './GroupedList.Props';\r\nimport {\r\n  GroupedListSection\r\n} from './GroupedListSection';\r\nimport {\r\n  List\r\n} from '../../List';\r\nimport {\r\n  SelectionMode\r\n} from '../../utilities/selection/index';\r\nimport './GroupedList.scss';\r\n\r\nexport interface IGroupedListState {\r\n  lastWidth?: number;\r\n  lastSelectionMode?: SelectionMode;\r\n  groups?: IGroup[];\r\n}\r\n\r\nexport class GroupedList extends BaseComponent<IGroupedListProps, IGroupedListState> implements IGroupedList {\r\n  public static defaultProps = {\r\n    selectionMode: SelectionMode.multiple,\r\n    isHeaderVisible: true,\r\n    groupProps: {}\r\n  };\r\n\r\n  public refs: {\r\n    [key: string]: React.ReactInstance,\r\n    root: HTMLElement,\r\n    list: List\r\n  };\r\n\r\n  private _isSomeGroupExpanded: boolean;\r\n\r\n  constructor(props: IGroupedListProps) {\r\n    super(props);\r\n\r\n    this._isSomeGroupExpanded = this._computeIsSomeGroupExpanded(props.groups);\r\n\r\n    this.state = {\r\n      lastWidth: 0,\r\n      groups: props.groups\r\n    };\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps) {\r\n    let {\r\n      groups,\r\n      selectionMode\r\n    } = this.props;\r\n    let shouldForceUpdates = false;\r\n\r\n    if (newProps.groups !== groups) {\r\n      this.setState({ groups: newProps.groups });\r\n      shouldForceUpdates = true;\r\n    }\r\n\r\n    if (newProps.selectionMode !== selectionMode) {\r\n      shouldForceUpdates = true;\r\n    }\r\n\r\n    if (shouldForceUpdates) {\r\n      this._forceListUpdates();\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    let {\r\n      className\r\n    } = this.props;\r\n    let {\r\n      groups\r\n    } = this.state;\r\n\r\n    return (\r\n      <div\r\n        ref='root'\r\n        className={ css('ms-GroupedList', className) }\r\n        data-automationid='GroupedList'\r\n        data-is-scrollable='false'\r\n        role='grid'\r\n        >\r\n        { !groups ?\r\n          this._renderGroup(null, 0) : (\r\n            <List\r\n              ref='list'\r\n              items={ groups }\r\n              onRenderCell={ this._renderGroup }\r\n              getItemCountForPage={ () => 1 }\r\n              />\r\n          )\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  public forceUpdate() {\r\n    super.forceUpdate();\r\n    this._forceListUpdates();\r\n  }\r\n\r\n  public toggleCollapseAll(allCollapsed: boolean) {\r\n    let { groups } = this.state;\r\n    let { groupProps } = this.props;\r\n    let onToggleCollapseAll = groupProps && groupProps.onToggleCollapseAll;\r\n\r\n    if (groups) {\r\n      if (onToggleCollapseAll) {\r\n        onToggleCollapseAll(allCollapsed);\r\n      }\r\n\r\n      for (let groupIndex = 0; groupIndex < groups.length; groupIndex++) {\r\n        groups[groupIndex].isCollapsed = allCollapsed;\r\n      }\r\n\r\n      this._updateIsSomeGroupExpanded();\r\n\r\n      this.forceUpdate();\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _renderGroup(group, groupIndex) {\r\n    let {\r\n      dragDropEvents,\r\n      dragDropHelper,\r\n      eventsToRegister,\r\n      groupProps,\r\n      items,\r\n      listProps,\r\n      onRenderCell,\r\n      selectionMode,\r\n      selection,\r\n      viewport\r\n    } = this.props;\r\n\r\n    // override group header/footer props as needed\r\n    let dividerProps = {\r\n      onToggleSelectGroup: this._onToggleSelectGroup,\r\n      onToggleCollapse: this._onToggleCollapse,\r\n      onToggleSummarize: this._onToggleSummarize\r\n    };\r\n\r\n    let headerProps = assign({}, groupProps.headerProps, dividerProps);\r\n    let footerProps = assign({}, groupProps.footerProps, dividerProps);\r\n    let groupNestingDepth = this._getGroupNestingDepth();\r\n\r\n    return (!group || group.count > 0) ? (\r\n      <GroupedListSection\r\n        ref={ 'group_' + groupIndex }\r\n        key={ this._getGroupKey(group, groupIndex) }\r\n        dragDropEvents={ dragDropEvents }\r\n        dragDropHelper={ dragDropHelper }\r\n        eventsToRegister={ eventsToRegister }\r\n        footerProps={ footerProps }\r\n        getGroupItemLimit={ groupProps && groupProps.getGroupItemLimit }\r\n        group={ group }\r\n        groupIndex={ groupIndex }\r\n        groupNestingDepth={ groupNestingDepth }\r\n        headerProps={ headerProps }\r\n        listProps={ listProps }\r\n        items={ items }\r\n        onRenderCell={ onRenderCell }\r\n        onRenderGroupHeader={ groupProps.onRenderHeader }\r\n        onRenderGroupFooter={ groupProps.onRenderFooter }\r\n        selectionMode={ selectionMode }\r\n        selection={ selection }\r\n        viewport={ viewport }\r\n        />\r\n    ) : null;\r\n  }\r\n\r\n  private _getGroupKey(group: IGroup, index: number): string {\r\n    return 'group-' + ((group && group.key) ? group.key : String(index));\r\n  }\r\n\r\n  private _getGroupNestingDepth(): number {\r\n    let { groups } = this.state;\r\n    let level = 0;\r\n    let groupsInLevel = groups;\r\n\r\n    while (groupsInLevel && groupsInLevel.length > 0) {\r\n      level++;\r\n      groupsInLevel = groupsInLevel[0].children;\r\n    }\r\n\r\n    return level;\r\n  }\r\n\r\n  @autobind\r\n  private _onToggleCollapse(group: IGroup) {\r\n    let { groupProps } = this.props;\r\n    let onToggleCollapse = groupProps && groupProps.headerProps && groupProps.headerProps.onToggleCollapse;\r\n\r\n    if (group) {\r\n      if (onToggleCollapse) {\r\n        onToggleCollapse(group);\r\n      }\r\n\r\n      group.isCollapsed = !group.isCollapsed;\r\n      this._updateIsSomeGroupExpanded();\r\n      this.forceUpdate();\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _onToggleSelectGroup(group: IGroup) {\r\n    if (group) {\r\n      this.props.selection.toggleRangeSelected(group.startIndex, group.count);\r\n    }\r\n  }\r\n\r\n  private _forceListUpdates(groups?: IGroup[]) {\r\n    groups = groups || this.state.groups;\r\n\r\n    let groupCount = groups ? groups.length : 1;\r\n\r\n    if (this.refs.list) {\r\n      this.refs.list.forceUpdate();\r\n\r\n      for (let i = 0; i < groupCount; i++) {\r\n        let group = this.refs.list.refs['group_' + String(i)] as GroupedListSection;\r\n        if (group) {\r\n          group.forceListUpdate();\r\n        }\r\n      }\r\n    } else {\r\n      let group = this.refs['group_' + String(0)] as GroupedListSection;\r\n      if (group) {\r\n        group.forceListUpdate();\r\n      }\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _onToggleSummarize(group: IGroup) {\r\n    let { groupProps } = this.props;\r\n    let onToggleSummarize = groupProps && groupProps.footerProps && groupProps.footerProps.onToggleSummarize;\r\n\r\n    if (onToggleSummarize) {\r\n      onToggleSummarize(group);\r\n    } else {\r\n      if (group) {\r\n        group.isShowingAll = !group.isShowingAll;\r\n      }\r\n\r\n      this.forceUpdate();\r\n    }\r\n  }\r\n\r\n  private _computeIsSomeGroupExpanded(groups: IGroup[]) {\r\n    return groups && groups.some(group => group.children ? this._computeIsSomeGroupExpanded(group.children) : !group.isCollapsed);\r\n  }\r\n\r\n  private _updateIsSomeGroupExpanded() {\r\n    let { groups } = this.state;\r\n    let { onGroupExpandStateChanged } = this.props;\r\n\r\n    let newIsSomeGroupExpanded = this._computeIsSomeGroupExpanded(groups);\r\n    if (this._isSomeGroupExpanded !== newIsSomeGroupExpanded) {\r\n      if (onGroupExpandStateChanged) {\r\n        onGroupExpandStateChanged(newIsSomeGroupExpanded);\r\n      }\r\n      this._isSomeGroupExpanded = newIsSomeGroupExpanded;\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}