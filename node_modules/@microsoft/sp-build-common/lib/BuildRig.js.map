{"version":3,"sources":["BuildRig.ts"],"names":[],"mappings":"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","file":"BuildRig.js","sourcesContent":["import * as fs from 'fs';\r\nimport * as path from 'path';\r\n\r\nimport * as gulp from 'gulp';\r\nimport * as yargs from 'yargs';\r\n\r\nimport * as coreBuild from '@microsoft/gulp-core-build';\r\n\r\nimport { BuildRigConstants } from './BuildRigConstants';\r\n\r\n/**\r\n * Represents a function which can be called using data in a file as the parameter,\r\n * with an optional schema for validation, and readmeURL for redirecting users\r\n * to help.\r\n */\r\ninterface IConfigurableTask {\r\n  configFile: string;\r\n  schemaFile: string;\r\n  readmeUrl?: string;\r\n  callback: (config: Object) => void;\r\n}\r\n\r\n/**\r\n * The flags which this build rig defines. Extend this for child rigs\r\n */\r\nexport interface ICoreBuildArgs {\r\n  // Note the production and ship flags should have the same value\r\n  // @todo 264931 remove the production flag\r\n  production: boolean;\r\n  ship: boolean;\r\n  // A special flag for then they run --tasks\r\n  tasks: boolean;\r\n  verbose: boolean;\r\n}\r\n\r\n/**\r\n * Represents the a task which is registered to the gulp command line\r\n * The arguments function is evaluated if this is the current task, it should\r\n * interact with yargs to define any custom values.\r\n *\r\n * @todo 178074 this code should be removed\r\n */\r\nexport interface ITaskDefinition {\r\n  executable: coreBuild.IExecutable;\r\n  arguments?: (args: yargs.Argv) => void;\r\n}\r\n\r\n// Helper function to lock the paths to schema files\r\nfunction getSchemaFilePath(filename: string): string {\r\n  return path.join(__dirname, 'schemas', filename);\r\n}\r\n\r\n/**\r\n * Represents a gulp-core-build build \"rig\", or a collection of tasks and\r\n * configurations. It can be extended to define more top-level configurable tasks,\r\n * inject subtasks into the chain, register arguments to the command line.\r\n *\r\n * This class represents all the logic which doesn't belong in a rig, and should instead\r\n * be a part of gulp-core-build. Thus, this class should be removed once that logic\r\n * is properly replicated in gulp-core-build.\r\n *\r\n * @todo 178074, 253519, 253526\r\n */\r\nexport abstract class BuildRig {\r\n  protected args: ICoreBuildArgs;\r\n\r\n  /**\r\n   * The primary entry point into this build rig, accepts a gulp instance which is passed through to gulp-core-build\r\n   */\r\n  public initialize(gulp: gulp.Gulp): void {\r\n\r\n    // Initialize yargs & figure out which command we are running\r\n    const yargsArgs: yargs.Argv = this.getYargs();\r\n    const command: string = yargsArgs.argv._[0];\r\n    this.args = yargsArgs.argv;\r\n\r\n    // Collect the tasks which need to be registered\r\n    const tasks: Map<string, ITaskDefinition> = this.getTasks();\r\n\r\n    // Reset the args and reconfigure based on the selected command\r\n    yargsArgs.reset();\r\n    if (tasks.has(command)) {\r\n      const task: ITaskDefinition = tasks.get(command);\r\n      if (task.arguments) {\r\n        task.arguments(yargsArgs);\r\n      }\r\n    }\r\n\r\n    // Note this overrides the getters for ship and production on args\r\n    // @todo 264931 - the production flag should be removed\r\n    this.args.ship = this.args.production = (this.args.production || this.args.ship);\r\n\r\n    // Since gulp-core-build doesn't recognize the --ship flag, ensure it gets the right state\r\n    coreBuild.mergeConfig({\r\n      production: this.args.ship,\r\n      shouldWarningsFailBuild: this.args.ship\r\n    });\r\n\r\n    // Register all the tasks with gulp-core-build\r\n    tasks.forEach((definition: ITaskDefinition, name: string): void => {\r\n      coreBuild.task(name, definition.executable);\r\n    });\r\n\r\n    // If they are just looking for the task list, save time by not reading config files\r\n    if (!this.args.tasks) {\r\n      // Configure tasks for a normal build\r\n      console.log('Build target: ' + (this.args.ship ?\r\n        BuildRigConstants.flavors.ship.toUpperCase() :\r\n        BuildRigConstants.flavors.debug.toUpperCase()));\r\n\r\n      this.setupSharedConfig();\r\n\r\n      try {\r\n        this._loadCustomConfig();\r\n      } catch (error) {\r\n        console.log(error);\r\n        throw error;\r\n      }\r\n    }\r\n\r\n    coreBuild.initialize(gulp);\r\n\r\n    // If they are just looking for the task list, save time by not reading config files\r\n    if (!this.args.tasks) {\r\n      this.finalizeSharedConfig();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Override this function to create new top-level tasks which can be executed via the command line\r\n   */\r\n  protected abstract getTasks(): Map<string, ITaskDefinition>;\r\n\r\n  /**\r\n   * Override this function to do configuration before the configuration .json files have been loaded\r\n   */\r\n  protected abstract setupSharedConfig(): void;\r\n\r\n  /**\r\n   * Override this function to do configuration after the configuration .json files have been loadeds\r\n   */\r\n  protected abstract finalizeSharedConfig(): void;\r\n\r\n  /**\r\n   * Override this function to register more top-level command line arguments (i.e. not task-specific).\r\n   * Ideally, extend the ICoreBuildArgs when hooking into this function\r\n   * @todo 253519 : this code should be removed once we determine the interface for argument parsing with GCB\r\n   */\r\n  protected getYargs(): yargs.Argv {\r\n    const yargsArgs: yargs.Argv = yargs.usage()\r\n      .option('production', {\r\n        alias: 'p',\r\n        describe: 'build in ship mode with full localization and minimization',\r\n        boolean: true\r\n      })\r\n      .option('ship', {\r\n        alias: 'p',\r\n        describe: 'build in ship mode with full localization and minimization',\r\n        boolean: true\r\n      })\r\n      .option('verbose', {\r\n        describe: 'run the build with verbose logging'\r\n      })\r\n      .option('tasks', {\r\n        alias: ['T', 'tasks-simple'],\r\n        describe: 'shows the list of tasks which can be run'\r\n      })\r\n      .help('h')\r\n      .global(['production', 'verbose', 'h']);\r\n    return yargsArgs;\r\n  }\r\n\r\n  protected _disableTasks(...tasks: coreBuild.IExecutable[]): void {\r\n    tasks.forEach((task: coreBuild.IExecutable) => {\r\n      task.isEnabled = () => false;\r\n      coreBuild.verbose(`Disabling task: ${task.name}`);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Loads the config.json file into the gulp-core-build general property bag\r\n   */\r\n  private _loadCustomConfig(): void {\r\n    const configFilename: string = path.join(process.cwd(), 'config', 'config.json');\r\n    const schemaFilename: string = getSchemaFilePath('config.schema.json');\r\n    const rawConfig: {} = this._readConfigFile(configFilename, schemaFilename);\r\n    if (rawConfig) {\r\n      coreBuild.mergeConfig({ properties: rawConfig });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper function which loads a custom config file from disk, then runs the SchemaValidator on it\r\n   */\r\n  private _readConfigFile(filename: string, schemafile: string): Object {\r\n    if (!fs.existsSync(filename)) {\r\n      return undefined;\r\n    } else {\r\n      if (this.args.verbose) {\r\n        console.log(`Found config file: ${path.basename(filename)}`);\r\n      }\r\n\r\n      let data: {};\r\n      try {\r\n        if (fs.existsSync(schemafile)) {\r\n          if (this.args.verbose) {\r\n            console.log(`Schema file ${schemafile} not found`);\r\n          }\r\n          data = coreBuild.SchemaValidator.readAndValidateJson(filename, schemafile);\r\n        } else {\r\n          data = coreBuild.SchemaValidator.readCommentedJsonFile(filename);\r\n        }\r\n      } catch (error) {\r\n        throw error.toString();\r\n      }\r\n\r\n      return data;\r\n    }\r\n  }\r\n}"],"sourceRoot":"..\\src"}