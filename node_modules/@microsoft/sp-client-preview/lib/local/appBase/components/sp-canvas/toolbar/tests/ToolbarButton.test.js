"use strict";
var chai_1 = require("chai");
var enzyme_1 = require("enzyme");
var React = require("react");
var ToolbarButton_1 = require("../toolbarButton/ToolbarButton");
describe('ToolbarButton tests', function () {
    var toolbarElement;
    var mockProps;
    var onClick;
    var onKeyDown;
    beforeEach(function () {
        onClick = sinon.spy();
        onKeyDown = sinon.spy();
        mockProps = {
            onClick: onClick,
            disabled: true,
            isActive: true,
            key: 'mockButton',
            tabIndex: 0,
            onKeyDown: onKeyDown,
            automationId: 'mockButton',
            title: 'mockButton'
        };
        toolbarElement = enzyme_1.mount(React.createElement(ToolbarButton_1.default, mockProps));
    });
    afterEach(function () {
        toolbarElement.unmount();
    });
    it('should render the button as expected', function (done) {
        chai_1.expect(toolbarElement.find("[data-automation-id='mockButton']").length).to.be.eq(1);
        done();
    });
    it('should call the click handler as expected', function (done) {
        toolbarElement.find("[data-automation-id='mockButton']").simulate('click');
        chai_1.expect(onClick.calledOnce).to.be.true;
        done();
    });
    it('should call the key down as expected', function (done) {
        toolbarElement.find("[data-automation-id='mockButton']").simulate('keyDown', { key: 'ArrowDown' });
        chai_1.expect(onKeyDown.calledOnce).to.be.true;
        done();
    });
    it('should set the aria-pressed as expected', function (done) {
        chai_1.expect(toolbarElement.find('[aria-pressed=true]')).to.have.length(1);
        done();
    });
    it('should set the aria-disabled as expected', function (done) {
        chai_1.expect(toolbarElement.find('[aria-disabled=true]')).to.have.length(1);
        done();
    });
    it('should set title as expected', function (done) {
        chai_1.expect(toolbarElement.find('[title="mockButton"]')).to.have.length(1);
        done();
    });
    it('should set tab index as expected', function (done) {
        chai_1.expect(toolbarElement.find('[tabIndex=0]')).to.have.length(1);
        done();
    });
});
