"use strict";
var chai_1 = require("chai");
var enzyme_1 = require("enzyme");
var React = require("react");
var SPRteFormattingBar_1 = require("../formattingbar/SPRteFormattingBar");
var MockToolbarButtonProps_1 = require("../../sp-canvas/toolbar/mocks/MockToolbarButtonProps");
var ToolbarButton_1 = require("../../sp-canvas/toolbar/toolbarButton/ToolbarButton");
var office_ui_fabric_react_1 = require("office-ui-fabric-react");
describe('FormattingBar tests', function () {
    var formattingBarElement;
    var mockProps;
    var onKeyDown;
    var formattingBarPosition = { left: 0, top: 0, right: undefined, position: 'fixed' };
    var mockButtonsProps;
    var mockButtons = [];
    beforeEach(function () {
        onKeyDown = sinon.spy();
        mockButtonsProps = MockToolbarButtonProps_1.default.getToolbarButtons(2);
        mockButtons = [];
        mockButtons.push(React.createElement(ToolbarButton_1.default, mockButtonsProps[0]));
        mockButtons.push(React.createElement(ToolbarButton_1.default, mockButtonsProps[1]));
        mockProps = {
            buttons: mockButtons,
            position: formattingBarPosition,
            onKeyDown: onKeyDown
        };
        formattingBarElement = enzyme_1.mount(React.createElement(SPRteFormattingBar_1.default, mockProps));
    });
    afterEach(function () {
        formattingBarElement.unmount();
    });
    it('calls componentDidMount after mounting', function (done) {
        var spy = sinon.spy(SPRteFormattingBar_1.default.prototype, 'componentDidMount');
        formattingBarElement = enzyme_1.mount(React.createElement(SPRteFormattingBar_1.default, mockProps));
        chai_1.assert(spy.calledOnce);
        done();
    });
    it('should render the toolbarButtons as expected', function (done) {
        chai_1.expect(formattingBarElement.find(ToolbarButton_1.default).length).to.be.eq(2);
        done();
    });
    it('should render the focus zone as expected', function (done) {
        chai_1.expect(formattingBarElement.find(office_ui_fabric_react_1.FocusZone).length).to.be.eq(1);
        done();
    });
    it('should render the toolbar as expected', function (done) {
        chai_1.expect(formattingBarElement.find("[data-automation-id='toolbar']").length).to.be.eq(1);
        done();
    });
});
