{"version":3,"sources":["tests/manifestSchemaValidator.test.ts"],"names":[],"mappings":"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","file":"tests/manifestSchemaValidator.test.js","sourcesContent":["/// <reference types=\"mocha\" />\r\n\r\nimport ZSchema = require('z-schema');\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport { assert } from 'chai';\r\n\r\nimport ManifestSchemaValidator, { IManifestValidatorResult } from './../manifestSchemaValidator';\r\n\r\nimport { EOL } from 'os';\r\n\r\n// Discover all example manifest files\r\nconst exampleSchemasPath: string = path.join(__dirname, '..', 'manifestSchemas', 'examples');\r\nconst exampleSchemaFileCandidates: string[] = fs.readdirSync(exampleSchemasPath);\r\nconst exampleManifestFiles: string[] =\r\n  exampleSchemaFileCandidates.reduce((result: string[], exampleSchemaFileCandidate: string) => {\r\n    const extname: string = path.extname(exampleSchemaFileCandidate);\r\n    if (extname === '.js' || extname === '.json') {\r\n      return result.concat(path.join(exampleSchemasPath, exampleSchemaFileCandidate));\r\n    } else {\r\n      return result;\r\n    }\r\n  }, []);\r\n\r\nconst errorSeparator: string = `${EOL}          - `;\r\n\r\nfunction assertValidSchema(errors: ZSchema.SchemaError[], filePath?: string): void {\r\n  const errorMessages: string[] = errors.map((error: ZSchema.SchemaError) => {\r\n    return `${errorSeparator}(${error.path}) ${error.message}`;\r\n  });\r\n\r\n  assert(errors.length === 0, `Schema validation errors${filePath ? ` (${filePath})` : ''}:${errorMessages.join('')}`);\r\n}\r\n\r\ndescribe('Manifest schema validator', () => {\r\n  // Test each of the examples\r\n  exampleManifestFiles.forEach((manifestFile: string) => {\r\n    const schemaFileBasename: string = path.basename(manifestFile);\r\n\r\n    /* tslint:disable:no-any */\r\n    const manifestFileContents: any = require(manifestFile);\r\n    let validationFn: (manifest: any) => IManifestValidatorResult;\r\n    /* tslint:enable:no-any */\r\n\r\n    if (schemaFileBasename.match(/application/i)) {\r\n      validationFn = ManifestSchemaValidator.validateApplicationManifest;\r\n    } else if (schemaFileBasename.match(/codepart/i)) {\r\n      validationFn = ManifestSchemaValidator.validateCodePartManifest;\r\n    } else if (schemaFileBasename.match(/webpart/i)) {\r\n      validationFn = ManifestSchemaValidator.validateWebPartManifest;\r\n    } else if (schemaFileBasename.match(/library/i)) {\r\n      validationFn = ManifestSchemaValidator.validateLibraryManifest;\r\n    } else {\r\n      throw `Unsupported component type in filename \"${schemaFileBasename}\".`;\r\n    }\r\n\r\n    it(`correctly validates \"${schemaFileBasename}\" example manifest (parsed, general manifest schema)`, () => {\r\n      const validationResult: IManifestValidatorResult = ManifestSchemaValidator.validateManifest(manifestFileContents);\r\n      assertValidSchema(validationResult.errors, schemaFileBasename);\r\n    });\r\n\r\n    it(`correctly validates \"${schemaFileBasename}\" example manifest (as string, general manifest schema)`, () => {\r\n      const validationResult: IManifestValidatorResult =\r\n        ManifestSchemaValidator.validateManifest(JSON.stringify(manifestFileContents));\r\n      assertValidSchema(validationResult.errors, schemaFileBasename);\r\n    });\r\n    it(`correctly validates \"${schemaFileBasename}\" example manifest (parsed, specific manifest schema)`, () => {\r\n      const validationResult: IManifestValidatorResult = validationFn(manifestFileContents);\r\n      assertValidSchema(validationResult.errors, schemaFileBasename);\r\n    });\r\n\r\n    it(`correctly validates \"${schemaFileBasename}\" example manifest (as string, specific manifest schema)`, () => {\r\n      const validationResult: IManifestValidatorResult = validationFn(JSON.stringify(manifestFileContents));\r\n      assertValidSchema(validationResult.errors, schemaFileBasename);\r\n    });\r\n  });\r\n});"],"sourceRoot":"..\\..\\src"}