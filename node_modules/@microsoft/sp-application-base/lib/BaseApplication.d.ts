/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file Interface for a Master Page Application
 */
import { IShell } from './shell/Shell';
import ISuiteNavManagerConfiguration from './suiteNav/ISuiteNavManagerConfiguration';
/**
 * This is the system base class for client-side applications.  It manages the overall
 * life cycle of your application, and is the first entry point for your code to start
 * executing when the page loads.  The two main events are onLoad() which occurs first,
 * and onRender() which occurs after the shell has initialized the environment and
 * completed rendering the page chrome.
 * @alpha
 */
export default class BaseApplication {
    /**
     * Overrides the alias value provided in the manifest.
     * @see IClientSideComponentManifests.alias
     */
    readonly alias: string;
    private _shell;
    private _domElement;
    constructor();
    /**
     * Returns a reference to the shell, which is a global singleton object that contains
     * the main service classes.
     */
    protected shell: IShell;
    /**
     * Returns the DOM element where the application is expected to render its content.
     * The domElement will be undefined until the onRender() event occurs.
     * IMPORTANT: The application should not access DOM elements outside of this subtree,
     * as they are system-defined and may change over time.
     */
    protected domElement: HTMLDivElement;
    /**
     * RESERVED FOR INTERNAL USAGE.  This method is invoked automatically by the system shell.
     * The application code should not call it directly.
     */
    load(shell: IShell): void;
    /**
     * This life cycle event occurs immediately after the shell has loaded the application,
     * before the DOM is constructed.  Applications can use this event to load scripts
     * or start asynchronous operations that need to occur early in the lifecycle.
     * Inside the onLoad() event, applications may also modify the rendering of various
     * page chrome elements, for example by calling this.shell.suiteNav.setComponentVisibility(false).
     */
    protected onLoad(): void;
    /**
     * RESERVED FOR INTERNAL USAGE.  This method is invoked automatically by the system shell.
     * The application code should not call it directly.
     */
    render(domElement: HTMLDivElement): void;
    /**
     * This lifecycle event occurs after the shell has constructed the DOM for the page chrome.
     * At this time, the domElement property will be initialized, and the application can begin
     * rendering its own DOM elements.
     */
    protected onRender(): void;
    /**
     * This virtual function returns the default configuration and can be configured by applications
     * when required.
     *
     */
    suiteNavConfiguration(): ISuiteNavManagerConfiguration;
    private _shouldDisableSuiteNav();
}
