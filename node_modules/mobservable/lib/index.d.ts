import { IDependencyTree, IObserverTree, ITransitionEvent, Lambda } from './interfaces';
import SimpleEventEmitter from './simpleeventemitter';
export * from './interfaces';
export { isObservable, isObservableObject, isObservableArray, isObservableMap, observable, extendObservable, asReference, asFlat, asStructure, observe, autorun, autorunUntil, autorunAsync, expr, toJSON, isObservable as isReactive, map, fastArray, observable as makeReactive, extendObservable as extendReactive, autorunUntil as observeUntil, autorunAsync as observeAsync } from './core';
export { createTransformer } from './transform';
export { untracked, transaction } from './dnode';
export { ObservableMap } from './observablemap';
export declare const _: {
    isComputingView: () => boolean;
    quickDiff: <T>(current: T[], base: T[]) => [T[], T[]];
};
export declare const extras: {
    getDNode: (thing: any) => any;
    getDependencyTree: (thing: any, property?: string) => IDependencyTree;
    getObserverTree: (thing: any, property?: string) => IObserverTree;
    trackTransitions: (extensive?: boolean, onReport?: (lines: ITransitionEvent) => void) => Lambda;
    SimpleEventEmitter: typeof SimpleEventEmitter;
    withStrict: (newStrict: boolean, func: Lambda) => void;
};
