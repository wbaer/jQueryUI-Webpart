{"version":3,"sources":["collectLocalizedResources/CollectLocalizedResourcesTask.ts"],"names":[],"mappings":";;;;;;AACA,2BAA6B;AAC7B,uBAAyB;AACzB,2BAA6B;AAC7B,iCAAsC;AAEtC,4CAAuC;AAEvC,kDAA6D;AAKhD,QAAA,kBAAkB,GAAW,IAAI,MAAM,CAAC,qBAAY,CAAC,qBAAY,CAAC,mBAAS,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;AAC3F,QAAA,wBAAwB,GAAW,IAAI,MAAM,CAAC,qBAAY,CAAC,qBAAY,CAAC,mBAAS,CAAC,WAAW,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;AAEnH;;GAEG;AACH;IAAmD,iDAAkD;IAArG;QAAA,qEA6FC;QAzFQ,UAAI,GAAW,2BAA2B,CAAC;QAC3C,gBAAU,GAAyC,EAAE,CAAC;;IAwF/D,CAAC;IAtFQ,mDAAW,GAAlB,UAAmB,IAAe,EAAE,gBAA0C;QAA9E,iBAsBC;QArBC,IAAM,OAAO,GAAW,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QAEzF,IAAM,kBAAkB,GAA8B,IAAI,CAAC,UAAU,CAAC,kBAAkB,IAAI,EAAE,CAAC;QAC/F,IAAM,qBAAqB,GAAa,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAExE,IAAI,CAAC,UAAU,CAAI,qBAAqB,CAAC,MAAM,kCAA+B,CAAC,CAAC;QAEhF,IAAI,CAAC,UAAU,CAAC,4BAA4B,GAAG,EAAE,CAAC;QAElD,IAAM,QAAQ,GAAoB,qBAAqB,CAAC,GAAG,CAAC,UAAC,GAAW;YACtE,OAAA,KAAI,CAAC,uBAAuB,CAAC,OAAO,EAAE,kBAAkB,CAAC,GAAG,CAAC,CAAC;iBACzD,IAAI,CAAC,UAAC,MAAkB;gBACvB,KAAI,CAAC,UAAU,CAAC,4BAA4B,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;YAC7D,CAAC,CAAC;iBACD,KAAK,CAAC,UAAC,KAAa;gBACnB,MAAM,0BAAuB,GAAG,YAAM,KAAO,CAAC;YAChD,CAAC,CAAC;QANN,CAMM,CAAC,CAAC;QAEV,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC;aACb,IAAI,CAAC,cAAM,OAAA,gBAAgB,EAAE,EAAlB,CAAkB,CAAC;aAC9B,KAAK,CAAC,gBAAgB,CAAC,CAAC;IACzC,CAAC;IAEO,+DAAuB,GAA/B,UAAgC,OAAe,EAAE,UAAkB;QAAnE,iBA6DC;QA5DC,oHAAoH;QACpH,IAAM,iBAAiB,GAAa,UAAU,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;QACrE,IAAM,OAAO,GAAW,iBAAiB,GAAG,iBAAiB,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC;QAC9E,EAAE,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,UAAU,CAAC,kCAA+B,UAAU,yDAAqD;iBAC9F,0BAAuB,IAAI,CAAC,WAAW,CAAC,SAAS,8CAA0C,CAAA;gBAC3F,mFAAmF,CAAC,CAAC;QACvG,CAAC;QAED,MAAM,CAAC,IAAI,OAAO,CAAa,UAAC,OAAqC,EAAE,MAA+B;YACpG,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,6BAA6B,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;gBACrE,qCAAqC;gBACrC,IAAM,UAAQ,GAAW,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;gBAErD,EAAE,CAAC,IAAI,CAAC,UAAQ,EAAE,UAAC,KAA4B;oBAC7C,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;wBACV,sCAAsC;wBACtC,MAAM,CAAC,0BAAuB,UAAU,kBAAc,CAAC,CAAC;oBAC1D,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,iDAAiD;wBACjD,OAAO,CAAC;4BACN,OAAO,EAAE,UAAQ;yBAClB,CAAC,CAAC;oBACL,CAAC;gBACH,CAAC,CAAC,CAAC;YACL,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,IAAM,WAAW,GAAW,OAAO,CAAC,OAAO,CAAC,6BAA6B,CAAC,kBAAkB,EAAE,GAAG,CAAC,CAAC;gBACnG,IAAI,CAAC,WAAW,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE,EAAE,UAAC,KAAY,EAAE,KAAe;oBAChE,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;wBACV,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;oBACxB,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;wBAC9B,MAAM,CAAC,0CAAuC,KAAI,CAAC,WAAW,CAAC,SAAS,2BAAuB;6BACxF,eAAY,UAAU,OAAG,CAAA,CAAC,CAAC;oBACpC,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,4FAA4F;wBAC5F,kFAAkF;wBAClF,IAAM,iBAAiB,GAAW,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;wBAC7E,IAAM,cAAY,GAAW,IAAI,MAAM,CAAC,qBAAY,CAAC,iBAAiB,CAAC;6BAC1B,OAAO,CAAC,0BAAkB,EAAE,MAAM,CAAC;6BACnC,OAAO,CAAC,gCAAwB,EAAE,SAAS,CAAC,CAAC,CAAC;wBAE3F,IAAM,QAAM,GAAe,EAAE,CAAC;wBAE9B,KAAK,CAAC,OAAO,CAAC,UAAC,IAAY;4BACzB,IAAM,SAAS,GAAW,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;4BACnD,IAAM,KAAK,GAAa,SAAS,CAAC,KAAK,CAAC,cAAY,CAAC,CAAC;4BACtD,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,KAAI,CAAC,UAAU,CAAC,6BAA0B,IAAI,OAAG,CAAC,CAAC;4BACrD,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACN,IAAM,MAAM,GAAW,KAAK,CAAC,CAAC,CAAC,CAAC;gCAChC,KAAI,CAAC,UAAU,CAAC,kBAAe,IAAI,mCAA4B,MAAM,OAAG,CAAC,CAAC;gCAC1E,QAAM,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;4BAC5C,CAAC;wBACH,CAAC,CAAC,CAAC;wBAEH,OAAO,CAAC,QAAM,CAAC,CAAC;oBAClB,CAAC;gBACH,CAAC,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACH,oCAAC;AAAD,CA7FA,AA6FC,CA7FkD,sBAAY;AAC9C,0CAAY,GAAW,UAAU,CAAC;AAClC,gDAAkB,GAAW,IAAI,MAAM,CAAC,6BAA6B,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;AAF7F,sEAA6B","file":"collectLocalizedResources/CollectLocalizedResourcesTask.js","sourcesContent":["import * as gulp from 'gulp';\r\nimport * as path from 'path';\r\nimport * as fs from 'fs';\r\nimport * as glob from 'glob';\r\nimport { escapeRegExp } from 'lodash';\r\n\r\nimport constants from './../constants';\r\n\r\nimport OdspGulpTask, { ILocaleMap } from './../OdspGulpTask';\r\n\r\nexport interface ICollectLocalizedResourcesTaskConfig {\r\n}\r\n\r\nexport const escapedTokenRegExp: RegExp = new RegExp(escapeRegExp(escapeRegExp(constants.localeToken)));\r\nexport const escapedTokenGlobalRegExp: RegExp = new RegExp(escapeRegExp(escapeRegExp(constants.localeToken)), 'g');\r\n\r\n/**\r\n * Discovers strings based on the pattern described in config.json\r\n */\r\nexport class CollectLocalizedResourcesTask extends OdspGulpTask<ICollectLocalizedResourcesTaskConfig> {\r\n  private static _localeToken: string = '{locale}';\r\n  private static _localeTokenRegExp: RegExp = new RegExp(CollectLocalizedResourcesTask._localeToken, 'g');\r\n\r\n  public name: string = 'collectLocalizedResources';\r\n  public taskConfig: ICollectLocalizedResourcesTaskConfig = {};\r\n\r\n  public executeTask(gulp: gulp.Gulp, completeCallback: (error?: string) => void): Promise<void> {\r\n    const libPath: string = path.join(this.buildConfig.rootPath, this.buildConfig.libFolder);\r\n\r\n    const localizedResources: { [key: string]: string } = this.properties.localizedResources || {};\r\n    const localizedResourceKeys: string[] = Object.keys(localizedResources);\r\n\r\n    this.logVerbose(`${localizedResourceKeys.length} localized resources defined.`);\r\n\r\n    this.properties.discoveredLocalizedResources = {};\r\n\r\n    const promises: Promise<void>[] = localizedResourceKeys.map((key: string): Promise<void> =>\r\n      this._collectResourcesForKey(libPath, localizedResources[key])\r\n          .then((result: ILocaleMap): void => {\r\n            this.properties.discoveredLocalizedResources[key] = result;\r\n          })\r\n          .catch((error: string): void => {\r\n            throw `Error for resource \"${key}\": ${error}`;\r\n          }));\r\n\r\n    return Promise.all(promises)\r\n                  .then(() => completeCallback())\r\n                  .catch(completeCallback);\r\n  }\r\n\r\n  private _collectResourcesForKey(libPath: string, rawPattern: string): Promise<ILocaleMap> {\r\n    // If the pattern doesn't have a leading slash, include one so the glob pattern resolves to under the lib directory.\r\n    const rawPatternMatches: string[] = rawPattern.match(/(?:^\\/+)(.+)/);\r\n    const pattern: string = rawPatternMatches ? rawPatternMatches[1] : rawPattern;\r\n    if (rawPatternMatches) {\r\n      this.logWarning(`The localized file pattern \"${rawPattern}\" contains a leading slash. These patterns resolve ` +\r\n                      `to paths under the \"${this.buildConfig.libFolder}\" directory, so they are intended to be ` +\r\n                      'relative. A leading slash is not recommended and may produce Unexpected behavior.');\r\n    }\r\n\r\n    return new Promise<ILocaleMap>((resolve: (result: ILocaleMap) => void, reject: (error: string) => void): void => {\r\n      if (!pattern.match(CollectLocalizedResourcesTask._localeTokenRegExp)) {\r\n        // Singleton locale, no pattern token\r\n        const fullPath: string = path.join(libPath, pattern);\r\n\r\n        fs.stat(fullPath, (error: NodeJS.ErrnoException): void => {\r\n          if (error) {\r\n            // Singleton not found, throw an error\r\n            reject(`Singleton resource \"${rawPattern}\" not found.`);\r\n          } else {\r\n            // Singleton found, resolve as the default locale\r\n            resolve({\r\n              default: fullPath\r\n            });\r\n          }\r\n        });\r\n      } else {\r\n        const globPattern: string = pattern.replace(CollectLocalizedResourcesTask._localeTokenRegExp, '*');\r\n        glob(globPattern, { cwd: libPath }, (error: Error, files: string[]): void => {\r\n          if (error) {\r\n            reject(error.message);\r\n          } else if (files.length === 0) {\r\n            reject(`No localized files found under the \"${this.buildConfig.libFolder}\" directory matching ` +\r\n                   `pattern \"${rawPattern}\"`);\r\n          } else {\r\n            // This turns a pattern that looks something like this: \"asdf\\{locale}/{locale}/{locale}.js\"\r\n            //  into a regex that looks something like this: /asdf\\/(.+)\\/(?:\\\\1)\\/(?:\\\\1).js/\r\n            const normalizedPattern: string = path.posix.resolve('/', pattern).substr(1);\r\n            const regexPattern: RegExp = new RegExp(escapeRegExp(normalizedPattern)\r\n                                                        .replace(escapedTokenRegExp, '(.+)')\r\n                                                        .replace(escapedTokenGlobalRegExp, '(?:\\\\1)'));\r\n\r\n            const result: ILocaleMap = {};\r\n\r\n            files.forEach((file: string): void => {\r\n              const posixFile: string = file.replace(/\\\\/g, '/');\r\n              const match: string[] = posixFile.match(regexPattern);\r\n              if (!match) {\r\n                this.logWarning(`Unexpected file path: \"${file}\"`);\r\n              } else {\r\n                const locale: string = match[1];\r\n                this.logVerbose(`Found file \"${file}\", identified as locale \"${locale}\"`);\r\n                result[locale] = path.join(libPath, file);\r\n              }\r\n            });\r\n\r\n            resolve(result);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}