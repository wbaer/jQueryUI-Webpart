{"version":3,"sources":["RemoveTripleSlashReferenceTask.ts"],"names":[],"mappings":";;;;;;AAEA,2BAA6B;AAC7B,mCAAsC;AACtC,4BAA4B;AAC5B,IAAM,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AACrC,IAAM,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;AAC3B,2BAA2B;AAE3B,8DAAsD;AAKtD;IAAoD,kDAA+C;IAAnG;QAAA,qEAuEC;QAtEQ,UAAI,GAAW,aAAa,CAAC;QAE7B,gBAAU,GAA0C,EAC1D,CAAC;;IAmEJ,CAAC;IAjEQ,oDAAW,GAAlB,UAAmB,IAAe;QAChC,IAAM,SAAS,GAAmC,IAAI,CAAC;QAEvD,IAAM,WAAW,GAAW,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,SAAS,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;QAEvF;;;;;;;WAOG;QACH,IAAM,kBAAkB,GAAW,sDAAsD,CAAC;QAC1F,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC;aACzB,IAAI,CAAC,MAAM;QACV,2CAA2C;QAC3C,QAAQ,CAAC,GAAG,CAAC,UAAS,IAAmB,EAAE,QAAgB,EACzD,QAA2D;YAC3D,0CAA0C;YAE1C,IAAI,CAAC;gBACH,IAAM,WAAW,GAAW,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;gBACrD,IAAM,2BAAyB,GAAW,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;gBACnG,SAAS,CAAC,UAAU,CAAC,2BAAyB,CAAC,CAAC;gBAEhD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG;oBACrB,YAAY,EAAE,CAAC;iBAChB,CAAC;gBAEF,IAAM,WAAW,GAAW,WAAW,CAAC,OAAO,CAAC,kBAAkB,EAChE,UAAC,CAAS,EAAE,OAAe;oBACzB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,YAAY,EAAE,CAAC;oBACpC,SAAS,CAAC,GAAG,CAAC,2BAAyB,OAAO,aAAQ,2BAA2B,CAAC,CAAC;oBACnF,MAAM,CAAC,SAAO,SAAS,CAAC,IAAI,gCAA2B,OAAO,MAAG,CAAC;gBACpE,CAAC,CACF,CAAC;gBAEF,IAAI,CAAC,QAAQ,GAAG,IAAI,MAAM,CAAC,WAAW,CAAC,CAAC;gBACxC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAChB,QAAQ,EAAE,CAAC;YACb,CAAC;YAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACX,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACtB,QAAQ,CAAC,CAAC,CAAC,CAAC;YACd,CAAC;QACH,CAAC,CAAC,EACF;YACE,IAAI,EAAE,GAAG,CAAC,SAAS,CAAC,IAAI,GAAG,SAAS,CAAC,WAAW,CAAC,QAAQ,CAAC;YAC1D,iDAAiD;YACjD,OAAO,EAAE,UAAC,YAA2B;gBACnC,sCAAsC;gBACtC,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,YAAY,KAAK,CAAC,CAAC;gBACvD,qCAAqC;YACvC,CAAC;YACD,iFAAiF;YACjF,uFAAuF;YACvF,KAAK,EAAE,UAAC,IAAmB;gBACzB,MAAM,CAAC;oBACL,IAAI,EAAE,IAAI,CAAC,IAAI;iBAChB,CAAC;YACJ,CAAC;SACF,CACF,CAAC;aACD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC;IACtD,CAAC;IACH,qCAAC;AAAD,CAvEA,AAuEC,CAvEmD,0BAAQ,GAuE3D;AAvEY,wEAA8B","file":"RemoveTripleSlashReferenceTask.js","sourcesContent":["import gulp = require('gulp');\r\nimport gulpUtil = require('gulp-util');\r\nimport * as path from 'path';\r\nimport through2 = require('through2');\r\n/* tslint:disable:typedef */\r\nconst cached = require('gulp-cache');\r\nconst md5 = require('md5');\r\n/* tslint:enable:typedef */\r\n\r\nimport { GulpTask } from '@microsoft/gulp-core-build';\r\n\r\nexport interface IRemoveTripleSlashReferenceTaskConfig {\r\n}\r\n\r\nexport class RemoveTripleSlashReferenceTask extends GulpTask<IRemoveTripleSlashReferenceTaskConfig> {\r\n  public name: string = 'ts-npm-lint';\r\n\r\n  public taskConfig: IRemoveTripleSlashReferenceTaskConfig = {\r\n  };\r\n\r\n  public executeTask(gulp: gulp.Gulp): void {\r\n    const taskScope: RemoveTripleSlashReferenceTask = this;\r\n\r\n    const filePattern: string = path.join(taskScope.buildConfig.libFolder, '**', '*.d.ts');\r\n\r\n    /**\r\n     * Matches:\r\n     *  /// <reference path=\"../../typings.d.ts\" />\r\n     *  /// <reference path='../../typings.d.ts' />\r\n     *  ///<reference path='../../typings.d.ts' />\r\n     *  ///<reference foo=\"bar\" path='../../typings.d.ts'/>\r\n     *  /// <reference path='../../typings.d.ts' bar=\"foo\" />\r\n     */\r\n    const referencePathRegex: RegExp = /^\\/\\/\\/[ ]+<reference.*path=['\"]([^'\"]*)['\"][^>]+>/gm;\r\n    return gulp.src(filePattern)\r\n      .pipe(cached(\r\n        /* tslint:disable:no-function-expression */\r\n        through2.obj(function(file: gulpUtil.File, encoding: string,\r\n          callback: (encoding?: string, file?: gulpUtil.File) => void): void {\r\n          /* tslint:enable:no-function-expression */\r\n\r\n          try {\r\n            const rawContents: string = file.contents.toString();\r\n            const relativePathToCurrentFile: string = path.relative(taskScope.buildConfig.rootPath, file.path);\r\n            taskScope.logVerbose(relativePathToCurrentFile);\r\n\r\n            file[taskScope.name] = {\r\n              failureCount: 0\r\n            };\r\n\r\n            const newContents: string = rawContents.replace(referencePathRegex,\r\n              (_: string, tsdFile: string) => {\r\n                file[taskScope.name].failureCount++;\r\n                taskScope.log(`Removed reference to '${tsdFile}' in ${relativePathToCurrentFile}`);\r\n                return `// [${taskScope.name}] removed reference to '${tsdFile}'`;\r\n              }\r\n            );\r\n\r\n            file.contents = new Buffer(newContents);\r\n            this.push(file);\r\n            callback();\r\n          } catch (e) {\r\n            taskScope.logError(e);\r\n            callback(e);\r\n          }\r\n        }),\r\n        {\r\n          name: md5(taskScope.name + taskScope.buildConfig.rootPath),\r\n          // What on the result indicates it was successful\r\n          success: (jshintedFile: gulpUtil.File): boolean => {\r\n            /* tslint:disable:no-string-literal */\r\n            return jshintedFile[taskScope.name].failureCount === 0;\r\n            /* tslint:enable:no-string-literal */\r\n          },\r\n          // By default, the cache attempts to store the value of the objects in the stream\r\n          // For this task, this is over-engineering since we never need to store anything extra.\r\n          value: (file: gulpUtil.File): Object => {\r\n            return {\r\n              path: file.path\r\n            };\r\n          }\r\n        }\r\n      ))\r\n      .pipe(gulp.dest(taskScope.buildConfig.libFolder));\r\n  }\r\n}\r\n"],"sourceRoot":"..\\src"}