"use strict";
var chai_1 = require("chai");
var enzyme_1 = require("enzyme");
var React = require("react");
var ControlZone_1 = require("../controlZone/ControlZone");
var CanvasControlType_1 = require("../canvasControl/CanvasControlType");
var CanvasControlFactory_1 = require("../canvasControl/CanvasControlFactory");
var CanvasStore_1 = require("../canvasComponent/CanvasStore");
var CanvasA11y_1 = require("../../a11y/CanvasA11y");
var WebPartZone_1 = require("../webPartZone/WebPartZone");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_page_context_1 = require("@microsoft/sp-page-context");
var sp_http_1 = require("@microsoft/sp-http");
var Toolbar_1 = require("../../toolbar/toolbar/Toolbar");
describe('Control Zone tests', function () {
    var controlZoneElement;
    var mockProps;
    var rootScope = sp_core_library_1.ServiceScope.startNewRoot();
    rootScope.provide(sp_http_1.SPHttpClient.serviceKey, new sp_http_1.SPHttpClient(rootScope));
    rootScope.provide(sp_page_context_1.PageContext.serviceKey, new sp_page_context_1.PageContext(rootScope));
    rootScope.finish();
    var canvasStore;
    var render;
    var a11yManager;
    var canvasControls = [];
    var onChange;
    var handleCanvasChanged;
    var onDeleteButtonClick;
    var onConfigureButtonClick;
    beforeEach(function () {
        render = sinon.spy();
        onChange = sinon.spy();
        handleCanvasChanged = sinon.spy();
        onDeleteButtonClick = sinon.spy();
        onConfigureButtonClick = sinon.spy();
        canvasStore =
            new CanvasStore_1.default(rootScope, render, sp_core_library_1.DisplayMode.Edit, '', handleCanvasChanged);
        a11yManager = new CanvasA11y_1.CanvasA11yManager(document.createElement('div'), true);
        canvasStore.a11yManager = a11yManager;
        canvasControls = [];
        var webPartManifest = {
            manifestVersion: undefined,
            componentType: 'WebPart',
            id: 'WebPartZoneControl',
            alias: '',
            version: undefined,
            loaderConfig: undefined,
            preconfiguredEntries: undefined
        };
        var itemProps = {
            webPartData: undefined,
            webPartId: 'WebPartZoneControl',
            webPartManifest: webPartManifest,
            controlType: CanvasControlType_1.default.WebPartZone,
            displayMode: sp_core_library_1.DisplayMode.Edit,
            id: 'WebPartZoneControl',
            onChange: onChange
        };
        var control = CanvasControlFactory_1.default.CreateCanvasControl(itemProps, canvasStore);
        canvasControls.push(control);
        var toolbarProps = {
            controlType: CanvasControlType_1.default.WebPartZone,
            displayMode: sp_core_library_1.DisplayMode.Edit,
            id: 'mockToolbar',
            row: 0,
            onDeleteButtonClick: onDeleteButtonClick,
            onConfigureButtonClick: onConfigureButtonClick
        };
        var toolbarControl = React.createElement(Toolbar_1.default, toolbarProps);
        canvasControls.push(toolbarControl);
        mockProps = {
            displayMode: sp_core_library_1.DisplayMode.Edit,
            id: 'mockControlZone',
            isSelected: true,
            row: 0,
            children: canvasControls
        };
        mountControlZoneElement();
    });
    afterEach(function () {
        controlZoneElement.unmount();
    });
    it('should render with ControlZone--edit css class in edit mode', function (done) {
        chai_1.expect(controlZoneElement.find('div.ControlZone.ControlZone--edit').length).to.be.eq(1);
        done();
    });
    it('should render with ControlZone css class in read mode', function (done) {
        canvasStore.displayMode = sp_core_library_1.DisplayMode.Read;
        mockProps.displayMode = sp_core_library_1.DisplayMode.Read;
        mountControlZoneElement();
        chai_1.expect(controlZoneElement.find('div.ControlZone').length).to.be.eq(1);
        done();
    });
    it('should render the webpart zone', function (done) {
        chai_1.expect(controlZoneElement.find(WebPartZone_1.default).length).to.be.eq(1);
        done();
    });
    it('should render the toolbar with webpartzone', function (done) {
        chai_1.expect(controlZoneElement.find(Toolbar_1.default).length).to.be.eq(1);
        done();
    });
    it('should render the screen reader text', function (done) {
        chai_1.expect(controlZoneElement.find('div.ControlZone-screenReaderOnly').length).to.be.eq(1);
        done();
    });
    it('should render with isSelected css class if isSelected is set to true', function (done) {
        chai_1.expect(controlZoneElement.find('div.ControlZone--selected').length).to.be.eq(1);
        mockProps.isSelected = false;
        mountControlZoneElement();
        chai_1.expect(controlZoneElement.find('div.ControlZone--selected').length).to.be.eq(0);
        done();
    });
    it('should render with tab index according to the display mode ', function (done) {
        chai_1.expect(controlZoneElement.find("[data-automation-id='ControlZone']").find('[tabIndex=0]').length).to.be.eq(1);
        canvasStore.displayMode = sp_core_library_1.DisplayMode.Read;
        mockProps.displayMode = sp_core_library_1.DisplayMode.Read;
        mountControlZoneElement();
        chai_1.expect(controlZoneElement.find("[data-automation-id='ControlZone']").find('[tabIndex=-1]').length).to.be.eq(1);
        done();
    });
    it('should set the aria labelled by according to the control ', function (done) {
        chai_1.expect(controlZoneElement.find("[data-automation-id='ControlZone']").html().indexOf('aria-labelledby="cswpAccessibleLabelContextual_mockControlZone cswpAccessibleLabel_mockControlZone"'))
            .to.be.not.eq(-1);
        canvasControls = [];
        var itemProps = {
            controlType: CanvasControlType_1.default.RTE,
            displayMode: sp_core_library_1.DisplayMode.Edit,
            id: 'RTEControl'
        };
        var control = CanvasControlFactory_1.default.CreateCanvasControl(itemProps, canvasStore);
        canvasControls.push(control);
        mockProps.children = canvasControls;
        mountControlZoneElement();
        chai_1.expect(controlZoneElement.find("[data-automation-id='ControlZone']").
            find("[aria-labelledby='cswpAccessibleLabel_mockControlZone']").
            length).to.be.eq(1);
        done();
    });
    function mountControlZoneElement() {
        var context = { store: canvasStore };
        controlZoneElement = enzyme_1.mount(React.createElement(ControlZone_1.default, mockProps), { context: context });
        controlZoneElement.setContext(context);
    }
});
