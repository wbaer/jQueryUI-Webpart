/**
 * This class represents versions that follow the string format of MAJOR.MINOR[.PATCH[.REVISION]]
 * where MAJOR, MINOR, PATCH and REVISION are integers. PATCH and REVISION are optional.
 * Leading zeros are allowed, but have no meaning in comparisons.
 *
 * Examples: 1.0, 1.0.0, 1.0.0.0, 1.01, 01.02.03, 001.002.003.004
 *
 * @public
 */
export default class Version {
    private _major;
    private _minor;
    private _patch;
    private _revision;
    /**
     * Indicates whether a version string is valid
     *
     * @param versionString - The version string
     * @returns Value indicating whether the version is valid.
     */
    static isValid(versionString: string | undefined | null): boolean;
    /**
     * Constructs a new Version instance using the version string. tryParse validates the input version string
     * and throws error if it is invalid
     *
     * @param versionString - A version string
     * @returns If valid, a new Version instace
     */
    static parse(versionString: string | undefined | null): Version;
    /**
     * Tries to construct a new Version instance using the version string. Returns undefined if not successful.
     *
     * @param versionString - A version string
     * @returns If valid, a new Version instace. Otherwise, undefined.
     */
    static tryParse(versionString: string | undefined | null): Version | undefined;
    /**
     * Compares two Version classes
     *
     * @param v1 - The first version class for comparison
     * @param v2 - The second version class for comparison
     * @returns  -1 if the first input is less than the second input,
     *            0 if the first input is equal to the second input,
     *            1 if the first input is greater than the second input.
     */
    static compare(v1: Version, v2: Version): number;
    /**
     * The first number in the version string indicating the major version
     */
    readonly major: number;
    /**
     * The second number in the version string indicating the minor version
     */
    readonly minor: number;
    /**
     * The thrid number in the version string indicating the patch number in a semantic version or the build number in
     * a .NET System.Version class
     * Set to undefined if the third number does not exist
     */
    readonly patch: number | undefined;
    /**
     * The fourth number in the version string indicating the revision number
     * Set to undefined if the fourth number does not exist
     */
    readonly revision: number | undefined;
    /**
     * Checks if this version is less (i.e. older) than the input parameter. Missing patch number is treated as zero
     * Examples:
     *    0.9.9 lessThan 1.0.0 -> true
     *    2.0   lessThan 2.0.0 -> false
     *    3.0   lessThan 3.0.1 -> true
     *    04.01 lessThan 4.1   -> false
     *
     * @param compareWith - The version to compare with
     * @returns A boolean indicating if this version is less than the input parameter
     */
    lessThan(compareWith: Version): boolean;
    /**
     * Checks if this version is greater (i.e. newer) than the input parameter. Missing patch number is treated as zero
     * Examples:
     *    1.0.0 greaterThan 0.0.9 -> true
     *    2.0   greaterThan 2.0.0 -> false
     *    3.0.1 greaterThan 3.0   -> true
     *
     * @param compareWith - The version to compare with
     * @returns A boolean indicating if this version is greater than the input parameter
     */
    greaterThan(compareWith: Version): boolean;
    /**
     * Checks if this version is equal to the input parameter. Missing patch number is treated as zero.
     *
     * Examples:
     *    1.0.0 equals 1.0.0 -> true
     *    2.0.1 equals 2.0.0 -> false
     *    3.0   equals 3.0.0 -> true
     *    04.01 equals 4.1   -> true
     *
     * @param compareWith - The version to compare with
     * @returns A boolean indicating if this version is equal to the input parameter
     */
    equals(compareWith: Version): boolean;
    /**
     * Checks if this version satisfies the input parameter, therefore it's backwards compatible.
     * They have to share the same major version, and the input parameter must be an
     * equal or more recent version.
     *
     * Examples:
     *    1.0.0 satisfies 1.0.0 -> true
     *    1.1.0 satisfies 1.0.0 -> true
     *    2.0.0 satisfies 1.0.0 -> false
     *    1.0.0 satisfies 1.1.0 -> false
     *
     * @param compareWith - The version to compare with
     * @returns A boolean indicating if this version is compatible with the input parameter
     */
    satisfies(compareWith: Version): boolean;
    /**
     * Object.prototype.toString override
     *
     * The version string in MAJOR.MINOR[.PATCH[.REVISION]]
     */
    toString(): string;
    /**
     * WARNING: Use Version.tryParse instead of the constructor. The constructor does not do any validation.
     *
     * @param major - the major version
     * @param minor - the minor version
     * @param patch - the patch number
     * @param revision - the revision number
     */
    private constructor(major, minor, patch?, revision?);
}
