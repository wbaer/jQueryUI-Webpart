{
  "kind": "package",
  "summary": [],
  "remarks": [],
  "exports": {
    "IClientSideComponentManifest": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "All client side components built on the SharePoint framework need a valid component manifest. This interface represents properties that are required by all types of client side components like Applications and Web Parts. Component specific manifests will extend this interface to add properties required by that component type. The schema of this manifest is owned and vesioned by Microsoft. Following rules should be followed while changing this schema. This set of rules can also be called the \"manifest upgrade rules\". - For minor changes, new properties can be added to this schema in a backwards-compatible way. i.e. the code that processes the manifest should be able to handle the absense of those new properties. - Try to model your changes as minor SemVer increments. Major version changes should be avoided because they impose a migration cost on developers. - The 'manifestVersion' should be bumped for all small or big changes."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "members": {
        "alias": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Definition: A short name usually given by developer. It does not need to be localized and is expected to stay the same through the lifetime of the component. If an application overrides the ClientSideApplication.alias property, ClientSideApplication.alias is given precedence over the value provided in the manifest. Usage: A short name to identify a client side component by developer. Required: no Localized: no Supported values: Allowed characters are a-z, A-Z, and '-'. Not longer than 40 characters. Example: \"NewFeed\""
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "componentType": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "'Application' | 'WebPart' | 'Library' | 'CodePart'",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Definition: Type of client side component. Components with the \"Application\" type are defined by the \"IClientSideApplicationManifest\" interface. Components with the \"WebPart\" type are defined by the \"IClientSideWebPartManifest\" interface. Components with the \"Library\" type are defined by the \"IClientSideLibraryManifest\" interface. Usage: To help bundling, loading, enumeration, and initialization of components based on their contents. Required: yes Localized: no Supported values: \"Application\", \"WebPart\", \"Library\", \"CodePart\" Example: \"Application\""
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "id": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Definition: A universally unique component id. Each client side component is required to have this id. Once an id has been used for a component, it cannot be changed. A change in this value is treated same as the creation of a new component. Two components are never expected to have the same id. Usage: Uniquely identify a client side component. Required: yes Localized: no Supported values: any GUID Example: \"dbef608d-3ad5-4f8f-b139-d916f2f0a294\""
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "loaderConfig": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IClientSideComponentLoaderConfiguration",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Definition: This portion of the configuration describes how the component is to be loaded and initialized by a client. It contains an enumeration of scripts that the component requires along with a single entrypoint script. Usage: Loading a component. Required: yes"
            },
            {
              "kind": "seeDocElement",
              "seeElements": [
                {
                  "kind": "textDocElement",
                  "value": "IClientSideComponentLoaderConfiguration.ts for more information and examples."
                }
              ]
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "manifestVersion": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Definition: Version of the component manifest schema. The value of this field is controlled by Microsoft. The purpose of this field is to help manage upgrades of the component manifest schema. A component developer needs to only confirm that they are using the correct value per the manifest schema. Please read the \"manifest upgrade rules\" for more details on when the schema could change. Note, manifest schema version upgrade will be considered a big API change event and will be advertised broadly. Usage: To help support multiple manifest schema versions. Required: yes Localized: no Supported values: +ve integer. Example: 1"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "version": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Definition: Client side component version. The value of this field is expected to be controlled by the developer of the client side component. The purpose of this field is to help client side component developers upgrade their client side components in a managed way. This helps the consumers of the client side component make decisions about when and how to upgrade the client side component. As the developer evolves the code for their client side component, they can decide to bump the MAJOR, MINOR or PATCH version of the component. All incompatible API changes should result in a MAJOR version bump. Backwards compatible functionality changes should result in a MINOR version bump, and backwards compatible bug fixes should result in a PATCH version bump. Please see http://semver.org for more details on how to manage the version of your components. Usage: Versioning and evolving a client side component safely in a controlled way. Required: yes Localized: no Supported values: string representing a semantic version (http://semver.org) i.e. MAJOR.MINOR.PATCH Example: \"1.0.0\""
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      }
    },
    "IClientSideLibraryManifest": {
      "kind": "interface",
      "extends": "IClientSideComponentManifest",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "A library is defined by this manifest. Libraries currently do not have any additional properties."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "IClientSideWebPartManifest": {
      "kind": "interface",
      "extends": "IClientSideComponentManifest",
      "implements": "",
      "typeParameters": [
        "TProperties"
      ],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "The client side SharePoint framework identifies a Web Part by its manifest. All Web Parts are expected to have a manifest. The manifest is a schematized JSON blob that is used in multiple parts of the SharePoint infrastructure to identify, load and process a Web Part. The schema for this manifest is completely owned and versioned by Microsoft. There are some required properties in the manifest and some optional properties. Optional properties need to be provided only if the Web Part needs the specific functionality. An invalid manifest could lead to issues with Web Part loading and functionality problems."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "members": {
        "disabledOnClassicSharepoint": {
          "kind": "property",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Definition: If true, this web part is disabled on Classic Sharepoint pages ? Usage: Certain web parts may not be required on or apply to Classic Sharepoint pages. This flag helps control that. If this flag is true, the web part will not appear in the classic page web part gallery. Required: no Type: boolean Example: false"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "preconfiguredEntries": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IClientSideWebPartManifestEntry<TProperties>[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Definition: A Web Part can have pre-configured properties like the title, description, toolbox group name and Web Part specific custom properties. And there can be multiple instances of these pre-configured properties. This helps support scenarios where an organization may want to present multiple pre-configured entries for a Web Part in the Toolbox. Each entry is expected to configure the Web Part with a different set of pre-configured properties. A developer may decide to seed some initial values for these properties but an organization admin can go ahead and customize these properties per the needs of his/her organization. The properties can also be modified by the author of the page. Usage: help display a Web Part in the Tooblox, PropertyPane and the initial rendering of the Web Part. Required: yes Type: JSON object Localized: Depends on the property. Supported values: Array of IClientSideWebPartManifestEntry objects. Example: \"[{ title:\"Image Web Part\", description: \"This Web Part displays an image\", group: \"Media\", iconFontName: \"image\", properties: { imageSource: \"https://contoso.akamaihd.net/files/mountRainier.jpg\", captionText: \"Mount Rainier\" } }]\""
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      }
    },
    "IClientSideWebPartManifestEntry": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [
        "TProperties"
      ],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "This interface specifies the set of properties that can be pre-configured by a Web Part developer. Each pre-configured instance of the Web Part will need a copy of these properties. Organization admins and content authors can modify these properties on a need basis."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "members": {
        "dataVersion": {
          "kind": "property",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Definition: Use this field to specify the data version of the pre-configured data provided to the web part. Note that data version is different from the version field in the manifest. The manifest version is used to control the versioning of the web part code, while data version is used to control the versioning of the serialized data of the web part. Refer to dataVersion field of your web part for more information. Usage: versioning and evolving the serialized data of the web part Required: no Type: string representing a semantic version (http://semver.org) Supported values: MAJOR.MINOR Example: \"1.0\""
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "description": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ILocalizedString",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Definition: Description of the web part represented as a dictionary of locale keys to description values. This value will be displayed to the user in the toolbox. This description should be used in the Toolbox tooltip and other display areas. The Web Part developer may give an initial description to the web part. The organization admin and page author will have the ability to change this description as per need. Usage: display the description of the web part in the toolbox tooltip, web part gallery and the page. Required: yes Type: Object Localized: yes Supported values: a dictionary of locale keys to strings. Should always have a 'default' key. Example: \"A tool for displaying neat information.\" { \"default\": \"A tool for displaying neat information.\", \"en-us\": \"A tool for displaying neat information.\", \"fr-fr\": \"Un outil d’affichage des informations soignées.\", \"zh\": \"用於顯示整潔資訊的工具。\" }"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "groupId": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "iconImageUrl": {
          "kind": "property",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Definition: The icon for the web part, to be displayed in the toolbox, represented an image URL. The image at the URL must be exactly 38x38 px (SPPPLAT VSO#218660 to fix the size of the icon image). If the '"
            },
            {
              "kind": "linkDocElement",
              "referenceType": "code",
              "scopeName": "",
              "packageName": "",
              "exportName": "officeFabricIconFontName",
              "memberName": ""
            },
            {
              "kind": "textDocElement",
              "value": "' field does not have a value, this field must have a value. Required: no Type: string Localized: no Supported values: Any absolute URL. Example: \"https://contoso.akamaihd.net/files/myWebpartIcon.png\""
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "officeFabricIconFontName": {
          "kind": "property",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Definition: The icon for the Web Part, to be displayed in the toolbox, represented as a character name in the Office 365 icon font file. The icon font is specified here: http://o365icons.cloudapp.net/. If this field has a value, the '"
            },
            {
              "kind": "linkDocElement",
              "referenceType": "code",
              "scopeName": "",
              "packageName": "",
              "exportName": "iconImageUrl",
              "memberName": ""
            },
            {
              "kind": "textDocElement",
              "value": "' field will be ignored. Required: no Type: string Localized: no Supported values: Any character name in the Office 365 Icon Font. Example: \"graph\""
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "properties": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "TProperties",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Definition: every Web Part is expected to have some custom properties. e.g. an image Web Part may have the image url and caption text as custom properties, a list Web Part may have the list id and list title as custom properties, and so on. The Web Part framework is transparent to these properties. It just acts as a conduit to pass these properties in and out to the Web Parts. The Web Part developer fully controls the schema of these properties. The Web Part developer should follow versioning rules (@todo: pointer to Web Part versioning document) to evolve these properties. Usage: rendering of the Web Part. Required: yes Localized: no Supported values: any Example: {\"imageSource\": \"https://contoso.akamaihd.net/files/contosoLogo.jpg\", \"captionText\": \"Contoso logo\"}\""
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "title": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ILocalizedString",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Definition: Title of the web part represented as a single a dictionary of locale keys to title values. This value will be displayed to the user in the toolbox. This title should be used in the Toolbox and other display areas. The Web Part developer may give an initial title to the web part. The organization admin and page author will have the ability to change this title as per need. Usage: display the name of the web part in the toolbox, web part gallery and the page. Required: yes Type: Object Localized: yes Supported values: a dictionary of locale keys to strings. Should always have a 'default' key. Example: \"My Webpart\" { \"default\": \"My WebPart\" \"en-us\": \"My WebPart\", \"fr-fr\": \"Ma WebPart\", \"zh\": \"我的 web 部件\" }"
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      }
    },
    "IClientSideWebPartManifestInstance": {
      "kind": "interface",
      "extends": "IClientSideComponentManifest",
      "implements": "",
      "typeParameters": [
        "TProperties"
      ],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Manifest that is relevant to a Web Part instance."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "ILocalizedString": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Definition: A set of localized strings. Supported values: * An Id referring to a localized resource. In this case it requires an 'id' key. * A dictionary of locale keys to strings. In this case it requires a 'default' key. Example 1: \"My Application\" { \"id\": \"$myStrings:myStrings.MyApplication;\" } Example 2: \"My Application\" { \"default\": \"My Application\" \"en-us\": \"My Application\", \"fr-fr\": \"Ma demande\", \"zh\": \"我的應用程式\" } Notes on strings id: Ids have the following structure: $<resourceName>:<expression>; resourceName needs to be a localizedResource in the config.json. expression is an expression that will be evaluated to access the string from the resource module. If your resource is a dictionary, access it through \"$resource:resource.MyString;\" or \"$resource:resource[\\\"MyString\\\"];\" For more complex cases, run an appropriate expression to access your resource and return the string."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "members": {
        "__index": {
          "kind": "method",
          "signature": "[ locale: string ]: string | undefined;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "string | undefined",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "default": {
          "kind": "property",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "id": {
          "kind": "property",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      }
    }
  }
}
