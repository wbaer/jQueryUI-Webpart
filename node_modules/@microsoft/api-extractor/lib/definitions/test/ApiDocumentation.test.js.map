{"version":3,"sources":["definitions/test/ApiDocumentation.test.ts"],"names":[],"mappings":"AAAA,+BAA+B;;AAE/B,6BAA8B;AAC9B,+BAAiC;AACjC,2BAA6B;AAC7B,6CAAwC;AAExC,wDAA+D;AAE/D,uFAAuF;AAEvF,IAAM,cAAc,GAId,EAAE,CAAC;AAET,0BAA0B,OAAe,EAAE,QAAgB,EAAE,UAAkB;IAC7E,cAAc,CAAC,IAAI,CAAC,EAAE,OAAO,SAAA,EAAE,QAAQ,UAAA,EAAE,UAAU,YAAA,EAAE,CAAC,CAAC;AACzD,CAAC;AAED,IAAM,WAAW,GAAW,uBAAuB,CAAC;AACpD,IAAM,eAAe,GAAuB;IAC1C,MAAM,EAAE,EAAE,CAAC,YAAY,CAAC,GAAG;IAC3B,MAAM,EAAE,EAAE,CAAC,UAAU,CAAC,QAAQ;IAC9B,gBAAgB,EAAE,EAAE,CAAC,oBAAoB,CAAC,MAAM;IAChD,OAAO,EAAE,WAAW;IACpB,SAAS,EAAE,CAAC,IAAI,CAAC,CAAC,0CAA0C;CAC7D,CAAC;AACF,IAAM,SAAS,GAAc,IAAI,mBAAS,CAAC;IACzC,eAAe,EAAE,eAAe;IAChC,YAAY,EAAE,gBAAgB;CAC/B,CAAC,CAAC;AAEH,SAAS,CAAC,oBAAoB,CAAC,gCAAgC,CAAC,CAAC;AACjE,iDAAiD;AACjD,SAAS,CAAC,OAAO,CAAC;IAChB,cAAc,EAAE,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,UAAU,CAAC;CACnD,CAAC,CAAC;AAEH,IAAM,iBAAiB,GAAsB,SAAS,CAAC,OAAO,CAAC,oBAAoB,EAAE;KACpF,MAAM,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,IAAI,KAAK,mBAAmB,EAApC,CAAoC,CAAC,CAAC,CAAC,CAAsB,CAAC;AAEjF,QAAQ,CAAC,wBAAwB,EAAE;IACjC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAEpB,QAAQ,CAAC,mCAAmC,EAAE;QAC5C,IAAM,MAAM,GAAqB,IAAI,0BAAgB,CACnD,kDAAkD,EAClD,SAAS,CAAC,aAAa,EACvB,SAAS,EACT,OAAO,CAAC,GAAG,CACZ,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,4BAA4B,EAAE;QACrC,EAAE,CAAC,sBAAsB,EAAE;YACzB;;;;eAIG;YACH,aAAM,CAAC,KAAK,CAAC,cAAc,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sBAAsB,EAAE;YACzB,IAAM,aAAa,GAAW,yBAAM,CAAC,MAAM,CAAC;YAE5C,IAAM,SAAS,GAAqB,iBAAiB,GAAG,iBAAiB,CAAC,aAAa,GAAG,SAAS,CAAC;YAEpG,aAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YAC3B,aAAM,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"definitions/test/ApiDocumentation.test.js","sourcesContent":["/// <reference types=\"mocha\" />\r\n\r\nimport { assert } from 'chai';\r\nimport * as ts from 'typescript';\r\nimport * as path from 'path';\r\nimport Extractor from '../../Extractor';\r\nimport ApiStructuredType from '../ApiStructuredType';\r\nimport ApiDocumentation, { ApiTag } from '../ApiDocumentation';\r\n\r\n/* tslint:disable:no-function-expression - Mocha uses a poorly scoped \"this\" pointer */\r\n\r\nconst capturedErrors: {\r\n  message: string;\r\n  fileName: string;\r\n  lineNumber: number;\r\n}[] = [];\r\n\r\nfunction testErrorHandler(message: string, fileName: string, lineNumber: number): void {\r\n  capturedErrors.push({ message, fileName, lineNumber });\r\n}\r\n\r\nconst inputFolder: string = './testInputs/example2';\r\nconst compilerOptions: ts.CompilerOptions = {\r\n  target: ts.ScriptTarget.ES5,\r\n  module: ts.ModuleKind.CommonJS,\r\n  moduleResolution: ts.ModuleResolutionKind.NodeJs,\r\n  rootDir: inputFolder,\r\n  typeRoots: ['./'] // We need to ignore @types in these tests\r\n};\r\nconst extractor: Extractor = new Extractor({\r\n  compilerOptions: compilerOptions,\r\n  errorHandler: testErrorHandler\r\n});\r\n\r\nextractor.loadExternalPackages('./testInputs/external-api-json');\r\n// Run the analyzer once to be used by unit tests\r\nextractor.analyze({\r\n  entryPointFile: path.join(inputFolder, 'index.ts')\r\n});\r\n\r\nconst myDocumentedClass: ApiStructuredType = extractor.package.getSortedMemberItems()\r\n.filter(apiItem => apiItem.name === 'MyDocumentedClass')[0] as ApiStructuredType;\r\n\r\ndescribe('ApiDocumentation tests', function (): void {\r\n  this.timeout(10000);\r\n\r\n  describe('ApiDocumentation internal methods', function (): void {\r\n    const apiDoc: ApiDocumentation = new ApiDocumentation(\r\n      'Some summary\\n@remarks and some remarks\\n@public',\r\n      extractor.docItemLoader,\r\n      extractor,\r\n      console.log\r\n    );\r\n  });\r\n\r\n  describe('Documentation Parser Tests', function (): void {\r\n    it('Should report errors', function (): void {\r\n      /**\r\n       * To view the expected errors see:\r\n       * - testInputs/example2/folder/MyDocumentedClass (9 errors)\r\n       * - the test in this file '_parseApiReferenceExpression() without scope name and invalid memberName' (1 error)\r\n       */\r\n      assert.equal(capturedErrors.length, 10);\r\n    });\r\n\r\n    it('Should parse API tag', function (): void {\r\n      const expecedApiTag: ApiTag = ApiTag.Public;\r\n\r\n      const actualDoc: ApiDocumentation = myDocumentedClass ? myDocumentedClass.documentation : undefined;\r\n\r\n      assert.isObject(actualDoc);\r\n      assert.equal(actualDoc.apiTag, expecedApiTag);\r\n    });\r\n  });\r\n});\r\n"],"sourceRoot":"..\\..\\..\\src"}