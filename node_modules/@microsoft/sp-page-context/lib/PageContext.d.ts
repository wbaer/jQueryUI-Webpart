import { ServiceScope, ServiceKey } from '@microsoft/sp-core-library';
import SPWeb, { ISPWebData } from './SPWeb';
import SPList, { ISPListData } from './SPList';
import SPListItem, { ISPListItemData } from './SPListItem';
import SPSite, { ISPSiteData } from './SPSite';
import SPUser, { ISPUserData } from './SPUser';
import CultureInfo, { ICultureInfoData } from './CultureInfo';
/**
 * Interface for properties neccesary for building a PageContext.
 * @internal
 */
export interface IPageContextData {
    cultureInfo: ICultureInfoData;
    list?: ISPListData;
    listItem?: ISPListItemData;
    site: ISPSiteData;
    user: ISPUserData;
    web: ISPWebData;
}
/**
  * The page context provides standard definitions for common SharePoint objects
  * that need to be shared between the client-side application, web parts, and other
  * components.  Typically the data is fetched via REST queries when navigating to a
  * new page, but it can also be preloaded by the web server, or filled from a custom
  * application cache.
  * @public
  */
export default class PageContext {
    /**
     * The service key for PageContext.
     */
    static readonly serviceKey: ServiceKey<PageContext>;
    private static _logSource;
    private _cultureInfo;
    private _list;
    private _listItem;
    private _site;
    private _user;
    private _web;
    private _legacyPageContext;
    private _isInitialized;
    constructor(serviceScope: ServiceScope);
    /**
     * Initializes the Page Context.
     * @internal
     */
    initialize(options: IPageContextData, legacyPageContext?: any): void;
    /**
     * It provides culture info for the current user of the application.
     * This class is primarily used with the PageContext class.
     */
    readonly cultureInfo: CultureInfo;
    /**
     * Contextual information for the SharePoint list that is hosting the page.
     * If there is no list associated to the current page, this property will be undefined.
     */
    readonly list: SPList | undefined;
    /**
     * Contextual information for the SharePoint list item that is hosting the page.
     * If there is no list item associated to the current page, this property will be undefined.
     */
    readonly listItem: SPListItem | undefined;
    /**
     * Contextual information for the SharePoint site collection ("site") that is hosting the page.
     */
    readonly site: SPSite;
    /**
     * It provides contextual information for the SharePoint user that is accessing the page.
     * This class is primarily used with the PageContext class.
     */
    readonly user: SPUser;
    /**
     * Contextual information for the SharePoint site ("web") that is hosting the page.
     */
    readonly web: SPWeb;
    /**
     *  This property is provided to facilitate migration of legacy code. It returns a JavaScript
     *  object whose contents are similar to the _spPageContextInfo window variable from classic pages.
     *  The contents of this variable may change in future releases of SharePoint. New projects are
     *  encouraged to use the framework APIs instead, since they are documented and provide reliable
     *  backwards compatibility guarantees. @remarks If certain functionality is exposed in the
     * legacyPageContext but does not seem to have a proper TypeScript API, please file an issue on GitHub.‚Äù
     */
    readonly legacyPageContext: any;
    /**
     * Returns whether the PageContext has been initialized.
     */
    readonly isInitialized: boolean;
}
