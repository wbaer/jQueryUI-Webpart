{"version":3,"sources":["jsonUtilities/test/SchemaValidator.test.ts"],"names":[],"mappings":"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","file":"jsonUtilities/test/SchemaValidator.test.js","sourcesContent":["///<reference types=\"mocha\" />\r\n\r\nimport * as path from 'path';\r\nimport { assert } from 'chai';\r\nimport { EOL } from 'os';\r\nimport Validator = require('z-schema');\r\nimport { SchemaValidator } from '../SchemaValidator';\r\n\r\nconst nonexistentFile: string = path.join(__dirname, 'thisfileshouldneverexist.json');\r\nconst basicSchema: string = path.join(__dirname, 'basicSchema.json');\r\nconst exampleValid: string = path.join(__dirname, 'example_valid.json');\r\nconst exampleSyntaxError: string = path.join(__dirname, 'example_syntaxerror.json');\r\nconst exampleInvalid: string = path.join(__dirname, 'example_invalid.json');\r\n\r\ndescribe('SchemaValidator', () => {\r\n  describe('readCommentedJsonFile', () => {\r\n    it('reads a well-formatted JSON file', (done: MochaDone) => {\r\n      assert.doesNotThrow(() => {\r\n        SchemaValidator.readCommentedJsonFile(basicSchema);\r\n      });\r\n      done();\r\n    });\r\n\r\n    it('throws when the JSON file doesn\\'t exist', (done: MochaDone) => {\r\n      assert.throws(() => {\r\n        SchemaValidator.readCommentedJsonFile(nonexistentFile);\r\n      });\r\n      done();\r\n    });\r\n\r\n    it('throws when the JSON file is malformed', (done: MochaDone) => {\r\n      assert.throws(() => {\r\n        SchemaValidator.readCommentedJsonFile(exampleSyntaxError);\r\n      });\r\n      done();\r\n    });\r\n\r\n    it('the file does not contain the $schema value', (done: MochaDone) => {\r\n      const data: Object = SchemaValidator.readCommentedJsonFile(basicSchema);\r\n      assert.isUndefined(data['$schema']); // tslint:disable-line:no-string-literal\r\n      done();\r\n    });\r\n  });\r\n\r\n  describe('getFormattedErrorMessage', () => {\r\n    it('can properly format a simple error', (done: MochaDone) => {\r\n      const error: Validator.SchemaError = {\r\n        'name': 'z-schema validation error',\r\n        'message': 'JSON_OBJECT_VALIDATION_FAILED',\r\n        'details': [\r\n          {\r\n            'code': 'OBJECT_MISSING_REQUIRED_PROPERTY',\r\n            'params': [\r\n              'bar'\r\n            ],\r\n            'message': 'Missing required property: bar',\r\n            'path': '#/',\r\n            'description': 'An example schema with 2 properties',\r\n            'inner': []\r\n          }\r\n        ]\r\n      };\r\n      assert.equal(\r\n        // tslint:disable-next-line:no-any\r\n        (SchemaValidator as any).getFormattedErrorMessage(error.details),\r\n        ['',\r\n          'ERROR: (#/) Missing required property: bar',\r\n          '',\r\n          ''\r\n        ].join(EOL)\r\n      );\r\n      done();\r\n    });\r\n  });\r\n\r\n  describe('validateObject', () => {\r\n    const schema: Object = {\r\n      'title': 'basic schema',\r\n      'description': 'An example schema with 2 properties',\r\n\r\n      'type': 'object',\r\n      'required': [\r\n        'bar'\r\n      ],\r\n      'properties': {\r\n        'bar': {\r\n          'title': 'The bar string',\r\n          'description': 'A string of bar',\r\n          'type': 'string'\r\n        }\r\n      }\r\n    };\r\n\r\n    it('passes validation for a valid object', (done: MochaDone) => {\r\n      assert.doesNotThrow(() => {\r\n        SchemaValidator.validate({\r\n          'bar': 'foo'\r\n        }, schema);\r\n      });\r\n      done();\r\n    });\r\n\r\n    it('throws when passed an invalid object', (done: MochaDone) => {\r\n      assert.throws(() => {\r\n        SchemaValidator.validate({\r\n          'foo': ['123', '345']\r\n        }, 'file.js');\r\n      });\r\n      done();\r\n    });\r\n  });\r\n\r\n  describe('validate', () => {\r\n    it('passes validation for a valid object/schema file', (done: MochaDone) => {\r\n      assert.doesNotThrow(() => {\r\n        SchemaValidator.readAndValidateJson(exampleValid, basicSchema);\r\n      });\r\n      done();\r\n    });\r\n\r\n    it('throws when passed an invalid filepath for object', (done: MochaDone) => {\r\n      assert.throws(() => {\r\n        SchemaValidator.readAndValidateJson(nonexistentFile, basicSchema);\r\n      });\r\n      done();\r\n    });\r\n\r\n    it('throws when passed an invalid filepath for schema', (done: MochaDone) => {\r\n      assert.throws(() => {\r\n        SchemaValidator.readAndValidateJson(exampleValid, nonexistentFile);\r\n      });\r\n      done();\r\n    });\r\n\r\n    it('throws when the object file is malformed', (done: MochaDone) => {\r\n      assert.throws(() => {\r\n        SchemaValidator.readAndValidateJson(exampleSyntaxError, basicSchema);\r\n      });\r\n      done();\r\n    });\r\n\r\n    it('throws when the schema file is malformed', (done: MochaDone) => {\r\n      assert.throws(() => {\r\n        SchemaValidator.readAndValidateJson(exampleValid, exampleSyntaxError);\r\n      });\r\n      done();\r\n    });\r\n\r\n    it('throws when the object doesn\\'t pass validation', (done: MochaDone) => {\r\n      assert.throws(() => {\r\n        SchemaValidator.readAndValidateJson(exampleValid, exampleInvalid);\r\n      });\r\n      done();\r\n    });\r\n  });\r\n});\r\n"],"sourceRoot":"..\\..\\..\\src"}