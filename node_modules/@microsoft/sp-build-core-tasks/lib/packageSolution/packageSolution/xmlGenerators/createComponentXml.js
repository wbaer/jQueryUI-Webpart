/**
 * @file createComponentXml.ts
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * Creates an package's Element.Xml for a WebPart or ClientSideSolution
 */
/// <reference path='./xml.d.ts' />
"use strict";
var path = require("path");
var XmlGenerator = require("xml");
var ComponentType_1 = require("../models/ComponentType");
var serializationOptions_1 = require("./serializationOptions");
function createComponentXml(options, featureId) {
    if (options.type === ComponentType_1.default.Application ||
        options.type === ComponentType_1.default.CodePart) {
        var type = options.type === ComponentType_1.default.Application
            ? 'Application' : 'CodePart';
        return {
            filename: path.posix.join(featureId, type + "_" + options.id + ".xml"),
            xml: XmlGenerator({
                Elements: [
                    {
                        ClientSideComponent: [
                            {
                                _attr: {
                                    Name: options.name,
                                    Id: options.id,
                                    ComponentManifest: options.manifest,
                                    Type: type
                                }
                            }
                        ]
                    },
                    {
                        _attr: {
                            xmlns: 'http://schemas.microsoft.com/sharepoint/'
                        }
                    }
                ]
            }, serializationOptions_1.default)
        };
    }
    else {
        // @todo Note that the options.id is NOT necessarily the feature ID
        return {
            filename: path.posix.join(featureId, "WebPart_" + options.id + ".xml"),
            xml: XmlGenerator({
                Elements: [
                    {
                        ClientSideComponent: [
                            {
                                _attr: {
                                    Name: options.name,
                                    Id: options.id,
                                    ComponentManifest: options.manifest,
                                    Type: 'WebPart'
                                }
                            }
                        ]
                    },
                    {
                        Module: createModule(featureId, options)
                    },
                    {
                        _attr: {
                            xmlns: 'http://schemas.microsoft.com/sharepoint/'
                        }
                    }
                ]
            }, serializationOptions_1.default)
        };
    }
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = createComponentXml;
/**
 * Creates a Module xml element with all the files.
 */
// tslint:disable-next-line:no-any
function createModule(featureId, component) {
    // tslint:disable-next-line:no-any
    var result = [{
            _attr: {
                Name: component.name,
                Url: '_catalogs/wp',
                List: '113'
            }
        }];
    return result;
}

//# sourceMappingURL=createComponentXml.js.map
