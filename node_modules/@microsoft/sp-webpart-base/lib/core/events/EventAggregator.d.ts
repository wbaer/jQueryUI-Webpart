import { IEvent, IEventCallback, IEventAggregator } from './IEvent';
/**
 * Event Aggregator
 *
 * @internal
 */
export default class EventAggregator implements IEventAggregator {
    private _events;
    private _sources;
    /**
     * Subscribe for an event from all sources
     *
     * @param eventName - Name of the event.
     * @param subscriberId - Id of the subscriber to the event.
     * @param callback - Callback for when the event is raised.
     */
    subscribeByEventName<T>(eventName: string, subscriberId: string, callback: IEventCallback<T>): void;
    /**
     * Subscribe for all events from a specific source.
     *
     * @param sourceId - Source of the event.
     * @param subscriberId - Id of the subscriber to the event.
     * @param callback - Callback for when the event is raised.
     */
    subscribeBySourceId<T>(sourceId: string, subscriberId: string, callback: IEventCallback<T>): void;
    /**
     * Raise an event
     *
     * @param eventName - Event name.
     * @param eventObject - Event object.
     */
    raiseEvent<T>(eventName: string, eventObject: IEvent<T>): void;
    private _validateEvent(eventName);
    private _processEvent<T>(eventName, eventObject, targets, map);
    private _setSubscription(id, subscriberId, callback, eventBucket);
}
