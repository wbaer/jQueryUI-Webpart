"use strict";
var CanvasControlType_1 = require("../canvasControl/CanvasControlType");
var CanvasLayout_1 = require("./CanvasLayout");
var CanvasSectionPart_1 = require("./CanvasSectionPart");
var CanvasZonePart = (function () {
    function CanvasZonePart(zoneIdx, map, webPartManager) {
        this._index = zoneIdx;
        this._sectionsMap = new Map();
        this._controlComponentMap = map;
        this._webPartManager = webPartManager;
    }
    Object.defineProperty(CanvasZonePart.prototype, "index", {
        get: function () {
            return this._index;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CanvasZonePart.prototype, "sections", {
        get: function () {
            var sections = [];
            this._sectionsMap.forEach(function (section) {
                sections.push(section);
            });
            return sections.sort(function (section1, section2) {
                return section1.index - section2.index;
            });
        },
        enumerable: true,
        configurable: true
    });
    CanvasZonePart.prototype.addControl = function (canvasControl) {
        if (!canvasControl || !canvasControl.position) {
            return undefined;
        }
        var curSectionIndex = canvasControl.position.sectionIndex;
        if (curSectionIndex === undefined) {
            return undefined;
        }
        var controlId;
        var sectionsToAdd = 1;
        var colDef = CanvasZonePart.columnDefinitionMap.get(canvasControl.controlType);
        if (colDef) {
            sectionsToAdd = colDef.sections;
        }
        for (var i = 0; i < sectionsToAdd; ++i, ++curSectionIndex) {
            var section = this._sectionsMap.get(curSectionIndex);
            if (!section) {
                var factor = colDef && colDef.factor[i];
                if (isNaN(factor)) {
                    factor = canvasControl.position.sectionFactor;
                }
                var newSection = new CanvasSectionPart_1.default(curSectionIndex, factor);
                if (canvasControl.position.controlIndex === undefined) {
                    canvasControl.position.controlIndex = CanvasLayout_1.default.firstLayoutIndex;
                }
                controlId = newSection.addControl(canvasControl);
                if (controlId) {
                    this._sectionsMap.set(curSectionIndex, newSection);
                }
            }
            else {
                if (canvasControl.position.controlIndex !== undefined) {
                    controlId = section.addControl(canvasControl);
                }
                else {
                    canvasControl.position.sectionIndex = CanvasLayout_1.default._generateNewLayoutIndex(this.sections, curSectionIndex);
                    if (canvasControl.position.sectionIndex === undefined) {
                        return undefined;
                    }
                    var newSecondarySection = new CanvasSectionPart_1.default(canvasControl.position.sectionIndex);
                    canvasControl.position.controlIndex = CanvasLayout_1.default.firstLayoutIndex;
                    controlId = newSecondarySection.addControl(canvasControl);
                    if (controlId) {
                        this._sectionsMap.set(canvasControl.position.sectionIndex, newSecondarySection);
                    }
                }
            }
        }
        return controlId;
    };
    CanvasZonePart.prototype.removeControl = function (controlPosition) {
        if (!controlPosition) {
            return undefined;
        }
        var section = this._sectionsMap.get(controlPosition.sectionIndex);
        if (!section) {
            return undefined;
        }
        var controlId = section.removeControl(controlPosition);
        return controlId;
    };
    CanvasZonePart.prototype.fetchControl = function (controlPosition) {
        if (!controlPosition) {
            return undefined;
        }
        var section = this._sectionsMap.get(controlPosition.sectionIndex);
        if (!section) {
            return undefined;
        }
        return section.fetchControl(controlPosition);
    };
    CanvasZonePart.prototype.fetchAllControls = function (includeEmptySections) {
        var _this = this;
        if (includeEmptySections === void 0) { includeEmptySections = true; }
        var canvasControls = [];
        var sections = this.sections;
        sections.forEach(function (section) {
            var controls = section.fetchAllControls();
            if (includeEmptySections && controls.length === 0) {
                var emptySection = section.emptySectionControl;
                emptySection.position.zoneIndex = _this._index;
                controls.push(emptySection);
            }
            canvasControls = canvasControls.concat(controls);
        });
        return canvasControls;
    };
    CanvasZonePart.prototype.changeZone = function (zoneType) {
        var colDef = CanvasZonePart.columnDefinitionMap.get(zoneType);
        var sections = this.sections;
        var sectionsLength = sections.length;
        if (colDef.sections > sectionsLength) {
            this._increaseSections(sections, colDef);
        }
        else if (colDef.sections < sectionsLength) {
            this._reduceSections(sections, colDef);
        }
        else if (colDef.factor[0] !== sections[0].factor) {
            sections.forEach(function (sectionPart, index) {
                sectionPart.changeFactor(colDef.factor[index]);
            });
        }
    };
    CanvasZonePart.prototype.isEmpty = function () {
        return this.fetchAllControls(false).length === 0;
    };
    CanvasZonePart.prototype.dispose = function () {
        this._sectionsMap.clear();
    };
    CanvasZonePart.prototype._increaseSections = function (currentSections, columnDefinition) {
        var currentSectionsLength = currentSections.length;
        currentSections.forEach(function (sectionPart, index) {
            sectionPart.changeFactor(columnDefinition.factor[index]);
        });
        var newSectionsLength = columnDefinition.sections;
        var currentSectionIndex = currentSections[currentSectionsLength - 1].index + 1;
        for (var i = currentSectionsLength; i < newSectionsLength; ++i) {
            var newSection = new CanvasSectionPart_1.default(currentSectionIndex, columnDefinition.factor[i]);
            this._sectionsMap.set(currentSectionIndex++, newSection);
        }
    };
    CanvasZonePart.prototype._reduceSections = function (currentSections, columnDefinition) {
        var _this = this;
        var currentSectionsLength = currentSections.length;
        var lastSection = currentSections[columnDefinition.sections - 1];
        var lastSectionLastControl = lastSection.controls[lastSection.controls.length - 1];
        var newSectionsLength = columnDefinition.sections;
        var controlIndex = 1;
        if (lastSectionLastControl) {
            controlIndex = lastSectionLastControl.position.controlIndex;
        }
        for (var i = 0; i < newSectionsLength; ++i) {
            currentSections[i].changeFactor(columnDefinition.factor[i]);
        }
        for (var i = currentSectionsLength - 1; i >= newSectionsLength; --i) {
            currentSections[i].controls.forEach(function (control) {
                var newControl = _this._controlComponentMap.get(control.id).component.serialize();
                newControl.position.sectionFactor = lastSection.factor;
                newControl.position.sectionIndex = lastSection.index;
                newControl.position.controlIndex = ++controlIndex;
                newControl.addedFromPersistedData = true;
                _this._webPartManager.dispose(control.id);
                lastSection.addControl(newControl);
            });
            currentSections[i].dispose();
            this._sectionsMap.delete(currentSections[i].index);
        }
    };
    return CanvasZonePart;
}());
CanvasZonePart.columnDefinitionMap = new Map([
    [CanvasControlType_1.default.OneColumn, { sections: 1, factor: [12] }],
    [CanvasControlType_1.default.FullWidth, { sections: 1, factor: [0] }],
    [CanvasControlType_1.default.TwoColumns, { sections: 2, factor: [6, 6] }],
    [CanvasControlType_1.default.ThreeColumns, { sections: 3, factor: [4, 4, 4] }],
    [CanvasControlType_1.default.OneThirdColumnRight, { sections: 2, factor: [8, 4] }],
    [CanvasControlType_1.default.OneThirdColumnLeft, { sections: 2, factor: [4, 8] }]
]);
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = CanvasZonePart;
