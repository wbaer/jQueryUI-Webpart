"use strict";
var sp_telemetry_1 = require("@ms/sp-telemetry");
var telemetryConstants_1 = require("./../utilities/telemetryConstants");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var DebugManifestPrompt_1 = require("./../DebugManifestPrompt");
var componentConstants = require("./../utilities/componentConstants");
var normalizeComponentId_1 = require("./../utilities/normalizeComponentId");
var sp_core_library_2 = require("@microsoft/sp-core-library");
var SPLoader_resx_1 = require("./../SPLoader.resx");
var ManifestStore = (function () {
    function ManifestStore() {
        this._manifestVersions = new Map();
        this._manifests = new Map();
    }
    Object.defineProperty(ManifestStore, "instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new ManifestStore();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    ManifestStore.prototype.registerPreloadedManifests = function (preloadedData) {
        if (preloadedData) {
            if (preloadedData.clientSideApplicationManifest) {
                this._addManifest(preloadedData.clientSideApplicationManifest, true);
            }
            if (preloadedData.manifests && preloadedData.manifests.length) {
                this.registerManifests(preloadedData.manifests, true);
            }
        }
        var globalManifests = window.g_webPartManifests;
        if (globalManifests && globalManifests.length) {
            this.registerManifests(globalManifests, true);
        }
    };
    ManifestStore.prototype.registerDebugManifests = function (manifests) {
        if (manifests) {
            for (var id in manifests) {
                this._addDebugManifest(manifests[id]);
            }
        }
    };
    ManifestStore.prototype.tryGetManifest = function (id, version) {
        try {
            return this.getManifest(id, version);
        }
        catch (e) {
            return undefined;
        }
    };
    ManifestStore.prototype.getManifest = function (id, version) {
        sp_core_library_1.Validate.isNonemptyString(id, 'id');
        if ((id === componentConstants.reactComponentId ||
            id === componentConstants.reactDomComponentId) && version === '0.14.8') {
            version = '15.4.2';
        }
        var index = this._getExistingIndex(id, version);
        if (!index) {
            sp_telemetry_1._TraceLogger.logVerbose(telemetryConstants_1.manifestStoreLogSource, sp_core_library_2.Text.format(SPLoader_resx_1.default.manifestNotFoundError, id, version));
            throw new Error(sp_core_library_2.Text.format(SPLoader_resx_1.default.manifestNotFoundError, id, version));
        }
        var manifestEntry = this._manifests.get(index);
        if (manifestEntry) {
            var manifest = this._getManifestFromStoreEntry(manifestEntry);
            if (manifest) {
                return manifest;
            }
        }
        throw new Error(sp_core_library_2.Text.format(SPLoader_resx_1.default.manifestNotFoundError, id, version));
    };
    ManifestStore.prototype.getRegisteredManifests = function () {
        var _this = this;
        var result = [];
        this._manifests.forEach(function (manifestEntry) {
            var manifest = _this._getManifestFromStoreEntry(manifestEntry);
            if (manifest) {
                result.push(manifest);
            }
        });
        return result;
    };
    ManifestStore.prototype.getManifestMap = function () {
        var result = {};
        this._manifests.forEach(function (value, key) { return result[value.id] = value; });
        return result;
    };
    ManifestStore.prototype.registerManifests = function (manifests, overwriteExisting) {
        var _this = this;
        manifests.forEach(function (manifest) { return _this._addManifest(manifest, overwriteExisting); });
    };
    ManifestStore.prototype._getManifestFromStoreEntry = function (manifestEntry) {
        var allowDebug = DebugManifestPrompt_1.default.instance.peek();
        if (manifestEntry) {
            if (allowDebug && manifestEntry.debugManifest) {
                return manifestEntry.debugManifest;
            }
            else {
                return manifestEntry.manifest;
            }
        }
        else {
            return undefined;
        }
    };
    ManifestStore.prototype._addManifest = function (manifest, overwriteExisting) {
        this._internalAddManifest(manifest, false, overwriteExisting);
    };
    ManifestStore.prototype._addDebugManifest = function (manifest) {
        this._internalAddManifest(manifest, true);
    };
    ManifestStore.prototype._internalAddManifest = function (manifest, isDebug, overwriteExisting) {
        var index = this._getExistingIndex(manifest.id, manifest.version);
        var existingEntry = index ? this._manifests.get(index) : undefined;
        if (existingEntry) {
            if (isDebug) {
                existingEntry.debugManifest = manifest;
            }
            else {
                if (overwriteExisting || !existingEntry.manifest) {
                    existingEntry.manifest = manifest;
                }
            }
        }
        else {
            this._addManifestToVersionsMap(manifest);
            var newIndex = this._createIndexFromManifest(manifest);
            this._manifests.set(newIndex, {
                id: manifest.id,
                version: manifest.version,
                manifest: isDebug ? undefined : manifest,
                debugManifest: isDebug ? manifest : undefined
            });
        }
    };
    ManifestStore.prototype._addManifestToVersionsMap = function (manifest) {
        var version = sp_core_library_1.Version.parse(manifest.version);
        if (!this._manifestVersions.has(manifest.id)) {
            this._manifestVersions.set(manifest.id, [version]);
        }
        else {
            var versions = this._manifestVersions.get(manifest.id);
            for (var _i = 0, versions_1 = versions; _i < versions_1.length; _i++) {
                var existingVersion = versions_1[_i];
                if (existingVersion.equals(version)) {
                    return; 
                }
            }
            this._manifestVersions.set(manifest.id, versions.concat(version));
        }
    };
    ManifestStore.prototype._getExistingIndex = function (id, versionString) {
        var _this = this;
        if (!versionString) {
            return this._getUniqueManifestStoreIndex(id);
        }
        if (this._manifestVersions.has(id)) {
            var versions = this._manifestVersions.get(id);
            var version_1 = sp_core_library_1.Version.parse(versionString);
            var validVersions = versions.filter(function (currentVersion) { return _this._satisfies(currentVersion, version_1); });
            if (!validVersions || validVersions.length < 1) {
                return undefined;
            }
            else if (validVersions.length === 1) {
                return this._createIndex(id, validVersions[0]);
            }
            else {
                var error = new Error(sp_core_library_2.Text.format(SPLoader_resx_1.default.tooManyCompatibleVersionsError, validVersions.length, validVersions.join(', '), id, versionString));
                sp_telemetry_1._TraceLogger.logError(telemetryConstants_1.manifestStoreLogSource, error);
                var returnVersion = validVersions.sort(function (version1, version2) {
                    return -1 * sp_core_library_1.Version.compare(version1, version2);
                })[0];
                return this._createIndex(id, returnVersion);
            }
        }
        return undefined;
    };
    ManifestStore.prototype._satisfies = function (existingVersion, versionNeeded) {
        sp_core_library_1.Validate.isNotNullOrUndefined(versionNeeded, 'versionNeeded');
        if (versionNeeded.major === 0) {
            return !existingVersion.lessThan(versionNeeded) && existingVersion.major <= 1;
        }
        else {
            return existingVersion.satisfies(versionNeeded);
        }
    };
    ManifestStore.prototype._getUniqueManifestStoreIndex = function (id) {
        var versions = this._manifestVersions.get(id);
        if (!versions || versions.length < 1) {
            return undefined;
        }
        else if (versions.length === 1) {
            return this._createIndex(id, versions[0]);
        }
        else {
            var error = new Error(sp_core_library_2.Text.format(SPLoader_resx_1.default.tooManyManifestsError, versions.length, versions.join(', '), id));
            sp_telemetry_1._TraceLogger.logError(telemetryConstants_1.manifestStoreLogSource, error);
            return undefined;
        }
    };
    ManifestStore.prototype._createIndexFromManifest = function (manifest) {
        return this._createIndex(manifest.id, sp_core_library_1.Version.parse(manifest.version));
    };
    ManifestStore.prototype._createIndex = function (id, version) {
        return normalizeComponentId_1.default(id, version.toString());
    };
    return ManifestStore;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ManifestStore;
