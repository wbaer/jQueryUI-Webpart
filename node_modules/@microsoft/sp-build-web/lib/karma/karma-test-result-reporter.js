/**
 * This is a karma plugin that can create a report about all test results.
 *
 * @example
 * Configuration in karma.conf.js as below:
 *      module.exports = function(config) {
 *          // ...
 *
 *          plugins: configResources.plugins.concat([
 *              require('./karma-test-result-reporter')
 *          ]),
 *
 *          reporters: ['test-result'],
 *
 *          testResultReporter: {
 *              outputFile: 'results.json' // defaults to none
 *          },
 *
 *          // ...
 *      };
 */
"use strict";
var path = require("path");
var fs = require("fs");
/**
 * Create the karma report about test results
 *
 * @param baseReporterDecorator - A function that takes an object and adds to it methods and properties of karma's
 *                                basic reporter
 * @param config - The properties from Karma's config.
 * @param helper - Karma utility functions
 */
// tslint:disable-next-line:no-any
var testResultReporter = function (baseReporterDecorator, config, helper) {
    baseReporterDecorator(this);
    var testResults = [];
    var reporterConfig = config.testResultReporter || {};
    var outputFile = reporterConfig.outputFile
        ? helper.normalizeWinPath(path.resolve(config.basePath, reporterConfig.outputFile))
        : undefined;
    this.onSpecComplete = function (browser, result) {
        testResults.push(result);
    };
    this.onRunComplete = function (browser, result) {
        if (outputFile) {
            helper.mkdirIfNotExists(path.dirname(outputFile), function () {
                fs.writeFileSync(outputFile, JSON.stringify(testResults));
            });
        }
    };
};
testResultReporter.$inject = ['baseReporterDecorator', 'config', 'helper']; // tslint:disable-line:no-any
module.exports = {
    'reporter:test-result': ['type', testResultReporter]
};

//# sourceMappingURL=karma-test-result-reporter.js.map
