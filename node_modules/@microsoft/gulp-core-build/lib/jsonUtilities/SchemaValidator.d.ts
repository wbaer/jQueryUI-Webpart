/**
 * Wrapper functions around z-schema which help improve ease of use
 */
export declare class SchemaValidator {
    private static _schemaValidator;
    /**
     * A function which validates a dataFile against a schemFile, both specified
     * as paths. It will throw if there is an issue with the file,
     * otherwise it will return the validated datafile.
     */
    static readAndValidateJson<TResult>(dataFilePath: string, schemaFilePath: string): TResult;
    /**
     * A function which validates a data object against a schema object.
     * It will throw if there is an issue with the data object.
     * For an improved error message, pass the filename in the optional third parameter
     */
    static validate(data: Object, schema: Object, dataFilePath?: string): void;
    static readCommentedJsonFile<TResult>(filename: string): TResult;
    private static getFormattedErrorMessage(errors, dataFilePath?);
    private static _extractInnerErrorMessages(errors);
    private static _formatZSchemaError(error);
}
