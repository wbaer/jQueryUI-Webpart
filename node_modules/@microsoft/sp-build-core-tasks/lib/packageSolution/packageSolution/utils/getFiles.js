/**
 * @file getFiles.ts
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * Reads relative file paths given a working directory and a glob.
 * Relative paths are generated by removing a certain
 */
"use strict";
var colors = require("colors");
var glob = require("glob");
var fs = require("fs");
var path = require("path");
var gulp_core_build_1 = require("@microsoft/gulp-core-build");
/** Loads a directory of files into IXml objects */
function getFiles(cwd, globs, foundMessage) {
    if (foundMessage === void 0) { foundMessage = 'Found file: '; }
    return new Promise(function (complete, reject) {
        glob(globs, {
            cwd: cwd
        }, function (error, files) {
            if (error) {
                reject(error);
            }
            complete(files.map(function (filename) {
                gulp_core_build_1.log(foundMessage + filename);
                return {
                    filename: filename,
                    xml: fs.readFileSync(path.join(cwd, filename), {
                        encoding: 'utf-8'
                    })
                };
            }));
        });
    });
}
exports.getFiles = getFiles;
/** Reads the list of relative path from a specified folder */
function getRelativeFilePaths(cwd, globs, foundMessage) {
    if (foundMessage === void 0) { foundMessage = 'Found file: '; }
    return new Promise(function (complete, reject) {
        glob(globs, {
            cwd: cwd
        }, function (error, files) {
            if (error) {
                reject(error);
            }
            complete(files.map(function (filename) {
                filename = filename;
                gulp_core_build_1.log(colors.cyan(foundMessage + filename));
                return filename;
            }));
        });
    });
}
exports.getRelativeFilePaths = getRelativeFilePaths;

//# sourceMappingURL=getFiles.js.map
