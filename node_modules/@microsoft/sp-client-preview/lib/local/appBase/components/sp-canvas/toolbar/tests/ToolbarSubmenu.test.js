"use strict";
var chai_1 = require("chai");
var enzyme_1 = require("enzyme");
var React = require("react");
var ToolbarSubmenu_1 = require("../toolbarSubMenu/ToolbarSubmenu");
var ToolbarButton_1 = require("../toolbarButton/ToolbarButton");
var MockToolbarButtonProps_1 = require("../mocks/MockToolbarButtonProps");
var office_ui_fabric_react_1 = require("office-ui-fabric-react");
describe('ToolbarSubmenu tests', function () {
    var toolbarSubmenuElement;
    var mockProps;
    var onClose;
    var onOpen;
    var mockButtons = [];
    beforeEach(function () {
        onClose = sinon.spy();
        onOpen = sinon.spy();
        mockButtons = [];
        mockButtons = MockToolbarButtonProps_1.default.getToolbarButtons(2);
        mockProps = {
            isOpen: true,
            onClose: onClose,
            onOpen: onOpen,
            buttons: mockButtons,
            title: 'Toolbar submenu',
            isWide: false
        };
        toolbarSubmenuElement = enzyme_1.mount(React.createElement(ToolbarSubmenu_1.default, mockProps));
    });
    afterEach(function () {
        toolbarSubmenuElement.unmount();
    });
    it('should render the toolbarButtons as expected', function (done) {
        chai_1.expect(toolbarSubmenuElement.find(ToolbarButton_1.default).length).to.be.eq(3);
        done();
    });
    it('should render the focus zone as expected', function (done) {
        chai_1.expect(toolbarSubmenuElement.find(office_ui_fabric_react_1.FocusZone).length).to.be.eq(1);
        done();
    });
    it('should open the submenu when display button is clicked', function (done) {
        chai_1.expect(toolbarSubmenuElement.find("[data-automation-id='displayButton']").length).to.be.eq(1);
        toolbarSubmenuElement.setState({ isOpen: false });
        toolbarSubmenuElement.find("[data-automation-id='displayButton']").simulate('click');
        chai_1.expect(onOpen.calledOnce).to.be.true;
        toolbarSubmenuElement.find("[data-automation-id='displayButton']").simulate('click');
        chai_1.expect(onClose.calledOnce).to.be.true;
        done();
    });
    it('should close the sub menu when button is clicked', function (done) {
        chai_1.expect(toolbarSubmenuElement.find("[data-automation-id='0-id']").length).to.be.eq(1);
        toolbarSubmenuElement.find("[data-automation-id='0-id']").simulate('click');
        chai_1.expect(onClose.calledOnce).to.be.true;
        done();
    });
    it('should close the submenu on left and right arrow key down', function (done) {
        chai_1.expect(toolbarSubmenuElement.find("[data-automation-id='subMenuContainer']").length).to.be.eq(1);
        toolbarSubmenuElement.setState({ isOpen: true });
        toolbarSubmenuElement.find("[data-automation-id='subMenuContainer']").simulate('keyDown', { key: 'ArrowLeft' });
        chai_1.expect(onClose.calledOnce).to.be.true;
        toolbarSubmenuElement.find("[data-automation-id='subMenuContainer']").simulate('keyDown', { key: 'ArrowRight' });
        chai_1.expect(onClose.calledOnce).to.be.true;
        done();
    });
    it('should open the submenu when down arrow is pressed on display button', function (done) {
        chai_1.expect(toolbarSubmenuElement.find("[data-automation-id='displayButton']").length).to.be.eq(1);
        toolbarSubmenuElement.find("[data-automation-id='displayButton']").simulate('keyDown', { key: 'ArrowDown' });
        chai_1.expect(onOpen.calledOnce).to.be.true;
        done();
    });
});
