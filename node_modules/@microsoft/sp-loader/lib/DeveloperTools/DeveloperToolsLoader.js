"use strict";
var Combokeys = require("combokeys");
var ComponentStore_1 = require("./../stores/ComponentStore");
var SPComponentLoaderProxy_1 = require("./../SPComponentLoaderProxy");
var componentConstants = require("./../utilities/componentConstants");
require('@microsoft/load-themed-styles');
var _listenerHasBeenRegistered = false;
var _developerTools;
var _developerToolsTabsBacklog = [];
function initialize() {
    if (!_listenerHasBeenRegistered) {
        var fullWindowCombokeys = new Combokeys(document.documentElement);
        fullWindowCombokeys.bind('ctrl+shift+`', toggleDeveloperTools);
        fullWindowCombokeys.bind('ctrl+f12', toggleDeveloperTools);
        _listenerHasBeenRegistered = true;
    }
}
exports.initialize = initialize;
function registerDeveloperToolsTab(developerToolsTab) {
    if (_developerTools) {
        _developerTools.registerDeveloperToolsTab(developerToolsTab);
    }
    else {
        _developerToolsTabsBacklog.push(developerToolsTab);
    }
}
exports.registerDeveloperToolsTab = registerDeveloperToolsTab;
function toggleDeveloperTools() {
    if (_developerTools) {
        _developerTools.toggleDeveloperTools();
    }
    else {
        if (NPM_BUILD) {
            require.include('react');
            require.include('react-dom');
            var reactPromise = SPComponentLoaderProxy_1.default.loadComponentById(componentConstants.reactComponentId);
            var reactDomPromise = SPComponentLoaderProxy_1.default.loadComponentById(componentConstants.reactDomComponentId);
            Promise.all([reactPromise, reactDomPromise])
                .then(function (results) {
                var react = results[0];
                var reactDom = results[1];
                _injectReactIntoCache(react, reactDom);
                require.ensure(['./DeveloperTools'], function (require) {
                    _initializeDeveloperTools(require('./DeveloperTools').default);
                }, 'developer-tools');
            });
        }
        else if (_hasReact()) {
            var reactPromise = ComponentStore_1.default.instance.getComponentById(componentConstants.reactComponentId);
            var reactDomPromise = ComponentStore_1.default.instance.getComponentById(componentConstants.reactDomComponentId);
            Promise.all([reactPromise, reactDomPromise])
                .then(function (results) {
                var react = results[0];
                var reactDom = results[1];
                _injectReactIntoCache(react, reactDom);
                _loadDeveloperTools(_tryFillDevToolsFabric());
            });
        }
        else {
            require.ensure(['react', 'react-dom'], function () {
                require.ensure(['./DeveloperToolsFabric'], function () {
                    require.ensure(['./DeveloperTools'], function (require) {
                        _initializeDeveloperTools(require('./DeveloperTools').default);
                    }, 'developer-tools');
                }, 'developer-tools-fabric');
            }, 'react');
        }
    }
}
exports.toggleDeveloperTools = toggleDeveloperTools;
function _hasReact() {
    var react = ComponentStore_1.default.instance.tryGetComponentById(componentConstants.reactComponentId);
    var reactDom = ComponentStore_1.default.instance.tryGetComponentById(componentConstants.reactDomComponentId);
    return !!(react && reactDom);
}
function _tryFillDevToolsFabric() {
    var fabricPromise = ComponentStore_1.default.instance.tryGetComponentById(componentConstants.officeUiFabricReactComponentId);
    if (fabricPromise) {
        var fabricId_1 = require.resolveWeak('./DeveloperToolsFabric');
        return fabricPromise.then(function (fabric) {
            if (!require.cache[fabricId_1]) {
                require.cache[fabricId_1] = {
                    exports: fabric
                };
            }
            else {
                require.cache[fabricId_1].exports = fabric;
            }
            return true;
        }, function (error) {
            return false;
        });
    }
    else {
        return Promise.resolve(false);
    }
}
function _injectReactIntoCache(react, reactDom) {
    var reactId = require.resolveWeak('react');
    var reactLibId = require.resolveWeak('react/lib/React');
    var reactDomId = require.resolveWeak('react-dom');
    if (!require.cache[reactId]) {
        require.cache[reactId] = {
            exports: react
        };
    }
    else {
        require.cache[reactId].exports = react;
    }
    if (!require.cache[reactLibId]) {
        require.cache[reactLibId] = {
            exports: react
        };
    }
    else {
        require.cache[reactLibId].exports = react;
    }
    if (!require.cache[reactDomId]) {
        require.cache[reactDomId] = {
            exports: reactDom
        };
    }
    else {
        require.cache[reactDomId].exports = reactDom;
    }
}
function _loadDeveloperTools(fabricLoadedPromise) {
    var loadDeveloperTools = function () {
        __webpack_chunk_load__( 4, function (requireFn) {
            _initializeDeveloperTools(requireFn(require.resolveWeak('./DeveloperTools')).default);
        });
    };
    fabricLoadedPromise.then(function (fabricLoaded) {
        if (!fabricLoaded) {
            __webpack_chunk_load__( 3, loadDeveloperTools);
        }
        else {
            loadDeveloperTools();
        }
    });
}
function _initializeDeveloperTools(developerToolsClass) {
    _developerTools = developerToolsClass.instance;
    _developerTools.initialize();
    _developerToolsTabsBacklog.forEach(function (developerToolsTab) {
        _developerTools.registerDeveloperToolsTab(developerToolsTab);
    });
    _developerTools.showHideDeveloperTools(true);
}
