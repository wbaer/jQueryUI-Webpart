import { IClientSideWebPartManifestInstance } from '@microsoft/sp-module-interfaces';
import { _IClientSideComponentContextParameters } from '@microsoft/sp-component-base';
import IClientSideWebPartStatusRenderer from './IClientSideWebPartStatusRenderer';
import { IEventAggregator } from './events/IEvent';
import IWebPartHost from './IWebPartHost';
import { PropertyPaneState } from '../propertyPane/propertyPane/PropertyPaneDefinitions';
/**
 * Constructor parameters for WebPartContext
 *
 * @internal
 */
interface IWebPartContextParameters extends _IClientSideComponentContextParameters {
    /**
     * Manifest for the client side web part.
     * @internalremarks
     * This augments the type from IClientSideComponentContext.manifest.
     */
    readonly manifest: IClientSideWebPartManifestInstance<any>;
    /**
     * Web part instance id. This is a globally unique value.
     */
    readonly instanceId: string;
    /**
     * Web part tag to be used for logging and telemetry.
     */
    readonly webPartTag: string;
    /**
     * Reference to the DOM element that hosts this client side component.
     */
    readonly domElement: HTMLElement;
    /**
     * Web part status renderer.
     */
    readonly statusRenderer: IClientSideWebPartStatusRenderer;
    /**
     * Web part event aggregator.
     *
     * @internal
     */
    readonly eventAggregator: IEventAggregator;
    /**
     * Is the property pane rendered by a web part and not by Canvas or any other source.
     */
    readonly isPropertyPaneRenderedByWebPart: () => boolean;
    /**
     * Web part host.
     */
    readonly host: IWebPartHost;
    /**
     * Function to set the property pane state.
     *
     * @internalremarks
     * This is not currently exposed via IWebPartContext.
     */
    readonly setPropertyPaneState: (id: string, propertyPaneState?: PropertyPaneState, renderedByWebPart?: boolean) => void;
}
export default IWebPartContextParameters;
