"use strict";
var chai_1 = require("chai");
var sp_telemetry_1 = require("@ms/sp-telemetry");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var test_1 = require("@microsoft/sp-core-library/lib/test");
var SPHttpClient_1 = require("../SPHttpClient");
var MockFetchProvider_1 = require("../../test/MockFetchProvider");
var FetchProvider_1 = require("../../httpClient/FetchProvider");
var ODataVersion_1 = require("../ODataVersion");
describe('SPHttpClient tests', function () {
    var rootScope = sp_core_library_1.ServiceScope.startNewRoot();
    var fetchProvider = new MockFetchProvider_1.default(rootScope);
    rootScope.provide(FetchProvider_1.fetchProviderServiceKey, fetchProvider);
    var randomNumberGenerator = new test_1.MockRandomNumberGenerator(rootScope);
    rootScope.provide(sp_core_library_1.RandomNumberGenerator.serviceKey, randomNumberGenerator);
    rootScope.finish();
    var spHttpClient = new SPHttpClient_1.default(rootScope);
    beforeEach(function () {
        sp_telemetry_1._PerformanceLogger.initializeApplication('HttpClientTest');
    });
    describe('Test automatic headers', function () {
        it('should add headers for a basic GET request', function (done) {
            fetchProvider.expect({
                expectedUrl: 'http://example.com/_api/test01',
                expectedRequestHeaders: [
                    new MockFetchProvider_1.MockedHeader('Accept', 'application/json;odata.metadata=minimal')
                ],
                requestAssertions: function (request) {
                    chai_1.assert.strictEqual(request.credentials, 'same-origin');
                    chai_1.assert.isFalse(request.headers.has('X-RequestDigest'));
                },
                responseObject: { 'data': 123 }
            });
            spHttpClient.get('http://example.com/_api/test01', SPHttpClient_1.default.configurations.v1)
                .then(function (response) {
                return response.json();
            }).then(function (responseObject) {
                chai_1.assert.equal(responseObject.data, 123);
                done();
            }).catch(function (error) {
                done(error);
            });
        });
        it('should mix custom headers with automatic headers', function (done) {
            fetchProvider.expect({
                expectedUrl: 'http://example.com/_api/test01',
                expectedRequestHeaders: [
                    new MockFetchProvider_1.MockedHeader('Accept', 'something-custom'),
                    new MockFetchProvider_1.MockedHeader('OData-Version', '4.0')
                ],
                responseObject: {}
            });
            spHttpClient.get('http://example.com/_api/test01', SPHttpClient_1.default.configurations.v1, {
                headers: { 'Accept': 'something-custom' }
            }).then(function () {
                done();
            }).catch(function (error) {
                done(error);
            });
        });
        it('should allow overriding configuration options', function (done) {
            fetchProvider.expect({
                expectedUrl: 'http://example.com/_api/test01',
                expectedRequestHeaders: [
                    new MockFetchProvider_1.MockedHeader('Accept', test_1.TEST_UNDEFINED),
                    new MockFetchProvider_1.MockedHeader('OData-Version', '3.0')
                ],
                responseObject: {}
            });
            spHttpClient.get('http://example.com/_api/test01', SPHttpClient_1.default.configurations.v1.overrideWith({
                defaultODataVersion: ODataVersion_1.default.v3,
                jsonResponse: false 
            })).then(function () {
                done();
            }).catch(function (error) {
                done(error);
            });
        });
    });
    describe('Test instrumentation', function () {
        it('should mark API time for a basic GET request', function (done) {
            var baseTime = Date.now() - 1;
            fetchProvider.expect({
                expectedUrl: 'http://example.com/_api/test01',
                responseObject: { 'data': 123 }
            });
            randomNumberGenerator.reset(1);
            spHttpClient.get('http://example.com/_api/test01', SPHttpClient_1.default.configurations.v1)
                .then(function (response) {
                randomNumberGenerator.reset(1);
                var tag = 'spHttpClient.' + (Math.floor(randomNumberGenerator.generate() * 100000)).toString();
                chai_1.assert.isAbove(sp_telemetry_1._PerformanceLogger.getApiStartTime(tag), baseTime, 'start time is set');
                chai_1.assert.isTrue(sp_telemetry_1._PerformanceLogger.getApiEndTime(tag) >=
                    sp_telemetry_1._PerformanceLogger.getApiStartTime(tag), 'End time should be after start time');
                done();
            }).catch(function (error) {
                done(error);
            });
        });
        it('should record scope source in API data', function (done) {
            var baseTime = Date.now() - 1;
            var anotherScope = rootScope.startNewChild();
            anotherScope.provide(sp_telemetry_1._logSourceServiceKey, sp_telemetry_1._LogSource.create('anotherScope'));
            anotherScope.finish();
            var otherClient = new SPHttpClient_1.default(anotherScope);
            fetchProvider.expect({
                expectedUrl: 'http://example.com/_api/test01',
                responseObject: { 'data': 123 }
            });
            randomNumberGenerator.reset(1);
            otherClient.get('http://example.com/_api/test01', SPHttpClient_1.default.configurations.v1)
                .then(function (response) {
                randomNumberGenerator.reset(1);
                var tag = 'anotherScope.' + (Math.floor(randomNumberGenerator.generate() * 100000)).toString();
                chai_1.assert.isAbove(sp_telemetry_1._PerformanceLogger.getApiStartTime(tag), baseTime, 'start time is set');
                chai_1.assert.isTrue(sp_telemetry_1._PerformanceLogger.getApiEndTime(tag) >=
                    sp_telemetry_1._PerformanceLogger.getApiStartTime(tag), 'End time should be after start time');
                done();
            }).catch(function (error) {
                done(error);
            });
        });
    });
    describe('Test fetching behavior for basic cache hits and misses', function () {
        it('should fetch a digest for a POST request', function (done) {
            fetchProvider.expect({
                expectedUrl: 'http://example.com/_api/contextinfo',
                responseObject: {
                    'FormDigestValue': 'DIGEST_1',
                    'FormDigestTimeoutSeconds': 30
                }
            });
            fetchProvider.expect({
                expectedUrl: 'http://example.com/_api/test02',
                expectedRequestHeaders: [
                    new MockFetchProvider_1.MockedHeader('Accept', 'application/json;odata.metadata=minimal'),
                    new MockFetchProvider_1.MockedHeader('Content-type', 'application/json;charset=utf-8'),
                    new MockFetchProvider_1.MockedHeader('X-RequestDigest', 'DIGEST_1')
                ],
                responseObject: { 'data': 321 }
            });
            spHttpClient.post('http://example.com/_api/test02', SPHttpClient_1.default.configurations.v1, {})
                .then(function (response) {
                return response.json();
            }).then(function (responseObject) {
                chai_1.assert.equal(responseObject.data, 321);
                done();
            }).catch(function (error) {
                done(error);
            });
        });
    });
});
