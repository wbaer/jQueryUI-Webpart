{"version":3,"sources":["utilities/AsyncRecycle.ts"],"names":[],"mappings":"AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,6CAA+C;AAC/C,uBAAyB;AACzB,2BAA6B;AAC7B,8BAAgC;AAGhC,yCAAoC;AAEpC;IAAA;IAyDA,CAAC;IAxDC;;;OAGG;IACW,6BAAgB,GAA9B,UAA+B,iBAAoC,EAAE,aAAqB;QACxF,4FAA4F;QAC5F,iEAAiE;QACjE,qEAAqE;QACrE,sEAAsE;QACtE,wEAAwE;QACxE,IAAM,aAAa,GAAW,CAAC,GAAG,IAAI,CAAC;QAEvC,IAAM,iBAAiB,GAAW,YAAY,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,CAAC;QACxF,IAAM,gBAAgB,GAAW,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;QAC9D,IAAM,gBAAgB,GAAW,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAK,gBAAgB,SAAI,IAAI,IAAI,EAAE,CAAC,OAAO,EAAI,CAAC,CAAC;QAE7G,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;YACvC,mBAAS,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,CAAC;QACrD,CAAC;QAED,mBAAS,CAAC,iBAAiB,CAAC,cAAM,OAAA,GAAG,CAAC,UAAU,CAAC,aAAa,EAAE,gBAAgB,CAAC,EAA/C,CAA+C,EACrD,aAAa,EACb,UAAC,CAAC,IAAK,OAAA,IAAI,KAAK,CAAC,YAAU,CAAC,GAAG,EAAE,CAAC,GAAG,yCAAsC;YAC3D,wCAAwC,CAAC,EADlD,CACkD,EACzD,kBAAkB,CAAC,CAAC;QAEhD,6CAA6C;QAC7C,IAAM,yBAAyB,GAAW,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC;QAE5E,IAAM,+BAA+B,GAAW,iBAAiB,CAAC,KAAK,CAAC,KAAK,CAAC;cAC1E,iBAAiB,CAAC,SAAS,CAAC,CAAC,EAAE,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC;cAC5D,iBAAiB,CAAC;QACtB,IAAM,OAAO,GAAW,EAAE,CAAC,QAAQ,EAAE,KAAK,OAAO;cAE7C,SAAS;cAET,IAAI,CAAC;QAET,IAAM,IAAI,GAAa,EAAE,CAAC,QAAQ,EAAE,KAAK,OAAO;cAE5C,CAAC,IAAI,EAAE,kCAAgC,yBAAyB,8BAAyB,+BAA+B,SAAM,CAAC,CAAC,sCAAsC;cAEtK,CAAC,KAAK,EAAE,OAAI,yBAAyB,OAAG,CAAC,CAAC;QAE9C,IAAM,OAAO,GAA+B;YAC1C,QAAQ,EAAE,IAAI;YACd,KAAK,EAAE,CAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAE;SACxC,CAAC;QAEF,IAAM,OAAO,GAA+B,aAAa,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QACxF,OAAO,CAAC,KAAK,EAAE,CAAC;IAClB,CAAC;IAEc,kCAAqB,GAApC,UAAqC,iBAAoC;QACvE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,eAAe,CAAC,CAAC;IACpE,CAAC;IACH,mBAAC;AAAD,CAzDA,AAyDC,IAAA","file":"utilities/AsyncRecycle.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as child_process from 'child_process';\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\nimport * as fsx from 'fs-extra';\r\n\r\nimport RushConfiguration from '../data/RushConfiguration';\r\nimport Utilities from './Utilities';\r\n\r\nexport default class AsyncRecycle {\r\n  /**\r\n   * Moves the specified directory into the recycler directory and asynchronously deletes the recycler directory.\r\n   *  Delete will continue even if the node process is killed.\r\n   */\r\n  public static recycleDirectory(rushConfiguration: RushConfiguration, directoryPath: string): void {\r\n    // We need to do a simple \"fs.renameSync\" here, however if the folder we're trying to rename\r\n    // has a lock, or if its destination container doesn't exist yet,\r\n    // then there seems to be some OS process (virus scanner?) that holds\r\n    // a lock on the folder for a split second, which causes renameSync to\r\n    // fail. To workaround that, retry for up to 7 seconds before giving up.\r\n    const maxWaitTimeMs: number = 7 * 1000;\r\n\r\n    const recyclerDirectory: string = AsyncRecycle._getRecyclerDirectory(rushConfiguration);\r\n    const oldDirectoryName: string = path.basename(directoryPath);\r\n    const newDirectoryPath: string = path.join(recyclerDirectory, `${oldDirectoryName}_${new Date().getTime()}`);\r\n\r\n    if (!fsx.existsSync(recyclerDirectory)) {\r\n      Utilities.createFolderWithRetry(recyclerDirectory);\r\n    }\r\n\r\n    Utilities.retryUntilTimeout(() => fsx.renameSync(directoryPath, newDirectoryPath),\r\n                                maxWaitTimeMs,\r\n                                (e) => new Error(`Error: ${e}${os.EOL}Often this is caused by a file lock ` +\r\n                                                'from a process like the virus scanner.'),\r\n                                'recycleDirectory');\r\n\r\n    // Asynchronously delete the folder contents.\r\n    const recyclerDirectoryContents: string = path.join(recyclerDirectory, '*');\r\n\r\n    const windowsTrimmedRecyclerDirectory: string = recyclerDirectory.match(/\\\\$/)\r\n      ? recyclerDirectory.substring(0, recyclerDirectory.length - 1)\r\n      : recyclerDirectory;\r\n    const command: string = os.platform() === 'win32'\r\n      // Windows\r\n      ? 'cmd.exe'\r\n      // Assume 'NIX or Darwin\r\n      : 'rm';\r\n\r\n    const args: string[] = os.platform() === 'win32'\r\n      // Windows\r\n      ? ['/c', `FOR /F %f IN ('dir /B \\\\\\\\?\\\\${recyclerDirectoryContents}') DO rd /S /Q \\\\\\\\?\\\\${windowsTrimmedRecyclerDirectory}\\\\%f`] // tslint:disable-line:max-line-length\r\n      // Assume 'NIX or Darwin\r\n      : ['-rf', `\"${recyclerDirectoryContents}\"`];\r\n\r\n    const options: child_process.SpawnOptions = {\r\n      detached: true,\r\n      stdio: [ 'ignore', 'ignore', 'ignore' ]\r\n    };\r\n\r\n    const process: child_process.ChildProcess = child_process.spawn(command, args, options);\r\n    process.unref();\r\n  }\r\n\r\n  private static _getRecyclerDirectory(rushConfiguration: RushConfiguration): string {\r\n    return path.join(rushConfiguration.commonFolder, 'rush-recycler');\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}