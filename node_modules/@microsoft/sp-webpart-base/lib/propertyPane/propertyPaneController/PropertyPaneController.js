'use strict';
var ReactDOM = require("react-dom");
var React = require("react");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_telemetry_1 = require("@ms/sp-telemetry");
var PropertyPaneDefinitions_1 = require("../propertyPane/PropertyPaneDefinitions");
var Strings_resx_1 = require("../loc/Strings.resx");
var PropertyPaneController_module_scss_1 = require("./PropertyPaneController.module.scss");
require('../loc/Strings.resx');
require('office-ui-fabric-react');
require('@microsoft/sp-client-base');
var PropertyPaneController = (function () {
    function PropertyPaneController(webPartGetter, callback) {
        this._logSource = sp_telemetry_1._LogSource.create('PropertyPaneController');
        sp_core_library_1.Validate.isNotNullOrUndefined(webPartGetter, 'webPartGetter');
        this._webPartGetter = webPartGetter;
        this._configurationEventCallback = callback;
        this._onPropertyPaneFieldChanged = this._onPropertyPaneFieldChanged.bind(this);
        this._onConfigurationEvent = this._onConfigurationEvent.bind(this);
        this._fireConfigurationEvent = this._fireConfigurationEvent.bind(this);
    }
    Object.defineProperty(PropertyPaneController.prototype, "currentlyConfiguredWebPartId", {
        get: function () { return this._currentlyConfiguredWebPartId; },
        enumerable: true,
        configurable: true
    });
    PropertyPaneController.prototype.setPropertyPaneState = function (id, propertyPaneState, renderedByWebPart) {
        var noOp = renderedByWebPart &&
            propertyPaneState === PropertyPaneDefinitions_1.PropertyPaneState.Refresh &&
            id !== this._currentlyConfiguredWebPartId;
        if (!noOp) {
            var toBeConfiguredWebPart = this._webPartGetter(id);
            this._resolvePropertyPaneElements();
            var paneWillOpen = !this._isOpen &&
                (propertyPaneState === PropertyPaneDefinitions_1.PropertyPaneState.Open || propertyPaneState === PropertyPaneDefinitions_1.PropertyPaneState.Toggle);
            if (id && this._currentlyConfiguredWebPartId && (id !== this._currentlyConfiguredWebPartId || paneWillOpen)) {
                this._fireConfigurationEvent(id, PropertyPaneDefinitions_1.WebPartConfigurationEvent.PropertyPaneWebPartsSwitched);
            }
            this._isRenderedByWebPart = !!renderedByWebPart;
            this._setPropertyPaneState(toBeConfiguredWebPart, id, propertyPaneState);
            this._currentlyConfiguredWebPartId = id;
        }
        else {
            sp_telemetry_1._TraceLogger.logVerbose(this._logSource, sp_core_library_1.Text.format(Strings_resx_1.default.NoOpOnRefreshPropertyPaneText, id));
        }
    };
    PropertyPaneController.prototype.isRenderedByWebPart = function () {
        return this._isRenderedByWebPart;
    };
    ;
    PropertyPaneController.prototype.onWebPartDelete = function (id) {
        sp_core_library_1.Validate.isNonemptyString(id, 'id');
        if (id === this._currentlyConfiguredWebPartId) {
            if (this._isOpen) {
                this._renderPropertyPane(undefined, true);
            }
            this._currentlyConfiguredWebPartId = undefined;
        }
    };
    PropertyPaneController.prototype._setPropertyPaneState = function (wp, id, propertyPaneState) {
        switch (propertyPaneState) {
            case PropertyPaneDefinitions_1.PropertyPaneState.Open:
                var paneOpenBeforeRender = this._isOpen;
                this._renderPropertyPane(wp, true, true);
                if (paneOpenBeforeRender) {
                    this._fireNoToggleConfigurationEvents(id);
                }
                break;
            case PropertyPaneDefinitions_1.PropertyPaneState.Close:
                if (this._isOpen) {
                    this._renderPropertyPane(undefined);
                    this._togglePropertyPanePositionAndFireConfigurationEvents();
                }
                break;
            case PropertyPaneDefinitions_1.PropertyPaneState.Toggle:
                if (!this._isOpen) {
                    this._renderPropertyPane(wp, true, true);
                }
                else {
                    this._renderPropertyPane(undefined);
                    this._togglePropertyPanePositionAndFireConfigurationEvents();
                }
                break;
            case PropertyPaneDefinitions_1.PropertyPaneState.Default:
                if (this._isOpen) {
                    this._fireNoToggleConfigurationEvents(id);
                    if (this._isCurrentlyConfiguredPropertyPaneReactive) {
                        this._renderPropertyPane(wp, true, true);
                    }
                    else {
                        this._renderPropertyPane(wp, true, true);
                    }
                }
                break;
            case PropertyPaneDefinitions_1.PropertyPaneState.Refresh:
                if (this._isOpen) {
                    this._renderPropertyPane(wp, true, false);
                }
                break;
        }
        if (this._isOpen !== false && wp) {
            var wpContext = wp._context; 
            var wpAlias = wpContext && wpContext._manifest && wpContext._manifest.alias;
            var isInternal = wpContext && wpContext._manifest && wpContext._manifest.isInternal || false;
            var logEntry = new sp_telemetry_1._LogEntry(this._logSource.id, 'PropertyPaneOpened', sp_telemetry_1._LogType.Event, {
                'alias': wpAlias,
                'isInternal': isInternal.toString()
            });
            sp_telemetry_1._EngagementLogger.logEventWithLogEntry(logEntry);
        }
    };
    PropertyPaneController.prototype._renderPropertyPane = function (currentWebpart, shouldRecreatePropertyPaneElement, resetPropertyPaneState) {
        var _this = this;
        if (currentWebpart) {
            this._currentPropertyPaneData = currentWebpart._internalGetPropertyPaneData();
            this._currentPropertyPaneData.onPropertyPaneFieldChanged = this._onPropertyPaneFieldChanged;
            this._currentPropertyPaneData.onConfigurationEvent = this._onConfigurationEvent;
            this._currentPropertyPaneData.render = function () { _this._render(); };
            this._currentPropertyPaneData.shouldResetState = resetPropertyPaneState;
            if (this._currentPropertyPaneData.configuration &&
                this._currentPropertyPaneData.configuration.showLoadingIndicator) {
                var delay = this._currentPropertyPaneData.configuration.loadingIndicatorDelayTime === undefined ?
                    500 :
                    this._currentPropertyPaneData.configuration.loadingIndicatorDelayTime;
                setTimeout(function () {
                    if (_this._currentPropertyPaneData.configuration.showLoadingIndicator) {
                        _this._loadPropertyPaneComponent(true);
                    }
                }, delay);
            }
            else {
                this._loadPropertyPaneComponent(true);
            }
        }
        else {
            this._currentPropertyPaneData = this._getEmptyPropertyPaneData();
            this._loadPropertyPaneComponent(shouldRecreatePropertyPaneElement);
        }
    };
    PropertyPaneController.prototype._loadPropertyPaneComponent = function (shouldRecreatePropertyPaneElement) {
        var _this = this;
        require.ensure([], function (require) {
            var propertyPane = require('../propertyPane/PropertyPane')['default'];
            var insertIntoDom = false;
            if (shouldRecreatePropertyPaneElement) {
                if (!_this._propertyPaneElement) {
                    _this._propertyPaneElement = document.createElement('div');
                    insertIntoDom = true;
                }
            }
            _this._propertyPaneElement.className = _this._currentPropertyPaneData.webPartId;
            var el = React.createElement(propertyPane, { data: _this._currentPropertyPaneData });
            ReactDOM.render(el, _this._propertyPaneElement);
            if (_this._propertyPaneContainer) {
                if (insertIntoDom) {
                    _this._clearPropertyPaneContainer();
                    _this._propertyPaneContainer.appendChild(_this._propertyPaneElement);
                }
                if (!_this._isOpen) {
                    _this._togglePropertyPanePositionAndFireConfigurationEvents();
                }
            }
            else {
                if (insertIntoDom && document.body.lastChild) {
                    document.body.insertBefore(_this._propertyPaneElement, document.body.lastChild.nextSibling);
                }
            }
        }, 'sp-webpart-base-propertypane');
    };
    PropertyPaneController.prototype._render = function () {
        var wp = this._webPartGetter(this._currentPropertyPaneData.webPartId);
        if (wp) {
            this._renderPropertyPane(wp);
        }
    };
    PropertyPaneController.prototype._onPropertyPaneFieldChanged = function (propertyName, newValue) {
        sp_core_library_1.Validate.isNonemptyString(propertyName, 'propertyName');
        sp_core_library_1.Validate.isNotNullOrUndefined(newValue, 'newValue');
        if (!this._currentPropertyPaneData.webPartId) {
            throw new Error('onPropertyPaneFieldChanged event is not expected when no web part is being configured');
        }
        var wp = this._webPartGetter(this._currentPropertyPaneData.webPartId);
        if (wp) {
            wp._internalOnPropertyPaneFieldChanged(propertyName, newValue);
            this._renderPropertyPane(wp);
        }
        if (this._isCurrentlyConfiguredPropertyPaneReactive()) {
            this._resetConfigurationCompleteTimeout();
        }
    };
    PropertyPaneController.prototype._onConfigurationEvent = function (configurationEvent) {
        switch (configurationEvent) {
            case PropertyPaneDefinitions_1.WebPartConfigurationEvent.PropertyPaneClosed:
                this._togglePropertyPanePositionAndFireConfigurationEvents();
                break;
            case PropertyPaneDefinitions_1.WebPartConfigurationEvent.PropertyPaneApplyClicked:
            case PropertyPaneDefinitions_1.WebPartConfigurationEvent.PropertyPaneLostFocus:
                this._fireConfigurationEvent(this._currentlyConfiguredWebPartId, configurationEvent);
                this._fireConfigurationEvent(this._currentlyConfiguredWebPartId, PropertyPaneDefinitions_1.WebPartConfigurationEvent.PropertyPaneConfigurationComplete);
                break;
        }
    };
    PropertyPaneController.prototype._togglePropertyPanePositionAndFireConfigurationEvents = function () {
        if (this._isOpen) {
            if (this._pageContentElement) {
                this._pageContentElement.classList.remove(PropertyPaneController_module_scss_1.default.shrinkContent);
            }
            else {
                ReactDOM.unmountComponentAtNode(this._propertyPaneElement);
            }
            if (this._workbenchCommandBarElement) {
                this._workbenchCommandBarElement.classList.remove(PropertyPaneController_module_scss_1.default.shrinkContent);
            }
            this._propertyPaneContainer.classList.remove(PropertyPaneController_module_scss_1.default.showPane);
        }
        else {
            if (this._pageContentElement) {
                this._pageContentElement.classList.add(PropertyPaneController_module_scss_1.default.shrinkContent);
            }
            else {
                this._propertyPaneContainer.style.top = '50px';
                this._propertyPaneContainer.style.zIndex = '999';
            }
            if (this._workbenchCommandBarElement) {
                this._workbenchCommandBarElement.classList.add(PropertyPaneController_module_scss_1.default.shrinkContent);
            }
            this._propertyPaneContainer.classList.add(PropertyPaneController_module_scss_1.default.showPane);
        }
        this._isOpen = !this._isOpen;
        this._firePostToggleConfigurationEvents();
    };
    PropertyPaneController.prototype._firePostToggleConfigurationEvents = function () {
        var _this = this;
        if (this._isOpen) {
            window.setTimeout(function () {
                _this._fireConfigurationEvent(_this._currentlyConfiguredWebPartId, PropertyPaneDefinitions_1.WebPartConfigurationEvent.PropertyPaneOpened);
                _this._fireConfigurationEvent(_this._currentlyConfiguredWebPartId, PropertyPaneDefinitions_1.WebPartConfigurationEvent.PropertyPaneConfigurationStart);
                window.postMessage('Property pane toggled', window.location.origin);
            }, PropertyPaneController.ANIMATION_TIMEOUT);
        }
        else {
            this._fireConfigurationEvent(this._currentlyConfiguredWebPartId, PropertyPaneDefinitions_1.WebPartConfigurationEvent.PropertyPaneConfigurationComplete);
            window.setTimeout(function () {
                _this._fireConfigurationEvent(_this._currentlyConfiguredWebPartId, PropertyPaneDefinitions_1.WebPartConfigurationEvent.PropertyPaneClosed);
                window.postMessage('Property pane toggled', window.location.origin);
            }, PropertyPaneController.ANIMATION_TIMEOUT);
        }
    };
    PropertyPaneController.prototype._fireNoToggleConfigurationEvents = function (id) {
        this._fireConfigurationEvent(this._currentlyConfiguredWebPartId, PropertyPaneDefinitions_1.WebPartConfigurationEvent.PropertyPaneConfigurationComplete);
        this._fireConfigurationEvent(id, PropertyPaneDefinitions_1.WebPartConfigurationEvent.PropertyPaneConfigurationStart);
    };
    PropertyPaneController.prototype._fireConfigurationEvent = function (webpartId, configurationEvent) {
        this._clearConfigurationCompleteTimeout();
        var wp = this._webPartGetter(webpartId);
        if (wp) {
            if (this._configurationEventCallback) {
                this._configurationEventCallback(configurationEvent, wp._internalSerialize());
            }
            wp._internalOnConfigurationEvent(configurationEvent);
        }
    };
    PropertyPaneController.prototype._resolvePropertyPaneElements = function () {
        var workbenchElement = document.getElementById('workbenchPageContent');
        if (workbenchElement) {
            this._pageContentElement = workbenchElement;
            this._workbenchCommandBarElement = document.getElementById('workbenchCommandBar');
        }
        else {
            this._pageContentElement = document.getElementById('spPageChromeAppDiv');
        }
        if (!this._pageContentElement) {
            if (!this._propertyPaneContainer) {
                this._propertyPaneContainer = document.createElement('div');
                this._propertyPaneContainer.id = PropertyPaneController.PROPERTY_PANE_CONTAINER_ID;
                this._propertyPaneContainer.className = PropertyPaneController.PROPERTY_PANE_CONTAINER_ID;
                document.body.appendChild(this._propertyPaneContainer);
            }
        }
        else {
            this._propertyPaneContainer = document.getElementById(PropertyPaneController.PROPERTY_PANE_CONTAINER_ID);
        }
    };
    PropertyPaneController.prototype._clearPropertyPaneContainer = function () {
        while (this._propertyPaneContainer && this._propertyPaneContainer.firstChild) {
            this._propertyPaneContainer.removeChild(this._propertyPaneContainer.firstChild);
        }
    };
    PropertyPaneController.prototype._resetConfigurationCompleteTimeout = function () {
        this._clearConfigurationCompleteTimeout();
        this._configurationCompletionTimeout = window.setTimeout(this._fireConfigurationEvent, PropertyPaneController.CONFIGURATION_COMPLETE_TIMEOUT, this._currentlyConfiguredWebPartId, PropertyPaneDefinitions_1.WebPartConfigurationEvent.PropertyPaneConfigurationComplete);
    };
    PropertyPaneController.prototype._clearConfigurationCompleteTimeout = function () {
        if (this._configurationCompletionTimeout) {
            window.clearTimeout(this._configurationCompletionTimeout);
            this._configurationCompletionTimeout = undefined;
        }
    };
    PropertyPaneController.prototype._isCurrentlyConfiguredPropertyPaneReactive = function () {
        if (this._currentlyConfiguredWebPartId) {
            var currentlyConfiguredWebPart = this._webPartGetter(this._currentlyConfiguredWebPartId);
            var isReactive = currentlyConfiguredWebPart._internalGetPropertyPaneData().isReactive;
            return isReactive ? true : false;
        }
        return false;
    };
    PropertyPaneController.prototype._getEmptyPropertyPaneData = function () {
        return {
            webPartId: undefined,
            title: undefined,
            shouldResetState: true,
            onPropertyPaneFieldChanged: undefined,
            onConfigurationEvent: this._onConfigurationEvent,
            onRendered: undefined,
            properties: undefined,
            configuration: undefined
        };
    };
    return PropertyPaneController;
}());
PropertyPaneController.ANIMATION_TIMEOUT = 400;
PropertyPaneController.CONFIGURATION_COMPLETE_TIMEOUT = 5000;
PropertyPaneController.PROPERTY_PANE_CONTAINER_ID = 'spPropertyPaneContainer';
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = PropertyPaneController;
