"use strict";
var alternativeUrls_1 = require("../alternativeUrls");
var assert = chai.assert;
describe('AlternativeUrlMap tests', function () {
    var urlTable = {
        'primaryUrl1': 'alterniveUrl1',
        'primaryUrl2': 'alterniveUrl2'
    };
    var urlTable2 = {
        'primaryUrl1': 'alterniveUrl1',
        'primaryUrl3': 'alterniveUrl3'
    };
    var urlTableLoc = {
        '/путь1/file.jpg': 'альтернативный путь1/file.jpg'
    };
    var urlTableEmpty = {};
    var urlTableWithExpiration = {
        'validUrl1': 'https://privatecdn.sharepointonlin.com/contoso.sharepoint.com/site/lib/image.jpg?_eat_=4131127098_yyyyyyyyyyyyyyy',
        'validUrl2': 'https://privatecdn.sharepointonlin.com/contoso.sharepoint.com/site/lib/image.jpg?_eat_=3131127098',
        'invalidUrl1': 'https://privatecdn.sharepointonlin.com/contoso.sharepoint.com/site/lib/image.jpg?_eat_=1480375309_yyyyyyyyyyyyyyy',
        'invalidUrl2': 'https://privatecdn.sharepointonlin.com/contoso.sharepoint.com/site/lib/image.jpg?_eat_=1480375310_yyyyyyyyyy&foo=bar'
    };
    it('Can initialize empty url map', function (done) {
        alternativeUrls_1.AlternativeUrlMap.updateMap(urlTableEmpty);
        assert.isTrue(alternativeUrls_1.AlternativeUrlMap.UrlTable.size === 0);
        done();
    });
    it('Can initialize url map', function (done) {
        alternativeUrls_1.AlternativeUrlMap.updateMap(urlTable);
        assert.isTrue(alternativeUrls_1.AlternativeUrlMap.UrlTable.size === 2);
        done();
    });
    it('Can add empty url map', function (done) {
        alternativeUrls_1.AlternativeUrlMap.updateMap(urlTableEmpty);
        assert.isTrue(alternativeUrls_1.AlternativeUrlMap.UrlTable.size === 2);
        done();
    });
    it('Can add null url map', function (done) {
        alternativeUrls_1.AlternativeUrlMap.updateMap(null);
        assert.isTrue(alternativeUrls_1.AlternativeUrlMap.UrlTable.size === 2);
        done();
    });
    it('Can add undefined url map', function (done) {
        alternativeUrls_1.AlternativeUrlMap.updateMap(undefined);
        assert.isTrue(alternativeUrls_1.AlternativeUrlMap.UrlTable.size === 2);
        done();
    });
    it('Can re-add same url map', function (done) {
        alternativeUrls_1.AlternativeUrlMap.updateMap(urlTable);
        assert.isTrue(alternativeUrls_1.AlternativeUrlMap.UrlTable.size === 2);
        done();
    });
    it('Can re-add modified url map', function (done) {
        alternativeUrls_1.AlternativeUrlMap.updateMap(urlTable2);
        assert.isTrue(alternativeUrls_1.AlternativeUrlMap.UrlTable.size === 3);
        Object.keys(urlTable).forEach(function (key) {
            return assert.isTrue(alternativeUrls_1.AlternativeUrlMap.tryGetAlternativeUrl(key) === urlTable[key]);
        });
        Object.keys(urlTable2).forEach(function (key) {
            return assert.isTrue(alternativeUrls_1.AlternativeUrlMap.tryGetAlternativeUrl(key) === urlTable2[key]);
        });
        done();
    });
    it('Can add localized url map', function (done) {
        alternativeUrls_1.AlternativeUrlMap.updateMap(urlTableLoc);
        assert.isTrue(alternativeUrls_1.AlternativeUrlMap.UrlTable.size === 4);
        Object.keys(urlTableLoc).forEach(function (key) {
            return assert.isTrue(alternativeUrls_1.AlternativeUrlMap.tryGetAlternativeUrl(key) === urlTableLoc[key]);
        });
        done();
    });
    it('Can expire URLs in the map', function (done) {
        alternativeUrls_1.AlternativeUrlMap.updateMap(urlTableWithExpiration);
        assert.isTrue(alternativeUrls_1.AlternativeUrlMap.UrlTable.size === 8);
        assert.isString(alternativeUrls_1.AlternativeUrlMap.tryGetAlternativeUrl('validUrl1'));
        assert.isString(alternativeUrls_1.AlternativeUrlMap.tryGetAlternativeUrl('validUrl2'));
        assert.isUndefined(alternativeUrls_1.AlternativeUrlMap.tryGetAlternativeUrl('invalidUrl1'));
        assert.isUndefined(alternativeUrls_1.AlternativeUrlMap.tryGetAlternativeUrl('invalidUrl2'));
        assert.isTrue(alternativeUrls_1.AlternativeUrlMap.UrlTable.size === 6);
        done();
    });
    it('Can query for the userphoto URL', function (done) {
        var userPhotoCdnUrlBase = '/_layouts/15/userphoto.aspx?';
        assert.equal(alternativeUrls_1.AlternativeUrlMap.getUserPhotoUrl(), userPhotoCdnUrlBase + 'size=S&accountname=');
        assert.equal(alternativeUrls_1.AlternativeUrlMap.getUserPhotoUrl(null, alternativeUrls_1.UserPhotoSize.Medium), userPhotoCdnUrlBase + 'size=M&accountname=');
        assert.equal(alternativeUrls_1.AlternativeUrlMap.getUserPhotoUrl('accountname1'), userPhotoCdnUrlBase + 'size=S&accountname=accountname1');
        assert.equal(alternativeUrls_1.AlternativeUrlMap.getUserPhotoUrl('accountname1', alternativeUrls_1.UserPhotoSize.Medium), userPhotoCdnUrlBase + 'size=M&accountname=accountname1');
        userPhotoCdnUrlBase = 'https://p.sp.com/c.sp.com/_userprofile/userphoto.jpg?_eat_=1&_oat_=2';
        alternativeUrls_1.AlternativeUrlMap.updateMap({ 'UserPhotoAspx': userPhotoCdnUrlBase });
        assert.equal(alternativeUrls_1.AlternativeUrlMap.getUserPhotoUrl('accountname1', alternativeUrls_1.UserPhotoSize.Medium), userPhotoCdnUrlBase + '&size=M&accountname=accountname1');
        done();
    });
});
