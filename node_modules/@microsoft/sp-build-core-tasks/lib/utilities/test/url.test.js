"use strict";
var chai_1 = require("chai");
var url = require("./../url");
describe('URL utility tests', function () {
    describe('joinUrlSegments', function () {
        it('correctly handles 0 arguments', function () {
            chai_1.assert.isUndefined(url.joinUrlSegments());
        });
        it('correctly handles the singleton case', function () {
            chai_1.assert.equal(url.joinUrlSegments('test'), 'test');
            chai_1.assert.equal(url.joinUrlSegments('test/'), 'test');
            chai_1.assert.equal(url.joinUrlSegments('test/url'), 'test/url');
            chai_1.assert.equal(url.joinUrlSegments('https://test.net:123/'), 'https://test.net:123');
            chai_1.assert.equal(url.joinUrlSegments('https://test.net:123/test'), 'https://test.net:123/test');
        });
        it('correctly combines two URL segments', function () {
            chai_1.assert.equal(url.joinUrlSegments('foo', 'bar'), 'foo/bar');
            chai_1.assert.equal(url.joinUrlSegments('foo/', '/bar'), 'foo/bar');
            chai_1.assert.equal(url.joinUrlSegments('foo/', 'bar/'), 'foo/bar');
            chai_1.assert.equal(url.joinUrlSegments('foo/', '/bar/'), 'foo/bar');
            chai_1.assert.equal(url.joinUrlSegments('foo//', '/bar/'), 'foo/bar');
            chai_1.assert.equal(url.joinUrlSegments('foo//', '//bar/'), 'foo/bar');
            chai_1.assert.equal(url.joinUrlSegments('foo//', '//bar/baz/'), 'foo/bar/baz');
            chai_1.assert.equal(url.joinUrlSegments('/foo/', '/bar/'), '/foo/bar');
        });
        it('correclty combines more than two URL segments', function () {
            chai_1.assert.equal(url.joinUrlSegments('foo', 'bar', 'baz'), 'foo/bar/baz');
            chai_1.assert.equal(url.joinUrlSegments('foo/', '/bar', 'baz'), 'foo/bar/baz');
            chai_1.assert.equal(url.joinUrlSegments('foo/', 'bar/', 'baz'), 'foo/bar/baz');
            chai_1.assert.equal(url.joinUrlSegments('foo/', 'bar', '/baz'), 'foo/bar/baz');
            chai_1.assert.equal(url.joinUrlSegments('foo/', '/bar', '/baz/'), 'foo/bar/baz');
            chai_1.assert.equal(url.joinUrlSegments('foo/', '/bar', '/baz'), 'foo/bar/baz');
            chai_1.assert.equal(url.joinUrlSegments('foo/', '/bar', '/baz/ban'), 'foo/bar/baz/ban');
            chai_1.assert.equal(url.joinUrlSegments('foo/', '/bar', '/baz', 'ban'), 'foo/bar/baz/ban');
            chai_1.assert.equal(url.joinUrlSegments('/foo/', '/bar', '/baz', 'ban'), '/foo/bar/baz/ban');
        });
        it('correclty combines many URL segments', function () {
            var testSet = [];
            for (var i = 0; i < 1000; i++) {
                testSet.push("" + i + i + i + i);
            }
            chai_1.assert.equal(url.joinUrlSegments.apply(url, testSet), testSet.join('/'));
        });
    });
    describe('ensureTrailingSlash', function () {
        it('correctly adds a trailing slash', function () {
            chai_1.assert.equal(url.ensureTrailingSlash('foo'), 'foo/');
            chai_1.assert.equal(url.ensureTrailingSlash('foo/bar'), 'foo/bar/');
            chai_1.assert.equal(url.ensureTrailingSlash('/foo'), '/foo/');
            chai_1.assert.equal(url.ensureTrailingSlash('//foo'), '//foo/');
        });
        it('correctly keeps a trailing slash', function () {
            chai_1.assert.equal(url.ensureTrailingSlash('foo/'), 'foo/');
            chai_1.assert.equal(url.ensureTrailingSlash('foo/bar/'), 'foo/bar/');
            chai_1.assert.equal(url.ensureTrailingSlash('/foo/'), '/foo/');
            chai_1.assert.equal(url.ensureTrailingSlash('//foo/'), '//foo/');
        });
        it('correctly collapses existing trailing slashes', function () {
            chai_1.assert.equal(url.ensureTrailingSlash('foo//'), 'foo/');
            chai_1.assert.equal(url.ensureTrailingSlash('foo/bar//'), 'foo/bar/');
            chai_1.assert.equal(url.ensureTrailingSlash('/foo//'), '/foo/');
            chai_1.assert.equal(url.ensureTrailingSlash('//foo//'), '//foo/');
            chai_1.assert.equal(url.ensureTrailingSlash('//foo/////////////////////////////////'), '//foo/');
        });
    });
});

//# sourceMappingURL=url.test.js.map
