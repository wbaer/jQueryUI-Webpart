"use strict";
var chai_1 = require("chai");
var test_1 = require("@microsoft/sp-core-library/lib/test");
var TestWebPart_1 = require("./TestWebPart");
var MockWebPartContext_1 = require("../../test/mock/clientSideWebParts/MockWebPartContext");
describe('BaseClientSideWebPart', function () {
    it('Invalid parameters are not accepted', function () {
        var wpc = new MockWebPartContext_1.default();
        chai_1.expect(function () { return wpc.initialize(new TestWebPart_1.TestWebPart()); })
            .to.not.throw();
        wpc = new MockWebPartContext_1.default();
        wpc.domElement = test_1.TEST_UNDEFINED;
        chai_1.expect(function () {
            return wpc.initialize(new TestWebPart_1.TestWebPart());
        })
            .to.throw('The value for \"webpart element\" must not be undefined');
        wpc = new MockWebPartContext_1.default();
        wpc.instanceId = test_1.TEST_UNDEFINED;
        chai_1.expect(function () {
            return wpc.initialize(new TestWebPart_1.TestWebPart());
        })
            .to.throw('The value for \"webpart instanceId\" must not be undefined');
        wpc = new MockWebPartContext_1.default();
        wpc.manifest = test_1.TEST_UNDEFINED;
        chai_1.expect(function () { return wpc.initialize(new TestWebPart_1.TestWebPart()); })
            .to.throw('The value for \"webpart manifest\" must not be undefined');
        wpc = new MockWebPartContext_1.default();
        wpc.host = test_1.TEST_UNDEFINED;
        chai_1.expect(function () { return wpc.initialize(new TestWebPart_1.TestWebPart()); })
            .to.throw('The value for \"webpart host\" must not be undefined');
        wpc = new MockWebPartContext_1.default();
        wpc.eventAggregator = test_1.TEST_UNDEFINED;
        chai_1.expect(function () { return wpc.initialize(new TestWebPart_1.TestWebPart()); })
            .to.throw('The value for \"webpart context eventAggregator\" must not be undefined');
        wpc = new MockWebPartContext_1.default();
        wpc.statusRenderer = test_1.TEST_UNDEFINED;
        chai_1.expect(function () { return wpc.initialize(new TestWebPart_1.TestWebPart()); })
            .to.throw('The value for \"webpart context statusRenderer\" must not be undefined');
        wpc = new MockWebPartContext_1.default();
        wpc.pageContext = test_1.TEST_UNDEFINED;
        chai_1.expect(function () { return wpc.initialize(new TestWebPart_1.TestWebPart()); })
            .to.throw('The value for \"webpart context pageContext\" must not be undefined');
    });
    it('Has valid public properties after initialization', function () {
        var c = new MockWebPartContext_1.default();
        c.domElement.id = 'id1';
        var wp = c.initialize(new TestWebPart_1.TestWebPart());
        chai_1.assert.strictEqual(c.domElement.id, wp.publicDomElement.id, 'id');
        chai_1.assert.deepEqual(c.manifest, wp.publicManifest, 'manifest');
        chai_1.assert.strictEqual(c.instanceId, wp.publicInstanceId, 'instanceId');
        chai_1.assert.deepEqual(c.host, wp.publicHost, 'host');
        chai_1.assert.isUndefined(wp.publicProperties, 'properties');
        chai_1.assert.strictEqual(false, wp.publicRenderedOnce, 'renderedOnce');
        chai_1.assert.strictEqual(wp.publicContext, c);
    });
    it('Dispose does not nullify dom element', function () {
        var c = new MockWebPartContext_1.default();
        var wp = c.initialize(new TestWebPart_1.TestWebPart());
        chai_1.assert(!!c.domElement);
        wp._internalDispose();
        chai_1.assert(c.domElement);
    });
    it('Serialize returns correct data', function () {
        var c = new MockWebPartContext_1.default();
        var wp = c.initialize(new TestWebPart_1.TestWebPart());
        var data = {
            id: c.manifest.id,
            instanceId: c.instanceId,
            dataVersion: '1.0',
            title: test_1.TEST_UNDEFINED,
            description: test_1.TEST_UNDEFINED,
            properties: test_1.TEST_UNDEFINED,
            serverProcessedContent: {
                htmlStrings: {},
                links: {},
                imageSources: {}
            }
        };
        chai_1.assert.deepEqual(wp._internalSerialize(), data, 'serialized data');
    });
    it('Get property pane settings returns correct data', function () {
        var c = new MockWebPartContext_1.default();
        var wp = c.initialize(new TestWebPart_1.TestWebPart());
        var data = {
            webPartId: c.instanceId,
            title: test_1.TEST_UNDEFINED,
            configuration: wp.publicPropertyPaneConfiguration(),
            onPropertyPaneFieldChanged: test_1.TEST_UNDEFINED,
            onConfigurationEvent: test_1.TEST_UNDEFINED,
            onRendered: test_1.TEST_UNDEFINED,
            properties: test_1.TEST_UNDEFINED
        };
        var props = wp._internalGetPropertyPaneData();
        chai_1.assert.strictEqual(data.webPartId, props.webPartId, 'webPartId');
        chai_1.assert.strictEqual(data.configuration.currentPage, props.configuration.currentPage, 'currentPage');
        chai_1.assert.deepEqual(data.properties, props.properties, 'properties');
        chai_1.assert.strictEqual(data.configuration.pages.length, 1, 'length');
    });
    it('Base class onEvent does not throw', function () {
        var wpc = new MockWebPartContext_1.default();
        var wp = wpc.initialize(new TestWebPart_1.TestWebPartWithNoRender());
        chai_1.expect(function () { wp.onEvent('testEvent', undefined); }).to.not.throw();
    });
    it('Base class onEvent does not throw', function () {
        var wpc = new MockWebPartContext_1.default();
        var wp = wpc.initialize(new TestWebPart_1.TestWebPartWithNoRender());
        chai_1.expect(function () { wp.onEvent('testEvent', undefined); }).to.not.throw();
    });
});
describe('Web part versioning tests', function () {
    it('Backward-compatibility: Newer version can deserialize the data serialized by older version', function () {
        var context = new MockWebPartContext_1.default();
        var newWp = context.initialize(new TestWebPart_1.TestWebPartV2());
        var oldWpData = {
            id: context.manifest.id,
            instanceId: context.instanceId,
            dataVersion: '1.0',
            title: test_1.TEST_UNDEFINED,
            description: test_1.TEST_UNDEFINED,
            properties: {}
        };
        newWp._internalDeserialize(oldWpData);
        chai_1.assert.equal(newWp.publicProperties.prop2, 'created to be backward-compatible');
    });
    it('Forward-compatibility: Older version can deserialize the data serialized by newer version', function () {
        var context = new MockWebPartContext_1.default();
        var oldWp = context.initialize(new TestWebPart_1.TestWebPart());
        var newWpData = {
            id: context.manifest.id,
            instanceId: context.instanceId,
            dataVersion: '2.0',
            title: test_1.TEST_UNDEFINED,
            description: test_1.TEST_UNDEFINED,
            properties: {}
        };
        oldWp._internalDeserialize(newWpData);
        chai_1.assert.equal(oldWp.publicProperties.prop1, 'updated to be forward-compatible');
    });
});
