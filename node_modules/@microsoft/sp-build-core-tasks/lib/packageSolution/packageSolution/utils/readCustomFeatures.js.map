{"version":3,"sources":["packageSolution/packageSolution/utils/readCustomFeatures.ts"],"names":[],"mappings":"AAAA;;;;;;;;;GASG;;AAEH,2BAA8B;AAE9B,iDAA4C;AAG5C,uCAA4D;AAO5D;;;;;;;GAOG;AACH,4BAA2C,OAAmC;IAC5E,MAAM,CAAC,4BAA4B,CAAC,OAAO,CAAC,KAAK,CAAC,aAAa,CAAC;SAC7D,IAAI,CAAC,UAAC,SAAmB;QACxB,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,KAAK,CAAC,aAAa,CAAC;aAC/C,IAAI,CAAC,UAAC,KAAa;YAClB,MAAM,CAAC;gBACL,KAAK,EAAE,KAAK;gBACZ,qBAAqB,EAAE,SAAS;aACjC,CAAC;QACJ,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC;;AAXD,qCAWC;AAED,2EAA2E;AAC3E,sCAAsC,aAAqB;IACzD,MAAM,CAAC,+BAAoB,CACzB,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,mBAAS,CAAC,UAAU,CAAC,EAAE,MAAI,mBAAS,CAAC,OAAS,EAAE,6BAA6B,CAAC;SACtG,IAAI,CAAC,UAAC,SAAmB;QACxB,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,UAAC,QAAgB,IAAK,OAAA,QAAQ,CAAC,OAAO,CAAC,mBAAS,CAAC,kBAAkB,EAAE,EAAE,CAAC,EAAlD,CAAkD,CAAC,CAAC;IACjG,CAAC,CAAC,CAAC;AACP,CAAC;AAED,mDAAmD;AACnD,wBAAwB,aAAqB;IAC3C,MAAM,CAAC,mBAAQ,CAAC,aAAa,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,qBAAqB,CAAC,CAAC;AAChF,CAAC","file":"packageSolution/packageSolution/utils/readCustomFeatures.js","sourcesContent":["/**\r\n * @file readCustomFeatures.ts\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n *\r\n * Reads custom feature XML from folder specified by config. This function looks for all `.rels` files in\r\n * the `/_rels` folder, assumes that a Feature.xml file of the same name exists in the root folder. It\r\n * returns an object with a list of IXml files to include in the package, as well as the paths to all the\r\n * feature.xml files, which is later referenced by the `AppManifest.xml.rels` file, thereby including the\r\n * custom feature in the package.\r\n */\r\n\r\nimport path = require('path');\r\n\r\nimport constants from '../config/constants';\r\nimport { IPackageSolutionTaskConfig } from '../../PackageSolutionTask';\r\nimport IXml from '../models/packageXml/IXml';\r\nimport { getFiles, getRelativeFilePaths } from './getFiles';\r\n\r\nexport interface ICustomFeatures {\r\n  files: IXml[];\r\n  customFeatureFilepath: string[];\r\n}\r\n\r\n/**\r\n * Reads custom feature XML from folder specified by config. This function looks for all `.rels` files in\r\n * the `/_rels` folder, assumes that a Feature.xml file of the same name exists in the root folder. It\r\n * returns an object with a list of IXml files to include in the package, as well as the paths to all the\r\n * feature.xml files, which is later referenced by the `AppManifest.xml.rels` file, thereby including the\r\n * custom feature in the package.\r\n * @todo we allow multiple featureXML globs to be specified\r\n */\r\nexport default function readCustomFeatures(options: IPackageSolutionTaskConfig): Promise<ICustomFeatures> {\r\n  return getCustomFeatureXmlFilenames(options.paths.featureXmlDir)\r\n    .then((filenames: string[]) => {\r\n      return getCustomFiles(options.paths.featureXmlDir)\r\n        .then((files: IXml[]) => {\r\n          return {\r\n            files: files,\r\n            customFeatureFilepath: filenames\r\n          };\r\n        });\r\n    });\r\n}\r\n\r\n/** Reads the list of feature xml filenames from a specified rels folder */\r\nfunction getCustomFeatureXmlFilenames(featureXmlDir: string): Promise<string[]> {\r\n  return getRelativeFilePaths(\r\n    path.join(featureXmlDir, constants.RelsFolder), `*${constants.RelsXml}`, 'Found custom feature file: ')\r\n    .then((filenames: string[]) => {\r\n      return filenames.map((filename: string) => filename.replace(constants.RelsExtensionRegex, ''));\r\n    });\r\n}\r\n\r\n/** Loads a directory of files into IXml objects */\r\nfunction getCustomFiles(featureXmlDir: string): Promise<IXml[]> {\r\n  return getFiles(featureXmlDir, path.join('**', '*.*'), 'Found custom file: ');\r\n}\r\n"],"sourceRoot":"..\\..\\..\\..\\src"}