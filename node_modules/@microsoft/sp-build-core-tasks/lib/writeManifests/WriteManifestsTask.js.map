{"version":3,"sources":["writeManifests/WriteManifestsTask.ts"],"names":[],"mappings":"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","file":"writeManifests/WriteManifestsTask.js","sourcesContent":["import { cloneDeep } from 'lodash';\r\nimport * as fs from 'fs';\r\nimport * as gulp from 'gulp';\r\nimport * as merge from 'merge2';\r\nimport * as path from 'path';\r\nimport constants from './../constants';\r\nimport { writeStringToFile } from './../utilities/FileUtils';\r\nimport { EOL } from 'os';\r\nimport { ILocaleMap } from './../OdspGulpTask';\r\n\r\nimport {\r\n  IModuleConfiguration,\r\n  IComponentModuleConfiguration,\r\n  IPathModuleConfiguration,\r\n  ILocalizedPathModuleConfiguration,\r\n  ILocalizedString,\r\n  IClientSideComponentLoaderConfiguration,\r\n  IClientSideComponentManifest,\r\n  IClientSideApplicationManifest,\r\n  IClientSideWebPartManifest,\r\n  IClientSideWebPartManifestEntry,\r\n  IPath\r\n} from '@microsoft/sp-module-interfaces';\r\n\r\nimport ManifestSchemaValidator,\r\n       { IManifestValidatorResult } from '@microsoft/sp-module-interfaces/lib/manifestSchemaValidator';\r\n\r\nimport {\r\n  IDeployEntry,\r\n  IDeployModules\r\n} from './../copyAssets/CopyAssetsTask';\r\nimport OdspGulpTask from './../OdspGulpTask';\r\nimport CumulativeManifestProcessor,\r\n       { ICumulativeManifestOptions } from './cumulativeManifest/cumulativeManifestProcessor';\r\nimport {\r\n  ensureTrailingSlash,\r\n  isUrl,\r\n  joinUrlSegments,\r\n  trimLeadingSlashes\r\n} from './../utilities/url';\r\n\r\nconst schemaPropertyName: string = '$schema';\r\n\r\nexport interface IWriteManifestsTaskConfig {\r\n  /**\r\n   * The deploy CDN path.\r\n   */\r\n  deployCdnPath?: string;\r\n\r\n  /**\r\n   * A prefix to prepend to all assets' URLs. For example, if this value is \"foobar\", a resulting CDN path for an asset\r\n   *  called \"baz.js\" will be \"foobar/baz.js\"\r\n   */\r\n  cdnUrlPrefix?: string;\r\n\r\n  /**\r\n   * The CDN base path. This value will populate the \"internalModuleBaseUrls\" CDN manifest property.\r\n   */\r\n  cdnBasePath?: string;\r\n\r\n  /**\r\n   * The debug base path, which is the value that will populate the \"internalModuleBaseUrls\" manifest property for\r\n   *  debug manifests.\r\n   */\r\n  debugBasePath?: string;\r\n\r\n  /**\r\n   * If specified, only use this locale in the debug manifest.\r\n   */\r\n  debugLocale?: string;\r\n\r\n  /**\r\n   * Options for the cumulative manifest files to be dropped in the dist folder. If this field is null, cumulative\r\n   *  files will not be produced.\r\n   */\r\n  cumulativeManifestOptions?: ICumulativeManifestOptions;\r\n\r\n  /**\r\n   * Defaults to true. If true, wrap the manifest in the Manifest Server format.\r\n   * This should be true for all 1st party builds.\r\n   */\r\n  shouldWrapProductionManifestForManifestServer?: boolean;\r\n}\r\n\r\ninterface ICdnManifest {\r\n  ManifestVersion: number;\r\n  ComponentType: string;\r\n  Id: string;\r\n  Manifest: string;\r\n  Name: string;\r\n  resources: {};\r\n}\r\n\r\n/**\r\n * Writes a manifest for each entry in the project.\r\n *\r\n * Example:\r\n *  IN:\r\n *   the result of the prepareDeploy step enumerating each entry, each entry's dependencies, and a developer-generated\r\n *    base manifest for each entry.\r\n *\r\n *  OUT:\r\n *   a debug and, optionally, a production manifest for each entry.\r\n */\r\nexport class WriteManifestsTask extends OdspGulpTask<IWriteManifestsTaskConfig> {\r\n  public name: string = 'write-manifests';\r\n  public taskConfig: IWriteManifestsTaskConfig = {\r\n    deployCdnPath: undefined,\r\n    debugLocale: constants.defaultLocale,\r\n    cdnUrlPrefix: undefined,\r\n    cdnBasePath: undefined,\r\n    shouldWrapProductionManifestForManifestServer: false,\r\n\r\n    cumulativeManifestOptions: {\r\n      ignoreOutputManifestIds: undefined\r\n    }\r\n  };\r\n\r\n  // tslint:disable-next-line:no-any\r\n  private _localizedResourcesCache: { [key: string]: any } = {};\r\n\r\n  public loadSchema(): Object {\r\n    return require('./write-manifests.schema.json');\r\n  }\r\n\r\n  /**\r\n   * Normalizes a locale name. So \"en-us\" becomes \"en-US\" and \"sr-cyrl-rs\" becomes \"sr-Cyrl-RS\". There are two special\r\n   *  cases. For pseudo-locales like \"qps-ploc\", everything stays lowecase. For language-script locales like \"uz-Cyrl\",\r\n   *  only the script name's first character should be uppercased.\r\n   */\r\n  public normalizeLocaleName(localeName: string): string {\r\n    localeName = localeName.toLowerCase();\r\n\r\n    const localeTokens: string[] = localeName.split('-');\r\n    if (localeTokens.length === 2) {\r\n      const lastToken: string = localeTokens[1];\r\n      if  (lastToken.length === 2) {\r\n        localeTokens[1] = lastToken.toUpperCase();\r\n      } else if (lastToken === 'ploc' || lastToken === 'plocm' || lastToken === 'ploca') {\r\n        // Special case for pseudo-locales, leave lowercase\r\n      } else {\r\n        // The second token is the script token\r\n        localeTokens[1] = this._uppercaseFirstLetter(lastToken);\r\n      }\r\n    } else if (localeTokens.length === 3) {\r\n      const lastToken: string = localeTokens[2];\r\n      if  (lastToken.length === 2) {\r\n        localeTokens[2] = lastToken.toUpperCase();\r\n        localeTokens[1] = this._uppercaseFirstLetter(localeTokens[1]);\r\n      } else {\r\n        // The last token is the script token\r\n        localeTokens[2] = this._uppercaseFirstLetter(lastToken);\r\n        localeTokens[1] = localeTokens[1].toUpperCase();\r\n      }\r\n    }\r\n\r\n    const normalizedLocale: string = localeTokens.join('-');\r\n    return normalizedLocale;\r\n  }\r\n\r\n  public executeTask(gulp: gulp.Gulp, completeCallback: (error?: string) => void): NodeJS.ReadWriteStream {\r\n    if (!this.properties.deployEntries || this.properties.deployEntries.length === 0) {\r\n      // Suppressed warning for now to unblock CI. VSO#219493\r\n      this.log/*Warning*/('No deploy entries specified. No manifests to write.');\r\n      completeCallback();\r\n      return;\r\n    }\r\n\r\n    const shouldProduceDebugManifests: boolean = !!this.taskConfig.debugBasePath;\r\n    if (!this.taskConfig.debugBasePath) {\r\n      this.logWarning('Debug base path not specified. Unable to produce debug manifests.');\r\n    }\r\n\r\n    let shouldProduceProductionManifests: boolean = this.buildConfig.production && !!this.taskConfig.cdnBasePath;\r\n    if (this.buildConfig.production && !this.taskConfig.cdnBasePath) {\r\n      this.logWarning('CDN base path not specified. Unable to produce production manifests.');\r\n    }\r\n\r\n    if (this.buildConfig.production && !this.taskConfig.deployCdnPath) {\r\n      shouldProduceProductionManifests = false;\r\n      // Suppressed warning for now to unblock CI. VSO#219493\r\n      this.log/*Warning*/('CDN deploy path not specified. Unable to produce production manifests.');\r\n    }\r\n\r\n    const debugManifests: IClientSideComponentManifest[] = [];\r\n    const manifestIds: { [id: string]: IDeployEntry } = {};\r\n\r\n    const tasks: NodeJS.ReadWriteStream[] = [];\r\n\r\n    this.properties.deployEntries.forEach((deployEntry: IDeployEntry) => {\r\n      if (!deployEntry.manifest) {\r\n        this.logWarning(`Manifest not defined for entry \"${deployEntry.entryName}\".`);\r\n        return;\r\n      }\r\n\r\n      const validationResult: IManifestValidatorResult =\r\n        ManifestSchemaValidator.validateManifest(JSON.stringify(deployEntry.manifest));\r\n      if (!validationResult.result) {\r\n        const errorText: string = ManifestSchemaValidator.getFormattedErrorMessage(validationResult.errors);\r\n\r\n        this.logError(`Manifest validation error (${deployEntry.configEntry.manifest}): ${EOL}${errorText}`);\r\n        return;\r\n      }\r\n\r\n      // Ensure we don't have a duplicate ID\r\n      const lowercaseId: string = deployEntry.manifest.id.toLowerCase();\r\n      if (lowercaseId in manifestIds) {\r\n        /* tslint:disable:max-line-length */\r\n        this.logError(`Duplicate manifest ID \"${lowercaseId}\". Exists in \"${manifestIds[lowercaseId].configEntry.manifest}\" and \"${deployEntry.configEntry.manifest}\".`);\r\n        /* tslint:enable:max-line-length */\r\n      } else {\r\n        manifestIds[lowercaseId] = deployEntry;\r\n      }\r\n\r\n      this._localizeManifest(deployEntry.manifest);\r\n\r\n      if (shouldProduceDebugManifests) {\r\n        const loaderConfig: IClientSideComponentLoaderConfiguration =\r\n          this._generateLoaderConfig(deployEntry.debugModules,\r\n                                     [this.taskConfig.debugBasePath],\r\n                                     this._resolveDebugPath.bind(this),\r\n                                     this.taskConfig.debugLocale);\r\n\r\n        const debugManifest: IClientSideComponentManifest = this._generateManifest(deployEntry, loaderConfig);\r\n        this._doFinalManifestFixup(debugManifest);\r\n        debugManifests.push(debugManifest);\r\n\r\n        tasks.push(writeStringToFile(JSON.stringify(debugManifest, undefined, 2),\r\n                                     `${debugManifest.id}.manifest.json`)\r\n                    .pipe(gulp.dest(this.buildConfig.distFolder)));\r\n      }\r\n\r\n      if (shouldProduceProductionManifests) {\r\n        const loaderConfig: IClientSideComponentLoaderConfiguration =\r\n          this._generateLoaderConfig(deployEntry.productionModules,\r\n                                     [this.taskConfig.cdnBasePath],\r\n                                     this._resolveProductionPath.bind(this));\r\n\r\n        const productionManifest: IClientSideComponentManifest = this._generateManifest(deployEntry, loaderConfig);\r\n        this._doFinalManifestFixup(productionManifest);\r\n        let cdnManifest: ICdnManifest | IClientSideComponentManifest;\r\n        if (this.taskConfig.shouldWrapProductionManifestForManifestServer) {\r\n          cdnManifest = {\r\n            ManifestVersion: productionManifest.manifestVersion,\r\n            ComponentType: productionManifest.componentType,\r\n            Id: productionManifest.id,\r\n            Manifest: JSON.stringify(productionManifest),\r\n            Name: productionManifest.id,\r\n            resources: {}\r\n          };\r\n        } else {\r\n          cdnManifest = productionManifest;\r\n        }\r\n\r\n        tasks.push(writeStringToFile(JSON.stringify(cdnManifest), `${productionManifest.id}.json`)\r\n          .pipe(gulp.dest(this.taskConfig.deployCdnPath)));\r\n      }\r\n    });\r\n\r\n    merge(tasks).on('finish', () => {\r\n      // Once this project's manifests are written, crawl the dependency tree discovering manifest files\r\n      if (shouldProduceDebugManifests) {\r\n        const cumulativeManifestOptions: ICumulativeManifestOptions = this.taskConfig.cumulativeManifestOptions;\r\n        cumulativeManifestOptions.baseUrl = this.taskConfig.debugBasePath;\r\n\r\n        const cumulativeManifestProcessor: CumulativeManifestProcessor =\r\n          new CumulativeManifestProcessor(this, cumulativeManifestOptions);\r\n\r\n        merge(cumulativeManifestProcessor.generateCumulativeManifest(gulp, debugManifests))\r\n          .on('finish', () => completeCallback());\r\n      } else {\r\n        completeCallback();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Localizes a manifest. Only works with WebPart and Application manifests,\r\n   * otherwise it does nothing\r\n   */\r\n  private _localizeManifest(manifest: IClientSideComponentManifest): void {\r\n      switch (manifest.componentType) {\r\n        case 'WebPart':\r\n          // tslint:disable-next-line:no-any\r\n          this._localizeWebPartManifest(manifest as IClientSideWebPartManifest<any>);\r\n          break;\r\n\r\n        case 'Application':\r\n          this._localizeApplicationManifest(manifest as IClientSideApplicationManifest);\r\n          break;\r\n      }\r\n  }\r\n\r\n  /**\r\n   * Perform some final fixup on manifests.\r\n   */\r\n  private _doFinalManifestFixup(manifest: IClientSideComponentManifest): void {\r\n    if (manifest.componentType === 'Application') {\r\n      const applicationManifest: IClientSideApplicationManifest = manifest as IClientSideApplicationManifest;\r\n      if (!applicationManifest.preloadComponents) {\r\n        applicationManifest.preloadComponents = [];\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Localizes a WebPart manifest. That includes title, description and group\r\n   * for all preconfigured entries\r\n   */\r\n  // tslint:disable-next-line:no-any\r\n  private _localizeWebPartManifest(manifest: IClientSideWebPartManifest<any>): void {\r\n    // tslint:disable-next-line:no-any\r\n    manifest.preconfiguredEntries.forEach((entry: IClientSideWebPartManifestEntry<any>) => {\r\n        entry.title = this._localizeString(entry.title);\r\n        entry.description = this._localizeString(entry.description);\r\n        if (entry.group) {\r\n          entry.group = this._localizeString(entry.group);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Localizes an Application manifest. This includes title and description of the Application\r\n   */\r\n  private _localizeApplicationManifest(manifest: IClientSideApplicationManifest): void {\r\n      manifest.title = this._localizeString(manifest.title);\r\n      manifest.description = this._localizeString(manifest.description);\r\n  }\r\n\r\n  /**\r\n   * Localizes a string with an id in the web $moduleName:expression;\r\n   * If the string to localize is not based on an id, it returns the input param untouched.\r\n   */\r\n  private _localizeString(stringToLocalize: ILocalizedString): ILocalizedString {\r\n    // If there is no id, assume the property is either not localized, or the localized values are\r\n    //  hardcoed.\r\n    if (!stringToLocalize.id) {\r\n      return stringToLocalize;\r\n    }\r\n\r\n    const regex: RegExp = /^(?:\\$)([^:]+)(?:\\:)(.+)(?:\\;)$/; // Test $<name>:<expr>;\r\n    const matches: RegExpMatchArray = stringToLocalize.id.match(regex);\r\n\r\n    if (matches && matches.length === 3) {\r\n      this.logVerbose(`Localizing string '${matches[0]}'`);\r\n      return this._localizeStringInternal(\r\n        /* resourceName */ matches[1],\r\n        /* expression */ matches[2],\r\n        /* stringId */ matches[0]);\r\n    } else {\r\n      this.logError(`String id '${stringToLocalize.id}' has wrong format. It is not $<moduleName>:<expression>;`);\r\n      // Return an empty ILocalizedString\r\n      return {\r\n        default: ''\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Localizes a string where it's been verified that the id follows the schema.\r\n   * @param resourceName Name of the resource to load\r\n   * @param expression Expression to be evaluated on the resource\r\n   * @stringId Original id for the string. Used for logging purposes only\r\n   * @returns Localized string with all found locales\r\n   */\r\n  private _localizeStringInternal(resourceName: string, expression: string, stringId: string): ILocalizedString {\r\n    const localizedString: ILocalizedString = {\r\n      default: ''\r\n    };\r\n\r\n    const resources: ILocaleMap = this.properties.discoveredLocalizedResources[resourceName];\r\n    if (resources) {\r\n      for (const locale in resources) {\r\n        const resource: any = this._getResource(resources[locale]); // tslint:disable-line:no-any\r\n        const normalizedLocaleName: string = this.normalizeLocaleName(locale);\r\n\r\n        if (resource) {\r\n          const evalString: string = expression.replace(resourceName, 'r');\r\n          let stringFromExpression: string = undefined;\r\n\r\n          try {\r\n            /* tslint:disable:no-any */\r\n            const shallowDiscoverProperty: (resource: any, propertyName: string) => string =\r\n              (resource: any, propertyName: string): string => {\r\n            /* tslint:enable:no-any */\r\n              const foundBuckets: string[] = [];\r\n              let firstFoundValue: string;\r\n              for (const bucketName in resource) {\r\n                if (resource[bucketName] && resource[bucketName][propertyName]) {\r\n                  firstFoundValue = resource[bucketName][propertyName];\r\n                  foundBuckets.push(bucketName);\r\n                }\r\n              }\r\n\r\n              if (!firstFoundValue) {\r\n                throw new Error(`A value for a property \"${propertyName}\" was not found inside any ` +\r\n                                `property of the resource object.`);\r\n              }\r\n\r\n              if (foundBuckets.length !== 1) {\r\n                throw new Error(`A value for a property \"${propertyName}\" was found inside multiple ` +\r\n                                `properties of the resource object and must be disambiguated to be selected.`);\r\n              }\r\n\r\n              return firstFoundValue;\r\n            };\r\n\r\n            // We support any format for the localized resource,\r\n            // so we rely on the developer telling the code how to access it.\r\n            // Eval generates risk. In order to minimize it, only one expression is allowed.\r\n            // tslint:disable-next-line:no-eval\r\n            stringFromExpression = eval(\r\n              'function getLocalizedString(r) {' +\r\n                'return ' + evalString +\r\n              '}' +\r\n              'getLocalizedString(resource)');\r\n          } catch (error) {\r\n            this.logWarning(`Problem extracting id '${stringId}' in locale '${normalizedLocaleName}'. ` +\r\n                            `ERror: ${error}`);\r\n          }\r\n\r\n          if (stringFromExpression) {\r\n            localizedString[normalizedLocaleName] = stringFromExpression;\r\n          } else {\r\n            this.logWarning(`Couldn't find id '${stringId}' in locale '${normalizedLocaleName}'`);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n        this.logError(`Localized module '${resourceName}' not found`);\r\n    }\r\n    return localizedString;\r\n  }\r\n\r\n  /**\r\n   * Gets a resource file from a path.\r\n   */\r\n  // tslint:disable-next-line:no-any\r\n  private _getResource(resourcePath: string): any {\r\n    if (!this._localizedResourcesCache[resourcePath]) {\r\n      this._cacheResource(resourcePath);\r\n    }\r\n    return this._localizedResourcesCache[resourcePath];\r\n  }\r\n\r\n  /**\r\n   * Caches a resource file from a path.\r\n   * Because this execute in the build tools, function define is not defined,\r\n   * so a fake function is created that will return the default element of the module.\r\n   */\r\n  private _cacheResource(resourcePath: string): any { // tslint:disable-line:no-any\r\n    // Fake a define method to get the localizedResource module\r\n    // tslint:disable-next-line:no-unused-variable no-any\r\n    function define(name: any, deps: any, callback: any): any {\r\n      if (typeof name !== 'string') {\r\n        callback = deps;\r\n        deps = name;\r\n        name = undefined;\r\n      }\r\n\r\n      if (!Array.isArray(deps)) {\r\n        callback = deps;\r\n        deps = undefined;\r\n      }\r\n\r\n      const exports: { default?: any } = {}; // tslint:disable-line:no-any\r\n      const result: any = callback([undefined, exports]); // tslint:disable-line:no-any\r\n      return result.default || result || exports.default;\r\n    }\r\n\r\n    try {\r\n      // We can't get the localized module dynamically at this point.\r\n      // Reading and executing the module file in order to get the module\r\n      const resourcesFile: string = fs.readFileSync(resourcePath, 'utf8');\r\n      // tslint:disable-next-line:no-eval\r\n      const resource: any = eval(resourcesFile); // tslint:disable-line:no-any\r\n\r\n      this._localizedResourcesCache[resourcePath] = resource;\r\n    } catch (error) {\r\n      this.logError(`Can't get resource '${resourcePath}'. ` +\r\n        \"Check that the module is correct and has doesn't require any external module.\");\r\n    }\r\n  }\r\n\r\n  private _generateManifest(deployEntry: IDeployEntry,\r\n                            loaderConfig: IClientSideComponentLoaderConfiguration): IClientSideComponentManifest {\r\n    const manifest: IClientSideComponentManifest = cloneDeep(deployEntry.manifest);\r\n\r\n    delete manifest[schemaPropertyName];\r\n    manifest.loaderConfig = loaderConfig;\r\n\r\n    return manifest;\r\n  }\r\n\r\n  private _generateLoaderConfig(deployModules: IDeployModules,\r\n                                internalModuleBaseUrls: string[],\r\n                                resolvePath: (path: string | IPath) => string | IPath,\r\n                                defaultLocaleOverride?: string): IClientSideComponentLoaderConfiguration {\r\n    const scriptResources: { [name: string]: IModuleConfiguration } = {};\r\n\r\n    if (deployModules.pathModules) {\r\n      deployModules.pathModules.forEach((module: IPathModuleConfiguration, id: string) => {\r\n        // Clone the module so we can make changes to it\r\n        module = cloneDeep(module);\r\n        module.type = 'path';\r\n        scriptResources[id] = module;\r\n\r\n        module.path = resolvePath(module.path);\r\n      });\r\n    }\r\n\r\n    if (deployModules.localizedPathModules) {\r\n      deployModules.localizedPathModules.forEach((module: ILocalizedPathModuleConfiguration, id: string) => {\r\n        // Clone the module so we can make changes to it\r\n        module = cloneDeep(module);\r\n        module.type = 'localizedPath';\r\n        scriptResources[id] = module;\r\n\r\n        const oldPaths: { [locale: string]: string | IPath } = module.paths;\r\n        module.paths = {};\r\n\r\n        const lowercaseLocales: { [lowercaseLocale: string]: string } = {};\r\n        for (const locale in oldPaths) {\r\n          const path: string | IPath = oldPaths[locale];\r\n          const lowercaseLocale: string = locale.toLowerCase();\r\n\r\n          const normalizedLocale: string = this.normalizeLocaleName(lowercaseLocale);\r\n          lowercaseLocales[lowercaseLocale] = normalizedLocale;\r\n\r\n          module.paths[normalizedLocale] = resolvePath(path);\r\n        }\r\n\r\n        const lowercaseDefaultLocaleOverride: string = (defaultLocaleOverride && defaultLocaleOverride.toLowerCase)\r\n                                                          ? defaultLocaleOverride.toLowerCase()\r\n                                                          : undefined;\r\n        if (lowercaseDefaultLocaleOverride && lowercaseDefaultLocaleOverride in lowercaseLocales) {\r\n          module.defaultPath = module.paths[lowercaseLocales[defaultLocaleOverride]];\r\n          delete module.paths;\r\n        } else {\r\n          module.defaultPath = resolvePath(module.defaultPath);\r\n        }\r\n      });\r\n    }\r\n\r\n    if (deployModules.componentModules) {\r\n      deployModules.componentModules.forEach((module: IComponentModuleConfiguration, id: string) => {\r\n        // Clone the module so we can make changes to it\r\n        module = cloneDeep(module);\r\n        module.type = 'component';\r\n        scriptResources[id] = module;\r\n\r\n        if (module.failoverPath) {\r\n          module.failoverPath = resolvePath(module.failoverPath);\r\n        }\r\n      });\r\n    }\r\n\r\n    if (!(deployModules.entryModuleId in scriptResources)) {\r\n      this.logError(`Entry module \"${deployModules.entryModuleId}\" is missing a definition. The manifest will not ` +\r\n                    'load');\r\n    }\r\n\r\n    const result: IClientSideComponentLoaderConfiguration = {\r\n      entryModuleId: deployModules.entryModuleId,\r\n      internalModuleBaseUrls: internalModuleBaseUrls.map((url: string) => ensureTrailingSlash(url)),\r\n      scriptResources: scriptResources\r\n    };\r\n\r\n    return result;\r\n  }\r\n\r\n  private _resolveDebugPath(assetPath: string | IPath): string | IPath {\r\n    if (!assetPath) {\r\n      return undefined;\r\n    }\r\n\r\n    if (typeof assetPath === 'string') {\r\n      // If this is a full URL, don't change it\r\n      if (isUrl(assetPath)) {\r\n        return assetPath;\r\n      } else {\r\n        return path.relative(this.buildConfig.rootPath, assetPath).replace(/\\\\/g, '/');\r\n      }\r\n    } else {\r\n      return {\r\n        default: this._resolveDebugPath(assetPath.default) as string,\r\n        debug: this._resolveDebugPath(assetPath.debug) as string\r\n      };\r\n    }\r\n  }\r\n\r\n  private _resolveProductionPath(assetPath: string | IPath): string | IPath {\r\n    if (!assetPath) {\r\n      return undefined;\r\n    }\r\n\r\n    if (typeof assetPath === 'string') {\r\n      const assetPathStr: string = assetPath as string;\r\n\r\n      // If this is a full URL, don't change it\r\n      if (isUrl(assetPathStr)) {\r\n        return assetPathStr;\r\n      } else if (this.taskConfig.cdnUrlPrefix) {\r\n        return joinUrlSegments(this.taskConfig.cdnUrlPrefix, assetPathStr);\r\n      } else {\r\n        return trimLeadingSlashes(assetPathStr);\r\n      }\r\n    } else {\r\n      return {\r\n        default: this._resolveProductionPath(assetPath.default) as string,\r\n        debug: this._resolveProductionPath(assetPath.debug) as string\r\n      };\r\n    }\r\n  }\r\n\r\n  private _uppercaseFirstLetter(str: string): string {\r\n    return `${str.slice(0, 1).toUpperCase()}${str.slice(1)}`;\r\n  }\r\n}"],"sourceRoot":"..\\..\\src"}