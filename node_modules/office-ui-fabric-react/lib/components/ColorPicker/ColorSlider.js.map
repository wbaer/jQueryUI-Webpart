{"version":3,"sources":["components/ColorPicker/ColorSlider.tsx"],"names":[],"mappings":"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","file":"components/ColorPicker/ColorSlider.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  EventGroup,\r\n  autobind,\r\n  css\r\n} from '../../Utilities';\r\n\r\nexport interface IColorSliderProps {\r\n  minValue?: number;\r\n  maxValue?: number;\r\n  initialValue?: number;\r\n  thumbColor?: string;\r\n  overlayStyle?: any;\r\n  onChanged?: (newValue: number) => void;\r\n\r\n  className?: string;\r\n  style?: any;\r\n}\r\n\r\nexport interface IColorSliderState {\r\n  isAdjusting?: boolean;\r\n  origin?: { x: number, originalValue: number };\r\n  currentValue?: number;\r\n}\r\n\r\nexport class ColorSlider extends React.Component<IColorSliderProps, IColorSliderState> {\r\n  public static defaultProps = {\r\n    minValue: 0,\r\n    maxValue: 100,\r\n    thumbColor: 'inherit',\r\n    initialValue: 0\r\n  };\r\n\r\n  public refs: {\r\n    [key: string]: React.ReactInstance;\r\n    root: HTMLElement;\r\n  };\r\n\r\n  private _events: EventGroup;\r\n\r\n  constructor(props: IColorSliderProps) {\r\n    super(props);\r\n\r\n    let { initialValue } = this.props;\r\n\r\n    this._events = new EventGroup(this);\r\n\r\n    this.state = {\r\n      isAdjusting: false,\r\n      origin: null,\r\n      currentValue: initialValue\r\n    };\r\n  }\r\n\r\n  public componentWillUnmount() {\r\n    this._events.dispose();\r\n  }\r\n\r\n  public render() {\r\n    let { className, minValue, maxValue, overlayStyle } = this.props;\r\n    let { currentValue, isAdjusting } = this.state;\r\n\r\n    let currentPercentage = 100 * (currentValue - minValue) / (maxValue - minValue);\r\n\r\n    return (\r\n      <div\r\n        ref='root'\r\n        className={ css('ms-ColorPicker-slider', className, {\r\n          'is-adjusting': isAdjusting\r\n        }) }\r\n        onMouseDown={ this._onMouseDown }>\r\n        <div className='ms-ColorPicker-sliderOverlay' style={ overlayStyle } />\r\n        <div className='ms-ColorPicker-thumb is-slider' style={ { left: currentPercentage + '%' } } />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  @autobind\r\n  private _onMouseDown(ev: React.MouseEvent<HTMLElement>) {\r\n    this._events.on(window, 'mousemove', this._onMouseMove, true);\r\n    this._events.on(window, 'mouseup', this._onMouseUp, true);\r\n\r\n    this._onMouseMove(ev);\r\n  }\r\n\r\n  @autobind\r\n  private _onMouseMove(ev: React.MouseEvent<HTMLElement>) {\r\n    let { onChanged, minValue, maxValue } = this.props;\r\n    let rectSize = this.refs.root.getBoundingClientRect();\r\n\r\n    let currentPercentage = (ev.clientX - rectSize.left) / rectSize.width;\r\n    let newValue = Math.min(maxValue, Math.max(minValue, currentPercentage * maxValue));\r\n\r\n    this.setState({\r\n      isAdjusting: true,\r\n      currentValue: newValue\r\n    });\r\n\r\n    if (onChanged) {\r\n      onChanged(newValue);\r\n    }\r\n\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n  }\r\n\r\n  @autobind\r\n  private _onMouseUp(ev: React.MouseEvent<HTMLElement>) {\r\n    this._events.off();\r\n\r\n    this.setState({\r\n      isAdjusting: false,\r\n      origin: null\r\n    });\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}