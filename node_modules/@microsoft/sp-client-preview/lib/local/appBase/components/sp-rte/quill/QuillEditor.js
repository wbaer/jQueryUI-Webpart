"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var office_ui_fabric_react_1 = require("office-ui-fabric-react");
var sp_telemetry_1 = require("@ms/sp-telemetry");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var QuillLoader_1 = require("./QuillLoader");
require("./QuillEditor.scss");
var RteStrings_resx_1 = require("../loc/RteStrings.resx");
var odsp_utilities_bundle_1 = require("@ms/odsp-utilities-bundle");
var HTMLCleanupUtils_1 = require("../../../../utilities/HTMLCleanupUtils");
var QuillEditor = (function () {
    function QuillEditor(config, currentHTML, editorElement, selectionChangeCallback, textChangeCallback) {
        this._platform = new odsp_utilities_bundle_1.PlatformDetection();
        this._config = config;
        this._editorElement = editorElement;
        this._handleSelectionChange = selectionChangeCallback;
        this._handleTextChange = textChangeCallback;
        this._initialize(currentHTML);
    }
    QuillEditor.createNewEditor = function (config, currentHTML, editorElement, selectionChangeCallback, textChangeCallback, startupFocus) {
        return new Promise(function (resolve) {
            QuillEditor.moduleLoader.loadModule().then(function () {
                var editor = new QuillEditor(config, currentHTML, editorElement, selectionChangeCallback, textChangeCallback);
                resolve(editor);
            });
        });
    };
    QuillEditor._createQosScope = function (scenario) {
        return new sp_telemetry_1._QosMonitor("Quill" + scenario);
    };
    QuillEditor._handleMonitoredException = function (qos, err) {
        qos.writeUnexpectedFailure('Exception', err);
    };
    QuillEditor.prototype.clearFormatting = function (start, end) {
        var formats = {};
        for (var _i = 0, _a = this._config.supportedFormatsArray; _i < _a.length; _i++) {
            var format = _a[_i];
            formats[format.editorKey] = false;
        }
        this.format(start, end, formats);
    };
    QuillEditor.prototype.destroy = function () {
        if (this._quill) {
            var previousHTML = this.getHTML();
            this._quill = undefined;
            return previousHTML;
        }
        return undefined;
    };
    QuillEditor.prototype.focus = function () {
        if (this._editorElement && this._editorElement.setActive) {
            this._quillEditorElement.setActive();
        }
        else {
            this._quill.focus();
        }
    };
    QuillEditor.prototype.formatTable = function (format, target) {
    };
    QuillEditor.prototype.format = function (start, end, formats, applyAllFormatsToLine) {
        var lineFormats = applyAllFormatsToLine ? formats : {};
        var nonLineFormats = {};
        if (!applyAllFormatsToLine) {
            var _loop_1 = function (formateditorKey) {
                var format = this_1._config.supportedFormatsArray
                    .filter(function (format) { return format.editorKey === formateditorKey; })[0];
                if (format && format.isLine) {
                    lineFormats[format.editorKey] = formats[format.editorKey];
                }
                else {
                    nonLineFormats[format.editorKey] = formats[format.editorKey];
                }
            };
            var this_1 = this;
            for (var formateditorKey in formats) {
                _loop_1(formateditorKey);
            }
        }
        this._quill.formatLine(start, end - start, lineFormats);
        if (!applyAllFormatsToLine) {
            if (nonLineFormats.hasOwnProperty('link') &&
                this.isFormatAppliedToRange(start, end, this._config.formats.get('link'))) {
                if (start === end) {
                    var linkElement = this._findWrappingElementByTagName(start, 'A');
                    if (linkElement) {
                        if (nonLineFormats['link']) {
                            linkElement.setAttribute('href', nonLineFormats['link']);
                            linkElement.setAttribute('target', '_blank');
                        }
                        else {
                            var container = linkElement.parentElement;
                            if (container) {
                                var textNode = document.createTextNode(linkElement.textContent);
                                container.insertBefore(textNode, linkElement);
                                container.removeChild(linkElement);
                            }
                        }
                        nonLineFormats['link'] = undefined;
                    }
                }
                else if (nonLineFormats['link']) {
                    var linkElement = void 0;
                    var linkAtEnd = this._findWrappingElementByTagName(end, 'A');
                    if (end - start > 1) {
                        var linkAtStart = this._findWrappingElementByTagName(start + 1, 'A');
                        linkElement = linkAtStart && linkAtEnd && linkAtStart.isEqualNode(linkAtEnd) ? linkAtEnd : undefined;
                    }
                    else {
                        linkElement = linkAtEnd;
                    }
                    if (linkElement) {
                        linkElement.setAttribute('href', nonLineFormats['link']);
                        linkElement.setAttribute('target', '_blank');
                        nonLineFormats['link'] = undefined;
                    }
                }
            }
            if (start === end) {
                for (var format in nonLineFormats) {
                    this._quill.format(format, nonLineFormats[format]);
                }
            }
            else {
                this._quill.formatText(start, end - start, nonLineFormats);
            }
        }
    };
    QuillEditor.prototype.getBounds = function (position) {
        return this._quill.getBounds(position);
    };
    QuillEditor.prototype.getFormatValue = function (start, end, format) {
        if (format.key === 'link') {
            var linkElement = void 0;
            var linkAtEnd = this._findWrappingElementByTagName(end, 'A');
            if (end - start > 1) {
                var linkAtStart = this._findWrappingElementByTagName(start + 1, 'A');
                linkElement = linkAtStart && linkAtEnd && linkAtStart.isEqualNode(linkAtEnd) ? linkAtEnd : undefined;
            }
            else {
                linkElement = linkAtEnd;
            }
            return linkElement ? linkAtEnd.getAttribute('href') : undefined;
        }
        else {
            var activeFormats = this._quill.getFormat(start, end);
            return activeFormats[format.editorKey];
        }
    };
    QuillEditor.prototype.getSelection = function () {
        var range = this._quill.getSelection();
        return range ? {
            start: range.index,
            end: range.index + range.length
        } : undefined;
    };
    QuillEditor.prototype.getText = function (range) {
        return range ?
            this._quill.getText(range.start, range.end - range.start) :
            this._quill.getText();
    };
    QuillEditor.prototype.getHTML = function () {
        return this._quillEditorElement ? this._quillEditorElement.innerHTML : '';
    };
    QuillEditor.prototype.getEditorType = function () {
        return 'Quill';
    };
    QuillEditor.prototype.isFormatAppliedToRange = function (start, end, format) {
        var activeFormats = this._quill.getFormat(start, end - start);
        return format.editorValue !== undefined ?
            activeFormats[format.editorKey] === format.editorValue :
            activeFormats.hasOwnProperty(format.editorKey);
    };
    QuillEditor.prototype.setSelection = function (range) {
        this._quill.setSelection(range.start, range.end - range.start);
    };
    QuillEditor.prototype._findWrappingElementByTagName = function (position, tagName) {
        if (this._quillModule && tagName === 'A') {
            var _linkFormat = this._quillModule.import('formats/link');
            var link = this._quill.scroll.descendants(_linkFormat, Math.max(0, position - 1))[0];
            return link ? link.domNode : undefined;
        }
        return undefined;
    };
    QuillEditor.prototype._handleSelectionChangeConvert = function (range) {
        var newRange = range ? {
            start: range.index,
            end: range.index + range.length
        } : undefined;
        this._handleSelectionChange(newRange);
    };
    QuillEditor.prototype._addMatcher = function (quill, tagName, formatName, quillModule) {
        quill.clipboard.addMatcher(tagName, function (node, delta) {
            try {
                sp_telemetry_1._EngagementLogger.logEvent(formatName + '.Paste');
                return delta.compose(new quillModule.imports.delta().retain(delta.length(), { formatName: true }));
            }
            catch (e) {
                return delta;
            }
        });
    };
    QuillEditor.prototype._initialize = function (currentHTML) {
        var _this = this;
        QuillEditor.moduleLoader.loadModule().then(function (quillModule) {
            var quillFormatKeys = _this._config.supportedFormatsArray
                .filter(function (format) { return format.isEditorNative; })
                .map(function (format) { return format.editorKey; })
                .filter(function (formatKey, index, self) { return self.indexOf(formatKey) === index; }); 
            _this._quillModule = quillModule;
            var quill = new quillModule(_this._editorElement, {
                formats: quillFormatKeys,
                readOnly: false,
                styles: false,
                placeholder: RteStrings_resx_1.default.TextWebPartPlaceholder
            });
            var container = document.createElement('DIV');
            container.innerHTML = currentHTML;
            var divs = container.querySelectorAll('div');
            for (var i = 0; i < divs.length; i++) {
                var div = divs[i];
                var newElement = div.classList.contains('quote-true') ?
                    document.createElement('BLOCKQUOTE') :
                    document.createElement('P');
                div.classList.remove('quote-true');
                for (var j = 0; j < div.classList.length; j++) {
                    newElement.classList.add(div.classList[j]);
                }
                if (div.hasAttribute('style')) {
                    newElement.setAttribute('style', div.getAttribute('style'));
                }
                newElement.innerHTML = div.innerHTML;
                div.parentElement.insertBefore(newElement, div);
                div.parentElement.removeChild(div);
            }
            var newTags = { 'b': 'strong', 'i': 'em' };
            for (var tag in newTags) {
                var elements = container.querySelectorAll(tag);
                for (var i = 0; i < elements.length; i++) {
                    var element = elements[i];
                    var newElement = document.createElement(newTags[tag]);
                    newElement.innerHTML = element.innerHTML;
                    element.parentElement.insertBefore(newElement, element);
                    element.parentElement.removeChild(element);
                }
            }
            currentHTML = HTMLCleanupUtils_1.StripOutNewLinesAndSpacesFromInnerHTML(container.innerHTML);
            _this._quillEditorElement = _this._editorElement.querySelector('.ql-editor');
            _this._quillEditorElement.innerHTML = currentHTML;
            quill.on('text-change', _this._handleTextChange);
            quill.on('selection-change', _this._handleSelectionChangeConvert);
            _this._quill = quill;
            if (!sp_core_library_1._SPKillSwitch.isActivated(sp_core_library_1.Guid.tryParse('b5f407f5-9f8c-4def-850a-32438487ca2d'), '10/16/2016', 'QuillPasteMatchers')) {
                quill.clipboard.addMatcher('h1', function (node, delta) {
                    try {
                        sp_telemetry_1._EngagementLogger.logEvent('h1.Paste');
                        return delta.compose(new quillModule.imports.delta().retain(delta.length(), { header: 2 }));
                    }
                    catch (e) {
                        return delta;
                    }
                });
                _this._addMatcher(quill, 'p[class*="MsoQuote"]', 'blockquote', quillModule);
                _this._addMatcher(quill, 'a', 'link', quillModule);
                _this._addMatcher(quill, 'table', 'Table', quillModule);
                _this._addMatcher(quill, 'img', 'Image', quillModule);
                quill.clipboard.addMatcher('p[class*="MsoList"]', function (node, delta) {
                    var qos = QuillEditor._createQosScope('PasteMsoList');
                    try {
                        var style = node.getAttribute('style');
                        var x = 1;
                        var maxLevel = 10; 
                        if (style && style.indexOf('level') !== -1) {
                            while (style.indexOf('level' + x) === -1 && x <= maxLevel) {
                                ++x;
                            }
                        }
                        else {
                            qos.writeExpectedFailure('NonLevelListFormat',  undefined, { 'style': style });
                        }
                        if (node.firstChild.nodeType === Node.COMMENT_NODE) {
                            node.removeChild(node.firstChild);
                        }
                        var type = 'ordered';
                        var firstChild = node.firstChild;
                        if (/mso-list\s*:\s*Ignore/i.test(style) ||
                            firstChild.nodeType !== Node.TEXT_NODE &&
                                !/^(:?\s|&nbsp;)+$/.test(firstChild.textContent) &&
                                firstChild.nextSibling.nodeType !== Node.TEXT_NODE) {
                            type = 'bullet';
                        }
                        sp_telemetry_1._EngagementLogger.logEvent(type + 'ListItem.Paste');
                        var attr = { list: type };
                        if (x > 1) {
                            attr.indent = x - 1;
                        }
                        var textContent = node.textContent;
                        var deltaLength = delta.length();
                        var length_1 = deltaLength - textContent.length;
                        var res = textContent.match(/^\s*\S+\s*/);
                        if (res && res[0]) {
                            length_1 += res[0].length;
                        }
                        var tempDelta = delta.compose(new quillModule.imports.delta().delete(length_1 - 1));
                        delta = tempDelta.compose(new quillModule.imports.delta().retain(tempDelta.length(), attr));
                        qos.writeSuccess();
                    }
                    catch (e) {
                        QuillEditor._handleMonitoredException(qos, e);
                    }
                    return delta;
                });
            }
        });
    };
    return QuillEditor;
}());
QuillEditor.moduleLoader = new QuillLoader_1.default();
__decorate([
    office_ui_fabric_react_1.autobind
], QuillEditor.prototype, "focus", null);
__decorate([
    office_ui_fabric_react_1.autobind
], QuillEditor.prototype, "format", null);
__decorate([
    office_ui_fabric_react_1.autobind
], QuillEditor.prototype, "getSelection", null);
__decorate([
    office_ui_fabric_react_1.autobind
], QuillEditor.prototype, "_findWrappingElementByTagName", null);
__decorate([
    office_ui_fabric_react_1.autobind
], QuillEditor.prototype, "_handleSelectionChangeConvert", null);
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = QuillEditor;
