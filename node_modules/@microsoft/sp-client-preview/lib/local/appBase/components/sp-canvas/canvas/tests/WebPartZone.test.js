"use strict";
var chai_1 = require("chai");
var enzyme_1 = require("enzyme");
var React = require("react");
var CanvasControlType_1 = require("../canvasControl/CanvasControlType");
var CanvasStore_1 = require("../canvasComponent/CanvasStore");
var CanvasA11y_1 = require("../../a11y/CanvasA11y");
var WebPartZone_1 = require("../webPartZone/WebPartZone");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_page_context_1 = require("@microsoft/sp-page-context");
var sp_http_1 = require("@microsoft/sp-http");
describe('WebPart Zone tests', function () {
    var webPartZoneElement;
    var mockProps;
    var rootScope = sp_core_library_1.ServiceScope.startNewRoot();
    rootScope.provide(sp_http_1.SPHttpClient.serviceKey, new sp_http_1.SPHttpClient(rootScope));
    rootScope.provide(sp_page_context_1.PageContext.serviceKey, new sp_page_context_1.PageContext(rootScope));
    rootScope.finish();
    var canvasStore;
    var render;
    var a11yManager;
    var canvasControls = [];
    var onChange;
    var handleCanvasChanged;
    var onDeleteButtonClick;
    var onConfigureButtonClick;
    var webPartZone;
    beforeEach(function () {
        render = sinon.spy();
        onChange = sinon.spy();
        handleCanvasChanged = sinon.spy();
        onDeleteButtonClick = sinon.spy();
        onConfigureButtonClick = sinon.spy();
        canvasStore =
            new CanvasStore_1.default(rootScope, render, sp_core_library_1.DisplayMode.Edit, '', handleCanvasChanged);
        a11yManager = new CanvasA11y_1.CanvasA11yManager(document.createElement('div'), true);
        canvasStore.a11yManager = a11yManager;
        canvasControls = [];
        var webPartManifest = {
            manifestVersion: undefined,
            componentType: 'WebPart',
            id: 'WebPartZoneControl',
            alias: '',
            version: undefined,
            loaderConfig: undefined,
            preconfiguredEntries: undefined
        };
        mockProps = {
            webPartData: undefined,
            webPartId: 'WebPartZoneControl',
            webPartManifest: webPartManifest,
            controlType: CanvasControlType_1.default.WebPartZone,
            displayMode: sp_core_library_1.DisplayMode.Edit,
            id: 'WebPartZoneControl',
            onChange: onChange
        };
        var context = { store: canvasStore };
        webPartZoneElement = enzyme_1.mount(React.createElement(WebPartZone_1.default, mockProps), { context: context });
        webPartZoneElement.setContext(context);
        webPartZone = webPartZoneElement.instance();
    });
    afterEach(function () {
        webPartZoneElement.unmount();
    });
    it('should change the display mode as expected', function (done) {
        webPartZone.setDisplayMode(sp_core_library_1.DisplayMode.Read);
        chai_1.assert.deepEqual(webPartZone.state.displayMode, sp_core_library_1.DisplayMode.Read, 'should change the display mode');
        done();
    });
    it('should serialize the content as expected', function (done) {
        var serializedContent = webPartZone.serialize();
        chai_1.expect(serializedContent).to.be.not.null;
        chai_1.assert.deepEqual(serializedContent.controlType, mockProps.controlType, 'controlType should be the same');
        chai_1.assert.deepEqual(serializedContent.displayMode, mockProps.displayMode, 'displaymode should be the same');
        chai_1.assert.deepEqual(serializedContent.id, mockProps.id, 'id should be the same');
        done();
    });
    it('should delete the webpart when delete button is clicked', function (done) {
        webPartZone.handleDeleteButtonClicked();
        chai_1.expect(webPartZone.context.store.getControl('WebPartZoneControl')).to.be.undefined;
        done();
    });
    it('should return the instance id as expected', function (done) {
        chai_1.assert.deepEqual(webPartZone.instanceId, mockProps.id, 'id should be the same');
        done();
    });
    it('should render the property pane when configure button is clicked', function (done) {
        webPartZone.handleConfigureButtonClicked(true);
        chai_1.expect(document.getElementById('spPropertyPaneContainer')).to.be.not.null;
        done();
    });
});
