{"version":3,"sources":["karma/karma-test-result-reporter.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;GAoBG;;AAEH,2BAA6B;AAC7B,uBAAyB;AA0BzB;;;;;;;GAOG;AACH,kCAAkC;AAClC,IAAM,kBAAkB,GAAkB,UAAU,qBAA6C,EAC7C,MAAqB,EACrB,MAAuB;IACzE,qBAAqB,CAAC,IAAI,CAAC,CAAC;IAE5B,IAAM,WAAW,GAAmB,EAAE,CAAC;IACvC,IAAM,cAAc,GAAqB,MAAc,CAAC,kBAAkB,IAAI,EAAE,CAAC;IACjF,IAAM,UAAU,GAAW,cAAc,CAAC,UAAU;UACtB,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,cAAc,CAAC,UAAU,CAAC,CAAC;UACjF,SAAS,CAAC;IAExC,IAAI,CAAC,cAAc,GAAG,UAAC,OAAiB,EAAE,MAAoB;QAC5D,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC3B,CAAC,CAAC;IAEF,IAAI,CAAC,aAAa,GAAG,UAAC,OAAiB,EAAE,MAAoB;QAC3D,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YACf,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;gBAChD,EAAE,CAAC,aAAa,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC;YAC5D,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF,kBAAkB,CAAC,OAAO,GAAG,CAAC,uBAAuB,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC,6BAA6B;AAEzG,MAAM,CAAC,OAAO,GAAG;IACf,sBAAsB,EAAE,CAAC,MAAM,EAAE,kBAAkB,CAAC;CACrD,CAAC","file":"karma/karma-test-result-reporter.js","sourcesContent":["/**\r\n * This is a karma plugin that can create a report about all test results.\r\n *\r\n * @example\r\n * Configuration in karma.conf.js as below:\r\n *      module.exports = function(config) {\r\n *          // ...\r\n *\r\n *          plugins: configResources.plugins.concat([\r\n *              require('./karma-test-result-reporter')\r\n *          ]),\r\n *\r\n *          reporters: ['test-result'],\r\n *\r\n *          testResultReporter: {\r\n *              outputFile: 'results.json' // defaults to none\r\n *          },\r\n *\r\n *          // ...\r\n *      };\r\n */\r\n\r\nimport * as path from 'path';\r\nimport * as fs from 'fs';\r\nimport { ConfigOptions } from 'karma';\r\n\r\nimport { IReporterConfig } from './karmaTypes';\r\n\r\ninterface IKarmaUtilities {\r\n  normalizeWinPath(path: string): string;\r\n  mkdirIfNotExists(path: string, callback: () => void): void;\r\n}\r\n\r\ninterface IKarmaResult {\r\n}\r\n\r\ninterface IBrowser {\r\n}\r\n\r\ninterface ITestReporter {\r\n  (\r\n    baseReporterDecorator: (context: any) => void, // tslint:disable-line:no-any\r\n    config: ConfigOptions,\r\n    helper: IKarmaUtilities\r\n  ): void;\r\n\r\n  $inject?: string[];\r\n}\r\n\r\n/**\r\n * Create the karma report about test results\r\n *\r\n * @param baseReporterDecorator - A function that takes an object and adds to it methods and properties of karma's\r\n *                                basic reporter\r\n * @param config - The properties from Karma's config.\r\n * @param helper - Karma utility functions\r\n */\r\n// tslint:disable-next-line:no-any\r\nconst testResultReporter: ITestReporter = function (baseReporterDecorator: (context: any) => void,\r\n                                                    config: ConfigOptions,\r\n                                                    helper: IKarmaUtilities): void {\r\n  baseReporterDecorator(this);\r\n\r\n  const testResults: IKarmaResult[] = [];\r\n  const reporterConfig: IReporterConfig = (config as any).testResultReporter || {};\r\n  const outputFile: string = reporterConfig.outputFile\r\n                              ? helper.normalizeWinPath(path.resolve(config.basePath, reporterConfig.outputFile))\r\n                              : undefined;\r\n\r\n  this.onSpecComplete = (browser: IBrowser, result: IKarmaResult) => {\r\n    testResults.push(result);\r\n  };\r\n\r\n  this.onRunComplete = (browser: IBrowser, result: IKarmaResult) => {\r\n    if (outputFile) {\r\n      helper.mkdirIfNotExists(path.dirname(outputFile), () => {\r\n        fs.writeFileSync(outputFile, JSON.stringify(testResults));\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\ntestResultReporter.$inject = ['baseReporterDecorator', 'config', 'helper']; // tslint:disable-line:no-any\r\n\r\nmodule.exports = {\r\n  'reporter:test-result': ['type', testResultReporter]\r\n};\r\n"],"sourceRoot":"..\\..\\src"}