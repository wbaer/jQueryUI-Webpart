{"version":3,"sources":["errorDetection/TaskError.ts"],"names":[],"mappings":"AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;AAE3D,iDAAqD;AAErD;;GAEG;AACH;IAIE,mBAAY,IAAY,EAAE,OAAe;QACvC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC1B,CAAC;IAEM,4BAAQ,GAAf,UAAgB,IAAwB;QACtC,IAAM,YAAY,GAAW,MAAI,IAAI,CAAC,KAAK,WAAM,IAAI,CAAC,QAAQ,MAAG,CAAC;QAClE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;IAChD,CAAC;IAES,iCAAa,GAAvB,UAAwB,YAAoB,EAAE,IAAwB;QACpE,EAAE,CAAC,CAAC,IAAI,KAAK,kCAAkB,CAAC,kBAAkB,CAAC,CAAC,CAAC;YACnD,MAAM,CAAC,qCAAmC,YAAc,CAAC;QAC3D,CAAC;QACD,MAAM,CAAC,YAAY,CAAC;IACtB,CAAC;IACH,gBAAC;AAAD,CApBA,AAoBC,IAAA;;;AAED;;GAEG;AACH;IAAoC,kCAAS;IAK3C,wBAAY,IAAY,EAAE,OAAe,EAAE,IAAY,EAAE,IAAY,EAAE,MAAc;QAArF,YACE,kBAAM,IAAI,EAAE,OAAO,CAAC,SAIrB;QAHC,KAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,KAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,KAAI,CAAC,OAAO,GAAG,MAAM,CAAC;;IACxB,CAAC;IAEM,iCAAQ,GAAf,UAAgB,IAAwB;QACtC,oFAAoF;QACpF,IAAM,YAAY,GAAc,IAAI,CAAC,KAAK,SAAI,IAAI,CAAC,KAAK,SAAI,IAAI,CAAC,OAAO,YAAO,IAAI,CAAC,KAAK,UAAK,IAAI,CAAC,QAAU,CAAC;QAC9G,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;IAChD,CAAC;IACH,qBAAC;AAAD,CAjBA,AAiBC,CAjBmC,SAAS,GAiB5C;AAjBY,wCAAc","file":"errorDetection/TaskError.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { ErrorDetectionMode } from './ErrorDetector';\r\n\r\n/**\r\n * Encapsulates information about an error\r\n */\r\nexport default class TaskError {\r\n  protected _type: string;\r\n  protected _message: string;\r\n\r\n  constructor(type: string, message: string) {\r\n    this._type = type;\r\n    this._message = message;\r\n  }\r\n\r\n  public toString(mode: ErrorDetectionMode): string {\r\n    const errorMessage: string = `[${this._type}] '${this._message}'`;\r\n    return this._appendPrefix(errorMessage, mode);\r\n  }\r\n\r\n  protected _appendPrefix(errorMessage: string, mode: ErrorDetectionMode): string {\r\n    if (mode === ErrorDetectionMode.VisualStudioOnline) {\r\n      return `##vso[task.logissue type=error;]${errorMessage}`;\r\n    }\r\n    return errorMessage;\r\n  }\r\n}\r\n\r\n/**\r\n * TestTaskError extends TaskError\r\n */\r\nexport class BuildTaskError extends TaskError {\r\n  protected _file: string;\r\n  protected _line: number;\r\n  protected _offset: number;\r\n\r\n  constructor(type: string, message: string, file: string, line: number, offset: number) {\r\n    super(type, message);\r\n    this._file = file;\r\n    this._line = line;\r\n    this._offset = offset;\r\n  }\r\n\r\n  public toString(mode: ErrorDetectionMode): string {\r\n    // Example: \"C:\\Project\\Blah.ts(123,1): [tslint] error no-any: 'any' is not allowed\"\r\n    const errorMessage: string = `${this._file}(${this._line},${this._offset}): [${this._type}] ${this._message}`;\r\n    return this._appendPrefix(errorMessage, mode);\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}