"use strict";
var chai_1 = require("chai");
var test_1 = require("@microsoft/sp-core-library/lib/test");
var lodash = require("@microsoft/sp-lodash-subset");
var SPApplicationLoader_1 = require("../SPApplicationLoader");
var SPComponentLoaderProxy_1 = require("../SPComponentLoaderProxy");
var componentConstants = require("../utilities/componentConstants");
var ManifestStore_1 = require("./../stores/ManifestStore");
describe('SPApplicationLoader tests', function () {
    describe('loadApplication()', function () {
        var applicationId = 'd1d91016-032f-456d-98a4-721247c305e8';
        var applicationManifest = {
            manifestVersion: 2,
            componentType: 'Application',
            id: applicationId,
            alias: 'MyApplication',
            version: '1.0.0',
            loaderConfig: {
                internalModuleBaseUrls: ['https://cdn.net/'],
                entryModuleId: 'main.bundle',
                scriptResources: {}
            }
        };
        var platformManifest = {
            manifestVersion: 2,
            componentType: 'Library',
            id: componentConstants.spApplicationBaseComponentId,
            alias: 'Platform',
            version: '1.0.0',
            loaderConfig: {
                internalModuleBaseUrls: ['https://cdn.net/'],
                entryModuleId: 'main.bundle',
                scriptResources: {}
            }
        };
        var fullPreloadedData = {
            clientSideApplicationId: applicationId,
            clientSideApplicationManifest: applicationManifest,
            manifests: [platformManifest],
            spPageContextInfo: test_1.TEST_UNDEFINED
        };
        afterEach(function () {
            ManifestStore_1.default._instance = undefined; 
        });
        it('fails if application manifest is not registered', function (done) {
            ManifestStore_1.default.instance.registerManifests([platformManifest], false);
            var preloadedData = lodash.clone(fullPreloadedData);
            preloadedData.clientSideApplicationManifest = test_1.TEST_UNDEFINED;
            SPApplicationLoader_1.default.loadApplication(preloadedData).catch(function (error) {
                done();
            });
        });
        it('fails if platform manifest is not registered', function (done) {
            ManifestStore_1.default.instance.registerManifests([applicationManifest], false);
            var preloadedData = lodash.clone(fullPreloadedData);
            preloadedData.manifests = [];
            SPApplicationLoader_1.default.loadApplication(preloadedData).catch(function (error) {
                done();
            });
        });
        it('fails if platform fails to load', function (done) {
            ManifestStore_1.default.instance.registerManifests([platformManifest, applicationManifest], false);
            var componentLoader = sinon.mock(SPComponentLoaderProxy_1.default);
            componentLoader.expects('loadComponent').once().withArgs(platformManifest).returns(new Promise(function () { throw new Error(); }) 
            );
            componentLoader.expects('loadComponent').once().withArgs(applicationManifest).returns(new Promise(function (resolve) { return resolve('anything'); }) 
            );
            SPApplicationLoader_1.default.loadApplication(fullPreloadedData).catch(function (error) {
                componentLoader.verify();
                componentLoader.restore();
                done();
            });
        });
        it('fails if application fails to load', function (done) {
            ManifestStore_1.default.instance.registerManifests([platformManifest, applicationManifest], false);
            var componentLoader = sinon.mock(SPComponentLoaderProxy_1.default);
            componentLoader.expects('loadComponent').once().withArgs(platformManifest).returns(new Promise(function (resolve) { return resolve('anything'); }) 
            );
            componentLoader.expects('loadComponent').once().withArgs(applicationManifest).returns(new Promise(function () { throw new Error(); }) 
            );
            SPApplicationLoader_1.default.loadApplication(fullPreloadedData)
                .then(function (app) {
                chai_1.assert.fail();
                done();
            })
                .catch(function (error) {
                componentLoader.verify();
                componentLoader.restore();
                done();
            });
        });
        it('fails if loaded platform is undefined', function (done) {
            ManifestStore_1.default.instance.registerManifests([platformManifest, applicationManifest], false);
            var componentLoader = sinon.mock(SPComponentLoaderProxy_1.default);
            componentLoader.expects('loadComponent').once().withArgs(platformManifest).returns(new Promise(function (resolve) { return resolve(undefined); }) 
            );
            componentLoader.expects('loadComponent').once().withArgs(applicationManifest).returns(new Promise(function (resolve) { return resolve('anything'); }) 
            );
            SPApplicationLoader_1.default.loadApplication(fullPreloadedData)
                .then(function (app) {
                chai_1.assert.fail();
                done();
            })
                .catch(function (error) {
                componentLoader.verify();
                componentLoader.restore();
                done();
            });
        });
        it('fails if loaded application is undefined', function (done) {
            ManifestStore_1.default.instance.registerManifests([platformManifest, applicationManifest], false);
            var componentLoader = sinon.mock(SPComponentLoaderProxy_1.default);
            componentLoader.expects('loadComponent').once().withArgs(platformManifest).returns(new Promise(function (resolve) { return resolve('anything'); }) 
            );
            componentLoader.expects('loadComponent').once().withArgs(applicationManifest).returns(new Promise(function (resolve) { return resolve(undefined); }) 
            );
            SPApplicationLoader_1.default.loadApplication(fullPreloadedData)
                .then(function (app) {
                chai_1.assert.fail();
                componentLoader.restore();
                done();
            })
                .catch(function (error) {
                componentLoader.verify();
                componentLoader.restore();
                done();
            });
        });
        it('fails if shell fails to start', function (done) {
            ManifestStore_1.default.instance.registerManifests([platformManifest, applicationManifest], false);
            var componentLoader = sinon.mock(SPComponentLoaderProxy_1.default);
            componentLoader.expects('loadComponent').once().withArgs(platformManifest).returns(new Promise(function (resolve) { return resolve({
                _spShell: {
                    start: function (application, preloadedData) {
                        return new Promise(function () { throw new Error(); }); 
                    }
                }
            }); }));
            componentLoader.expects('loadComponent').once().withArgs(applicationManifest).returns(new Promise(function (resolve) { return resolve('anything'); }) 
            );
            SPApplicationLoader_1.default.loadApplication(fullPreloadedData)
                .then(function (app) {
                chai_1.assert.fail();
                componentLoader.restore();
                done();
            })
                .catch(function (error) {
                componentLoader.verify();
                componentLoader.restore();
                done();
            });
        });
        it('returns the application', function (done) {
            var application = 'thisIsTheApplication';
            ManifestStore_1.default.instance.registerManifests([platformManifest, applicationManifest], false);
            var componentLoader = sinon.mock(SPComponentLoaderProxy_1.default);
            componentLoader.expects('loadComponent').once().withArgs(platformManifest).returns(new Promise(function (resolve) { return resolve({
                _spShell: {
                    start: function (app, preloadedData) {
                        return new Promise(function (res) { return res(app); }); 
                    }
                }
            }); }));
            componentLoader.expects('loadComponent').once().withArgs(applicationManifest).returns(new Promise(function (resolve) { return resolve(application); }) 
            );
            SPApplicationLoader_1.default.loadApplication(fullPreloadedData)
                .then(function (result) {
                chai_1.assert.equal(result, application);
                componentLoader.verify();
                componentLoader.restore();
                done();
            })
                .catch(function (app) {
                chai_1.assert.fail();
                componentLoader.restore();
                done();
            });
        });
    });
});
