{"version":3,"sources":["utilities/positioning.ts"],"names":[],"mappings":"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","file":"utilities/positioning.js","sourcesContent":["import { DirectionalHint } from '../common/DirectionalHint';\r\nimport {\r\n  IRectangle,\r\n  assign,\r\n  getScrollbarWidth,\r\n  Rectangle\r\n} from '../Utilities';\r\n\r\nexport enum RectangleEdge {\r\n  top = 0,\r\n  bottom = 1,\r\n  left = 2,\r\n  right = 3\r\n}\r\n\r\nlet SLIDE_ANIMATIONS: { [key: number]: string; } = {\r\n  [RectangleEdge.top]: 'slideUpIn20',\r\n  [RectangleEdge.bottom]: 'slideDownIn20',\r\n  [RectangleEdge.left]: 'slideLeftIn20',\r\n  [RectangleEdge.right]: 'slideRightIn20'\r\n};\r\n\r\nexport interface IPositionProps {\r\n\r\n  target?: HTMLElement | MouseEvent;\r\n\r\n  /** The element that the callout should be positioned based on.\r\n   * @deprecated use target instead.\r\n  */\r\n  targetElement?: HTMLElement;\r\n\r\n  /** how the element should be positioned */\r\n  directionalHint?: DirectionalHint;\r\n\r\n  /** The gap between the callout and the target */\r\n  gapSpace?: number;\r\n\r\n  /** The width of the beak. */\r\n  beakWidth?: number;\r\n\r\n  /**\r\n   * The bounding rectangle for which  the contextual menu can appear in.\r\n   */\r\n  bounds?: IRectangle;\r\n\r\n  /**\r\n   * The event that created the contextualmenu.\r\n   * @deprecated use target with event passed in.\r\n   * @default null\r\n   */\r\n  creationEvent?: MouseEvent;\r\n\r\n  /**\r\n   * If true use a point rather than rectangle to position the callout.\r\n   * For example it can be used to position based on a click.\r\n   * @deprecated use target with event passed in\r\n   */\r\n  useTargetPoint?: boolean;\r\n\r\n  /** Point used to position\r\n   * @deprecated use target with event passed in\r\n  */\r\n  targetPoint?: IPoint;\r\n\r\n  /** If true then the beak is visible. If false it will not be shown. */\r\n  isBeakVisible?: boolean;\r\n\r\n  /**\r\n   * If true the position returned will have the menu element cover the target.\r\n   * If false then it will position next to the target;\r\n   */\r\n  coverTarget?: boolean;\r\n\r\n  /**\r\n   * If true the position will not change edges in an attempt to fit the rectangle within bounds.\r\n   * It will still attempt to align it to whatever bounds are given.\r\n   * @default false\r\n   */\r\n  directionalHintFixed?: boolean;\r\n}\r\n\r\nexport interface IPositionInfo {\r\n  calloutPosition: { top: number, left: number };\r\n  beakPosition: { top: number, left: number, display: string };\r\n  directionalClassName: string;\r\n  submenuDirection: DirectionalHint;\r\n}\r\n\r\nexport interface IPoint {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport class PositionData {\r\n  public calloutDirection: RectangleEdge;\r\n  public targetDirection: RectangleEdge;\r\n  public calloutPercent: number;\r\n  public targetPercent: number;\r\n  public beakPercent: number;\r\n  public isAuto: boolean;\r\n\r\n  constructor(calloutDirection: RectangleEdge, targetDirection: RectangleEdge, calloutPercent: number, targetPercent: number, beakPercent: number, isAuto: boolean) {\r\n    this.calloutDirection = calloutDirection;\r\n    this.targetDirection = targetDirection;\r\n    this.calloutPercent = calloutPercent;\r\n    this.targetPercent = targetPercent;\r\n    this.beakPercent = beakPercent;\r\n    this.isAuto = isAuto;\r\n  }\r\n}\r\n\r\n// Currently the beakPercent is set to 50 for all positions meaning that it should tend to the center of the target\r\nlet DirectionalDictionary: { [key: number]: PositionData } = {\r\n  [DirectionalHint.topLeftEdge]: new PositionData(RectangleEdge.bottom, RectangleEdge.top, 0, 0, 50, false),\r\n  [DirectionalHint.topCenter]: new PositionData(RectangleEdge.bottom, RectangleEdge.top, 50, 50, 50, false),\r\n  [DirectionalHint.topRightEdge]: new PositionData(RectangleEdge.bottom, RectangleEdge.top, 100, 100, 50, false),\r\n  [DirectionalHint.topAutoEdge]: new PositionData(RectangleEdge.bottom, RectangleEdge.top, 0, 0, 50, true),\r\n  [DirectionalHint.bottomLeftEdge]: new PositionData(RectangleEdge.top, RectangleEdge.bottom, 0, 0, 50, false),\r\n  [DirectionalHint.bottomCenter]: new PositionData(RectangleEdge.top, RectangleEdge.bottom, 50, 50, 50, false),\r\n  [DirectionalHint.bottomRightEdge]: new PositionData(RectangleEdge.top, RectangleEdge.bottom, 100, 100, 50, false),\r\n  [DirectionalHint.bottomAutoEdge]: new PositionData(RectangleEdge.top, RectangleEdge.bottom, 0, 0, 50, true),\r\n  [DirectionalHint.leftTopEdge]: new PositionData(RectangleEdge.right, RectangleEdge.left, 0, 0, 50, false),\r\n  [DirectionalHint.leftCenter]: new PositionData(RectangleEdge.right, RectangleEdge.left, 50, 50, 50, false),\r\n  [DirectionalHint.leftBottomEdge]: new PositionData(RectangleEdge.right, RectangleEdge.left, 100, 100, 50, false),\r\n  [DirectionalHint.rightTopEdge]: new PositionData(RectangleEdge.left, RectangleEdge.right, 0, 0, 50, false),\r\n  [DirectionalHint.rightCenter]: new PositionData(RectangleEdge.left, RectangleEdge.right, 50, 50, 50, false),\r\n  [DirectionalHint.rightBottomEdge]: new PositionData(RectangleEdge.left, RectangleEdge.right, 100, 100, 50, false)\r\n};\r\nlet CoverDictionary: { [key: number]: PositionData } = {\r\n  [DirectionalHint.topLeftEdge]: new PositionData(RectangleEdge.top, RectangleEdge.top, 0, 0, 50, false),\r\n  [DirectionalHint.topCenter]: new PositionData(RectangleEdge.top, RectangleEdge.top, 50, 50, 50, false),\r\n  [DirectionalHint.topRightEdge]: new PositionData(RectangleEdge.top, RectangleEdge.top, 100, 100, 50, false),\r\n  [DirectionalHint.topAutoEdge]: new PositionData(RectangleEdge.top, RectangleEdge.top, 0, 0, 50, true),\r\n  [DirectionalHint.bottomLeftEdge]: new PositionData(RectangleEdge.bottom, RectangleEdge.bottom, 0, 0, 50, false),\r\n  [DirectionalHint.bottomCenter]: new PositionData(RectangleEdge.bottom, RectangleEdge.bottom, 50, 50, 50, false),\r\n  [DirectionalHint.bottomRightEdge]: new PositionData(RectangleEdge.bottom, RectangleEdge.bottom, 100, 100, 50, false),\r\n  [DirectionalHint.bottomAutoEdge]: new PositionData(RectangleEdge.bottom, RectangleEdge.bottom, 0, 0, 50, true),\r\n  [DirectionalHint.leftTopEdge]: new PositionData(RectangleEdge.left, RectangleEdge.left, 0, 0, 50, false),\r\n  [DirectionalHint.leftCenter]: new PositionData(RectangleEdge.left, RectangleEdge.left, 50, 50, 50, false),\r\n  [DirectionalHint.leftBottomEdge]: new PositionData(RectangleEdge.left, RectangleEdge.left, 100, 100, 50, false),\r\n  [DirectionalHint.rightTopEdge]: new PositionData(RectangleEdge.right, RectangleEdge.right, 0, 0, 50, false),\r\n  [DirectionalHint.rightCenter]: new PositionData(RectangleEdge.right, RectangleEdge.right, 50, 50, 50, false),\r\n  [DirectionalHint.rightBottomEdge]: new PositionData(RectangleEdge.right, RectangleEdge.right, 100, 100, 50, false)\r\n};\r\n\r\nlet OppositeEdgeDictionary: { [key: number]: number } = {\r\n  [RectangleEdge.top]: RectangleEdge.bottom,\r\n  [RectangleEdge.bottom]: RectangleEdge.top,\r\n  [RectangleEdge.right]: RectangleEdge.left,\r\n  [RectangleEdge.left]: RectangleEdge.right,\r\n};\r\nexport function getRelativePositions(\r\n  props: IPositionProps,\r\n  hostElement: HTMLElement,\r\n  calloutElement: HTMLElement): IPositionInfo {\r\n  let beakWidth: number = !props.isBeakVisible ? 0 : props.beakWidth;\r\n  let borderWidth: number = positioningFunctions._getBorderSize(calloutElement);\r\n  let gap: number = positioningFunctions._calculateActualBeakWidthInPixels(beakWidth) / 2 + (props.gapSpace ? props.gapSpace : 0);\r\n  let boundingRect: Rectangle = props.bounds ?\r\n    positioningFunctions._getRectangleFromIRect(props.bounds) :\r\n    new Rectangle(0, window.innerWidth - getScrollbarWidth(), 0, window.innerHeight);\r\n  let targetRect: Rectangle = props.target ? positioningFunctions._getTargetRect(boundingRect, props.target) : positioningFunctions._getTargetRectDEPRECATED(\r\n    boundingRect,\r\n    props.targetElement,\r\n    props.creationEvent,\r\n    props.targetPoint,\r\n    props.useTargetPoint);\r\n  let positionData: PositionData = positioningFunctions._getPositionData(\r\n    props.directionalHint,\r\n    targetRect,\r\n    boundingRect,\r\n    props.coverTarget);\r\n  let positionedCallout: positioningFunctions.ICallout = positioningFunctions._positionCalloutWithinBounds(\r\n    positioningFunctions._getRectangleFromHTMLElement(calloutElement),\r\n    targetRect,\r\n    boundingRect,\r\n    positionData,\r\n    gap,\r\n    props.coverTarget,\r\n    props.directionalHintFixed);\r\n  let beakPositioned: Rectangle = positioningFunctions._positionBeak(beakWidth, positionedCallout, targetRect, borderWidth);\r\n  let finalizedCallout: Rectangle = positioningFunctions._finalizeCalloutPosition(positionedCallout.calloutRectangle, hostElement);\r\n\r\n  return {\r\n    calloutPosition: { top: finalizedCallout.top, left: finalizedCallout.left },\r\n    beakPosition: { top: beakPositioned.top, left: beakPositioned.left, display: 'block' },\r\n    directionalClassName: SLIDE_ANIMATIONS[positionedCallout.targetEdge],\r\n    submenuDirection: positionedCallout.calloutEdge === RectangleEdge.right ? DirectionalHint.leftBottomEdge : DirectionalHint.rightBottomEdge\r\n  };\r\n}\r\n/**\r\n * Get's the maximum height that a rectangle can have in order to fit below or above a target.\r\n * If the directional hint specifies a left or right edge (i.e. leftCenter) it will limit the height to the topBorder\r\n * of the target given.\r\n * If no bounds are provided then the window is treated as the bounds.\r\n */\r\nexport function getMaxHeight(target: HTMLElement | MouseEvent, targetEdge: DirectionalHint, gapSpace: number = 0, bounds?: IRectangle) {\r\n  let mouseTarget: MouseEvent = target as MouseEvent;\r\n  let elementTarget: HTMLElement = target as HTMLElement;\r\n  let targetRect: Rectangle;\r\n  let boundingRectangle = bounds ?\r\n    positioningFunctions._getRectangleFromIRect(bounds) :\r\n    new Rectangle(0, window.innerWidth - getScrollbarWidth(), 0, window.innerHeight);\r\n\r\n  if (mouseTarget.stopPropagation) {\r\n    targetRect = new Rectangle(mouseTarget.clientX, mouseTarget.clientX, mouseTarget.clientY, mouseTarget.clientY);\r\n  } else {\r\n    targetRect = positioningFunctions._getRectangleFromHTMLElement(elementTarget);\r\n  }\r\n\r\n  return positioningFunctions._getMaxHeightFromTargetRectangle(targetRect, targetEdge, gapSpace, boundingRectangle);\r\n}\r\n\r\nexport module positioningFunctions {\r\n\r\n  export interface ICallout {\r\n    calloutRectangle: Rectangle;\r\n    calloutEdge: RectangleEdge;\r\n    targetEdge: RectangleEdge;\r\n    alignPercent: number;\r\n    beakPercent: number;\r\n  }\r\n\r\n  /**\r\n   * If max height is less than zero it returns the bounds height instead.\r\n   */\r\n  export function _getMaxHeightFromTargetRectangle(targetRectangle: Rectangle, targetEdge: DirectionalHint, gapSpace: number, bounds: Rectangle) {\r\n    let maxHeight = 0;\r\n\r\n    switch (targetEdge) {\r\n      case DirectionalHint.bottomAutoEdge:\r\n      case DirectionalHint.bottomCenter:\r\n      case DirectionalHint.bottomLeftEdge:\r\n      case DirectionalHint.bottomRightEdge:\r\n        maxHeight = bounds.bottom - targetRectangle.bottom - gapSpace;\r\n        break;\r\n      case DirectionalHint.topAutoEdge:\r\n      case DirectionalHint.topCenter:\r\n      case DirectionalHint.topLeftEdge:\r\n      case DirectionalHint.topRightEdge:\r\n        maxHeight = targetRectangle.top - bounds.top - gapSpace;\r\n        break;\r\n      default:\r\n        maxHeight = bounds.bottom - targetRectangle.top - gapSpace;\r\n        break;\r\n    }\r\n\r\n    return maxHeight > 0 ? maxHeight : bounds.height;\r\n  }\r\n\r\n  export function _getTargetRect(bounds: Rectangle, target: HTMLElement | MouseEvent) {\r\n    let targetRectangle: Rectangle;\r\n\r\n    if ((target as MouseEvent).preventDefault) {\r\n      let ev: MouseEvent = target as MouseEvent;\r\n      targetRectangle = new Rectangle(ev.clientX, ev.clientX, ev.clientY, ev.clientY);\r\n    } else {\r\n      targetRectangle = _getRectangleFromHTMLElement(target as HTMLElement);\r\n    }\r\n\r\n    if (!_isRectangleWithinBounds(targetRectangle, bounds)) {\r\n      let outOfBounds: RectangleEdge[] = _getOutOfBoundsEdges(targetRectangle, bounds);\r\n\r\n      for (let direction of outOfBounds) {\r\n        targetRectangle[RectangleEdge[direction]] = bounds[RectangleEdge[direction]];\r\n      }\r\n    }\r\n\r\n    return targetRectangle;\r\n  }\r\n\r\n  export function _getTargetRectDEPRECATED(bounds: Rectangle, targetElement?: HTMLElement, ev?: MouseEvent, targetPoint?: IPoint, isTargetPoint?: boolean): Rectangle {\r\n    let targetRectangle: Rectangle;\r\n\r\n    if (isTargetPoint) {\r\n      if (targetPoint) {\r\n        targetRectangle = new Rectangle(targetPoint.x, targetPoint.x, targetPoint.y, targetPoint.y);\r\n      } else {\r\n        targetRectangle = new Rectangle(ev.clientX, ev.clientX, ev.clientY, ev.clientY);\r\n      }\r\n    } else {\r\n      if (!targetElement) {\r\n        if (ev && ev.target) {\r\n          targetRectangle = _getRectangleFromHTMLElement(ev.target as HTMLElement);\r\n        }\r\n\r\n        targetRectangle = new Rectangle();\r\n      } else {\r\n        targetRectangle = _getRectangleFromHTMLElement(targetElement);\r\n      }\r\n    }\r\n\r\n    if (!_isRectangleWithinBounds(targetRectangle, bounds)) {\r\n      let outOfBounds: RectangleEdge[] = _getOutOfBoundsEdges(targetRectangle, bounds);\r\n\r\n      for (let direction of outOfBounds) {\r\n        targetRectangle[RectangleEdge[direction]] = bounds[RectangleEdge[direction]];\r\n      }\r\n    }\r\n\r\n    return targetRectangle;\r\n  }\r\n\r\n  export function _getRectangleFromHTMLElement(element: HTMLElement): Rectangle {\r\n    let clientRect: ClientRect = element.getBoundingClientRect();\r\n\r\n    return new Rectangle(clientRect.left, clientRect.right, clientRect.top, clientRect.bottom);\r\n  }\r\n\r\n  export function _positionCalloutWithinBounds(\r\n    calloutRectangle: Rectangle,\r\n    targetRectangle: Rectangle,\r\n    boundingRectangle: Rectangle,\r\n    directionalInfo: PositionData,\r\n    gap: number = 0,\r\n    coverTarget?: boolean,\r\n    directionalHintFixed?: boolean): ICallout {\r\n    let estimatedRectangle: Rectangle = _moveRectangleToAnchorRectangle(calloutRectangle,\r\n      directionalInfo.calloutDirection,\r\n      directionalInfo.calloutPercent,\r\n      targetRectangle,\r\n      directionalInfo.targetDirection,\r\n      directionalInfo.targetPercent,\r\n      gap);\r\n\r\n    if (_isRectangleWithinBounds(estimatedRectangle, boundingRectangle)) {\r\n      return { calloutRectangle: estimatedRectangle, calloutEdge: directionalInfo.calloutDirection, targetEdge: directionalInfo.targetDirection, alignPercent: directionalInfo.calloutPercent, beakPercent: directionalInfo.beakPercent };\r\n    } else {\r\n      return _getBestRectangleFitWithinBounds(\r\n        estimatedRectangle,\r\n        targetRectangle,\r\n        boundingRectangle,\r\n        directionalInfo,\r\n        gap,\r\n        coverTarget,\r\n        directionalHintFixed);\r\n    }\r\n  }\r\n\r\n  export function _getBestRectangleFitWithinBounds(\r\n    estimatedPosition: Rectangle,\r\n    targetRectangle: Rectangle,\r\n    boundingRectangle: Rectangle,\r\n    directionalInfo: PositionData,\r\n    gap: number,\r\n    coverTarget?: boolean,\r\n    directionalHintFixed?: boolean): ICallout {\r\n    let callout: ICallout = {\r\n      calloutRectangle: estimatedPosition,\r\n      calloutEdge: directionalInfo.calloutDirection,\r\n      targetEdge: directionalInfo.targetDirection,\r\n      alignPercent: directionalInfo.calloutPercent,\r\n      beakPercent: directionalInfo.beakPercent\r\n    };\r\n\r\n    // If it can't possibly fit within the bounds just put it into it's initial position.\r\n    if (!_canRectangleFitWithinBounds(estimatedPosition, boundingRectangle)) {\r\n      return callout;\r\n    }\r\n\r\n    if (!coverTarget && !directionalHintFixed) {\r\n      callout = _flipRectangleToFit(\r\n        callout,\r\n        targetRectangle,\r\n        directionalInfo.targetPercent,\r\n        boundingRectangle,\r\n        gap);\r\n    }\r\n\r\n    let outOfBounds: RectangleEdge[] = _getOutOfBoundsEdges(callout.calloutRectangle, boundingRectangle);\r\n\r\n    for (let direction of outOfBounds) {\r\n      callout.calloutRectangle = _alignEdgeToCoordinate(\r\n        callout.calloutRectangle,\r\n        boundingRectangle[RectangleEdge[direction]],\r\n        direction);\r\n      let adjustedPercent: number = _recalculateMatchingPercents(\r\n        callout.calloutRectangle,\r\n        callout.targetEdge,\r\n        targetRectangle,\r\n        callout.targetEdge,\r\n        directionalInfo.targetPercent);\r\n\r\n      callout.alignPercent = adjustedPercent;\r\n    }\r\n\r\n    return callout;\r\n  }\r\n\r\n  export function _positionBeak(beakWidth: number, callout: ICallout, targetRectangle: Rectangle, border: number): Rectangle {\r\n    let calloutRect: Rectangle = new Rectangle(\r\n      0,\r\n      callout.calloutRectangle.width - border * 2,\r\n      0,\r\n      callout.calloutRectangle.height - border * 2);\r\n    let beakRectangle: Rectangle = new Rectangle(0, beakWidth, 0, beakWidth);\r\n    let recalculatedPercent: number = _recalculateMatchingPercents(\r\n      callout.calloutRectangle,\r\n      callout.calloutEdge,\r\n      targetRectangle,\r\n      callout.targetEdge,\r\n      callout.beakPercent);\r\n    let estimatedTargetPoint: IPoint = _getPointOnEdgeFromPercent(calloutRect, callout.calloutEdge, recalculatedPercent);\r\n\r\n    return _finalizeBeakPosition(beakRectangle, callout, estimatedTargetPoint, border);\r\n  }\r\n\r\n  export function _finalizeBeakPosition(beakRectangle: Rectangle, callout: ICallout, estimatedTargetPoint: IPoint, border: number): Rectangle {\r\n    let beakPixelSize: number = _calculateActualBeakWidthInPixels(beakRectangle.width) / 2;\r\n    let innerRect: Rectangle = null;\r\n    let beakPoint: IPoint = { x: beakRectangle.width / 2, y: beakRectangle.width / 2 };\r\n\r\n    if (callout.calloutEdge === RectangleEdge.bottom || callout.calloutEdge === RectangleEdge.top) {\r\n      innerRect = new Rectangle(beakPixelSize, callout.calloutRectangle.width - beakPixelSize - border * 2, 0, callout.calloutRectangle.height - border * 2);\r\n    } else {\r\n      innerRect = new Rectangle(0, callout.calloutRectangle.width - border * 2, beakPixelSize, callout.calloutRectangle.height - beakPixelSize - border * 2);\r\n    }\r\n\r\n    let finalPoint: IPoint = _getClosestPointOnEdgeToPoint(innerRect, callout.calloutEdge, estimatedTargetPoint);\r\n\r\n    return _movePointOnRectangleToPoint(beakRectangle, beakPoint, finalPoint);\r\n  }\r\n\r\n  export function _getRectangleFromIRect(rect: IRectangle): Rectangle {\r\n    return new Rectangle(rect.left, rect.right, rect.top, rect.bottom);\r\n  }\r\n\r\n  export function _finalizeCalloutPosition(calloutRectangle: Rectangle, hostElement: HTMLElement): Rectangle {\r\n    let hostRect: Rectangle = _getRectangleFromHTMLElement(hostElement);\r\n    let topPosition = calloutRectangle.top - hostRect.top;\r\n    let leftPosition = calloutRectangle.left - hostRect.left;\r\n\r\n    return new Rectangle(leftPosition, leftPosition + calloutRectangle.width, topPosition, topPosition + calloutRectangle.height);\r\n  }\r\n\r\n  /**\r\n   * Finds the percent on the recalculateRect that matches the percent on the target rect based on position.\r\n   */\r\n  export function _recalculateMatchingPercents(recalculateRect: Rectangle, rectangleEdge: RectangleEdge, targetRect: Rectangle, targetEdge: RectangleEdge, targetPercent: number): number {\r\n    let targetPoint: IPoint = _getPointOnEdgeFromPercent(targetRect, targetEdge, targetPercent);\r\n    let adjustedPoint: IPoint = _getClosestPointOnEdgeToPoint(recalculateRect, rectangleEdge, targetPoint);\r\n    let adjustedPercent: number = _getPercentOfEdgeFromPoint(recalculateRect, rectangleEdge, adjustedPoint);\r\n\r\n    if (adjustedPercent > 100) {\r\n      adjustedPercent = 100;\r\n    } else if (adjustedPercent < 0) {\r\n      adjustedPercent = 0;\r\n    }\r\n\r\n    return adjustedPercent;\r\n  }\r\n\r\n  export function _canRectangleFitWithinBounds(rect: Rectangle, boundingRect: Rectangle): boolean {\r\n    if (rect.width > boundingRect.width || rect.height > boundingRect.height) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  export function _isRectangleWithinBounds(rect: Rectangle, boundingRect: Rectangle): boolean {\r\n    if (rect.top < boundingRect.top) {\r\n      return false;\r\n    }\r\n    if (rect.bottom > boundingRect.bottom) {\r\n      return false;\r\n    }\r\n    if (rect.left < boundingRect.left) {\r\n      return false;\r\n    }\r\n    if (rect.right > boundingRect.right) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Gets all of the edges of a rectangle that are outside of the given bounds.\r\n   * If there are no out of bounds edges it returns an empty array.\r\n   */\r\n  export function _getOutOfBoundsEdges(rect: Rectangle, boundingRect: Rectangle): RectangleEdge[] {\r\n    let outOfBounds: RectangleEdge[] = new Array<RectangleEdge>();\r\n\r\n    if (rect.top < boundingRect.top) {\r\n      outOfBounds.push(RectangleEdge.top);\r\n    }\r\n    if (rect.bottom > boundingRect.bottom) {\r\n      outOfBounds.push(RectangleEdge.bottom);\r\n    }\r\n    if (rect.left < boundingRect.left) {\r\n      outOfBounds.push(RectangleEdge.left);\r\n    }\r\n    if (rect.right > boundingRect.right) {\r\n      outOfBounds.push(RectangleEdge.right);\r\n    }\r\n\r\n    return outOfBounds;\r\n  }\r\n\r\n  /**\r\n   * Returns a point on a edge that is x% of the way down it.\r\n   */\r\n  export function _getPointOnEdgeFromPercent(rect: Rectangle, direction: RectangleEdge, percentOfRect: number): IPoint {\r\n    let startPoint: IPoint;\r\n    let endPoint: IPoint;\r\n\r\n    switch (direction) {\r\n      case RectangleEdge.top:\r\n        startPoint = { x: rect.left, y: rect.top };\r\n        endPoint = { x: rect.right, y: rect.top };\r\n        break;\r\n      case RectangleEdge.left:\r\n        startPoint = { x: rect.left, y: rect.top };\r\n        endPoint = { x: rect.left, y: rect.bottom };\r\n        break;\r\n      case RectangleEdge.right:\r\n        startPoint = { x: rect.right, y: rect.top };\r\n        endPoint = { x: rect.right, y: rect.bottom };\r\n        break;\r\n      case RectangleEdge.bottom:\r\n        startPoint = { x: rect.left, y: rect.bottom };\r\n        endPoint = { x: rect.right, y: rect.bottom };\r\n        break;\r\n      default:\r\n        startPoint = { x: 0, y: 0 };\r\n        endPoint = { x: 0, y: 0 };\r\n        break;\r\n    }\r\n\r\n    return _calculatePointPercentAlongLine(startPoint, endPoint, percentOfRect);\r\n  }\r\n\r\n  /**\r\n   * Gets the percent down an edge that a point appears.\r\n   */\r\n  export function _getPercentOfEdgeFromPoint(rect: Rectangle, direction: RectangleEdge, valueOnEdge: IPoint): number {\r\n    switch (direction) {\r\n      case RectangleEdge.top:\r\n      case RectangleEdge.bottom:\r\n\r\n        return rect.width !== 0 ? (valueOnEdge.x - rect.left) / rect.width * 100 : 100;\r\n      case RectangleEdge.left:\r\n      case RectangleEdge.right:\r\n\r\n        return rect.height !== 0 ? (valueOnEdge.y - rect.top) / rect.height * 100 : 100;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Percent is based on distance from left to right or up to down. 0% would be left most, 100% would be right most.\r\n   */\r\n  export function _calculatePointPercentAlongLine(startPoint: IPoint, endPoint: IPoint, percent: number): IPoint {\r\n    let x: number = startPoint.x + ((endPoint.x - startPoint.x) * percent / 100);\r\n    let y: number = startPoint.y + ((endPoint.y - startPoint.y) * percent / 100);\r\n\r\n    return { x: x, y: y };\r\n  }\r\n\r\n  export function _moveTopLeftOfRectangleToPoint(rect: Rectangle, destination: IPoint): Rectangle {\r\n    return new Rectangle(destination.x,\r\n      destination.x + rect.width,\r\n      destination.y,\r\n      destination.y + rect.height);\r\n  }\r\n\r\n  /**\r\n   * Aligns the given edge to the target coordinate.\r\n   */\r\n  export function _alignEdgeToCoordinate(rect: Rectangle, coordinate: number, direction: RectangleEdge): Rectangle {\r\n    switch (direction) {\r\n      case RectangleEdge.top:\r\n\r\n        return _moveTopLeftOfRectangleToPoint(rect, { x: rect.left, y: coordinate });\r\n      case RectangleEdge.bottom:\r\n\r\n        return _moveTopLeftOfRectangleToPoint(rect, { x: rect.left, y: coordinate - rect.height });\r\n      case RectangleEdge.left:\r\n\r\n        return _moveTopLeftOfRectangleToPoint(rect, { x: coordinate, y: rect.top });\r\n      case RectangleEdge.right:\r\n\r\n        return _moveTopLeftOfRectangleToPoint(rect, { x: coordinate - rect.width, y: rect.top });\r\n    }\r\n\r\n    return new Rectangle();\r\n  }\r\n\r\n  /**\r\n   * Moves a point on a given rectangle to the target point. Does not change the rectangles orientation.\r\n   */\r\n  export function _movePointOnRectangleToPoint(rect: Rectangle, rectanglePoint: IPoint, targetPoint: IPoint) {\r\n    let leftCornerXDifference = rectanglePoint.x - rect.left;\r\n    let leftCornerYDifference = rectanglePoint.y - rect.top;\r\n\r\n    return _moveTopLeftOfRectangleToPoint(rect, { x: targetPoint.x - leftCornerXDifference, y: targetPoint.y - leftCornerYDifference });\r\n  }\r\n\r\n  /**\r\n   * Moves the given rectangle a certain number of pixels in the given direction;\r\n   */\r\n  export function _moveRectangleInDirection(rect: Rectangle, moveDistance: number, direction: RectangleEdge): Rectangle {\r\n    let xModifier: number = 0;\r\n    let yModifier: number = 0;\r\n\r\n    switch (direction) {\r\n      case RectangleEdge.top:\r\n        yModifier = moveDistance * -1;\r\n        break;\r\n      case RectangleEdge.left:\r\n        xModifier = moveDistance * -1;\r\n        break;\r\n      case RectangleEdge.right:\r\n        xModifier = moveDistance;\r\n        break;\r\n      case RectangleEdge.bottom:\r\n        yModifier = moveDistance;\r\n        break;\r\n    }\r\n\r\n    return _moveTopLeftOfRectangleToPoint(rect, { x: rect.left + xModifier, y: rect.top + yModifier });\r\n  }\r\n\r\n  /**\r\n   * Moves the given rectangle to an anchor rectangle.\r\n   */\r\n  export function _moveRectangleToAnchorRectangle(\r\n    rect: Rectangle,\r\n    rectSide: RectangleEdge,\r\n    rectPercent: number,\r\n    anchorRect: Rectangle,\r\n    anchorSide: RectangleEdge,\r\n    anchorPercent: number,\r\n    gap: number = 0): Rectangle {\r\n    let rectTargetPoint: IPoint = _getPointOnEdgeFromPercent(rect, rectSide, rectPercent);\r\n    let anchorTargetPoint: IPoint = _getPointOnEdgeFromPercent(anchorRect, anchorSide, anchorPercent);\r\n    let positionedRect = _movePointOnRectangleToPoint(rect, rectTargetPoint, anchorTargetPoint);\r\n\r\n    return _moveRectangleInDirection(positionedRect, gap, anchorSide);\r\n  }\r\n\r\n  /**\r\n   * Gets the closet point on an edge to the given point.\r\n   */\r\n  export function _getClosestPointOnEdgeToPoint(rect: Rectangle, edge: RectangleEdge, point: IPoint): IPoint {\r\n    switch (edge) {\r\n      case RectangleEdge.top:\r\n      case RectangleEdge.bottom:\r\n        let x: number;\r\n\r\n        if (point.x > rect.right) {\r\n          x = rect.right;\r\n        } else if (point.x < rect.left) {\r\n          x = rect.left;\r\n        } else {\r\n          x = point.x;\r\n        }\r\n        return { x: x, y: rect[RectangleEdge[edge]] };\r\n      case RectangleEdge.left:\r\n      case RectangleEdge.right:\r\n        let y: number;\r\n\r\n        if (point.y > rect.bottom) {\r\n          y = rect.bottom;\r\n        } else if (point.y < rect.top) {\r\n          y = rect.top;\r\n        } else {\r\n          y = point.y;\r\n        }\r\n        return { x: rect[RectangleEdge[edge]], y: y };\r\n    }\r\n  }\r\n\r\n  // Since the beak is rotated 45 degrees the actual height/width is the length of the diagonal.\r\n  // We still want to position the beak based on it's midpoint which does not change. It will\r\n  // be at (beakwidth / 2, beakwidth / 2)\r\n  export function _calculateActualBeakWidthInPixels(beakWidth: number): number {\r\n    return Math.sqrt(beakWidth * beakWidth * 2);\r\n  }\r\n\r\n  export function _getBorderSize(element: HTMLElement): number {\r\n    let styles: CSSStyleDeclaration = getComputedStyle(element, null);\r\n    let topBorder: number = parseFloat(styles.borderTopWidth);\r\n    let bottomBorder: number = parseFloat(styles.borderBottomWidth);\r\n    let leftBorder: number = parseFloat(styles.borderLeftWidth);\r\n    let rightBorder: number = parseFloat(styles.borderRightWidth);\r\n\r\n    // If any of the borders are NaN default to 0\r\n    if (isNaN(topBorder) || isNaN(bottomBorder) || isNaN(leftBorder) || isNaN(rightBorder)) {\r\n      return 0;\r\n    }\r\n\r\n    // If all of the borders are the same size, any value;\r\n    if (topBorder === bottomBorder && bottomBorder === leftBorder && leftBorder === rightBorder) {\r\n      return topBorder;\r\n    }\r\n\r\n    // If the borders do not agree, return 0\r\n    return 0;\r\n  }\r\n\r\n  export function _getPositionData(direction: DirectionalHint, target: Rectangle, boundingRect: Rectangle, coverTarget?: boolean): PositionData {\r\n    let directionalInfo: PositionData = coverTarget ? CoverDictionary[direction] : DirectionalDictionary[direction];\r\n\r\n    if (directionalInfo.isAuto) {\r\n      let center: IPoint = _getPointOnEdgeFromPercent(target, directionalInfo.targetDirection, 50);\r\n\r\n      if (center.x <= boundingRect.width / 2) {\r\n        directionalInfo.calloutPercent = 0;\r\n        directionalInfo.targetPercent = 0;\r\n      } else {\r\n        directionalInfo.calloutPercent = 100;\r\n        directionalInfo.targetPercent = 100;\r\n      }\r\n    }\r\n\r\n    return directionalInfo;\r\n  }\r\n\r\n  export function _flipRectangleToFit(callout: ICallout, targetRect: Rectangle, targetPercent: number, boundingRect: Rectangle, gap: number): ICallout {\r\n    let directions: RectangleEdge[] = [RectangleEdge.left, RectangleEdge.right, RectangleEdge.top, RectangleEdge.bottom];\r\n    let currentEdge: RectangleEdge = callout.targetEdge;\r\n    // Make a copy to presever the original positioning.\r\n    let positionedCallout: ICallout = assign({}, callout);\r\n\r\n    // Keep switching sides until one is found with enough space. If all sides don't fit then return the unmodified callout.\r\n    for (let i = 0; i < 4; i++) {\r\n      let outOfBounds: RectangleEdge[] = _getOutOfBoundsEdges(positionedCallout.calloutRectangle, boundingRect);\r\n      let index: number = outOfBounds.indexOf(currentEdge);\r\n      let oppositeEdge: RectangleEdge = OppositeEdgeDictionary[currentEdge];\r\n\r\n      if (index > -1) {\r\n        directions.splice(directions.indexOf(currentEdge), 1);\r\n        currentEdge = directions.indexOf(oppositeEdge) > -1 ? oppositeEdge : directions.slice(-1)[0];\r\n        positionedCallout.calloutEdge = OppositeEdgeDictionary[currentEdge];\r\n        positionedCallout.targetEdge = currentEdge;\r\n        positionedCallout.calloutRectangle = _moveRectangleToAnchorRectangle(positionedCallout.calloutRectangle,\r\n          positionedCallout.calloutEdge,\r\n          positionedCallout.alignPercent,\r\n          targetRect,\r\n          positionedCallout.targetEdge,\r\n          targetPercent,\r\n          gap);\r\n      } else {\r\n        return positionedCallout;\r\n      }\r\n    }\r\n\r\n    return callout;\r\n  }\r\n}"],"sourceRoot":"..\\..\\src"}