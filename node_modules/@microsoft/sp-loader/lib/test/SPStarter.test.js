"use strict";
var chai_1 = require("chai");
var test_1 = require("@microsoft/sp-core-library/lib/test");
var lodash = require("@microsoft/sp-lodash-subset");
var SPStarter_1 = require("../SPStarter");
var componentConstants = require("../utilities/componentConstants");
var ManifestStore_1 = require("./../stores/ManifestStore");
describe('SPStarter tests', function () {
    describe('start()', function () {
        var applicationId = 'd1d91016-032f-456d-98a4-721247c305e8';
        var applicationManifest = {
            manifestVersion: 2,
            componentType: 'Application',
            id: applicationId,
            alias: 'MyApplication',
            version: '1.0.0',
            loaderConfig: {
                internalModuleBaseUrls: ['https://cdn.net/'],
                entryModuleId: 'main.bundle',
                scriptResources: {}
            }
        };
        var platformManifest = {
            manifestVersion: 2,
            componentType: 'Library',
            id: componentConstants.spApplicationBaseComponentId,
            alias: 'Platform',
            version: '1.0.0',
            loaderConfig: {
                internalModuleBaseUrls: ['https://cdn.net/'],
                entryModuleId: 'main.bundle',
                scriptResources: {}
            }
        };
        var fullPreloadedData = {
            clientSideApplicationId: applicationId,
            clientSideApplicationManifest: applicationManifest,
            manifests: [platformManifest],
            spPageContextInfo: test_1.TEST_UNDEFINED
        };
        it('fails if no preloaded data', function (done) {
            chai_1.assert.throws(function () { SPStarter_1.default.start(test_1.TEST_UNDEFINED); });
            done();
        });
        it('fails if preloaded data has no application id', function (done) {
            var preloadedData = lodash.clone(fullPreloadedData);
            preloadedData.clientSideApplicationId = test_1.TEST_UNDEFINED;
            preloadedData.clientSideApplicationManifest = test_1.TEST_UNDEFINED;
            chai_1.assert.throws(function () { SPStarter_1.default.start(preloadedData); });
            done();
        });
        afterEach(function () {
            ManifestStore_1.default._instance = undefined; 
        });
    });
});
