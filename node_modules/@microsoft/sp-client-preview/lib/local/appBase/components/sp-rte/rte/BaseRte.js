"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var React = require("react");
var ReactDom = require("react-dom");
var sp_telemetry_1 = require("@ms/sp-telemetry");
var odsp_utilities_bundle_1 = require("@ms/odsp-utilities-bundle");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var SPRteFormattingBar_1 = require("../formattingbar/SPRteFormattingBar");
var SPRteLinkDialog_1 = require("../formattingbar/SPRteLinkDialog");
var CKTextEditor_1 = require("../ckeditor/CKTextEditor");
var ToolbarButton_1 = require("../../sp-canvas/toolbar/toolbarButton/ToolbarButton");
var ToolbarSubmenu_1 = require("../../sp-canvas/toolbar/toolbarSubMenu/ToolbarSubmenu");
var RteA11y_1 = require("../a11y/RteA11y");
var office_ui_fabric_react_1 = require("office-ui-fabric-react");
require("./BaseRte.scss");
var RteStrings_resx_1 = require("../loc/RteStrings.resx");
var CLICK_ACTION = '.Click';
var BUTTON_NAME = 'Button';
exports.CREATE_EDITOR_MONITOR = 'CreateNewEditor';
exports.CREATE_EDITOR_MONITOR_FAILURE = 'EditorFailedToLoad';
var CREATE_EDITOR_MONITOR_EXPECTED = 'CanvasUnmounted';
var BaseRte = (function (_super) {
    __extends(BaseRte, _super);
    function BaseRte(props, rteOptions) {
        var _this = _super.call(this, props) || this;
        _this._initState();
        _this._options = _this.props.options || rteOptions;
        _this._config = _this._options.config;
        _this._restoreSelectionOnNextFocus = false;
        _this._buttonStates = new Map();
        _this._selectionInitiated = false;
        _this._selectionShouldEnd = false;
        _this._isRtl = document.documentElement.getAttribute('dir').toLowerCase() === 'rtl';
        if (_this.state.displayMode === sp_core_library_1.DisplayMode.Edit && !_this._editor) {
            _this._options.loader.loadModule();
        }
        return _this;
    }
    BaseRte.prototype._initState = function () {
        this.state = {
            displayMode: this.props.displayMode,
            formattingBarPosition: undefined,
            isFormattingBarHidden: true,
            isLinkDialogOpen: false
        };
    };
    BaseRte.prototype.render = function () {
        var _this = this;
        var formattingBar;
        var html;
        var className;
        if (this.state.displayMode === sp_core_library_1.DisplayMode.Read) {
            className = this._config.editorElementClassName;
            html = this._previousHTML || this.props.innerHTML;
        }
        var isEditMode = this.state.displayMode === sp_core_library_1.DisplayMode.Edit;
        if (isEditMode && !this.state.isFormattingBarHidden) {
            formattingBar = React.createElement(SPRteFormattingBar_1.default, { buttons: this._formattingBarButtons, position: this.state.formattingBarPosition, onKeyDown: this._handleFormattingBarKeyDown, ref: this._resolveRef('_formattingbar') });
        }
        return (React.createElement("div", null,
            this.state.isContextMenuVisible &&
                React.createElement(office_ui_fabric_react_1.ContextualMenu, { shouldFocusOnMount: true, target: this.state.contextMenuTarget, onDismiss: this._onContextualMenuDismiss, directionalHint: this._isRtl ? office_ui_fabric_react_1.DirectionalHint.bottomRightEdge : office_ui_fabric_react_1.DirectionalHint.bottomLeftEdge, items: [
                        {
                            key: RteStrings_resx_1.default.AddRowAboveText,
                            name: RteStrings_resx_1.default.AddRowAboveText,
                            title: odsp_utilities_bundle_1.StringHelper.format(RteStrings_resx_1.default.AddRowAboveShortcutText, RteStrings_resx_1.default.AddRowAboveText),
                            iconProps: {
                                iconName: 'Up'
                            },
                            onClick: function () {
                                _this._editor.formatTable('rowInsertBefore', _this.state.contextMenuTarget);
                            }
                        },
                        {
                            key: RteStrings_resx_1.default.AddRowBelowText,
                            name: RteStrings_resx_1.default.AddRowBelowText,
                            title: odsp_utilities_bundle_1.StringHelper.format(RteStrings_resx_1.default.AddRowBelowShortcutText, RteStrings_resx_1.default.AddRowBelowText),
                            iconProps: {
                                iconName: 'Down'
                            },
                            onClick: function () {
                                _this._editor.formatTable('rowInsertAfter', _this.state.contextMenuTarget);
                            }
                        },
                        {
                            key: RteStrings_resx_1.default.DeleteRowText,
                            name: RteStrings_resx_1.default.DeleteRowText,
                            title: odsp_utilities_bundle_1.StringHelper.format(RteStrings_resx_1.default.DeleteRowShortcutText, RteStrings_resx_1.default.DeleteRowText),
                            iconProps: {
                                iconName: 'Delete'
                            },
                            onClick: function () {
                                _this._editor.formatTable('rowDelete', _this.state.contextMenuTarget);
                            }
                        }
                    ] }),
            this.state.isImageWrappedWithText &&
                React.createElement(office_ui_fabric_react_1.MessageBar, { messageBarType: office_ui_fabric_react_1.MessageBarType.warning, ariaLabel: RteStrings_resx_1.default.ImagesWithTextNotSupported, dismissButtonAriaLabel: odsp_utilities_bundle_1.StringHelper.format(RteStrings_resx_1.default.CloseWarningText, RteStrings_resx_1.default.ImagesWithTextNotSupported), onDismiss: this._onMessageBarDismiss }, RteStrings_resx_1.default.ImagesWithTextNotSupported),
            this.state.isPasteInProgress &&
                React.createElement(office_ui_fabric_react_1.Spinner, { type: office_ui_fabric_react_1.SpinnerType.large, label: RteStrings_resx_1.default.LoadingText }),
            React.createElement("div", { "data-automation-id": 'textBox', role: isEditMode ? 'textbox' : undefined, "aria-multiline": isEditMode || undefined, dangerouslySetInnerHTML: { __html: html }, className: className, onKeyUp: this._handleKeyUp, ref: this._resolveRef('_editorElement') }),
            formattingBar,
            React.createElement(SPRteLinkDialog_1.default, { editorElement: this._editableDiv, isOpen: this.state.isLinkDialogOpen, onCancelClicked: this._closeLinkDialog.bind(this), onDismiss: this._closeLinkDialog.bind(this), onSaveClicked: this._onLinkDialogSaved, ref: this._resolveRef('_linkDialog'), textFieldValue: this._linkAddress || '', validationRegex: BaseRte._URL_VALIDATION_REGEX })));
    };
    BaseRte.prototype.componentWillMount = function () {
        window.addEventListener('load', this._onSPRteLoad);
    };
    BaseRte.prototype.componentDidMount = function () {
        var _this = this;
        if (this.state.displayMode === sp_core_library_1.DisplayMode.Edit) {
            if (!this._createNewEditorMonitor) {
                this._createNewEditorMonitor = new sp_telemetry_1._QosMonitor(exports.CREATE_EDITOR_MONITOR);
            }
            this._createNewEditor(this.props.innerHTML || '', true).then(function (editor) {
                _this._afterEditorCreated(editor);
                _this._createNewEditorMonitor.writeSuccess();
            }, function (error) {
                _this._createNewEditorMonitor.writeUnexpectedFailure(exports.CREATE_EDITOR_MONITOR_FAILURE, error, { 'innerHTML': _this.props.innerHTML });
            });
        }
    };
    BaseRte.prototype.componentDidUpdate = function (prevProps, prevState) {
        if (this.state.displayMode === sp_core_library_1.DisplayMode.Edit) {
            if (this._formattingbar) {
                this._formattingbarElement = ReactDom.findDOMNode(this._formattingbar);
                this._formattingbarWidth = this._formattingbarElement.offsetWidth || this._formattingbarWidth;
            }
            else {
                this._formattingbarElement = undefined;
            }
        }
    };
    BaseRte.prototype.componentWillUnmount = function () {
        if (this._editor) {
            this._previousHTML = this._editor.destroy();
            this._editor = undefined;
            this._editorElement.removeEventListener('paste', this._onBeforePaste, true);
            this._editorElement.removeEventListener('keydown', this._handleKeyDown);
            document.removeEventListener('mouseup', this._checkSelectionChange);
            if (this._editableDiv) {
                this._editableDiv.removeAttribute('contenteditable');
                this._editableDiv.removeEventListener('focus', this._handleEditorFocus);
            }
            if (this._createNewEditorMonitor) {
                this._createNewEditorMonitor.writeExpectedFailure(CREATE_EDITOR_MONITOR_EXPECTED);
            }
        }
        window.removeEventListener('load', this._onSPRteLoad);
    };
    BaseRte.prototype.componentWillUpdate = function (nextProps, nextState) {
        var _this = this;
        if (this.state.displayMode !== nextState.displayMode) {
            if (nextState.displayMode === sp_core_library_1.DisplayMode.Edit) {
                if (!this._createNewEditorMonitor) {
                    this._createNewEditorMonitor = new sp_telemetry_1._QosMonitor(exports.CREATE_EDITOR_MONITOR);
                }
                this._createNewEditor(this._previousHTML || this.props.innerHTML || '', false).then(function (editor) {
                    _this._afterEditorCreated(editor);
                    _this._setButtonStates();
                    _this._createNewEditorMonitor.writeSuccess();
                }, function (error) {
                    _this._createNewEditorMonitor.writeUnexpectedFailure(exports.CREATE_EDITOR_MONITOR_FAILURE, error, { 'innerHTML': _this.props.innerHTML });
                });
            }
            else if (nextState.displayMode === sp_core_library_1.DisplayMode.Read) {
                this.componentWillUnmount();
            }
        }
        else if (nextState.displayMode === sp_core_library_1.DisplayMode.Edit && this._editor) {
            this._setButtonStates();
        }
    };
    BaseRte.prototype.focus = function () {
        if (this._editor) {
            this._editor.focus();
        }
    };
    BaseRte.prototype.focusFormattingBar = function () {
        if (this._formattingbarElement) {
            RteA11y_1.navigateInside(this._formattingbarElement);
        }
    };
    BaseRte.prototype.setDisplayMode = function (newMode) {
        if (this.state.displayMode !== newMode) {
            this.setState({
                displayMode: newMode,
                formattingBarPosition: undefined,
                isFormattingBarHidden: true,
                isLinkDialogOpen: false
            });
        }
    };
    BaseRte.prototype.serialize = function () {
        var serialization = JSON.parse(JSON.stringify(this.props));
        serialization.innerHTML = this._editor ? this._editor.getHTML() : this.props.innerHTML;
        if (this._editor) {
            serialization.editorType = this._editor.getEditorType();
        }
        return serialization;
    };
    BaseRte.prototype._createNewEditor = function (innerHTML, startupFocus) {
        return this._options.editor.createNewEditor(this._config, innerHTML, this._editorElement, this._handleSelectionChange, this._handleTextChange.bind(this), startupFocus, this._onImagePaste.bind(this), this._onPaste.bind(this), this._onContextualMenu.bind(this));
    };
    BaseRte.prototype._afterEditorCreated = function (editor) {
        this._editor = editor;
        this._handleTextChange();
        this._editorElement.addEventListener('paste', this._onBeforePaste, true);
        this._editorElement.addEventListener('keydown', this._handleKeyDown);
        document.addEventListener('mouseup', this._checkSelectionChange);
        this._editableDiv = this._editor.getEditorType() === 'CKEditor' ? this._editorElement :
            this._editorElement.querySelector('.ql-editor');
        if (this._editableDiv) {
            this._editableDiv.setAttribute('aria-label', RteStrings_resx_1.default.RichTextEditorAriaLabel);
            this._editableDiv.setAttribute('title', RteStrings_resx_1.default.RichTextEditorTitle);
            this._editableDiv.addEventListener('focus', this._handleEditorFocus);
            this._editableDiv.addEventListener('blur', this._handleEditorBlur);
        }
    };
    BaseRte.prototype._openLinkDialog = function (defaultAddress) {
        if (defaultAddress === void 0) { defaultAddress = ''; }
        this._linkAddress = defaultAddress;
        this.setState({
            isLinkDialogOpen: true
        });
    };
    BaseRte.prototype._closeLinkDialog = function () {
        this._restoreSelectionOnNextFocus = true;
        this._linkAddress = '';
        this.setState({
            isLinkDialogOpen: false
        });
    };
    BaseRte.prototype._handleTextChange = function () {
        sp_telemetry_1._EngagementLogger.logEvent(this._engagementLoggerClickTagName('TextChange'), CLICK_ACTION);
        if (this.state.displayMode === sp_core_library_1.DisplayMode.Edit) {
            if (this._editor) {
                this._currentSelection = this._editor.getSelection() || this._currentSelection;
            }
        }
    };
    BaseRte.prototype._finalizeAction = function (ariaActionName) {
        if (ariaActionName) {
            this._ariaConfirmAction(ariaActionName);
        }
        this._updateActiveButtons();
    };
    BaseRte.prototype._onImagePaste = function (isImageValid, imageBlob, innerHTML) {
        if (!isImageValid) {
            this.setState({ isImageWrappedWithText: true });
        }
        else {
            this.setState({ isImageWrappedWithText: false });
        }
    };
    BaseRte.prototype._onContextualMenu = function (isRightClicked, target) {
        this.setState({
            isContextMenuVisible: isRightClicked,
            contextMenuTarget: target
        });
    };
    BaseRte.prototype._onPaste = function (isPasteInProgress) {
        this.setState({ isPasteInProgress: isPasteInProgress });
    };
    BaseRte.prototype._handleSelectionChange = function (range, forceUpdate) {
        if (range) {
            this.setState({ currentSubmenuOpen: undefined });
            if (this._restoreOnFocus()) {
                this._updateFormattingBar(false);
                return;
            }
        }
        if (!range) {
            this._updateFormattingBar(true);
        }
        else {
            this._updateSelection(range, forceUpdate);
        }
    };
    BaseRte.prototype._updateSelection = function (range, forceUpdate) {
        if (!this._currentSelection || this.state.isFormattingBarHidden) {
            this._currentSelection = range;
            this._updateFormattingBar(false);
        }
        else if (forceUpdate || this._currentSelection.start !== range.start ||
            this._currentSelection.end !== range.end) {
            this._selectionInitiated = true;
            if (this._selectionShouldEnd) {
                this._currentSelection = range;
                this._updateFormattingBar(false);
                this._selectionInitiated = false;
            }
            this._selectionShouldEnd = false;
        }
    };
    BaseRte.prototype._restoreOnFocus = function () {
        var restore = false;
        if (this._restoreSelectionOnNextFocus && this._currentSelection) {
            this._restoreSelectionOnNextFocus = false;
            this._editor.setSelection(this._currentSelection);
            restore = true;
        }
        return restore;
    };
    BaseRte.prototype._onBeforePaste = function () {
    };
    BaseRte.prototype._handleKeyDown = function (evt) {
        if (RteA11y_1.isTab(evt) || RteA11y_1.isShiftTab(evt)) {
            evt.stopPropagation();
            evt.preventDefault();
        }
        else if (RteA11y_1.isKey(RteA11y_1.KeyCodes.F10, evt, true) && this._formattingbarElement) {
            sp_telemetry_1._EngagementLogger.logEvent(this.TAG_NAME + 'ToolbarByKeyboardShortcut.Focus', evt.type);
            RteA11y_1.navigateInside(this._formattingbarElement);
            var screenReaderInstruction = odsp_utilities_bundle_1.StringHelper.format(RteStrings_resx_1.default.RichTextNavigationAltF10Keys, RteStrings_resx_1.default.ToolbarNavigationArrowKeys, RteStrings_resx_1.default.ToolbarNavigationTabKeys);
            RteA11y_1.ariaAlert(screenReaderInstruction);
            evt.stopPropagation();
            evt.preventDefault();
        }
        else if (RteA11y_1.isKey('K'.charCodeAt(0), evt, false, true)) {
            this._handleLink();
            evt.stopPropagation();
            evt.preventDefault();
        }
    };
    BaseRte.prototype._handleLink = function () {
        sp_telemetry_1._EngagementLogger.logEvent(this._engagementLoggerClickTagName('link'), CLICK_ACTION);
        this._isSelectionChangeFromToolbar = true;
        this._currentSelection = this._editor.getSelection();
        if (this._currentSelection) {
            if (this._buttonStates.get('link') === ToolbarButton_1.ButtonState.Active) {
                this._handleUnlink();
            }
            else if (this._currentSelection.start !== this._currentSelection.end) {
                this._openLinkDialog();
            }
            this._updateActiveButtons();
        }
    };
    BaseRte.prototype._handleFormattingBarKeyDown = function (evt) {
        if (RteA11y_1.isEscape(evt)) {
            if (this._editableDiv && !this._editableDiv.isEqualNode(document.activeElement)) {
                this.focus();
                evt.stopPropagation();
                evt.preventDefault();
            }
        }
    };
    BaseRte.prototype._updateFormattingBar = function (isHidden) {
    };
    ;
    BaseRte.prototype._engagementLoggerClickTagName = function (key) {
        return this.TAG_NAME + key + BUTTON_NAME + CLICK_ACTION;
    };
    BaseRte.prototype._onSPRteLoad = function (e) {
        if (this._config.editorElementClassName === 'cke_editable' &&
            !sp_core_library_1._SPKillSwitch.isActivated(sp_core_library_1.Guid.tryParse('f4d628e3-3a01-46e7-8508-96db5caa18e6'), '11/16/2016', 'PreloadCKEditor')) {
            CKTextEditor_1.default.preloadEditor(this._config);
        }
    };
    BaseRte.prototype._ariaConfirmAction = function (formatKeyOrName) {
        var format = this._config.formats.get(formatKeyOrName);
        var name = format ? format.button.title : formatKeyOrName;
        var message = odsp_utilities_bundle_1.StringHelper.format(RteStrings_resx_1.default.FormattingBarConfirmAction, name);
        if (this._currentSelection && this._currentSelection.start !== this._currentSelection.end &&
            !(format && format.isLine)) {
            var text = this._editor.getText(this._currentSelection);
            message = odsp_utilities_bundle_1.StringHelper.format(RteStrings_resx_1.default.FormattingBarConfirmActionOnSelection, name, text);
        }
        RteA11y_1.ariaAlert(message);
    };
    BaseRte.prototype._checkSelectionChange = function () {
        if (this._editor) {
            this._selectionShouldEnd = true;
            if (this._selectionInitiated) {
                var range = this._editor.getSelection();
                this._currentSelection = range;
                this._updateFormattingBar(false);
                this._selectionShouldEnd = false;
            }
            this._selectionInitiated = false;
        }
    };
    BaseRte.prototype._getFormatButtonProps = function (formatKey, onClick) {
        var format = this._config.formats.get(formatKey);
        return {
            key: format.key,
            fabricIconKey: format.button.fabricIconKey,
            iconClassName: format.button.iconClassName,
            onClick: onClick,
            canBeActive: format.button.canBeActive,
            isActive: this._buttonStates.get(format.key) === ToolbarButton_1.ButtonState.Active,
            disabled: this._buttonStates.get(format.key) === ToolbarButton_1.ButtonState.Disabled,
            title: format.button.title + (format.button.shortcut ? " (" + format.button.shortcut + ")" : ''),
            label: format.button.label,
            className: format.button.className,
            automationId: formatKey + '-button',
            onBlur: this._handleFormattingBarBlur
        };
    };
    BaseRte.prototype._handleCloseSubmenu = function (isDocumentClick) {
        this.setState({ currentSubmenuOpen: undefined });
        if (isDocumentClick) {
            this._updateFormattingBar(true);
        }
    };
    Object.defineProperty(BaseRte.prototype, "_formattingBarButtons", {
        get: function () {
            var _this = this;
            var formatSubmenuButtons = [
                {
                    key: 'normalText',
                    canBeActive: true,
                    title: RteStrings_resx_1.default.FormattingBarNormalTextButtonTitle,
                    label: RteStrings_resx_1.default.FormattingBarNormalTextButtonTitle,
                    onClick: this._handlePlainText,
                    automationId: 'normalText-button'
                },
                this._getFormatButtonProps('h2', this._handleHeading2),
                this._getFormatButtonProps('h3', this._handleHeading3),
                this._getFormatButtonProps('h4', this._handleHeading4),
                this._getFormatButtonProps('blockquote', this._handleQuote)
            ];
            var buttons = [
                React.createElement(ToolbarSubmenu_1.default, { key: 'format', buttons: formatSubmenuButtons, isOpen: this.state.currentSubmenuOpen === 'format', isWide: true, onOpen: function () { _this._isSelectionChangeFromToolbar = true; _this.setState({ currentSubmenuOpen: 'format' }); }, onClose: this._handleCloseSubmenu, onBlur: this._handleFormattingBarBlur }),
                React.createElement(ToolbarButton_1.default, __assign({}, this._getFormatButtonProps('bold', this._handleBold))),
                React.createElement(ToolbarButton_1.default, __assign({}, this._getFormatButtonProps('italic', this._handleItalic))),
                React.createElement(ToolbarButton_1.default, __assign({}, this._getFormatButtonProps('underline', this._handleUnderline))),
                React.createElement(ToolbarButton_1.default, __assign({}, this._getFormatButtonProps('bullet', this._handleListBullets))),
                React.createElement(ToolbarButton_1.default, __assign({}, this._getFormatButtonProps('list', this._handleListNumbered))),
                React.createElement(ToolbarButton_1.default, __assign({}, this._getFormatButtonProps('alignLeft', this._handleAlignLeft))),
                React.createElement(ToolbarButton_1.default, __assign({}, this._getFormatButtonProps('alignCenter', this._handleAlignCenter))),
                React.createElement(ToolbarButton_1.default, __assign({}, this._getFormatButtonProps('alignRight', this._handleAlignRight))),
                React.createElement(ToolbarButton_1.default, __assign({}, this._getFormatButtonProps('link', this._handleLink))),
                React.createElement(ToolbarButton_1.default, { key: 'clearFormatting', canBeActive: false, fabricIconKey: 'ClearFormatting', onClick: this._handleClearFormatting, title: RteStrings_resx_1.default.FormattingBarClearFormattingButtonTitle, automationId: 'clearFormatting-button', onBlur: this._handleFormattingBarBlur })
            ];
            return buttons;
        },
        enumerable: true,
        configurable: true
    });
    BaseRte.prototype._formatOrPrepare = function (formatKey) {
        this.focus();
        sp_telemetry_1._EngagementLogger.logEvent(this._engagementLoggerClickTagName(formatKey), CLICK_ACTION);
        var format = this._config.formats.get(formatKey);
        if (format.maskedBy) {
            for (var _i = 0, _a = format.maskedBy; _i < _a.length; _i++) {
                var maskingFormat = _a[_i];
                if (this._buttonStates.get(maskingFormat) === ToolbarButton_1.ButtonState.Active) {
                    return;
                }
            }
        }
        var range = this._editor.getSelection();
        var _b = [range.start, range.end], start = _b[0], end = _b[1];
        var isApplied = this._editor.isFormatAppliedToRange(start, end, format);
        if (!(this._cleanupBeforeFormatting(start, end, format) && isApplied)) {
            var formats = {};
            formats[format.editorKey] = isApplied ? false : (format.editorValue !== undefined ? format.editorValue : true);
            this._editor.format(start, end, formats);
            this._finalizeAction(formatKey);
        }
    };
    BaseRte.prototype._handleAlignCenter = function () {
        this._formatOrPrepare('alignCenter');
    };
    BaseRte.prototype._handleAlignLeft = function () {
        this._formatOrPrepare(this._isRtl ? 'alignRight' : 'alignLeft');
    };
    BaseRte.prototype._handleAlignRight = function () {
        this._formatOrPrepare(this._isRtl ? 'alignLeft' : 'alignRight');
    };
    BaseRte.prototype._handleBold = function () {
        this._formatOrPrepare('bold');
    };
    BaseRte.prototype._handleHeading2 = function () {
        this._formatOrPrepare('h2');
    };
    BaseRte.prototype._handleHeading3 = function () {
        this._formatOrPrepare('h3');
    };
    BaseRte.prototype._handleHeading4 = function () {
        this._formatOrPrepare('h4');
    };
    BaseRte.prototype._handleItalic = function () {
        this._formatOrPrepare('italic');
    };
    BaseRte.prototype._handleListBullets = function () {
        this._formatOrPrepare('bullet');
    };
    BaseRte.prototype._handleListNumbered = function () {
        this._formatOrPrepare('list');
    };
    BaseRte.prototype._handlePlainText = function () {
        this.focus();
        if (this._currentSelection) {
            var blockStyles = this._config.supportedFormatsArray.filter(function (format) { return format.isBlockStyle; });
            this._cleanupBeforeFormatting(this._currentSelection.start, this._currentSelection.end, blockStyles[0]);
            this._finalizeAction();
        }
        sp_telemetry_1._EngagementLogger.logEvent(this._engagementLoggerClickTagName('PlainText'), CLICK_ACTION);
    };
    BaseRte.prototype._handleQuote = function () {
        this._formatOrPrepare('blockquote');
    };
    BaseRte.prototype._handleClearFormatting = function () {
        sp_telemetry_1._EngagementLogger.logEvent(this._engagementLoggerClickTagName('ClearFormatting'), CLICK_ACTION);
        this.focus();
        var range = this._currentSelection;
        var _a = [range.start, range.end], start = _a[0], end = _a[1];
        this._editor.clearFormatting(start, end);
        this._finalizeAction(RteStrings_resx_1.default.FormattingBarClearFormattingButtonTitle);
    };
    BaseRte.prototype._handleUnderline = function () {
        this._formatOrPrepare('underline');
    };
    BaseRte.prototype._handleUnlink = function () {
        this.focus();
        sp_telemetry_1._EngagementLogger.logEvent(this._engagementLoggerClickTagName('Unlink'), CLICK_ACTION);
        if (this._currentSelection) {
            this._editor.format(this._currentSelection.start, this._currentSelection.end, { 'link': false });
            this._finalizeAction(RteStrings_resx_1.default.FormattingBarUnlinkButtonTitle);
        }
    };
    BaseRte.prototype._cleanupBeforeFormatting = function (start, end, newFormat) {
        var formatsToClear = {};
        if (newFormat.isBlockStyle) {
            var blockStyles = this._config.supportedFormatsArray.filter(function (format) { return format.isBlockStyle; });
            for (var _i = 0, blockStyles_1 = blockStyles; _i < blockStyles_1.length; _i++) {
                var format = blockStyles_1[_i];
                formatsToClear[format.editorKey] = false;
            }
        }
        if (newFormat.masks) {
            for (var _a = 0, _b = newFormat.masks; _a < _b.length; _a++) {
                var maskedFormatKey = _b[_a];
                formatsToClear[this._config.formats.get(maskedFormatKey).editorKey] = false;
            }
        }
        this._editor.format(start, end, formatsToClear, true);
        return formatsToClear.hasOwnProperty(newFormat.editorKey);
    };
    BaseRte.prototype._onMessageBarDismiss = function () {
        this.setState({ isImageWrappedWithText: false });
    };
    BaseRte.prototype._onContextualMenuDismiss = function () {
        this.setState({ isContextMenuVisible: false });
    };
    BaseRte.prototype._onLinkDialogSaved = function () {
        if (this._linkDialog.textFieldValue) {
            this._editor.format(this._currentSelection.start, this._currentSelection.end, { 'link': this._linkDialog.textFieldValue });
        }
        this._linkElement = undefined;
        this._finalizeAction(RteStrings_resx_1.default.FormattingBarLinkButtonTitle);
        this._closeLinkDialog();
    };
    BaseRte.prototype._handleEditorFocus = function (evt) {
        this._restoreOnFocus();
    };
    BaseRte.prototype._handleFormattingBarBlur = function (evt) {
        this._hideFormattingBarOnBlur(evt.relatedTarget);
    };
    BaseRte.prototype._handleEditorBlur = function (evt) {
        this._hideFormattingBarOnBlur(evt.relatedTarget);
    };
    BaseRte.prototype._hideFormattingBarOnBlur = function (target) {
        var elem = target;
        if ((this._editorElement && this._editorElement.contains(elem)) ||
            (this._formattingbarElement && this._formattingbarElement.contains(elem)) ||
            elem && elem.className === 'ControlZone ControlZone--edit ControlZone--selected') {
            return;
        }
        else {
            this._updateFormattingBar(true);
        }
    };
    BaseRte.prototype._handleKeyUp = function (evt) {
        this._checkSelectionChange();
        this._updateActiveButtons();
    };
    BaseRte.prototype._setButtonStates = function () {
        var range = this._editor.getSelection();
        if (range) {
            var updatedFormats = new Map();
            for (var _i = 0, _a = this._config.supportedFormatsArray; _i < _a.length; _i++) {
                var format = _a[_i];
                updatedFormats.set(format.key, false);
            }
            var maskingFormats = this._config.supportedFormatsArray.filter(function (format) { return !!format.masks; });
            for (var _b = 0, maskingFormats_1 = maskingFormats; _b < maskingFormats_1.length; _b++) {
                var maskingFormat = maskingFormats_1[_b];
                if (!updatedFormats.get(maskingFormat.key)) {
                    var isActive = this._editor.isFormatAppliedToRange(range.start, range.end, maskingFormat);
                    this._buttonStates.set(maskingFormat.key, isActive ? ToolbarButton_1.ButtonState.Active : ToolbarButton_1.ButtonState.Normal);
                    updatedFormats.set(maskingFormat.key, true);
                    if (isActive) {
                        for (var _c = 0, _d = maskingFormat.masks; _c < _d.length; _c++) {
                            var maskedFormat = _d[_c];
                            this._buttonStates.set(maskedFormat, ToolbarButton_1.ButtonState.Disabled);
                            updatedFormats.set(maskedFormat, true);
                        }
                    }
                }
            }
            for (var _e = 0, _f = this._config.supportedFormatsArray; _e < _f.length; _e++) {
                var format = _f[_e];
                if (!updatedFormats.get(format.key)) {
                    var isActive = this._editor.isFormatAppliedToRange(range.start, range.end, format);
                    this._buttonStates.set(format.key, isActive ? ToolbarButton_1.ButtonState.Active : ToolbarButton_1.ButtonState.Normal);
                }
            }
        }
        if (this._isRtl) {
            var left = this._buttonStates.get('alignLeft');
            this._buttonStates.set('alignLeft', this._buttonStates.get('alignRight'));
            this._buttonStates.set('alignRight', left);
        }
    };
    BaseRte.prototype._updateActiveButtons = function () {
        this.forceUpdate();
    };
    return BaseRte;
}(office_ui_fabric_react_1.BaseComponent));
BaseRte._URL_VALIDATION_REGEX = new RegExp('((^https?:\/\/)|(^ftp:\/\/)|(^file:\/\/)|(^mailto:)|(^news:)|(^pnm:\/\/)|(^mms:\/\/)|(^\/)|(^#)|(^\\\\)).+', 'i');
__decorate([
    office_ui_fabric_react_1.autobind
], BaseRte.prototype, "_onContextualMenu", null);
__decorate([
    office_ui_fabric_react_1.autobind
], BaseRte.prototype, "_handleSelectionChange", null);
__decorate([
    office_ui_fabric_react_1.autobind
], BaseRte.prototype, "_updateSelection", null);
__decorate([
    office_ui_fabric_react_1.autobind
], BaseRte.prototype, "_onBeforePaste", null);
__decorate([
    office_ui_fabric_react_1.autobind
], BaseRte.prototype, "_handleKeyDown", null);
__decorate([
    office_ui_fabric_react_1.autobind
], BaseRte.prototype, "_handleLink", null);
__decorate([
    office_ui_fabric_react_1.autobind
], BaseRte.prototype, "_handleFormattingBarKeyDown", null);
__decorate([
    office_ui_fabric_react_1.autobind
], BaseRte.prototype, "_onSPRteLoad", null);
__decorate([
    office_ui_fabric_react_1.autobind
], BaseRte.prototype, "_checkSelectionChange", null);
__decorate([
    office_ui_fabric_react_1.autobind
], BaseRte.prototype, "_getFormatButtonProps", null);
__decorate([
    office_ui_fabric_react_1.autobind
], BaseRte.prototype, "_handleCloseSubmenu", null);
__decorate([
    office_ui_fabric_react_1.autobind
], BaseRte.prototype, "_handleAlignCenter", null);
__decorate([
    office_ui_fabric_react_1.autobind
], BaseRte.prototype, "_handleAlignLeft", null);
__decorate([
    office_ui_fabric_react_1.autobind
], BaseRte.prototype, "_handleAlignRight", null);
__decorate([
    office_ui_fabric_react_1.autobind
], BaseRte.prototype, "_handleBold", null);
__decorate([
    office_ui_fabric_react_1.autobind
], BaseRte.prototype, "_handleHeading2", null);
__decorate([
    office_ui_fabric_react_1.autobind
], BaseRte.prototype, "_handleHeading3", null);
__decorate([
    office_ui_fabric_react_1.autobind
], BaseRte.prototype, "_handleHeading4", null);
__decorate([
    office_ui_fabric_react_1.autobind
], BaseRte.prototype, "_handleItalic", null);
__decorate([
    office_ui_fabric_react_1.autobind
], BaseRte.prototype, "_handleListBullets", null);
__decorate([
    office_ui_fabric_react_1.autobind
], BaseRte.prototype, "_handleListNumbered", null);
__decorate([
    office_ui_fabric_react_1.autobind
], BaseRte.prototype, "_handlePlainText", null);
__decorate([
    office_ui_fabric_react_1.autobind
], BaseRte.prototype, "_handleQuote", null);
__decorate([
    office_ui_fabric_react_1.autobind
], BaseRte.prototype, "_handleClearFormatting", null);
__decorate([
    office_ui_fabric_react_1.autobind
], BaseRte.prototype, "_handleUnderline", null);
__decorate([
    office_ui_fabric_react_1.autobind
], BaseRte.prototype, "_handleUnlink", null);
__decorate([
    office_ui_fabric_react_1.autobind
], BaseRte.prototype, "_onMessageBarDismiss", null);
__decorate([
    office_ui_fabric_react_1.autobind
], BaseRte.prototype, "_onContextualMenuDismiss", null);
__decorate([
    office_ui_fabric_react_1.autobind
], BaseRte.prototype, "_onLinkDialogSaved", null);
__decorate([
    office_ui_fabric_react_1.autobind
], BaseRte.prototype, "_handleEditorFocus", null);
__decorate([
    office_ui_fabric_react_1.autobind 
], BaseRte.prototype, "_handleFormattingBarBlur", null);
__decorate([
    office_ui_fabric_react_1.autobind
], BaseRte.prototype, "_handleEditorBlur", null);
__decorate([
    office_ui_fabric_react_1.autobind
], BaseRte.prototype, "_handleKeyUp", null);
exports.BaseRte = BaseRte;
