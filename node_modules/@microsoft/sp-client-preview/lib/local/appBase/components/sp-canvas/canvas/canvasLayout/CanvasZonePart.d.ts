/**
 * @file CanvasZonePart.ts
 * @copyright (c) Microsoft Corporation. All rights reserved.
 */
import { ClientSideWebPartManager } from '@microsoft/sp-webpart-base';
import CanvasControlType from '../canvasControl/CanvasControlType';
import CanvasSectionPart from './CanvasSectionPart';
import ICanvasControl from '../canvasControl/ICanvasControl';
import { IControlPosition, ILayoutItem, ILayoutPart } from './ICanvasLayout';
import { IControlComponentValue } from './CanvasLayout';
export interface IColumnDefinition {
    sections: number;
    factor: number[];
}
/**
 * Represents a Canvas Zone Layout Part
 */
export default class CanvasZonePart implements ILayoutItem, ILayoutPart {
    static readonly columnDefinitionMap: Map<CanvasControlType, IColumnDefinition>;
    private _index;
    private _sectionsMap;
    private _controlComponentMap;
    private _webPartManager;
    /**
     * Creates a new instance of a CanvasZonePart
     * @param zoneIdx represents the zone index
     */
    constructor(zoneIdx: number, map: Map<string, IControlComponentValue>, webPartManager: ClientSideWebPartManager);
    /**
     * Gets the index associated with this zone
     */
    readonly index: number;
    /**
     * Gets the sections associated with the current zone
     * @returns all the sections in that zone
     */
    readonly sections: CanvasSectionPart[];
    /**
     * Adds a new control in the pertinent zone.
     * If section doesnt exist then create a new section
     * @param canvasControl represents the control to add
     * @returns id of the control that was added
     */
    addControl(canvasControl: ICanvasControl): string;
    /**
     * Removes a control
     * @param controlPosition represents the control to remove
     * @returns id of control that was removed
     */
    removeControl(controlPosition: IControlPosition): string;
    /**
     * Fetches a control from the zone if available
     * @param controlPosition represents the position of the control
     * @returns the underlying control in the zone if available
     */
    fetchControl(controlPosition: IControlPosition): ICanvasControl;
    /**
     * Fetch all controls that are available in that zone
     * @returns all the controls in that zone
     */
    fetchAllControls(includeEmptySections?: boolean): ICanvasControl[];
    /**
     * Modify the current state of the zone to reflect new sections and/or section factors.
     *
     * @param zoneType - The key into the CanvasZonePart.columnDefinitionMap for the new section count
     *   and respective section factors.
     */
    changeZone(zoneType: CanvasControlType): void;
    /**
     * Determines if the underlying layout is empty
     * @returns true if the zone is empty
     */
    isEmpty(): boolean;
    /**
     * Disposes the zone
     */
    dispose(): void;
    private _increaseSections(currentSections, columnDefinition);
    private _reduceSections(currentSections, columnDefinition);
}
