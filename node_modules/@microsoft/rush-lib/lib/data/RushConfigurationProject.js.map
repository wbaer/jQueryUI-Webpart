{"version":3,"sources":["data/RushConfigurationProject.ts"],"names":[],"mappings":"AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,2BAA6B;AAC7B,8BAAgC;AAChC,kDAA6C;AAc7C;;;GAGG;AACH;IAWE,kCAAY,WAA0C,EAC1C,iBAAoC,EACpC,eAAuB;QACjC,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC,WAAW,CAAC;QAC5C,IAAI,CAAC,sBAAsB,GAAG,WAAW,CAAC,aAAa,CAAC;QAExD,wEAAwE;QACxE,IAAM,kBAAkB,GAAW,WAAW,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC;QAC/E,EAAE,CAAC,CAAC,kBAAkB,GAAG,iBAAiB,CAAC,qBAAqB,CAAC,CAAC,CAAC;YACjE,MAAM,IAAI,KAAK,CAAC,8EAA8E;mBAC1F,+CAA6C,iBAAiB,CAAC,qBAAqB,kBAAe,CAAA;mBACnG,yBAAsB,WAAW,CAAC,aAAa,OAAG,CAAA,CAAC,CAAC;QAC1D,CAAC;QACD,EAAE,CAAC,CAAC,kBAAkB,GAAG,iBAAiB,CAAC,qBAAqB,CAAC,CAAC,CAAC;YACjE,MAAM,IAAI,KAAK,CAAC,8EAA8E;mBAC1F,wDAAsD,iBAAiB,CAAC,qBAAqB,aAAU,CAAA;mBACvG,0BAAuB,WAAW,CAAC,aAAa,OAAG,CAAA,CAAC,CAAC;QAC3D,CAAC;QAED,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,cAAc,EAAE,WAAW,CAAC,aAAa,CAAC,CAAC;QAE7F,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;YACzC,MAAM,IAAI,KAAK,CAAC,+BAA6B,WAAW,CAAC,aAAe,CAAC,CAAC;QAC5E,CAAC;QAED,sCAAsC;QACtC,EAAE,CAAC,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC,CAAC;YACxC,4EAA4E;YAC5E,iCAAiC;YACjC,EAAE,CAAC,CAAC,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC7C,MAAM,IAAI,KAAK,CAAC,4EAA4E;sBACxF,0BAA0B,CAAC,CAAC;YAClC,CAAC;YACD,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,CAAC;gBAChC,MAAM,IAAI,KAAK,CAAC,yEAAyE;qBACvF,0CAAuC,WAAW,CAAC,WAAW,QAAI,CAAA,CAAC,CAAC;YACxE,CAAC;YACD,EAAE,CAAC,CAAC,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,GAAG,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;gBACxE,MAAM,IAAI,KAAK,CAAC,mBAAgB,WAAW,CAAC,WAAW,uCAAmC;uBACtF,OAAI,WAAW,CAAC,cAAc,yDAAqD,CAAA,CAAC,CAAC;YAC3F,CAAC;YACD,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,cAAc,CAAC;QACpD,CAAC;QAED,IAAM,mBAAmB,GAAW,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;QACnF,IAAI,CAAC,YAAY,GAAG,kBAAQ,CAAC,YAAY,CAAC,mBAAmB,CAAC,CAAC;QAE/D,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,KAAK,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACjD,MAAM,IAAI,KAAK,CAAC,wBAAqB,IAAI,CAAC,YAAY,uCAAmC;mBACrF,uBAAoB,IAAI,CAAC,YAAY,CAAC,IAAI,yBAAqB,CAAA,CAAC,CAAC;QACvE,CAAC;QAED,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;QAExC,IAAI,CAAC,yBAAyB,GAAG,IAAI,GAAG,EAAU,CAAC;QACnD,EAAE,CAAC,CAAC,WAAW,CAAC,wBAAwB,CAAC,CAAC,CAAC;YACzC,GAAG,CAAC,CAAkC,UAAoC,EAApC,KAAA,WAAW,CAAC,wBAAwB,EAApC,cAAoC,EAApC,IAAoC;gBAArE,IAAM,uBAAuB,SAAA;gBAChC,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;aAC7D;QACH,CAAC;QACD,IAAI,CAAC,6BAA6B,GAAG,EAAE,CAAC;QACxC,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC,WAAW,CAAC,aAAa,CAAC;IACpD,CAAC;IAMD,sBAAW,iDAAW;QAJtB;;;WAGG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;QAC3B,CAAC;;;OAAA;IAKD,sBAAW,mDAAa;QAHxB;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;QAC7B,CAAC;;;OAAA;IAKD,sBAAW,2DAAqB;QAHhC;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC;QACrC,CAAC;;;OAAA;IAMD,sBAAW,oDAAc;QAJzB;;;WAGG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;QAC9B,CAAC;;;OAAA;IASD,sBAAW,8DAAwB;QAPnC;;;;;;WAMG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC;QACxC,CAAC;;;OAAA;IAKD,sBAAW,kEAA4B;QAHvC;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,6BAA6B,CAAC;QAC5C,CAAC;;;OAAA;IAKD,sBAAW,iDAAW;QAHtB;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;QAC3B,CAAC;;;OAAA;IAOD,sBAAW,qDAAe;QAL1B;;;;WAIG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC;QAC/B,CAAC;;;OAAA;IAOD,sBAAW,mDAAa;QALxB;;;;WAIG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;QAC7B,CAAC;;;OAAA;IACH,+BAAC;AAAD,CAnJA,AAmJC,IAAA","file":"data/RushConfigurationProject.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport * as fsx from 'fs-extra';\r\nimport JsonFile from '../utilities/JsonFile';\r\nimport RushConfiguration from '../data/RushConfiguration';\r\n\r\n/**\r\n * This represents the JSON data object for a project entry in the rush.json configuration file.\r\n */\r\nexport interface IRushConfigurationProjectJson {\r\n  packageName: string;\r\n  projectFolder: string;\r\n  reviewCategory?: string;\r\n  cyclicDependencyProjects: string[];\r\n  shouldPublish?: boolean;\r\n}\r\n\r\n/**\r\n * This represents the configuration of a project that is built by Rush, based on\r\n * the Rush.json configuration file.\r\n */\r\nexport default class RushConfigurationProject {\r\n  private _packageName: string;\r\n  private _projectFolder: string;\r\n  private _projectRelativeFolder: string;\r\n  private _reviewCategory: string;\r\n  private _packageJson: PackageJson;\r\n  private _tempProjectName: string;\r\n  private _cyclicDependencyProjects: Set<string>;\r\n  private _shouldPublish: boolean;\r\n  private _downstreamDependencyProjects: string[];\r\n\r\n  constructor(projectJson: IRushConfigurationProjectJson,\r\n              rushConfiguration: RushConfiguration,\r\n              tempProjectName: string) {\r\n    this._packageName = projectJson.packageName;\r\n    this._projectRelativeFolder = projectJson.projectFolder;\r\n\r\n    // For example, the depth of \"a/b/c\" would be 3.  The depth of \"a\" is 1.\r\n    const projectFolderDepth: number = projectJson.projectFolder.split('/').length;\r\n    if (projectFolderDepth < rushConfiguration.projectFolderMinDepth) {\r\n      throw new Error(`To keep things organized, this repository has a projectFolderMinDepth policy`\r\n        + ` requiring project folders to be at least ${rushConfiguration.projectFolderMinDepth} levels deep.`\r\n        + `  Problem folder: \"${projectJson.projectFolder}\"`);\r\n    }\r\n    if (projectFolderDepth > rushConfiguration.projectFolderMaxDepth) {\r\n      throw new Error(`To keep things organized, this repository has a projectFolderMaxDepth policy`\r\n        + ` preventing project folders from being deeper than ${rushConfiguration.projectFolderMaxDepth} levels.`\r\n        + `  Problem folder:  \"${projectJson.projectFolder}\"`);\r\n    }\r\n\r\n    this._projectFolder = path.join(rushConfiguration.rushJsonFolder, projectJson.projectFolder);\r\n\r\n    if (!fsx.existsSync(this._projectFolder)) {\r\n      throw new Error(`Project folder not found: ${projectJson.projectFolder}`);\r\n    }\r\n\r\n    // Are we using a package review file?\r\n    if (rushConfiguration.packageReviewFile) {\r\n      // If so, then every project needs to have a reviewCategory that was defined\r\n      // by the reviewCategories array.\r\n      if (!rushConfiguration.reviewCategories.size) {\r\n        throw new Error(`The rush.json file specifies a packageReviewFile, but the reviewCategories`\r\n          + ` list is not configured.`);\r\n      }\r\n      if (!projectJson.reviewCategory) {\r\n        throw new Error(`The rush.json file configures a packageReviewFile, but a reviewCategory` +\r\n          ` was not specified for the project \"${projectJson.packageName}\".`);\r\n      }\r\n      if (!rushConfiguration.reviewCategories.has(projectJson.reviewCategory)) {\r\n        throw new Error(`The project \"${projectJson.packageName}\" specifies its reviewCategory as`\r\n          + `\"${projectJson.reviewCategory}\" which is not one of the defined reviewCategories.`);\r\n      }\r\n      this._reviewCategory = projectJson.reviewCategory;\r\n    }\r\n\r\n    const packageJsonFilename: string = path.join(this._projectFolder, 'package.json');\r\n    this._packageJson = JsonFile.loadJsonFile(packageJsonFilename);\r\n\r\n    if (this._packageJson.name !== this._packageName) {\r\n      throw new Error(`The package name \"${this._packageName}\" specified in rush.json does not`\r\n        + ` match the name \"${this._packageJson.name}\" from package.json`);\r\n    }\r\n\r\n    this._tempProjectName = tempProjectName;\r\n\r\n    this._cyclicDependencyProjects = new Set<string>();\r\n    if (projectJson.cyclicDependencyProjects) {\r\n      for (const cyclicDependencyProject of projectJson.cyclicDependencyProjects) {\r\n        this._cyclicDependencyProjects.add(cyclicDependencyProject);\r\n      }\r\n    }\r\n    this._downstreamDependencyProjects = [];\r\n    this._shouldPublish = !!projectJson.shouldPublish;\r\n  }\r\n\r\n  /**\r\n   * The name of the NPM package.  An error is reported if this name is not\r\n   * identical to packageJson.name.\r\n   */\r\n  public get packageName(): string {\r\n    return this._packageName;\r\n  }\r\n\r\n  /**\r\n   * The full path of the folder that contains the project to be built by Rush.\r\n   */\r\n  public get projectFolder(): string {\r\n    return this._projectFolder;\r\n  }\r\n\r\n  /**\r\n   * The relative path of the folder that contains the project to be built by Rush.\r\n   */\r\n  public get projectRelativeFolder(): string {\r\n    return this._projectRelativeFolder;\r\n  }\r\n\r\n  /**\r\n   * The review category name, or undefined if no category was assigned.\r\n   * This name must be one of the valid choices listed in RushConfiguration.reviewCategories.\r\n   */\r\n  public get reviewCategory(): string {\r\n    return this._reviewCategory;\r\n  }\r\n\r\n  /**\r\n   * A list of local projects that appear as devDependencies for this project, but cannot be\r\n   * locally linked because it would create a cyclic dependency; instead, the last published\r\n   * version will be installed in the Common folder.\r\n   *\r\n   * These are package names that would be found by RushConfiguration.getProjectByName().\r\n   */\r\n  public get cyclicDependencyProjects(): Set<string> {\r\n    return this._cyclicDependencyProjects;\r\n  }\r\n\r\n  /**\r\n   * A list of projects within the Rush configuration which directly depend on this package.\r\n   */\r\n  public get downstreamDependencyProjects(): string[] {\r\n    return this._downstreamDependencyProjects;\r\n  }\r\n\r\n  /**\r\n   * The parsed NPM \"package.json\" file from projectFolder.\r\n   */\r\n  public get packageJson(): PackageJson {\r\n    return this._packageJson;\r\n  }\r\n\r\n  /**\r\n   * The unique name for the temporary project that will be generated in the Common folder.\r\n   * For example, if the project name is \"@ms/MyProject\", the temporary project name\r\n   * might be \"rush-MyProject-2\".\r\n   */\r\n  public get tempProjectName(): string {\r\n    return this._tempProjectName;\r\n  }\r\n\r\n  /**\r\n   * A flag which indicates whether changes to this project should be published. This controls\r\n   * whether or not the project would show up when running `rush change`, and whether or not it\r\n   * should be published during `rush publish`.\r\n   */\r\n  public get shouldPublish(): boolean {\r\n    return this._shouldPublish;\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}