"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var decorators_1 = require("@microsoft/decorators");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var ReservedEventNames_1 = require("./ReservedEventNames");
var EventAggregator = (function () {
    function EventAggregator() {
        this._events = new Map();
        this._sources = new Map();
    }
    EventAggregator.prototype.subscribeByEventName = function (eventName, subscriberId, callback) {
        sp_core_library_1.Validate.isNotNullOrUndefined(eventName, 'eventName');
        this._validateEvent(eventName);
        this._setSubscription(eventName, subscriberId, callback, this._events);
    };
    EventAggregator.prototype.subscribeBySourceId = function (sourceId, subscriberId, callback) {
        sp_core_library_1.Validate.isNotNullOrUndefined(sourceId, 'sourceId');
        this._setSubscription(sourceId, subscriberId, callback, this._sources);
    };
    EventAggregator.prototype.raiseEvent = function (eventName, eventObject) {
        sp_core_library_1.Validate.isNotNullOrUndefined(eventName, 'eventName');
        sp_core_library_1.Validate.isNotNullOrUndefined(eventObject, 'eventObject');
        sp_core_library_1.Validate.isNotNullOrUndefined(eventObject.sourceId, 'eventObject.sourceId');
        var targets = {};
        this._validateEvent(eventName);
        this._processEvent(eventName, eventObject, targets, this._events.get(eventName));
        this._processEvent(eventName, eventObject, targets, this._sources.get(eventObject.sourceId));
    };
    EventAggregator.prototype._validateEvent = function (eventName) {
        var e = eventName.split(ReservedEventNames_1.default.delimitor);
        if (e.length !== 2) {
            throw new Error('Event ' + eventName + ' not in eventName:action format');
        }
    };
    EventAggregator.prototype._processEvent = function (eventName, eventObject, targets, map) {
        if (map) {
            map.forEach(function (callback, targetId) {
                if (!targets[targetId]) {
                    targets[targetId] = true;
                    callback(eventName, eventObject);
                }
            });
        }
    };
    EventAggregator.prototype._setSubscription = function (id, subscriberId, callback, eventBucket) {
        sp_core_library_1.Validate.isNotNullOrUndefined(subscriberId, 'subscriberId');
        sp_core_library_1.Validate.isNotNullOrUndefined(callback, 'callback');
        if (!eventBucket.get(id)) {
            eventBucket.set(id, new Map());
        }
        var map = eventBucket.get(id);
        map.set(subscriberId, callback);
    };
    return EventAggregator;
}());
EventAggregator = __decorate([
    decorators_1.sealed
], EventAggregator);
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = EventAggregator;
