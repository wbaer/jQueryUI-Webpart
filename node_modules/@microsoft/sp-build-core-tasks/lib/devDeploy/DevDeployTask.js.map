{"version":3,"sources":["devDeploy/DevDeployTask.ts"],"names":[],"mappings":"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","file":"devDeploy/DevDeployTask.js","sourcesContent":["import * as gulp from 'gulp';\r\nimport {\r\n  IClientSideComponentManifest,\r\n  IClientSideComponentLoaderConfiguration,\r\n  IModuleConfiguration,\r\n  IPathModuleConfiguration,\r\n  IComponentModuleConfiguration,\r\n  ILocalizedPathModuleConfiguration,\r\n  IPath\r\n} from '@microsoft/sp-module-interfaces';\r\nimport * as path from 'path';\r\nimport * as glob from 'glob';\r\nimport * as Webpack from 'webpack';\r\nimport {\r\n  RushConfiguration,\r\n  RushConfigurationProject\r\n} from '@microsoft/rush-lib';\r\n\r\nimport OdspGulpTask from './../OdspGulpTask';\r\nimport CumulativeManifestProcessor, {\r\n  IReferencedProject,\r\n  ForceSearch,\r\n  IReferencedProjectMap\r\n} from './../writeManifests/cumulativeManifest/cumulativeManifestProcessor';\r\nimport { IDeployAzureTaskConfigBase } from './../deployAzureStorage/DeployAzureStorageTask';\r\nimport { getAzureStorageUrl } from './../deployAzureStorage/uploadCDN/deployToAzure';\r\nimport ensureBlobService from './../utilities/azureStorage/ensureBlobService';\r\nimport ensureContainer from './../utilities//azureStorage/ensureContainer';\r\nimport uploadFileToAzure from './../utilities//azureStorage/uploadFileToAzure';\r\nimport {\r\n  joinUrlSegments,\r\n  ensureTrailingSlash,\r\n  isUrl\r\n} from './../utilities/url';\r\n\r\nconst manifestsAzureFilename: string = 'manifests.js';\r\nconst spLoaderId: string = '1c6c9123-7aac-41f3-a376-3caea41ed83f';\r\n\r\nexport interface IDevDeployTaskConfig extends IDeployAzureTaskConfigBase {\r\n  /**\r\n   * The directory in the Azure container to use. Recommended to be set to something that includes your user name\r\n   *  to ensure you don't clobber others' work.\r\n   */\r\n  containerDirectoryName?: string;\r\n\r\n  /**\r\n   * If false, the current project directory and its dependencies are deployed. If true, we attempt to find a\r\n   *  rush.json file and deploy everything in the repo. Defaults to false.\r\n   */\r\n  useRush?: boolean;\r\n}\r\n\r\nexport class DevDeployTask extends OdspGulpTask<IDevDeployTaskConfig> {\r\n  public name: string = 'dev-deploy';\r\n  public taskConfig: IDevDeployTaskConfig = {\r\n    useRush: false\r\n  };\r\n\r\n  public executeTask(gulp: gulp.Gulp, completeCallback: (error?: string) => void): Promise<{}> {\r\n    if (!this.taskConfig.account) {\r\n      completeCallback('Azure storage account not set.');\r\n      return;\r\n    }\r\n\r\n    if (!this.taskConfig.accessKey) {\r\n      completeCallback('Azure storage account access key not set.');\r\n      return;\r\n    }\r\n\r\n    if (!this.taskConfig.container) {\r\n      completeCallback('Azure container name not set.');\r\n      return;\r\n    }\r\n\r\n    if (!this.taskConfig.containerDirectoryName) {\r\n      this.logWarning('It is strongly recommended a directory inside the container be used to avoid clobbering other ' +\r\n                      'users\\' dev deployments.');\r\n    }\r\n\r\n    this.taskConfig.useRush = this.taskConfig.useRush || (process.argv.indexOf('--rush') !== -1);\r\n\r\n    const cumulativeManifestProcessor: CumulativeManifestProcessor = new CumulativeManifestProcessor(this);\r\n    let manifests: IReferencedProjectMap;\r\n    try {\r\n      manifests = this._getManifests(cumulativeManifestProcessor);\r\n    } catch (e) {\r\n      completeCallback(e);\r\n      return;\r\n    }\r\n\r\n    const manifestsArray: IClientSideComponentManifest[] = [];\r\n\r\n    this.logVerbose(`Discovered ${Object.keys(manifests).length} projects.`);\r\n\r\n    const storageDirName: string = this._getStorageDirName();\r\n    const containerUrl: string = this._getContainerUrl();\r\n\r\n    const filesToUpload: Map<string, string> = new Map<string, string>();\r\n    const dirsToUpload: Map<string, string> = new Map<string, string>();\r\n    const projectContainerNames: Map<string, string[]> = new Map<string, string[]>(); // Ensure we don't reuse a name\r\n\r\n    let spLoaderPath: string;\r\n    let debugSPLoader: string;\r\n\r\n    // Loop through the manifests and collect files and directories to be uploaded, and fix up manifest fields\r\n    for (const id in manifests) {\r\n      if (manifests.hasOwnProperty(id)) {\r\n        const manifestProject: IReferencedProject = manifests[id];\r\n        const manifest: IClientSideComponentManifest = manifestProject.manifestData;\r\n        const loaderConfig: IClientSideComponentLoaderConfiguration = manifest.loaderConfig;\r\n\r\n        manifestsArray.push(manifest);\r\n\r\n        const projectContainerName: string = this._getAzureDirName(projectContainerNames, manifestProject.packagePath);\r\n        const projectBasePath: string = joinUrlSegments(storageDirName, projectContainerName);\r\n        const projectBaseFullUrl: string = joinUrlSegments(containerUrl, projectBasePath);\r\n\r\n        loaderConfig.internalModuleBaseUrls = [ ensureTrailingSlash(projectBaseFullUrl) ];\r\n\r\n        // Ensure we don't reuse a name\r\n        const resourceContainerNames: Map<string, string[]> = new Map<string, string[]>();\r\n\r\n        const processPath: (rawResourcePath: string | IPath) => string =\r\n                            (rawResourcePath: string | IPath): string => {\r\n            const resourcePath: string = this._disambiguatePath(rawResourcePath);\r\n\r\n            if (isUrl(resourcePath)) {\r\n              return resourcePath; // Do not deal with fully-qualified URL.\r\n            } else {\r\n              const filesystemPath: string = path.join(manifestProject.packagePath, resourcePath);\r\n              const filename: string = path.basename(resourcePath);\r\n\r\n              // Path resources are in the 'dist' directory by default and usually have some secondary\r\n              //  references, so let's just upload the whole directory.\r\n              const filesystemDirectory: string = path.dirname(filesystemPath);\r\n\r\n              const azureResourceDirName: string = this._getAzureDirName(resourceContainerNames,\r\n                filesystemDirectory);\r\n              const azureDirectory: string = joinUrlSegments(projectBasePath, azureResourceDirName);\r\n              dirsToUpload.set(filesystemDirectory, azureDirectory);\r\n\r\n              if (!spLoaderPath && id === spLoaderId) {\r\n                spLoaderPath = azureDirectory;\r\n                debugSPLoader = filename;\r\n              }\r\n\r\n              return joinUrlSegments(azureResourceDirName, filename);\r\n            }\r\n          };\r\n\r\n        for (const scriptResourceId in loaderConfig.scriptResources) {\r\n          if (loaderConfig.scriptResources.hasOwnProperty(scriptResourceId)) {\r\n            const scriptResource: IModuleConfiguration = loaderConfig.scriptResources[scriptResourceId];\r\n\r\n            switch (scriptResource.type) {\r\n              case 'path':\r\n                // Path script resource, we need to fix up its path and upload it\r\n                const pathResource: IPathModuleConfiguration = scriptResource as IPathModuleConfiguration;\r\n                pathResource.path = processPath(pathResource.path);\r\n                break;\r\n\r\n              case 'component':\r\n                // We probably don't need to upload the fallback file, and it's nigh-impossible to tell if we'll\r\n                //  miss secondary dependencies by only uploading the file at the failoverPath, so we'll just clear it\r\n                //  out and hope this dependency is either satisified by another dev-deploy manifest or by the OOB\r\n                //  framework\r\n                const componentResource: IComponentModuleConfiguration =\r\n                  scriptResource as IComponentModuleConfiguration;\r\n                componentResource.failoverPath = undefined;\r\n                break;\r\n\r\n              case 'localizedPath':\r\n                // Localized path script resource, we need to fix up the paths for each locale and upload each file\r\n                const localizedPathResource: ILocalizedPathModuleConfiguration =\r\n                  scriptResource as ILocalizedPathModuleConfiguration;\r\n\r\n                localizedPathResource.defaultPath = processPath(localizedPathResource.defaultPath);\r\n                if (localizedPathResource.paths) {\r\n                  for (const locale in localizedPathResource.paths) {\r\n                    if (localizedPathResource.paths.hasOwnProperty(locale)) {\r\n                      localizedPathResource.paths[locale] = processPath(localizedPathResource.paths[locale]);\r\n                    }\r\n                  }\r\n                }\r\n                break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Expand directories to individual files\r\n    const directoryExpandPromises: Promise<void>[] = [];\r\n    dirsToUpload.forEach((azureDirName: string, localDirName: string): void => {\r\n      directoryExpandPromises.push(this._getFilesInDirectory(localDirName).then((files: string[]): void => {\r\n        files.forEach((file: string): void => {\r\n          const azureUrl: string = joinUrlSegments(azureDirName, file.replace(/\\\\/g, '/'));\r\n          filesToUpload.set(path.join(localDirName, file), azureUrl);\r\n        });\r\n      }));\r\n    });\r\n\r\n    const blobServicePromise: Promise<IAzureBlobService> =\r\n        ensureBlobService(this.taskConfig.account, this.taskConfig.accessKey)\r\n            .then((blobService: IAzureBlobService) => ensureContainer(blobService,\r\n                                                                      this.taskConfig.container,\r\n                                                                      /* createContainerOptions */ undefined,\r\n                                                                      this.log.bind(this)));\r\n\r\n    const uploadPromise: Promise<IAzureBlobService[]> = blobServicePromise.then((blobService: IAzureBlobService) => {\r\n      return Promise.all(directoryExpandPromises).then(() => {\r\n        const uploadPromises: Promise<IAzureBlobService>[] = [];\r\n        filesToUpload.forEach((azurePath: string, localFile: string) => {\r\n          uploadPromises.push(uploadFileToAzure(blobService,\r\n                                                this.taskConfig.container,\r\n                                                localFile,\r\n                                                azurePath,\r\n                                                this.log.bind(this)));\r\n        });\r\n\r\n        return Promise.all(uploadPromises);\r\n      });\r\n    });\r\n\r\n    const manifestsFilePromise: Promise<IAzureBlobService> = uploadPromise.then((blobServices: IAzureBlobService[]) => {\r\n      const blobService: IAzureBlobService = blobServices[0];\r\n\r\n      const webpackConfig: Webpack.Configuration =\r\n        cumulativeManifestProcessor.getManifestsFileWebpackConfig(manifestsArray);\r\n      const manifestsFilename: string = 'devDeployManifests.js';\r\n      const manifestsFileFullPath: string = path.join(webpackConfig.output.path, manifestsFilename);\r\n      webpackConfig.output.filename = manifestsFilename;\r\n      webpackConfig.entry = cumulativeManifestProcessor.manifestsFilePath;\r\n\r\n      return new Promise<void>((resolve: () => void, reject: (error: Error) => void): void => {\r\n        Webpack(webpackConfig, (err: Error): void => {\r\n          if (err) {\r\n            reject(err);\r\n          } else {\r\n            resolve();\r\n          }\r\n        });\r\n      }).then(() => {\r\n        return uploadFileToAzure(blobService,\r\n                                 this.taskConfig.container,\r\n                                 manifestsFileFullPath,\r\n                                 joinUrlSegments(storageDirName, manifestsAzureFilename),\r\n                                 this.log.bind(this));\r\n      });\r\n    });\r\n\r\n    return manifestsFilePromise.then(() => {\r\n      const devDeployUrl: string = this.getDeployUrl();\r\n      const loaderUrl: string = joinUrlSegments(containerUrl, spLoaderPath, debugSPLoader);\r\n\r\n      this.log('UPLOAD COMPLETE.');\r\n\r\n      if (loaderUrl) {\r\n        this.log(`Debug loader: \"?moduleloader=${loaderUrl}\"`);\r\n      }\r\n\r\n      this.log(`Debug manifest: \"#debugManifestsFile=${devDeployUrl}\"`);\r\n      this.properties.devDeployUrl = devDeployUrl;\r\n\r\n      completeCallback();\r\n      return {};\r\n    }).catch((error: Error) => {\r\n      completeCallback(error.message);\r\n      return {};\r\n    });\r\n  }\r\n\r\n  public getDeployUrl(): string {\r\n    return joinUrlSegments(this._getContainerUrl(),\r\n                           this._getStorageDirName(),\r\n                           manifestsAzureFilename);\r\n  }\r\n\r\n  private _getContainerUrl(): string {\r\n    return getAzureStorageUrl(this.taskConfig.account,\r\n                              this.taskConfig.container);\r\n  }\r\n\r\n  private _getStorageDirName(): string {\r\n    return this.taskConfig.containerDirectoryName || '';\r\n  }\r\n\r\n  private _disambiguatePath(path: string | IPath): string {\r\n    return typeof path === 'string' ? path as string : (path as IPath).default;\r\n  }\r\n\r\n  private _getFilesInDirectory(dirName: string): Promise<string[]> {\r\n    return new Promise<string[]>((resolve: (result: string[]) => void, reject: (error: Error) => void): void => {\r\n      glob(path.join('**', '*.*'), { cwd: dirName }, (error: Error, files: string[]): void => {\r\n        if (error) {\r\n          reject(error);\r\n        } else {\r\n          resolve(files);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This function returns a directory name to be used in a directory on Azure storage, ensuring that the name does\r\n   *  not collide with another directory's name. It also ensures that if the specified filesystem path has already\r\n   *  been mapped to an Azure directory, the same name is used on Azure.\r\n   */\r\n  private _getAzureDirName(directoryMap: Map<string, string[]>, filesystemPath: string): string {\r\n    let azureDirName: string = path.basename(filesystemPath).toLowerCase();\r\n    if (directoryMap.has(azureDirName)) {\r\n      const existingPaths: string[] = directoryMap.get(azureDirName);\r\n      const currentPathId: number = existingPaths.indexOf(filesystemPath);\r\n\r\n      if (currentPathId === -1) {\r\n        azureDirName = `${azureDirName}_${existingPaths.length}`;\r\n        existingPaths.push(filesystemPath);\r\n      } else if (currentPathId > 0) {\r\n        azureDirName = `${azureDirName}_${currentPathId}`;\r\n      }\r\n    } else {\r\n      directoryMap.set(azureDirName, [filesystemPath]);\r\n    }\r\n\r\n    return azureDirName;\r\n  }\r\n\r\n  private _getManifests(cumulativeManifestProcessor: CumulativeManifestProcessor): IReferencedProjectMap {\r\n    if (this.taskConfig.useRush) {\r\n      const rushConfig: RushConfiguration = RushConfiguration.loadFromDefaultLocation();\r\n      if (!rushConfig) {\r\n        throw 'Unable to find the rush configuration file.';\r\n      }\r\n\r\n      let manifests: IReferencedProjectMap;\r\n      const directories: string[] = rushConfig.projects.map((proj: RushConfigurationProject) => proj.projectFolder);\r\n      manifests = cumulativeManifestProcessor.discoverManifests(directories[0], ForceSearch.deepSparse);\r\n      for (let i: number = 1; i < directories.length; i++) {\r\n        const projectManifests: IReferencedProjectMap =\r\n          cumulativeManifestProcessor.discoverManifests(directories[i], ForceSearch.deepSparse);\r\n        manifests = this._mergeReferencedProjectLists(manifests, projectManifests);\r\n      }\r\n\r\n      return manifests;\r\n    } else {\r\n      return cumulativeManifestProcessor.discoverManifests(this.buildConfig.rootPath, ForceSearch.deepSparse);\r\n    }\r\n\r\n  }\r\n\r\n  private _mergeReferencedProjectLists(list1: IReferencedProjectMap,\r\n                                       list2: IReferencedProjectMap): IReferencedProjectMap {\r\n    const ids: Set<string> = new Set<string>();\r\n    Object.keys(list1).concat(Object.keys(list2)).forEach((id: string) => ids.add(id));\r\n\r\n    const result: IReferencedProjectMap = {};\r\n\r\n    ids.forEach((id: string) => {\r\n      const list1Element: IReferencedProject = list1[id];\r\n      const list2Element: IReferencedProject = list2[id];\r\n      if (!list1Element || !list2Element) {\r\n        // Element is only present in one list\r\n        result[id] = list1Element || list2Element;\r\n      } else if (list1Element.manifestCreationTime > list2Element.manifestCreationTime) {\r\n        // List 1's element is newer\r\n        result[id] = list1Element;\r\n      } else {\r\n        // List 2's element is newer, or they have the same age\r\n        result[id] = list2Element;\r\n      }\r\n    });\r\n\r\n    return result;\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}