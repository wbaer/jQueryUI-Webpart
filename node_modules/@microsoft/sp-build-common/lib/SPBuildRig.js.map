{"version":3,"sources":["SPBuildRig.ts"],"names":[],"mappings":"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","file":"SPBuildRig.js","sourcesContent":["/// <reference path=\"./../typings/tsd.d.ts\" />\r\n\r\nimport * as path from 'path';\r\nimport * as gulp from 'gulp';\r\nimport * as yargs from 'yargs';\r\n\r\nimport * as coreBuild from '@microsoft/gulp-core-build';\r\n\r\nimport { initializeTslintTask } from '@microsoft/sp-tslint-rules';\r\nimport { typescript, tslint, removeTripleSlash, apiExtractor } from '@microsoft/gulp-core-build-typescript';\r\n\r\nimport { BuildRig, ITaskDefinition, ICoreBuildArgs } from './BuildRig';\r\nimport { BuildRigConstants } from './BuildRigConstants';\r\n\r\nexport const preCopy: coreBuild.CopyTask = new coreBuild.CopyTask();\r\nexport const postCopy: coreBuild.CopyTask = new coreBuild.CopyTask();\r\n\r\nexport interface ISPBuildRigArgs extends ICoreBuildArgs {\r\n  /**\r\n   * All SPFx build rigs can be tested in a specific locale using this flag,\r\n   * which is defined in the localization code\r\n   *\r\n   * @todo 253519 remove this once this logic is in GCB/the Task definition\r\n   */\r\n  locale: string;\r\n\r\n  /**\r\n   * When this flag is enabled, certain expensive build steps will be disabled.\r\n   * This should allow the developer to quickly refresh their repository after\r\n   * pulling from master, or in the inner loop (when doing serve)\r\n   */\r\n  minimal: boolean;\r\n}\r\n\r\n/**\r\n * This class represents the basic shared build rig for all SPFx Rigs. It defines a few\r\n * simple sub-tasks, and only registers a \"build\" task.\r\n */\r\nexport class SPBuildRig extends BuildRig {\r\n  protected _preBuildTasks: coreBuild.IExecutable[] = [];\r\n  protected _postTypescriptTasks: coreBuild.IExecutable[] = [];\r\n  protected _postBuildTasks: coreBuild.IExecutable[] = [];\r\n\r\n  protected args: ISPBuildRigArgs;\r\n\r\n  public initialize(gulp: gulp.Gulp): void {\r\n    super.initialize(gulp);\r\n  }\r\n\r\n  /**\r\n   * Register additional sub-tasks to run before the typescript subtask.\r\n   * Note, this is meant to be used in a gulpfile.js to inject one-off subtasks\r\n   */\r\n  public addPreBuildTask(tasks: coreBuild.IExecutable | coreBuild.IExecutable[]): void {\r\n    this._addTaskOrListOfTasks(tasks, this._preBuildTasks);\r\n  }\r\n\r\n  /**\r\n   * Register additional sub-tasks to run after the typescript subtask.\r\n   * Note, this is meant to be used in a gulpfile.js to inject one-off subtasks\r\n   */\r\n  public addPostTypescriptTask(tasks: coreBuild.IExecutable | coreBuild.IExecutable[]): void {\r\n    this._addTaskOrListOfTasks(tasks, this._postTypescriptTasks);\r\n  }\r\n\r\n  /**\r\n   * Register additional sub-tasks to run after the typescript subtask.\r\n   * @deprecated\r\n   */\r\n  public addBuildTasks(tasks: coreBuild.IExecutable | coreBuild.IExecutable[]): void {\r\n    this._addTaskOrListOfTasks(tasks, this._postTypescriptTasks);\r\n  }\r\n\r\n  /**\r\n   * Register additional sub-tasks to run after the entire build.\r\n   * Note, this is meant to be used in a gulpfile.js to inject one-off subtasks\r\n   */\r\n  public addPostBuildTask(tasks: coreBuild.IExecutable | coreBuild.IExecutable[]): void {\r\n    this._addTaskOrListOfTasks(tasks, this._postBuildTasks);\r\n  }\r\n\r\n  /**\r\n   * Registers the command line arguments which are available for this rig\r\n   * @todo 253519 this code should be moved into gulp-core-build/the task definitions\r\n   */\r\n  protected getYargs(): yargs.Argv {\r\n    return super.getYargs()\r\n      .option('locale', {\r\n        alias: 'l',\r\n        describe: 'override the default culture (e.g. \"fr-fr\")',\r\n        type: 'string'\r\n      })\r\n      .option('minimal', {\r\n        alias: 'm',\r\n        describe: 'Speeds up the build by running the minimal set of tasks required to produce an executable output',\r\n        type: 'boolean'\r\n      })\r\n      .command(BuildRigConstants.tasks.build, 'build the project')\r\n      .command(BuildRigConstants.tasks.default, 'equivalent to bundle');\r\n  }\r\n\r\n  /**\r\n   * Register 2 tasks, build and default, which simply copy files, then run typescript and tslint\r\n   */\r\n  protected getTasks(): Map<string, ITaskDefinition> {\r\n    const result: Map<string, ITaskDefinition> = new Map<string, ITaskDefinition>();\r\n\r\n    result.set(BuildRigConstants.tasks.build, { executable: this.getBuildTask() });\r\n    result.set(BuildRigConstants.tasks.default, { executable: this.getBuildTask() });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Override this function to overwrite the \"build\" task\r\n   */\r\n  protected getBuildTask(): coreBuild.IExecutable {\r\n    return coreBuild.serial(\r\n             preCopy,\r\n             coreBuild.serial(this._preBuildTasks),\r\n             this.getCoreBuildTask(),\r\n             coreBuild.serial(this._postBuildTasks),\r\n             postCopy);\r\n  }\r\n\r\n  /**\r\n   * Override this function to redefine the core build loop\r\n   */\r\n  protected getCoreBuildTask(): coreBuild.IExecutable {\r\n    return coreBuild.parallel(\r\n      tslint,\r\n      coreBuild.serial(\r\n        coreBuild.serial(typescript, removeTripleSlash, apiExtractor),\r\n        coreBuild.serial(...this._postTypescriptTasks)\r\n      )\r\n    );\r\n  }\r\n\r\n  protected setupSharedConfig(): void {\r\n    // Ensure that the SPFx tslint rules are activated\r\n    initializeTslintTask(tslint);\r\n\r\n    tslint.mergeConfig({\r\n      displayAsWarning: true\r\n    });\r\n\r\n    preCopy.name = 'pre-copy';\r\n    postCopy.name = 'post-copy';\r\n\r\n    apiExtractor.mergeConfig({\r\n      apiJsonFolder: path.join(process.cwd(), 'dist')\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This function cleans up the shared config by populating task config properties that depend on other tasks'\r\n   *  user-defined properties.\r\n   */\r\n  protected finalizeSharedConfig(): void {\r\n    if (this.args.minimal) {\r\n      this._disableTasks(tslint, apiExtractor);\r\n    }\r\n  }\r\n\r\n  private _addTaskOrListOfTasks(tasks: coreBuild.IExecutable | coreBuild.IExecutable[],\r\n                                array: coreBuild.IExecutable[]): void {\r\n    if ((tasks as coreBuild.IExecutable[]).length) {\r\n      array.push(...(tasks as coreBuild.IExecutable[]));\r\n    } else {\r\n      array.push(tasks as coreBuild.IExecutable);\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\src"}