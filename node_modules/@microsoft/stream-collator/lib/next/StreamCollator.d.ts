/// <reference types="node" />
/**
 * @file StreamCollator.ts
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * A special stream which will manage the output of multiple parallel streams,
 * ensuring that only 1 stream is writing to the console at a given time.
 */
import * as stream from 'stream';
/**
 * A class which manages the output of multiple threads.
 */
export default class StreamCollator<T extends NodeJS.ReadableStream> extends stream.Readable implements NodeJS.ReadableStream {
    private _streams;
    private _activeStream;
    _read(): void;
    /**
     * Registers a stream into the list of active buffers.
     */
    register(stream: T): void;
    /**
     * Locates a suitable stream which could be set as the new active stream
     */
    private _findActiveTaskCandidate();
    /**
     * Ensures that a stream is set as active, will set the passed in stream as the active stream if none exists
     */
    private _ensureActiveTask();
    /**
     * Flushes a streams buffer and writes it to disk
     */
    private _writeTaskBuffer(stream);
    /**
     * The on('data') callback handler, which either writes or buffers the data
     */
    private _streamData(stream);
    /**
     * Marks a stream as completed. There are 3 cases:
     *  - If the stream was the active stream, also write out all completed, unwritten streams
     *  - If there is no active stream, write the output to the screen
     *  - If there is an active stream, mark the stream as completed and wait for active stream to complete
     */
    private _streamEnd(stream);
    /**
     * Helper function which returns true if all streams have been closed
     */
    private _areStreamsClosedAndWritten();
    /**
     * Helper function which writes all completed streams
     */
    private _writeAllCompletedTasks();
}
