/// <reference types="whatwg-fetch" />
/// <reference types="es6-promise" />
import IDigestCache from './IDigestCache';
import ODataVersion from './ODataVersion';
import SPHttpClientCommonConfiguration from './SPHttpClientCommonConfiguration';
import { ISPHttpClientOptions } from './SPHttpClient';
import HttpClientHelper from '../httpClient/HttpClientHelper';
/**
 * Private - this class contains some internal code shared between SPHttpClient
 * and SPHttpClientBatch.
 */
export default class SPHttpClientHelper extends HttpClientHelper {
    static cloneHeaders(options: RequestInit): Headers;
    static applyDefaultHeaders(headers: Headers, configuration: SPHttpClientCommonConfiguration, options: ISPHttpClientOptions, oDataVersion: ODataVersion | undefined): void;
    /**
     * For both SPHttpClient and SPHttpClientBatch, we fetch a digest and then use it to
     * to make a REST call.  If the REST fails in a way that the digest is invalid,
     * we need to discard the bad digest.  This function is the common implementation
     * of that logic, in case we need to add special cases in the future.
     *
     * @param promise       - the promise returned by IFetchProvider.fetch()
     * @param webUrl        - the cache key to clear
     * @param digestCache   - the cache
     * @returns             - the promise after this logic is applied
     */
    static handleAuthenticationErrors(promise: Promise<Response>, webUrl: string, digestCache: IDigestCache): Promise<Response>;
}
