/// <reference types="es6-promise" />
import { ServiceKey, ServiceScope } from '@microsoft/sp-core-library';
import PageContext, { IPageContextData } from '../PageContext';
/**
  * The page context represents contextual information about the SharePoint page that
  * is currently being viewed, such as its site URL, the client side application ID,
  * the current user, etc.  The page context objects themselves represent key information
  * that is needed e.g. to identify the site/web/list/listitem in a REST service call,
  * but it is not a full cache with invalidation and change notifications.
  *
  * @alpha
  */
export default class PageManager {
    /**
     * The service key for PageManager.
     */
    static readonly serviceKey: ServiceKey<PageManager>;
    private _pageContext;
    private _pageContextDataProvider;
    constructor(serviceScope: ServiceScope);
    readonly pageContext: PageContext;
    /**
     * This function fetches the Page Context's data for specified serverRelativePageUrl
     * and re-initializes the Page Context with that data. The Session is also
     * updated with a new randomly generated pageId. If the function is provided
     * a cached IPageContextData, it will use that to fufill the request rather than
     * communicating with the server.
     * @param serverRelativePageUrl - a SharePoint url that we want data from.
     */
    navigateToPage(serverRelativePageUrl: string, options?: IPageContextData, legacyPageContext?: any): Promise<void>;
}
