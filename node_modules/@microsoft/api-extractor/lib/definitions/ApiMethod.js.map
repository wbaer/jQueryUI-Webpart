{"version":3,"sources":["definitions/ApiMethod.ts"],"names":[],"mappings":";;;;;;AACA,qCAAyD;AACzD,yCAAoC;AACpC,+CAA0C;AAC1C,0DAAqD;AAErD;;;;;;GAMG;AACH;IAAuC,6BAAS;IAI9C,mBAAY,OAAwB;QAApC,YACE,kBAAM,OAAO,CAAC,SA+Bf;QA9BC,KAAI,CAAC,IAAI,GAAG,qBAAW,CAAC,MAAM,CAAC;QAE/B,IAAM,iBAAiB,GAAyB,OAAO,CAAC,WAAmC,CAAC;QAE5F,aAAa;QACb,EAAE,CAAC,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC,CAAC;YACjC,KAAI,CAAC,MAAM,GAAG,EAAE,CAAC;YACjB,GAAG,CAAC,CAAgB,UAA4B,EAA5B,KAAA,iBAAiB,CAAC,UAAU,EAA5B,cAA4B,EAA5B,IAA4B;gBAA3C,IAAM,KAAK,SAAA;gBACd,IAAM,iBAAiB,GAAc,2BAAiB,CAAC,0BAA0B,CAAC,KAAK,CAAC,CAAC;gBACzF,IAAM,YAAY,GAAiB,IAAI,sBAAY,CAAC;oBAClD,SAAS,EAAE,KAAI,CAAC,SAAS;oBACzB,WAAW,EAAE,KAAK;oBAClB,iBAAiB,EAAE,iBAAiB;oBACpC,SAAS,EAAE,KAAK;iBACjB,CAAC,CAAC;gBAEH,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBACnC,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;aAChC;QACH,CAAC;QAED,cAAc;QACd,EAAE,CAAC,CAAC,CAAC,CAAC,KAAI,CAAC,IAAI,KAAK,eAAe,CAAC,CAAC,CAAC,CAAC;YACrC,EAAE,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC3B,KAAI,CAAC,UAAU,GAAG,iBAAiB,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;YACrD,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,KAAI,CAAC,UAAU,GAAG,KAAK,CAAC;gBACxB,KAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;YACjC,CAAC;QACH,CAAC;;IACH,CAAC;IACH,gBAAC;AAAD,CArCA,AAqCC,CArCsC,mBAAS,GAqC/C","file":"definitions/ApiMethod.js","sourcesContent":["import * as ts from 'typescript';\r\nimport { ApiItemKind, IApiItemOptions } from './ApiItem';\r\nimport ApiMember from './ApiMember';\r\nimport ApiParameter from './ApiParameter';\r\nimport TypeScriptHelpers from '../TypeScriptHelpers';\r\n\r\n/**\r\n * This class is part of the ApiItem abstract syntax tree. It represents functions that are members of\r\n * classes, interfaces, or nested type literal expressions. Unlike ApiFunctions, ApiMethods can have\r\n * access modifiers (public, private, etc.) or be optional, because they are members of a structured type\r\n *\r\n * @see ApiFunction for functions that are defined inside of a package\r\n */\r\nexport default class ApiMethod extends ApiMember {\r\n  public returnType: string;\r\n  public params: ApiParameter[];\r\n\r\n  constructor(options: IApiItemOptions) {\r\n    super(options);\r\n    this.kind = ApiItemKind.Method;\r\n\r\n    const methodDeclaration: ts.MethodDeclaration = options.declaration as ts.MethodDeclaration;\r\n\r\n    // Parameters\r\n    if (methodDeclaration.parameters) {\r\n      this.params = [];\r\n      for (const param of methodDeclaration.parameters) {\r\n        const declarationSymbol: ts.Symbol = TypeScriptHelpers.tryGetSymbolForDeclaration(param);\r\n        const apiParameter: ApiParameter = new ApiParameter({\r\n          extractor: this.extractor,\r\n          declaration: param,\r\n          declarationSymbol: declarationSymbol,\r\n          jsdocNode: param\r\n        });\r\n\r\n        this.innerItems.push(apiParameter);\r\n        this.params.push(apiParameter);\r\n      }\r\n    }\r\n\r\n    // Return type\r\n    if (!(this.name === '__constructor')) {\r\n      if (methodDeclaration.type) {\r\n        this.returnType = methodDeclaration.type.getText();\r\n      } else {\r\n        this.returnType = 'any';\r\n        this.hasIncompleteTypes = true;\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}