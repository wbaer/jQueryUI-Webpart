import { ServiceScope } from '@microsoft/sp-core-library';
import ISuiteNavManagerConfiguration from './ISuiteNavManagerConfiguration';
import IComponentVisible from '../pageChrome/IComponentVisible';
export interface ISuiteNavManager extends IComponentVisible {
    loadSuiteNav(): void;
}
export default class SuiteNavManager implements ISuiteNavManager {
    static _defaultSuiteNavHeight: string;
    private static CACHE_PREFIX;
    private static SERVICE_KEY;
    private static DATA_KEY;
    private static DATE_KEY;
    private static VERSION_KEY;
    private static SESSION_KEY;
    private static CACHE_VERSION;
    private static _cache;
    private static _logSource;
    private _o365Shell;
    private _suiteNavManagerConfiguration;
    private _httpClient;
    private _suiteNavDataSource;
    private _suiteNavDiv;
    private _suiteNavModel;
    private _serviceScope;
    private static _updateCache(model, service);
    private static _clearCache();
    constructor(suiteNavManagerConfiguration: ISuiteNavManagerConfiguration, suiteNavDiv: HTMLDivElement, serviceScope: ServiceScope);
    /**
     * Sets the SuiteNav to be visible or not.
     * @param setVisible Set the visibility to be on or off.
     */
    setComponentVisibility(setVisible: boolean): void;
    /**
     * Loads the SuiteNav into the page by obtaining the data, building the model, getting the shell wrapper
     * and rendering it onto the page.
     */
    loadSuiteNav(): void;
    /**
     * Gets the suite nav data. Tries to grab SPO and OnPrem version in parallel and if SPO fails then
     * the onPrem version is loaded.
     * @param webServerRelativeUrl represents the SharePoint web server relative URL
     * @param cultureName represents the name of the culture (e.g. 'en-us')
     * @returns a promise that resolves to a string containing the response from the Suite Nav service.
     */
    private _getSuiteNavModel();
    private _loadSuiteNavFromCache();
    private _loadSuiteNavFromServer();
    /**
    * Alters the server response with the suite nav data.
    */
    private _modifySuiteNavModel(suiteNavResponse);
    /**
     * Gets the O365Shell object, once it's loaded. This will also load the shell CSS
     */
    private _getSuiteNavShell(suiteNavModel);
    /**
     * Renders the Suite Nav.
     * @param o365Shell represents the Suite Nav shell wrapper.
     * @param suiteNavData repsents the Suite Nav data that will be used for rendering.
     */
    private _renderSuiteNav(o365Shell);
    private _onRender(o365Shell);
    private _onPostRender();
    /**
      * LoadShellPlus will start downloading additional files required for notifications
      * and such. Once ShellPlus is ready, postRenderActions will be called.
      */
    private _loadShellPlus(o365Shell);
    private _isCacheValid();
    private _isCacheOutdated();
    private _createSPODataSource();
    private _createOnPremDataSource();
    /**
    * Create a log entry for logging
    * @param moduleName represents the module that the logger was called in
    * @param errorMessage represents the error string that occured
    */
    private _createSuiteNavErrorLogEntry(moduleName, errorMessage);
}
