{"version":3,"sources":["components/Popup/Popup.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,6BAA+B;AAC/B,6CAQyB;AAGzB;;GAEG;AACH;IAA2B,yBAA8B;IAAzD;;IAiFA,CAAC;IAnEQ,kCAAkB,GAAzB;QACE,IAAI,CAAC,uBAAuB,GAAG,uBAAW,EAAE,CAAC,aAA4B,CAAC;IAC5E,CAAC;IAEM,iCAAiB,GAAxB;QACE,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QAC9D,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAC5D,EAAE,CAAC,CAAC,mCAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC5C,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAC7B,CAAC;IACH,CAAC;IAEM,oCAAoB,GAA3B;QACE,EAAE,CAAC,CACD,IAAI,CAAC,KAAK,CAAC,kBAAkB;YAC7B,IAAI,CAAC,uBAAuB;YAC5B,IAAI,CAAC,cAAc;YACnB,IAAI,CAAC,uBAA8B,KAAK,MAAM,CAAC,CAAC,CAAC;YACjD,4GAA4G;YAC5G,8GAA8G;YAC9G,2EAA2E;YAC3E,EAAE,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC;gBACjC,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,CAAC;YACvC,CAAC;QACH,CAAC;IACH,CAAC;IAEM,sBAAM,GAAb;QACM,IAAA,eAAiE,EAA/D,cAAI,EAAE,wBAAS,EAAE,kCAAc,EAAE,oCAAe,CAAgB;QAEtE,MAAM,CAAC,CACL,sCACE,GAAG,EAAC,MAAM,IACL,0BAAc,CAAC,IAAI,CAAC,KAAK,EAAE,yBAAa,CAAC,IAC9C,SAAS,EAAG,SAAS,EACrB,IAAI,EAAG,IAAI,qBACO,cAAc,sBACb,eAAe,EAClC,SAAS,EAAG,IAAI,CAAC,UAAU,KACzB,IAAI,CAAC,KAAK,CAAC,QAAQ,CACjB,CACP,CAAC;IACJ,CAAC;IAGO,0BAAU,GAAlB,UAAmB,EAAoC;QACrD,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;YACjB,KAAK,oBAAQ,CAAC,MAAM;gBAElB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;oBACzB,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC;oBAEvB,EAAE,CAAC,cAAc,EAAE,CAAC;oBACpB,EAAE,CAAC,eAAe,EAAE,CAAC;gBACvB,CAAC;gBAED,KAAK,CAAC;QACV,CAAC;IACH,CAAC;IAEO,wBAAQ,GAAhB;QACE,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;IAC7B,CAAC;IAEO,uBAAO,GAAf;QACE,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;IAC9B,CAAC;IACH,YAAC;AAAD,CAjFA,AAiFC,CAjF0B,yBAAa;AAExB,kBAAY,GAAgB;IACxC,kBAAkB,EAAE,IAAI;CACzB,CAAC;AAuDF;IADC,oBAAQ;uCAcR;AAxEU,sBAAK","file":"components/Popup/Popup.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  BaseComponent,\r\n  KeyCodes,\r\n  divProperties,\r\n  doesElementContainFocus,\r\n  getDocument,\r\n  getNativeProps,\r\n  autobind\r\n} from '../../Utilities';\r\nimport { IPopupProps } from './Popup.Props';\r\n\r\n/**\r\n * This adds accessibility to Dialog and Panel controls\r\n */\r\nexport class Popup extends BaseComponent<IPopupProps, {}> {\r\n\r\n  public static defaultProps: IPopupProps = {\r\n    shouldRestoreFocus: true\r\n  };\r\n\r\n  public refs: {\r\n    [key: string]: React.ReactInstance;\r\n    root: HTMLElement;\r\n  };\r\n\r\n  private _originalFocusedElement: HTMLElement;\r\n  private _containsFocus: boolean;\r\n\r\n  public componentWillMount() {\r\n    this._originalFocusedElement = getDocument().activeElement as HTMLElement;\r\n  }\r\n\r\n  public componentDidMount(): void {\r\n    this._events.on(this.refs.root, 'focus', this._onFocus, true);\r\n    this._events.on(this.refs.root, 'blur', this._onBlur, true);\r\n    if (doesElementContainFocus(this.refs.root)) {\r\n      this._containsFocus = true;\r\n    }\r\n  }\r\n\r\n  public componentWillUnmount(): void {\r\n    if (\r\n      this.props.shouldRestoreFocus &&\r\n      this._originalFocusedElement &&\r\n      this._containsFocus &&\r\n      this._originalFocusedElement as any !== window) {\r\n      // This slight delay is required so that we can unwind the stack, let react try to mess with focus, and then\r\n      // apply the correct focus. Without the setTimeout, we end up focusing the correct thing, and then React wants\r\n      // to reset the focus back to the thing it thinks should have been focused.\r\n      if (this._originalFocusedElement) {\r\n        this._originalFocusedElement.focus();\r\n      }\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    let { role, className, ariaLabelledBy, ariaDescribedBy } = this.props;\r\n\r\n    return (\r\n      <div\r\n        ref='root'\r\n        { ...getNativeProps(this.props, divProperties) }\r\n        className={ className }\r\n        role={ role }\r\n        aria-labelledby={ ariaLabelledBy }\r\n        aria-describedby={ ariaDescribedBy }\r\n        onKeyDown={ this._onKeyDown }>\r\n        { this.props.children }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  @autobind\r\n  private _onKeyDown(ev: React.KeyboardEvent<HTMLElement>) {\r\n    switch (ev.which) {\r\n      case KeyCodes.escape:\r\n\r\n        if (this.props.onDismiss) {\r\n          this.props.onDismiss();\r\n\r\n          ev.preventDefault();\r\n          ev.stopPropagation();\r\n        }\r\n\r\n        break;\r\n    }\r\n  }\r\n\r\n  private _onFocus() {\r\n    this._containsFocus = true;\r\n  }\r\n\r\n  private _onBlur() {\r\n    this._containsFocus = false;\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}