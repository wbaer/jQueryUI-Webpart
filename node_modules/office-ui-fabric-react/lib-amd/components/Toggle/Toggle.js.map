{"version":3,"sources":["components/Toggle/Toggle.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;IAgBA;QAA4B,0BAA2C;QAWrE,gBAAY,KAAmB;YAA/B,YACE,iBAAO,SAMR;YAJC,KAAI,CAAC,KAAK,GAAG;gBACX,SAAS,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,cAAc,CAAC;aACrD,CAAC;YACF,KAAI,CAAC,GAAG,GAAG,KAAK,CAAC,EAAE,IAAI,iBAAK,CAAC,QAAQ,CAAC,CAAC;;QACzC,CAAC;QAKD,sBAAW,2BAAO;YAHlB;;eAEG;iBACH;gBACE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;YAC9B,CAAC;;;WAAA;QAEM,0CAAyB,GAAhC,UAAiC,QAAsB;YACrD,EAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC;gBACnC,IAAI,CAAC,QAAQ,CAAC;oBACZ,SAAS,EAAE,QAAQ,CAAC,OAAO;iBAC5B,CAAC,CAAC;YACL,CAAC;QACH,CAAC;QAEM,uBAAM,GAAb;YAAA,iBA4CC;YA3CK,IAAA,eAA4D,EAA1D,gBAAK,EAAE,kBAAM,EAAE,oBAAO,EAAE,wBAAS,EAAE,sBAAQ,CAAgB;YAC3D,IAAA,gCAAS,CAAgB;YAC/B,IAAI,SAAS,GAAG,SAAS,GAAG,MAAM,GAAG,OAAO,CAAC;YAC7C,IAAM,iBAAiB,GAAG,0BAAc,CAAC,IAAI,CAAC,KAAK,EAAE,4BAAgB,CAAC,CAAC;YACvE,MAAM,CAAC,CACL,6BAAK,SAAS,EACZ,eAAG,CAAC,qBAAM,CAAC,IAAI,EAAE,WAAW,EAAE,SAAS;wBACrC,YAAY,EAAE,SAAS;wBACvB,YAAY,EAAE,CAAC,QAAQ;wBACvB,aAAa,EAAE,QAAQ;;oBACvB,GAAC,qBAAM,CAAC,SAAS,IAAG,SAAS;oBAC7B,GAAC,qBAAM,CAAC,SAAS,IAAG,CAAC,QAAQ;oBAC7B,GAAC,qBAAM,CAAC,UAAU,IAAG,QAAQ;wBAE7B;gBAEF,6BAAK,SAAS,EAAG,eAAG,CAAC,qBAAM,CAAC,cAAc,EAAE,0BAA0B,CAAC;oBACnE,KAAK,IAAI,CACT,oBAAC,aAAK,IAAC,SAAS,EAAC,iBAAiB,EAAC,OAAO,EAAG,IAAI,CAAC,GAAG,IAAK,KAAK,CAAU,CAC1E;oBACD,6BAAK,SAAS,EAAG,eAAG,CAAC,qBAAM,CAAC,MAAM,EAAE,kBAAkB,CAAC;wBACrD,yCACE,GAAG,EAAG,UAAC,CAAC,IAAwB,OAAA,KAAI,CAAC,aAAa,GAAG,CAAC,EAAtB,CAAsB,EACtD,IAAI,EAAC,QAAQ,EACb,EAAE,EAAG,IAAI,CAAC,GAAG,IACR,iBAAiB,IACtB,IAAI,EAAG,IAAI,CAAC,GAAG,EACf,SAAS,EAAG,eAAG,CAAC,qBAAM,CAAC,MAAM,EAAE,kBAAkB,CAAC,EAClD,QAAQ,EAAG,QAAQ,kBACJ,SAAS,EACxB,OAAO,EAAG,IAAI,CAAC,QAAQ,IACvB;wBACF,6BAAK,SAAS,EAAG,eAAG,CAAC,qBAAM,CAAC,UAAU,EAAE,sBAAsB,CAAC;4BAC7D,6BAAK,SAAS,EAAG,eAAG,CAAC,qBAAM,CAAC,KAAK,EAAE,iBAAiB,CAAC,GAAK;4BAC1D,6BAAK,SAAS,EAAG,eAAG,CAAC,qBAAM,CAAC,KAAK,EAAE,iBAAiB,CAAC,GAAK,CACtD;wBACJ,SAAS,IAAI,CACb,oBAAC,aAAK,IAAC,SAAS,EAAG,eAAG,CAAC,qBAAM,CAAC,SAAS,EAAE,qBAAqB,CAAC,IAAK,SAAS,CAAU,CACxF,CACG,CACF,CACF,CACP,CAAC;;QACJ,CAAC;QAEM,sBAAK,GAAZ;YACE,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;gBACvB,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;YAC7B,CAAC;QACH,CAAC;QAGO,yBAAQ,GAAhB;YACM,IAAA,eAAmC,EAAjC,oBAAO,EAAE,wBAAS,CAAgB;YAClC,IAAA,gCAAS,CAAgB;YAE/B,wDAAwD;YACxD,EAAE,CAAC,CAAC,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC;gBAC1B,IAAI,CAAC,QAAQ,CAAC;oBACZ,SAAS,EAAE,CAAC,SAAS;iBACtB,CAAC,CAAC;YACL,CAAC;YAED,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;gBACd,SAAS,CAAC,CAAC,SAAS,CAAC,CAAC;YACxB,CAAC;QACH,CAAC;QACH,aAAC;IAAD,CAvGA,AAuGC,CAvG2B,KAAK,CAAC,SAAS;IAE3B,mBAAY,GAAG;QAC3B,KAAK,EAAE,EAAE;QACT,MAAM,EAAE,IAAI;QACZ,OAAO,EAAE,KAAK;KACf,CAAC;IAkFF;QADC,oBAAQ;0CAeR;IAtGU,wBAAM","file":"components/Toggle/Toggle.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  autobind,\r\n  css,\r\n  getId,\r\n  buttonProperties,\r\n  getNativeProps\r\n} from '../../Utilities';\r\nimport { IToggleProps } from './Toggle.Props';\r\nimport { Label } from '../../Label';\r\nimport styles from './Toggle.scss';\r\n\r\nexport interface IToggleState {\r\n  isChecked: boolean;\r\n}\r\n\r\nexport class Toggle extends React.Component<IToggleProps, IToggleState> {\r\n\r\n  public static initialProps = {\r\n    label: '',\r\n    onText: 'On',\r\n    offText: 'Off'\r\n  };\r\n\r\n  private _id: string;\r\n  private _toggleButton: HTMLButtonElement;\r\n\r\n  constructor(props: IToggleProps) {\r\n    super();\r\n\r\n    this.state = {\r\n      isChecked: !!(props.checked || props.defaultChecked)\r\n    };\r\n    this._id = props.id || getId('Toggle');\r\n  }\r\n\r\n  /**\r\n   * Gets the current checked state of the toggle.\r\n   */\r\n  public get checked(): boolean {\r\n    return this.state.isChecked;\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps: IToggleProps) {\r\n    if (newProps.checked !== undefined) {\r\n      this.setState({\r\n        isChecked: newProps.checked\r\n      });\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    let { label, onText, offText, className, disabled } = this.props;\r\n    let { isChecked } = this.state;\r\n    let stateText = isChecked ? onText : offText;\r\n    const toggleNativeProps = getNativeProps(this.props, buttonProperties);\r\n    return (\r\n      <div className={\r\n        css(styles.root, 'ms-Toggle', className, {\r\n          'is-checked': isChecked,\r\n          'is-enabled': !disabled,\r\n          'is-disabled': disabled,\r\n          [styles.isChecked]: isChecked,\r\n          [styles.isEnabled]: !disabled,\r\n          [styles.isDisabled]: disabled,\r\n\r\n        })\r\n      }>\r\n        <div className={ css(styles.innerContainer, 'ms-Toggle-innerContainer') }>\r\n          { label && (\r\n            <Label className='ms-Toggle-label' htmlFor={ this._id }>{ label }</Label>\r\n          ) }\r\n          <div className={ css(styles.slider, 'ms-Toggle-slider') }>\r\n            <button\r\n              ref={ (c): HTMLButtonElement => this._toggleButton = c }\r\n              type='button'\r\n              id={ this._id }\r\n              { ...toggleNativeProps }\r\n              name={ this._id }\r\n              className={ css(styles.button, 'ms-Toggle-button') }\r\n              disabled={ disabled }\r\n              aria-pressed={ isChecked }\r\n              onClick={ this._onClick }\r\n            />\r\n            <div className={ css(styles.background, 'ms-Toggle-background') }>\r\n              <div className={ css(styles.focus, 'ms-Toggle-focus') } />\r\n              <div className={ css(styles.thumb, 'ms-Toggle-thumb') } />\r\n            </div>\r\n            { stateText && (\r\n              <Label className={ css(styles.stateText, 'ms-Toggle-stateText') }>{ stateText }</Label>\r\n            ) }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  public focus() {\r\n    if (this._toggleButton) {\r\n      this._toggleButton.focus();\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _onClick() {\r\n    let { checked, onChanged } = this.props;\r\n    let { isChecked } = this.state;\r\n\r\n    // Only update the state if the user hasn't provided it.\r\n    if (checked === undefined) {\r\n      this.setState({\r\n        isChecked: !isChecked\r\n      });\r\n    }\r\n\r\n    if (onChanged) {\r\n      onChanged(!isChecked);\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}