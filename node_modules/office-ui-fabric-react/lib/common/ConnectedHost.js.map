{"version":3,"sources":["common/ConnectedHost.tsx"],"names":[],"mappings":"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","file":"common/ConnectedHost.js","sourcesContent":["import * as React from 'react';\r\nimport { ISubscribable } from './ISubscribable';\r\nimport { BaseComponent, autobind, assign, shallowCompare } from '../Utilities';\r\nimport { IStoreKey } from './storeKey';\r\nimport { StoreSet } from './StoreSet';\r\n\r\n// Track all components that require changes.\r\nlet _changedComponents: ConnectedHost[];\r\n\r\nexport interface IConnectedHostProps {\r\n  componentProps: any;\r\n  storesToSubscribe: IStoreKey<any>[];\r\n  component: any;\r\n  getProps: (stores: any, props: any) => any;\r\n}\r\n\r\nexport interface IConnectedHostState {\r\n  props: any;\r\n}\r\n\r\nexport class ConnectedHost extends BaseComponent<IConnectedHostProps, IConnectedHostState> {\r\n  public static contextTypes = {\r\n    stores: React.PropTypes.object\r\n  };\r\n\r\n  public context: {\r\n    stores: StoreSet;\r\n  };\r\n\r\n  private _stores: ISubscribable[];\r\n  private _changeEnqueued: boolean;\r\n  private _isMounted: boolean;\r\n\r\n  constructor(props: IConnectedHostProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      props: null\r\n    };\r\n  }\r\n\r\n  public componentWillMount() {\r\n    if (this.props.storesToSubscribe && this.props.storesToSubscribe.length > 0) {\r\n      if (!this.context.stores) {\r\n        throw `A connected component was hosted in an environment where no stores were hosted. Use the StoreHost to host components.`;\r\n      }\r\n\r\n      // Resolve and subscribe to stores.\r\n      this._stores = this.props.storesToSubscribe.map(storeKey => {\r\n        let store = this.context.stores.getStore(storeKey);\r\n\r\n        if (!store) {\r\n          throw `The \"${storeKey.name}\" store was required by a connected component, but not exposed.`;\r\n        }\r\n        this._disposables.push(store.subscribe(this._onStoreChanged));\r\n\r\n        return store;\r\n      });\r\n    }\r\n\r\n    // We can only initialize state at this point, where context has been resolved.\r\n    this.state = {\r\n      props: this._getComponentProps(this.props)\r\n    };\r\n  }\r\n\r\n  public componentDidMount() {\r\n    this._isMounted = true;\r\n  }\r\n\r\n  public componentWillUnmount() {\r\n    this._isMounted = false;\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps) {\r\n    this._updateProps(newProps);\r\n  }\r\n\r\n  public shouldComponentUpdate(newProps: IConnectedHostProps, newState) {\r\n    let inputPropsHaveChanged = !shallowCompare(this.props.componentProps, newProps.componentProps);\r\n    let computedPropsHaveChanged = !shallowCompare(this.state.props, newState.props);\r\n    let shouldUpdate = inputPropsHaveChanged || computedPropsHaveChanged;\r\n\r\n    return shouldUpdate;\r\n  }\r\n\r\n  public render() {\r\n    let { component: Component } = this.props;\r\n    let { props } = this.state;\r\n\r\n    return props ? <Component { ...props } /> : null;\r\n  }\r\n\r\n  @autobind\r\n  private _onStoreChanged() {\r\n    let { storesToSubscribe } = this.props;\r\n\r\n    if (!storesToSubscribe || storesToSubscribe.length < 2) {\r\n      this._updateProps();\r\n    } else if (!this._changeEnqueued) {\r\n      if (!_changedComponents) {\r\n        _changedComponents = [];\r\n        this._async.setImmediate(() => {\r\n          _changedComponents.forEach(comp => comp._updateProps());\r\n          _changedComponents = null;\r\n        });\r\n      }\r\n      _changedComponents.push(this);\r\n      this._changeEnqueued = true;\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _updateProps(props?: any) {\r\n    this._changeEnqueued = false;\r\n    props = this._getComponentProps(props || this.props);\r\n    this.setState({ props });\r\n  }\r\n\r\n  private _getComponentProps(props: any) {\r\n    let newProps = assign(\r\n      {},\r\n      props.componentProps,\r\n      props.getProps(props.componentProps, ...this._stores));\r\n\r\n    return newProps;\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}