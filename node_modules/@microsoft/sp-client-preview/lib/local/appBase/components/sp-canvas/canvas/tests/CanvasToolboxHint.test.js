"use strict";
var chai_1 = require("chai");
var enzyme_1 = require("enzyme");
var React = require("react");
var CanvasStore_1 = require("../canvasComponent/CanvasStore");
var CanvasToolboxHint_1 = require("../canvasToolboxHint/CanvasToolboxHint");
var CanvasA11y_1 = require("../../a11y/CanvasA11y");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_page_context_1 = require("@microsoft/sp-page-context");
var sp_http_1 = require("@microsoft/sp-http");
describe('Canvas toolbox hint tests', function () {
    var canvasToolboxHintElement;
    var mockProps;
    var rootScope = sp_core_library_1.ServiceScope.startNewRoot();
    rootScope.provide(sp_http_1.SPHttpClient.serviceKey, new sp_http_1.SPHttpClient(rootScope));
    rootScope.provide(sp_page_context_1.PageContext.serviceKey, new sp_page_context_1.PageContext(rootScope));
    rootScope.finish();
    var canvasStore;
    var render;
    var a11yManager;
    var canvasToolboxHint;
    beforeEach(function () {
        render = sinon.spy();
        canvasStore =
            new CanvasStore_1.default(rootScope, render, sp_core_library_1.DisplayMode.Edit);
        a11yManager = new CanvasA11y_1.CanvasA11yManager(document.createElement('div'), true);
        canvasStore.a11yManager = a11yManager;
        mockProps = {
            ariaLabel: 'mockToolboxHint',
            row: 0,
            shouldFocus: true,
            isVisible: true
        };
        var context = { store: canvasStore };
        canvasToolboxHintElement = enzyme_1.shallow(React.createElement(CanvasToolboxHint_1.default, mockProps), { context: context });
        canvasToolboxHintElement.setContext(context);
        canvasToolboxHint = canvasToolboxHintElement.instance();
    });
    it('should render button as expected in Edit Mode', function (done) {
        chai_1.expect(canvasToolboxHintElement.find("[data-automation-id='toolboxHintButton']").length).to.be.eq(1);
        done();
    });
    it('should not render the button in read mode', function (done) {
        canvasStore.displayMode = sp_core_library_1.DisplayMode.Read;
        canvasToolboxHintElement.setContext({ store: canvasStore });
        chai_1.expect(canvasToolboxHintElement.find("[data-automation-id='toolboxHintButton']").length).to.be.eq(0);
        done();
    });
    it('should open the toolbox on clicking', function (done) {
        canvasToolboxHintElement.find("[data-automation-id='toolboxHintButton']").simulate('click');
        chai_1.expect(canvasToolboxHint.context.store.toolboxProps.isOpen).to.be.true;
        done();
    });
});
