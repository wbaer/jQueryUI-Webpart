{"version":3,"sources":["tests/GulpTask.test.ts"],"names":[],"mappings":"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","file":"tests/GulpTask.test.js","sourcesContent":["'use strict';\r\n\r\nimport 'es6-promise';\r\nimport { assert, expect } from 'chai';\r\nimport { serial, parallel, GulpTask } from '../index';\r\nimport gutil = require('gulp-util');\r\nimport gulp = require('gulp');\r\nimport { Readable } from 'stream';\r\nimport * as path from 'path';\r\n\r\ninterface IConfig {\r\n}\r\n\r\nlet testArray: string[] = [];\r\n\r\nclass PromiseTask extends GulpTask<IConfig> {\r\n  public name: string = 'promise';\r\n\r\n  public taskConfig: IConfig = {\r\n  };\r\n\r\n  /* tslint:disable:no-any */\r\n  public executeTask(gulp: gulp.Gulp): Promise<any> {\r\n  /* tslint:enable:no-any */\r\n    return new Promise<void>((resolve: () => void, reject: () => void) => {\r\n      testArray.push(this.name);\r\n      resolve();\r\n    });\r\n  }\r\n}\r\n\r\nclass StreamTask extends GulpTask<IConfig> {\r\n  public name: string = 'stream';\r\n\r\n  public taskConfig: IConfig = {\r\n  };\r\n\r\n  /* tslint:disable:no-any */\r\n  public executeTask(gulp: gulp.Gulp): any {\r\n  /* tslint:enable:no-any */\r\n    const stream: Readable = new Readable({ objectMode: true });\r\n\r\n    // Add no opt function to make it compat with through\r\n    stream['_read'] = () => { // tslint:disable-line:no-string-literal\r\n      // Do Nothing\r\n     };\r\n\r\n    setTimeout(() => {\r\n\r\n      const file: gutil.File = new gutil.File({\r\n        path: 'test.js',\r\n        contents: new Buffer('test')\r\n      });\r\n\r\n      stream.push(file);\r\n\r\n      testArray.push(this.name);\r\n\r\n      stream.emit('end');\r\n    }, 100);\r\n\r\n    return stream;\r\n  }\r\n}\r\n\r\nclass SyncTask extends GulpTask<IConfig> {\r\n  public name: string = 'sync';\r\n\r\n  public taskConfig: IConfig = {\r\n  };\r\n\r\n  public executeTask(gulp: gulp.Gulp): void {\r\n    testArray.push(this.name);\r\n  }\r\n}\r\n\r\nclass SyncWithReturnTask extends GulpTask<IConfig> {\r\n  public name: string = 'sync-with-return';\r\n\r\n  public taskConfig: IConfig = {\r\n  };\r\n\r\n  public executeTask(gulp: gulp.Gulp): void {\r\n    testArray.push(this.name);\r\n  }\r\n}\r\n\r\nclass CallbackTask extends GulpTask<IConfig> {\r\n  public name: string = 'callback';\r\n\r\n  public taskConfig: IConfig = {\r\n  };\r\n\r\n  public executeTask(gulp: gulp.Gulp, callback: (result?: Object) => void): void {\r\n    testArray.push(this.name);\r\n    callback();\r\n  }\r\n}\r\n\r\ninterface ISimpleConfig {\r\n  shouldDoThings: boolean;\r\n}\r\n\r\nclass SchemaTask extends GulpTask<ISimpleConfig> {\r\n  public name: string = 'schema-task';\r\n\r\n  public taskConfig: ISimpleConfig = {\r\n    shouldDoThings: false\r\n  };\r\n\r\n  public executeTask(gulp: gulp.Gulp, callback: (result?: Object) => void): void {\r\n    callback();\r\n  }\r\n\r\n  protected _getConfigFilePath(): string {\r\n    return path.join(__dirname, 'schema-task.config.json');\r\n  }\r\n}\r\n\r\nconst tasks: GulpTask<IConfig>[] = [\r\n];\r\n\r\ntasks.push(new PromiseTask());\r\ntasks.push(new StreamTask());\r\ntasks.push(new SyncTask());\r\ntasks.push(new SyncWithReturnTask());\r\ntasks.push(new CallbackTask());\r\n\r\ndescribe('GulpTask', () => {\r\n  for (const task of tasks) {\r\n    it(`${task.name} serial`, (done) => {\r\n      testArray = [];\r\n      task.setConfig({ addToMe: testArray });\r\n      serial(task).execute({}).then(() => {\r\n        expect(testArray).to.deep.equal([task.name]);\r\n        done();\r\n      }).catch(error => done(error));\r\n    });\r\n\r\n    it(`${task.name} parallel`, (done) => {\r\n      testArray = [];\r\n      task.setConfig({ addToMe: testArray });\r\n      parallel(task).execute({}).then(() => {\r\n        expect(testArray).to.deep.equal([task.name]);\r\n        done();\r\n      }).catch(error => done(error));\r\n    });\r\n  }\r\n\r\n  it(`all tasks serial`, (done) => {\r\n    testArray = [];\r\n    for (const task of tasks) {\r\n      task.setConfig({ addToMe: testArray });\r\n    }\r\n    serial(tasks).execute({}).then(() => {\r\n      for (const task of tasks) {\r\n        expect(testArray.indexOf(task.name)).to.be.greaterThan(-1);\r\n      }\r\n      done();\r\n    }).catch(error => done(error));\r\n  });\r\n\r\n  it(`all tasks parallel`, (done) => {\r\n    testArray = [];\r\n    for (const task of tasks) {\r\n      task.setConfig({ addToMe: testArray });\r\n    }\r\n    parallel(tasks).execute({}).then(() => {\r\n      for (const task of tasks) {\r\n        expect(testArray.indexOf(task.name)).to.be.greaterThan(-1);\r\n      }\r\n      done();\r\n    }).catch(error => done(error));\r\n  });\r\n\r\n  it(`reads schema file if loadSchema is implemented`, (done) => {\r\n    const schemaTask: SchemaTask = new SchemaTask();\r\n    assert.isFalse(schemaTask.taskConfig.shouldDoThings);\r\n    schemaTask.onRegister();\r\n    assert.isTrue(schemaTask.taskConfig.shouldDoThings);\r\n    done();\r\n  });\r\n\r\n  it(`throws validation error is config does not conform to schema file`, (done) => {\r\n    const schemaTask: SchemaTask = new SchemaTask();\r\n\r\n    // tslint:disable-next-line:no-any\r\n    (schemaTask as any)._getConfigFilePath = (): string => {\r\n      return path.join(__dirname, 'other-schema-task.config.json');\r\n    };\r\n\r\n    assert.isFalse(schemaTask.taskConfig.shouldDoThings);\r\n    assert.throws(schemaTask.onRegister);\r\n    done();\r\n  });\r\n});\r\n"],"sourceRoot":"..\\..\\src"}