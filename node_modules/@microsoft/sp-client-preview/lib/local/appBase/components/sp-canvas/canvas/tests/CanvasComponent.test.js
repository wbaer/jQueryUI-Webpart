"use strict";
var chai_1 = require("chai");
var enzyme_1 = require("enzyme");
var React = require("react");
var CanvasComponent_1 = require("../canvasComponent/CanvasComponent");
var CanvasStore_1 = require("../canvasComponent/CanvasStore");
var CanvasToolboxHint_1 = require("../canvasToolboxHint/CanvasToolboxHint");
var ConfirmationDialog_1 = require("../confirmationDialog/ConfirmationDialog");
var ControlZone_1 = require("../controlZone/ControlZone");
var Toolbar_1 = require("../../toolbar/toolbar/Toolbar");
var Toolbox_1 = require("../../toolbox/toolbox/Toolbox");
var CanvasControlType_1 = require("../canvasControl/CanvasControlType");
var CanvasA11y_1 = require("../../a11y/CanvasA11y");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_page_context_1 = require("@microsoft/sp-page-context");
var sp_http_1 = require("@microsoft/sp-http");
describe('Canvas Component tests', function () {
    var canvasComponentElement;
    var mockProps;
    var rootScope = sp_core_library_1.ServiceScope.startNewRoot();
    rootScope.provide(sp_http_1.SPHttpClient.serviceKey, new sp_http_1.SPHttpClient(rootScope));
    rootScope.provide(sp_page_context_1.PageContext.serviceKey, new sp_page_context_1.PageContext(rootScope));
    rootScope.finish();
    var canvasStore;
    var render;
    var a11yManager;
    beforeEach(function () {
        render = sinon.spy();
        canvasStore =
            new CanvasStore_1.default(rootScope, render, sp_core_library_1.DisplayMode.Edit);
        var controlProps = {
            controlType: CanvasControlType_1.default.RTE,
            displayMode: sp_core_library_1.DisplayMode.Edit,
            id: 'RTEControl'
        };
        a11yManager = new CanvasA11y_1.CanvasA11yManager(document.createElement('div'), true);
        canvasStore.a11yManager = a11yManager;
        canvasStore.handleToolboxItemClick(0, controlProps);
        mockProps = {
            store: canvasStore
        };
        canvasComponentElement = enzyme_1.mount(React.createElement(CanvasComponent_1.default, mockProps));
    });
    afterEach(function () {
        canvasComponentElement.unmount();
    });
    it('should render canvas Toolbox hint', function (done) {
        chai_1.expect(canvasComponentElement.find(CanvasToolboxHint_1.default).length).to.be.eq(2);
        done();
    });
    it('should render confirmation dialog', function (done) {
        chai_1.expect(canvasComponentElement.find(ConfirmationDialog_1.default).length).to.be.eq(1);
        done();
    });
    it('should render ControlZone', function (done) {
        chai_1.expect(canvasComponentElement.find(ControlZone_1.default).length).to.be.eq(1);
        done();
    });
    it('should render toolbar', function (done) {
        chai_1.expect(canvasComponentElement.find(Toolbar_1.default).length).to.be.eq(1);
        done();
    });
    it('should render toolbox', function (done) {
        chai_1.expect(canvasComponentElement.find(Toolbox_1.default).length).to.be.eq(1);
        done();
    });
});
