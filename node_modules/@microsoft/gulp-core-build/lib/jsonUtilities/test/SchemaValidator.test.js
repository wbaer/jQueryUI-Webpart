///<reference types="mocha" />
"use strict";
var path = require("path");
var chai_1 = require("chai");
var os_1 = require("os");
var SchemaValidator_1 = require("../SchemaValidator");
var nonexistentFile = path.join(__dirname, 'thisfileshouldneverexist.json');
var basicSchema = path.join(__dirname, 'basicSchema.json');
var exampleValid = path.join(__dirname, 'example_valid.json');
var exampleSyntaxError = path.join(__dirname, 'example_syntaxerror.json');
var exampleInvalid = path.join(__dirname, 'example_invalid.json');
describe('SchemaValidator', function () {
    describe('readCommentedJsonFile', function () {
        it('reads a well-formatted JSON file', function (done) {
            chai_1.assert.doesNotThrow(function () {
                SchemaValidator_1.SchemaValidator.readCommentedJsonFile(basicSchema);
            });
            done();
        });
        it('throws when the JSON file doesn\'t exist', function (done) {
            chai_1.assert.throws(function () {
                SchemaValidator_1.SchemaValidator.readCommentedJsonFile(nonexistentFile);
            });
            done();
        });
        it('throws when the JSON file is malformed', function (done) {
            chai_1.assert.throws(function () {
                SchemaValidator_1.SchemaValidator.readCommentedJsonFile(exampleSyntaxError);
            });
            done();
        });
        it('the file does not contain the $schema value', function (done) {
            var data = SchemaValidator_1.SchemaValidator.readCommentedJsonFile(basicSchema);
            chai_1.assert.isUndefined(data['$schema']); // tslint:disable-line:no-string-literal
            done();
        });
    });
    describe('getFormattedErrorMessage', function () {
        it('can properly format a simple error', function (done) {
            var error = {
                'name': 'z-schema validation error',
                'message': 'JSON_OBJECT_VALIDATION_FAILED',
                'details': [
                    {
                        'code': 'OBJECT_MISSING_REQUIRED_PROPERTY',
                        'params': [
                            'bar'
                        ],
                        'message': 'Missing required property: bar',
                        'path': '#/',
                        'description': 'An example schema with 2 properties',
                        'inner': []
                    }
                ]
            };
            chai_1.assert.equal(
            // tslint:disable-next-line:no-any
            SchemaValidator_1.SchemaValidator.getFormattedErrorMessage(error.details), ['',
                'ERROR: (#/) Missing required property: bar',
                '',
                ''
            ].join(os_1.EOL));
            done();
        });
    });
    describe('validateObject', function () {
        var schema = {
            'title': 'basic schema',
            'description': 'An example schema with 2 properties',
            'type': 'object',
            'required': [
                'bar'
            ],
            'properties': {
                'bar': {
                    'title': 'The bar string',
                    'description': 'A string of bar',
                    'type': 'string'
                }
            }
        };
        it('passes validation for a valid object', function (done) {
            chai_1.assert.doesNotThrow(function () {
                SchemaValidator_1.SchemaValidator.validate({
                    'bar': 'foo'
                }, schema);
            });
            done();
        });
        it('throws when passed an invalid object', function (done) {
            chai_1.assert.throws(function () {
                SchemaValidator_1.SchemaValidator.validate({
                    'foo': ['123', '345']
                }, 'file.js');
            });
            done();
        });
    });
    describe('validate', function () {
        it('passes validation for a valid object/schema file', function (done) {
            chai_1.assert.doesNotThrow(function () {
                SchemaValidator_1.SchemaValidator.readAndValidateJson(exampleValid, basicSchema);
            });
            done();
        });
        it('throws when passed an invalid filepath for object', function (done) {
            chai_1.assert.throws(function () {
                SchemaValidator_1.SchemaValidator.readAndValidateJson(nonexistentFile, basicSchema);
            });
            done();
        });
        it('throws when passed an invalid filepath for schema', function (done) {
            chai_1.assert.throws(function () {
                SchemaValidator_1.SchemaValidator.readAndValidateJson(exampleValid, nonexistentFile);
            });
            done();
        });
        it('throws when the object file is malformed', function (done) {
            chai_1.assert.throws(function () {
                SchemaValidator_1.SchemaValidator.readAndValidateJson(exampleSyntaxError, basicSchema);
            });
            done();
        });
        it('throws when the schema file is malformed', function (done) {
            chai_1.assert.throws(function () {
                SchemaValidator_1.SchemaValidator.readAndValidateJson(exampleValid, exampleSyntaxError);
            });
            done();
        });
        it('throws when the object doesn\'t pass validation', function (done) {
            chai_1.assert.throws(function () {
                SchemaValidator_1.SchemaValidator.readAndValidateJson(exampleValid, exampleInvalid);
            });
            done();
        });
    });
});

//# sourceMappingURL=SchemaValidator.test.js.map
