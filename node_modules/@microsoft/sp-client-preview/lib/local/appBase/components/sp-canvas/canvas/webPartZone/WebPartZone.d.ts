/**
 * @file WebPartZone.ts
 * @copyright (c) Microsoft Corporation. All rights reserved.
 */
import * as React from 'react';
import { DisplayMode } from '@microsoft/sp-core-library';
import { IClientSideWebPartManifest } from '@microsoft/sp-module-interfaces';
import { IWebPartData } from '@microsoft/sp-webpart-base';
import { ICanvasContext } from '../canvasComponent/ICanvasComponent';
import ICanvasControl from '../../canvas/canvasControl/ICanvasControl';
export interface IWebPartZoneState {
    displayMode: DisplayMode;
}
export interface IWebPartZoneProps extends ICanvasControl {
    webPartData: IWebPartData;
    webPartId: string;
    webPartManifest: IClientSideWebPartManifest<any>;
}
export default class WebPartZone extends React.Component<IWebPartZoneProps, IWebPartZoneState> {
    static contextTypes: React.ValidationMap<WebPartZone>;
    static webPartManagerInitialized: boolean;
    context: ICanvasContext;
    /**
     * Indicates whether the web part has loaded and is safe to perform synchronous actions.
     */
    private _isLoaded;
    /**
     * The promise is used to perform actions after the async loading of the web part code. The web
     * part manager only creates a reference in its map after the web part code is loaded. Therefore,
     * invoking methods on the web part manager that reference an unloaded web part is invalid.
     */
    private _loadWebPartPromise;
    private _webPartDiv;
    private _webPartManager;
    constructor(props: IWebPartZoneProps, context: ICanvasContext);
    componentDidMount(): void;
    shouldComponentUpdate(newProps: IWebPartZoneProps, newState: IWebPartZoneState): boolean;
    render(): React.ReactElement<IWebPartZoneProps>;
    readonly instanceId: string;
    readonly isFocusable: boolean;
    focus(): void;
    handleConfigureButtonClicked(shouldToggle: boolean): void;
    handleDeleteButtonClicked(): void;
    serialize(): ICanvasControl;
    setDisplayMode(newDisplayMode: DisplayMode): void;
}
