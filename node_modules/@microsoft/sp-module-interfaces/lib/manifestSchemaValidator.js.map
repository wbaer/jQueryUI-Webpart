{"version":3,"sources":["manifestSchemaValidator.ts"],"names":[],"mappings":"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","file":"manifestSchemaValidator.js","sourcesContent":["export import ZSchema = require('z-schema');\r\n// @todo 264263 - utilize the schema validator in sp-build-common\r\n\r\nimport * as fs from 'fs';\r\nimport { EOL } from 'os';\r\nimport * as path from 'path';\r\n\r\nimport { IClientSideComponentManifest } from './manifestSchemas/IClientSideComponentManifest';\r\nimport { IClientSideApplicationManifest } from './manifestSchemas/IClientSideApplicationManifest';\r\nimport { IClientSideCodePartManifest } from './manifestSchemas/IClientSideCodePartManifest';\r\nimport { IClientSideLibraryManifest } from './manifestSchemas/IClientSideLibraryManifest';\r\nimport { IClientSideWebPartManifest } from './manifestSchemas/IClientSideWebPartManifest';\r\n\r\n// Discover the schema files\r\nconst schemasDirectory: string = path.join(__dirname, 'manifestSchemas', 'jsonSchemas');\r\nconst schemaFiles: string[] = fs.readdirSync(schemasDirectory);\r\n\r\nconst schemas: Object[] = schemaFiles.map((schemaFile: string): {} => require(path.join(schemasDirectory, schemaFile)));\r\n\r\nconst manifestSchema: Object = require('./manifestSchemas/jsonSchemas/clientSideComponentManifestSchema.json');\r\nconst applicationSchema: Object = require('./manifestSchemas/jsonSchemas/clientSideApplicationManifestSchema.json');\r\nconst webPartSchema: Object = require('./manifestSchemas/jsonSchemas/clientSideWebPartManifestSchema.json');\r\nconst codePartSchema: Object = require('./manifestSchemas/jsonSchemas/clientSideCodePartManifestSchema.json');\r\nconst librarySchema: Object = require('./manifestSchemas/jsonSchemas/clientSideLibraryManifestSchema.json');\r\n\r\nexport const zSchemaOptions: ZSchema.Options = {\r\n  breakOnFirstError: true,\r\n\r\n  forceAdditional: true,\r\n  forceItems: true,\r\n  forceMaxLength: false,\r\n  forceProperties: false,\r\n  noExtraKeywords: true,\r\n  noTypeless: true,\r\n  noEmptyStrings: true\r\n};\r\n\r\nconst schemaValidator: ZSchema.Validator = new ZSchema(zSchemaOptions);\r\n\r\n// @todo 272561 - update the z-schema typings\r\n(schemaValidator as any).validateSchema(schemas); // tslint:disable-line:no-any\r\n\r\nexport interface IManifestValidatorResult {\r\n  result: boolean;\r\n  errors: ZSchema.SchemaError[];\r\n}\r\n\r\nexport default class ManifestValidator {\r\n  public static validateApplicationManifest(manifest: string | IClientSideApplicationManifest):\r\n      IManifestValidatorResult {\r\n    return ManifestValidator._validateManifest(manifest, applicationSchema);\r\n  }\r\n\r\n  public static validateCodePartManifest(manifest: string | IClientSideCodePartManifest): IManifestValidatorResult {\r\n    return ManifestValidator._validateManifest(manifest, codePartSchema);\r\n  }\r\n\r\n  /* tslint:disable:no-any */\r\n  public static validateWebPartManifest(manifest: string | IClientSideWebPartManifest<any>):\r\n  /* tslint:enable:no-any */\r\n      IManifestValidatorResult {\r\n    return ManifestValidator._validateManifest(manifest, webPartSchema);\r\n  }\r\n\r\n  public static validateLibraryManifest(manifest: string | IClientSideLibraryManifest): IManifestValidatorResult {\r\n    return ManifestValidator._validateManifest(manifest, librarySchema);\r\n  }\r\n\r\n  public static validateManifest(manifest: string | IClientSideComponentManifest): IManifestValidatorResult {\r\n    const parsedManifest: IClientSideComponentManifest = (typeof manifest === 'string')\r\n                                                            ? JSON.parse(manifest)\r\n                                                            : manifest;\r\n\r\n    return ManifestValidator._validateManifest(parsedManifest, manifestSchema);\r\n  }\r\n\r\n  public static extractInnerErrorMessages(errors: ZSchema.SchemaError[]): string[] {\r\n    const printZSchemaError: (error: ZSchema.SchemaError) => string[] = (error: ZSchema.SchemaError) => {\r\n      /* tslint:disable:no-any */\r\n      let innerErrors: string[] = [];\r\n      ((error as any).inner as ZSchema.SchemaError[] || []).forEach((innerErr) => {\r\n        innerErrors = innerErrors.concat(printZSchemaError(innerErr));\r\n      });\r\n      /* tslint:enable:no-any */\r\n\r\n      return [`(${error.path}) ${error.message}`].concat(innerErrors);\r\n    };\r\n\r\n    let errorList: string[] = [];\r\n    errors.map((error) => { errorList = errorList.concat(printZSchemaError(error)); });\r\n    return errorList;\r\n  }\r\n\r\n  public static getFormattedErrorMessage(errors: ZSchema.SchemaError[]): string {\r\n    return this.extractInnerErrorMessages(errors).join(EOL);\r\n  }\r\n\r\n  private static _validateManifest(manifest: string | IClientSideComponentManifest, schema: Object):\r\n      IManifestValidatorResult {\r\n    if (!schema) {\r\n      throw new Error('Unable to find the manifest schema.');\r\n    }\r\n\r\n    if (typeof manifest === 'string') {\r\n      manifest = JSON.parse(manifest as string);\r\n    }\r\n\r\n    const result: boolean = schemaValidator.validate(manifest, schema);\r\n\r\n    return {\r\n      result: result,\r\n      errors: schemaValidator.getLastErrors() || []\r\n    };\r\n  }\r\n}\r\n"],"sourceRoot":"..\\src"}