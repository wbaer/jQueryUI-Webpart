"use strict";
var sp_telemetry_1 = require("@ms/sp-telemetry");
var chai_1 = require("chai");
var SPGlobalErrorHandler_1 = require("../SPGlobalErrorHandler");
describe('SPGlobalErrorHandler tests', function () {
    describe('Testing functions in SPGlobalErrorHandler', function () {
        var traceSpy;
        beforeEach(function () {
            traceSpy = sinon.spy(sp_telemetry_1._TraceLogger, 'logError');
        });
        afterEach(function () {
            traceSpy.restore();
        });
        it('A quill error gets own trace tag', function () {
            SPGlobalErrorHandler_1.default.basicTracingHandler('mutations undefined', '2.sp-client-preview-quill_5c8b3b69c769f16d32e5.js');
            chai_1.assert.isTrue(traceSpy.calledOnce);
            chai_1.assert.equal('QuillGlobalError', traceSpy.args[0][0].id);
        });
        it('A ck editor error gets own trace tag', function () {
            SPGlobalErrorHandler_1.default.basicTracingHandler('stack overflow', '2.sp-client-preview-ckeditor_5c8b3b69c769f16d32e5.js');
            chai_1.assert.isTrue(traceSpy.calledOnce);
            chai_1.assert.equal('CKGlobalError', traceSpy.args[0][0].id);
        });
        it('A generic error gets generic trace tag', function () {
            SPGlobalErrorHandler_1.default.basicTracingHandler('generic error', '2.searchux_f1c88a3026d8cbab0075.js');
            chai_1.assert.isTrue(traceSpy.calledOnce);
            chai_1.assert.equal('OtherGlobalError', traceSpy.args[0][0].id);
        });
    });
});
