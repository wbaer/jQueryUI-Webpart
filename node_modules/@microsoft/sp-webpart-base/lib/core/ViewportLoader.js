"use strict";
var sp_telemetry_1 = require("@ms/sp-telemetry");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var lodash = require("@microsoft/sp-lodash-subset");
var Strings_resx_1 = require("./loc/Strings.resx");
var ViewportLoader = (function () {
    function ViewportLoader() {
        this._webparts = new Set();
        this._lazyLoadedTrackerAttribute = 'data-sp-webpart-lazycount';
        this.SCROLL = 'scroll';
        this.RESIZE = 'resize';
        this._isInitialized = false;
        this._logSource = sp_telemetry_1._LogSource.create('ViewportLoader');
        this._isListeningWindow = false;
        this._bind();
    }
    ViewportLoader.prototype.register = function (webpart) {
        var _this = this;
        sp_core_library_1.Validate.isNotNullOrUndefined(webpart, 'webpart');
        webpart._isInViewport = false;
        if (!this._isInitialized) {
            this._initialize();
        }
        this._checkVisibilityAndRender(webpart);
        if (webpart._isInViewport) {
            return;
        }
        var parents = this._findScrollableParents(webpart.domElement);
        parents.forEach(function (parent, index, allPatents) {
            var count = _this._updateRegisteredChildren(parent, 1);
            if (count === 1) {
                _this._listenEvents(parent);
            }
        });
        this._listenEvents(window);
        this._webparts.add(webpart);
    };
    ViewportLoader.prototype.unregister = function (webpart) {
        var _this = this;
        sp_core_library_1.Validate.isNotNullOrUndefined(webpart, 'unregister Web part');
        if (!this._webparts.has(webpart)) {
            return;
        }
        this._webparts.delete(webpart);
        var parents = this._findScrollableParents(webpart.domElement);
        parents.forEach(function (parent, index, allParents) {
            var count = _this._updateRegisteredChildren(parent, -1);
            if (count <= 0) {
                _this._unlistenEvents(parent);
            }
        });
        if (this._webparts.size === 0) {
            this._unlistenEvents(window);
            this._dispose();
        }
    };
    ViewportLoader.prototype._bind = function () {
        this.register = this.register.bind(this);
        this.unregister = this.unregister.bind(this);
        this._checkVisibilityAndRender = this._checkVisibilityAndRender.bind(this);
        this._dispose = this._dispose.bind(this);
        this._findScrollableParent = this._findScrollableParent.bind(this);
        this._findScrollableParents = this._findScrollableParents.bind(this);
        this._initialize = this._initialize.bind(this);
        this._isCloseToViewport = this._isCloseToViewport.bind(this);
        this._renderWebpartInViewport = this._renderWebpartInViewport.bind(this);
        this._unlistenEvents = this._unlistenEvents.bind(this);
        this._updateRegisteredChildren = this._updateRegisteredChildren.bind(this);
    };
    ViewportLoader.prototype._lazyLoaderEventHandler = function () {
        var _this = this;
        if (!this._webparts || this._webparts.size === 0) {
            sp_telemetry_1._TraceLogger.logError(this._logSource, new Error(Strings_resx_1.default.LazyEventOnNoLazyWebpart));
            return;
        }
        this._webparts.forEach(function (value, index, theSet) {
            _this._checkVisibilityAndRender(value);
        });
    };
    ViewportLoader.prototype._checkVisibilityAndRender = function (webpart) {
        if (webpart._isInViewport) {
            this.unregister(webpart);
            return;
        }
        if (this._isCloseToViewport(webpart.domElement)) {
            this._renderWebpartInViewport(webpart);
            this.unregister(webpart);
        }
    };
    ViewportLoader.prototype._isCloseToViewport = function (webpartNode) {
        try {
            var parent_1 = this._findScrollableParent(webpartNode);
            var offset = (window.innerHeight || document.documentElement.clientHeight) / 3;
            var _a = webpartNode.getBoundingClientRect(), top_1 = _a.top, height = _a.height;
            var documentHeight = window.innerHeight || document.documentElement.clientHeight;
            if (!parent_1) {
                var topInOrAboveViewport = (top_1 - offset) <= documentHeight;
                var bottomNotAboveViewport = (top_1 + height + offset) >= 0;
                return topInOrAboveViewport && bottomNotAboveViewport;
            }
            var _b = parent_1.getBoundingClientRect(), parentTop = _b.top, parentHeight = _b.height;
            var parentIntersectionTop = Math.max(0, parentTop);
            var parentIntersectionHeight = Math.min(parentTop + parentHeight, documentHeight) - parentIntersectionTop;
            var offsetTop = top_1 - parentIntersectionTop;
            var parentTopInOrAboveViewport = (offsetTop - offset) <= parentIntersectionHeight;
            var parentBottomNotAboveViewport = (offsetTop + height + offset) >= 0;
            return parentTopInOrAboveViewport && parentBottomNotAboveViewport;
        }
        catch (error) {
            sp_telemetry_1._TraceLogger.logError(this._logSource, error);
            return true;
        }
    };
    ViewportLoader.prototype._findScrollableParents = function (startingElement) {
        var parents = [];
        var parent = startingElement;
        while (parent) {
            parent = this._findScrollableParent(parent);
            if (parent) {
                parents.push(parent);
                parent = parent.parentElement;
            }
        }
        return parents;
    };
    ViewportLoader.prototype._findScrollableParent = function (startingElement) {
        var DATA_IS_SCROLLABLE_ATTRIBUTE = 'data-is-scrollable';
        var el = startingElement;
        while (el && el !== document.body) {
            if (el.getAttribute(DATA_IS_SCROLLABLE_ATTRIBUTE) === 'true') {
                return el;
            }
            el = el.parentElement;
        }
        el = startingElement;
        while (el && el !== document.body) {
            if (el.getAttribute(DATA_IS_SCROLLABLE_ATTRIBUTE) !== 'false') {
                var styles = getComputedStyle(el);
                if (styles) {
                    var overflowY = styles.getPropertyValue('overflow-y');
                    if (overflowY && (overflowY === this.SCROLL || overflowY === 'auto')) {
                        return el;
                    }
                }
            }
            el = el.parentElement;
        }
        if (!el || el === document.body) {
            el = undefined;
        }
        return el;
    };
    ViewportLoader.prototype._initialize = function () {
        this._initTime = new Date();
        this._lazyHandler = lodash.throttle(this._lazyLoaderEventHandler, 100).bind(this);
        sp_telemetry_1._TraceLogger.logVerbose(this._logSource, 'Webpart.ViewportLoad.Initialize');
        this._isInitialized = true;
    };
    ViewportLoader.prototype._dispose = function () {
        var timeSpent = (new Date()).getTime() - this._initTime.getTime();
        sp_telemetry_1._EngagementLogger.logEvent('Webpart.ViewportLoad.Completed', timeSpent.toString());
        this._isInitialized = false;
        this._initTime = undefined;
    };
    ViewportLoader.prototype._listenEvents = function (parent) {
        if (!parent) {
            return;
        }
        var isWindow = parent === window;
        if (!isWindow || (isWindow && !this._isListeningWindow)) {
            this._addEventListerer(parent);
            if (isWindow) {
                this._isListeningWindow = true;
            }
        }
    };
    ViewportLoader.prototype._addEventListerer = function (element) {
        element.addEventListener(this.SCROLL, this._lazyHandler, false);
        element.addEventListener(this.RESIZE, this._lazyHandler, false);
    };
    ViewportLoader.prototype._unlistenEvents = function (parent) {
        if (!parent) {
            return;
        }
        var isWindow = parent === window;
        if (!isWindow || (isWindow && this._isListeningWindow)) {
            this._removeEventListener(parent);
            if (isWindow) {
                this._isListeningWindow = false;
            }
        }
    };
    ViewportLoader.prototype._removeEventListener = function (element) {
        element.removeEventListener(this.SCROLL, this._lazyHandler);
        element.removeEventListener(this.RESIZE, this._lazyHandler);
    };
    ViewportLoader.prototype._updateRegisteredChildren = function (element, count) {
        var lazyChilds = count + Number(element.getAttribute(this._lazyLoadedTrackerAttribute));
        if (count !== 0) {
            element.setAttribute(this._lazyLoadedTrackerAttribute, lazyChilds.toString());
        }
        return lazyChilds;
    };
    ViewportLoader.prototype._renderWebpartInViewport = function (webpart) {
        if (webpart && !webpart._isInViewport) {
            webpart._isInViewport = true;
            webpart._internalRenderInViewPort();
            if (this._webparts.has(webpart)) {
                sp_telemetry_1._EngagementLogger.logEvent('Webpart.ViewportLoad.Scroll', 'ViewportLoaded');
            }
            else {
                sp_telemetry_1._EngagementLogger.logEvent('Webpart.ViewportLoad.Scroll', 'InViewportOnLoad');
            }
        }
    };
    return ViewportLoader;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ViewportLoader;
