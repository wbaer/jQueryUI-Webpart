{"version":3,"sources":["components/ColorPicker/ColorRectangle.tsx"],"names":[],"mappings":"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","file":"components/ColorPicker/ColorRectangle.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  EventGroup,\r\n  assign,\r\n  autobind\r\n} from '../../Utilities';\r\nimport {\r\n  IColor,\r\n  MAX_COLOR_SATURATION,\r\n  MAX_COLOR_VALUE,\r\n  getFullColorString,\r\n  hsv2hex\r\n} from './colors';\r\n\r\nexport interface IColorRectangleProps {\r\n  color: IColor;\r\n  minSize?: number;\r\n\r\n  onSVChanged?(s: number, v: number): void;\r\n}\r\n\r\nexport interface IColorPickerState {\r\n  isAdjusting?: boolean;\r\n  origin?: { x: number, y: number, color: IColor };\r\n  color?: IColor;\r\n  fullColorString?: string;\r\n}\r\n\r\nexport class ColorRectangle extends React.Component<IColorRectangleProps, IColorPickerState> {\r\n  public static defaultProps = {\r\n    minSize: 220\r\n  };\r\n\r\n  public refs: {\r\n    [key: string]: React.ReactInstance;\r\n    root: HTMLElement;\r\n  };\r\n\r\n  private _events: EventGroup;\r\n\r\n  constructor(props: IColorRectangleProps) {\r\n    super(props);\r\n\r\n    let { color } = this.props;\r\n\r\n    this._events = new EventGroup(this);\r\n\r\n    this.state = {\r\n      isAdjusting: false,\r\n      origin: null,\r\n      color: color,\r\n      fullColorString: getFullColorString(color)\r\n    };\r\n  }\r\n\r\n  public componentWillUnmount() {\r\n    this._events.dispose();\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps: IColorRectangleProps) {\r\n    let { color } = newProps;\r\n\r\n    this.setState({\r\n      color: color,\r\n      fullColorString: getFullColorString(color)\r\n    });\r\n  }\r\n\r\n  public render() {\r\n    let { minSize } = this.props;\r\n    let { color, fullColorString } = this.state;\r\n\r\n    return (\r\n      <div ref='root' className='ms-ColorPicker-colorRect' style={ { minWidth: minSize, minHeight: minSize, backgroundColor: fullColorString } } onMouseDown={ this._onMouseDown }>\r\n        <div className='ms-ColorPicker-light' />\r\n        <div className='ms-ColorPicker-dark' />\r\n        <div className='ms-ColorPicker-thumb' style={ { left: color.s + '%', top: (MAX_COLOR_VALUE - color.v) + '%', backgroundColor: color.str } } />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  @autobind\r\n  private _onMouseDown(ev: React.MouseEvent<HTMLElement>) {\r\n    this._events.on(window, 'mousemove', this._onMouseMove, true);\r\n    this._events.on(window, 'mouseup', this._onMouseUp, true);\r\n\r\n    this._onMouseMove(ev);\r\n  }\r\n\r\n  @autobind\r\n  private _onMouseMove(ev: React.MouseEvent<HTMLElement>) {\r\n    let { color, onSVChanged } = this.props;\r\n    let rectSize = this.refs.root.getBoundingClientRect();\r\n\r\n    let sPercentage = (ev.clientX - rectSize.left) / rectSize.width;\r\n    let vPercentage = (ev.clientY - rectSize.top) / rectSize.height;\r\n\r\n    let newColor = assign({}, color, {\r\n      s: Math.min(MAX_COLOR_SATURATION, Math.max(0, sPercentage * MAX_COLOR_SATURATION)),\r\n      v: Math.min(MAX_COLOR_VALUE, Math.max(0, MAX_COLOR_VALUE - (vPercentage * MAX_COLOR_VALUE))),\r\n    });\r\n\r\n    newColor.hex = hsv2hex(newColor.h, newColor.s, newColor.v);\r\n    newColor.str = newColor.a === 100 ? '#' + newColor.hex : `rgba(${newColor.r}, ${newColor.g}, ${newColor.b}, ${newColor.a / 100})`;\r\n\r\n    this.setState({\r\n      isAdjusting: true,\r\n      color: newColor\r\n    });\r\n\r\n    if (onSVChanged) {\r\n      onSVChanged(newColor.s, newColor.v);\r\n    }\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n  }\r\n\r\n  @autobind\r\n  private _onMouseUp(ev: React.MouseEvent<HTMLElement>) {\r\n    this._events.off();\r\n\r\n    this.setState({\r\n      isAdjusting: false,\r\n      origin: null\r\n    });\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}