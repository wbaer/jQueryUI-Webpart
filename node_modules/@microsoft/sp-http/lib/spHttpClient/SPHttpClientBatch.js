"use strict";
var lodash = require("@microsoft/sp-lodash-subset");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var BatchedRequest_1 = require("./BatchedRequest");
var SPHttpClient_1 = require("./SPHttpClient");
var SPHttpClientResponse_1 = require("./SPHttpClientResponse");
var FetchProvider_1 = require("../httpClient/FetchProvider");
var DigestCache_1 = require("./DigestCache");
var SPHttpClientHelper_1 = require("./SPHttpClientHelper");
var ODataVersion_1 = require("./ODataVersion");
var SPHttpClientBatchConfiguration_1 = require("./SPHttpClientBatchConfiguration");
var SPHttpClientBatch = (function () {
    function SPHttpClientBatch(serviceScope, batchCreationOptions) {
        var _this = this;
        this._batchCreationOptions = batchCreationOptions || {};
        this._batchedRequests = [];
        serviceScope.whenFinished(function () {
            _this._fetchProvider = serviceScope.consume(FetchProvider_1.fetchProviderServiceKey);
            _this._randomNumberGenerator = serviceScope.consume(sp_core_library_1.RandomNumberGenerator.serviceKey);
            _this._digestCache = serviceScope.consume(DigestCache_1.default.serviceKey);
        });
    }
    SPHttpClientBatch.prototype.fetch = function (url, configuration, options) {
        if (!options) {
            options = {};
        }
        var modifiedOptions = lodash.clone(options);
        modifiedOptions.headers = SPHttpClientHelper_1.default.cloneHeaders(options);
        SPHttpClientHelper_1.default.applyDefaultHeaders(modifiedOptions.headers, configuration, options, ODataVersion_1.default.v4);
        var request = new Request(url, modifiedOptions);
        var requestUrl = request.url;
        if (!this._webUrl) {
            this._webUrl = SPHttpClient_1.default.getWebUrlFromRequestUrl(requestUrl);
        }
        var batchedRequest = new BatchedRequest_1.default(request);
        this._batchedRequests.push(batchedRequest);
        return batchedRequest.promise;
    };
    SPHttpClientBatch.prototype.get = function (url, configuration, options) {
        var modifiedOptions = lodash.clone(options || {});
        modifiedOptions.method = 'GET';
        return this.fetch(url, configuration, modifiedOptions);
    };
    SPHttpClientBatch.prototype.post = function (url, configuration, options) {
        var modifiedOptions = lodash.clone(options || {});
        modifiedOptions.method = 'POST';
        return this.fetch(url, configuration, modifiedOptions);
    };
    SPHttpClientBatch.prototype.execute = function () {
        var _this = this;
        var batchBody = '\n';
        var batchGuid = sp_core_library_1.Guid.newGuid(this._randomNumberGenerator);
        var chain = Promise.resolve();
        this._batchedRequests.forEach(function (batchedRequest) {
            chain = chain.then(function () {
                return batchedRequest.request.text();
            }).then(function (requestText) {
                var request = batchedRequest.request;
                batchBody += "--batch_" + batchGuid.toString() + "\n";
                batchBody += "Content-type: application/http\n"
                    + "Content-Transfer-Encoding: binary\n\n";
                batchBody += request.method + " " + request.url + " HTTP/1.1\n";
                request.headers.forEach(function (value, name) {
                    batchBody += name + ": " + value + "\n";
                });
                batchBody += '\n';
                batchBody += requestText;
                batchBody += '\n\n';
            });
        });
        return chain.then(function () {
            batchBody += "--batch_" + batchGuid + "--\n";
            return _this._digestCache.fetchDigest(_this._webUrl);
        }).then(function (digest) {
            var headers = new Headers();
            headers.append('Accept', 'application/json');
            headers.append('OData-Version', '4.0');
            headers.append('Content-Type', "multipart/mixed; boundary=batch_" + batchGuid);
            headers.append('Content-Length', batchBody.length.toString());
            headers.append('X-RequestDigest', digest);
            var request = new Request(_this._webUrl + '/_api/$batch', {
                method: 'POST',
                headers: headers,
                body: batchBody,
                credentials: 'same-origin',
                cache: 'no-cache'
            });
            var promise = _this._fetchProvider.fetch(request);
            return SPHttpClientHelper_1.default.handleAuthenticationErrors(promise, _this._webUrl, _this._digestCache);
        }).then(function (response) {
            if (!response.ok) {
                throw new Error('SPHttpClientBatch: The batch request failed: ' + response.statusText);
            }
            return response.text();
        }).then(function (text) {
            var responses = _this._parseResponsesFromBody(text);
            if (responses.length !== _this._batchedRequests.length) {
                throw new Error("SPHttpClientBatch: Expecting " + _this._batchedRequests.length + " responses");
            }
            for (var i = 0; i < _this._batchedRequests.length; ++i) {
                var request = _this._batchedRequests[i];
                request.notifyCompleted(new SPHttpClientResponse_1.default(responses[i]));
            }
            return _this;
        });
    };
    SPHttpClientBatch.prototype._parseResponsesFromBody = function (text) {
        var responses = [];
        var header = '--batchresponse_';
        var statusRegExp = new RegExp('^HTTP/[0-9.]+ +([0-9]+) +(.*)', 'i');
        var lines = text.split('\n');
        var parserState = 'batch';
        var batchStatus;
        var batchStatusText;
        for (var i = 0; i < lines.length; ++i) {
            var line = lines[i];
            switch (parserState) {
                case 'batch':
                    if (line.substr(0, header.length) === header) {
                        parserState = 'batchHeaders';
                    }
                    else {
                        if (line.trim() !== '') {
                            throw new Error('SPHttpClientBatch: Invalid response, line ' + i);
                        }
                    }
                    break;
                case 'batchHeaders':
                    if (line.trim() === '') {
                        parserState = 'status';
                    }
                    break;
                case 'status':
                    var parts = statusRegExp.exec(line);
                    if (!parts || parts && parts.length !== 3) {
                        throw new Error('SPHttpClientBatch: Invalid status, line ' + i);
                    }
                    batchStatus = parseInt(parts[1], 10);
                    batchStatusText = parts[2];
                    parserState = 'statusHeaders';
                    break;
                case 'statusHeaders':
                    if (line.trim() === '') {
                        parserState = 'body';
                    }
                    break;
                case 'body':
                    var response = void 0;
                    if (batchStatus === 204) {
                        response = new Response();
                    }
                    else {
                        response = new Response(line, { status: batchStatus, statusText: batchStatusText });
                    }
                    responses.push(response);
                    parserState = 'batch';
                    break;
            }
        }
        if (parserState !== 'status') {
            throw new Error('SPHttpClientBatch: Unexpected end of input');
        }
        return responses;
    };
    return SPHttpClientBatch;
}());
SPHttpClientBatch.configurations = SPHttpClientBatchConfiguration_1.predefinedConfigurations;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SPHttpClientBatch;
