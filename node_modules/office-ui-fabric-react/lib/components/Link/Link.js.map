{"version":3,"sources":["components/Link/Link.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,6BAA+B;AAC/B,6CAOyB;AAEzB,uBAAqB;AASrB;IAA0B,wBAA8B;IAAxD;;IA+CA,CAAC;IA5CQ,qBAAM,GAAb;QACM,IAAA,eAAoD,EAAlD,sBAAQ,EAAE,sBAAQ,EAAE,wBAAS,EAAE,cAAI,CAAgB;QAEzD,MAAM,CAAC,CACL,IAAI,GAAG,CACL,sCACO,0BAAc,CAAC,IAAI,CAAC,KAAK,EAAE,4BAAgB,CAAC,IACjD,SAAS,EAAG,eAAG,CAAC,SAAS,EAAE,SAAS,EAAE;gBACpC,aAAa,EAAE,QAAQ;aACxB,CAAC,EACF,OAAO,EAAG,IAAI,CAAC,QAAQ,EACvB,GAAG,EAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,EAC/B,MAAM,EAAG,IAAI,CAAC,KAAK,CAAC,MAAM,KAExB,QAAQ,CACR,CACL,GAAG,CACA,2CACO,0BAAc,CAAC,IAAI,CAAC,KAAK,EAAE,4BAAgB,CAAC,IACjD,SAAS,EAAG,eAAG,CAAC,SAAS,EAAE,SAAS,EAAE;gBACpC,aAAa,EAAE,QAAQ;aACxB,CAAC,EACF,OAAO,EAAG,IAAI,CAAC,QAAQ,EACvB,GAAG,EAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,KAE7B,QAAQ,CACH,CACV,CAAC,CAAC;IACT,CAAC;IAEM,oBAAK,GAAZ;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QACrB,CAAC;IACH,CAAC;IAGO,uBAAQ,GAAhB,UAAiB,EAA2D;QACpE,IAAA,4BAAO,CAAgB;QAE7B,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACZ,OAAO,CAAC,EAAE,CAAC,CAAC;QACd,CAAC;IACH,CAAC;IACH,WAAC;AAAD,CA/CA,AA+CC,CA/CyB,yBAAa,GA+CtC;AAPC;IADC,oBAAQ;oCAOR;AA9CU,oBAAI","file":"components/Link/Link.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  BaseComponent,\r\n  anchorProperties,\r\n  autobind,\r\n  buttonProperties,\r\n  css,\r\n  getNativeProps\r\n} from '../../Utilities';\r\nimport { ILink, ILinkProps } from './Link.Props';\r\nimport './Link.scss';\r\n\r\ninterface IMyScreen extends Screen {\r\n  left: number;\r\n  top: number;\r\n}\r\n\r\ndeclare var screen: IMyScreen;\r\n\r\nexport class Link extends BaseComponent<ILinkProps, any> implements ILink {\r\n  private _link: HTMLElement;\r\n\r\n  public render() {\r\n    let { disabled, children, className, href } = this.props;\r\n\r\n    return (\r\n      href ? (\r\n        <a\r\n          { ...getNativeProps(this.props, anchorProperties) }\r\n          className={ css('ms-Link', className, {\r\n            'is-disabled': disabled\r\n          }) }\r\n          onClick={ this._onClick }\r\n          ref={ this._resolveRef('_link') }\r\n          target={ this.props.target }\r\n        >\r\n          { children }\r\n        </a>\r\n      ) : (\r\n          <button\r\n            { ...getNativeProps(this.props, buttonProperties) }\r\n            className={ css('ms-Link', className, {\r\n              'is-disabled': disabled\r\n            }) }\r\n            onClick={ this._onClick }\r\n            ref={ this._resolveRef('_link') }\r\n          >\r\n            { children }\r\n          </button>\r\n        ));\r\n  }\r\n\r\n  public focus() {\r\n    if (this._link) {\r\n      this._link.focus();\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _onClick(ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) {\r\n    let { onClick } = this.props;\r\n\r\n    if (onClick) {\r\n      onClick(ev);\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}