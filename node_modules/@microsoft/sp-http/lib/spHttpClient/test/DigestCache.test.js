"use strict";
var chai_1 = require("chai");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var test_1 = require("@microsoft/sp-core-library/lib/test");
var DigestCache_1 = require("../DigestCache");
var MockFetchProvider_1 = require("../../test/MockFetchProvider");
var FetchProvider_1 = require("../../httpClient/FetchProvider");
describe('DigestCache tests', function () {
    describe('Test fetching behavior for basic cache hits and misses', function () {
        var rootScope = sp_core_library_1.ServiceScope.startNewRoot();
        var timeProvider = new test_1.MockTimeProvider(rootScope);
        rootScope.provide(sp_core_library_1.TimeProvider.serviceKey, timeProvider);
        var fetchProvider = new MockFetchProvider_1.default(rootScope);
        rootScope.provide(FetchProvider_1.fetchProviderServiceKey, fetchProvider);
        rootScope.finish();
        var digestCache = new DigestCache_1.default(rootScope);
        it('should fetch the first time', function (done) {
            fetchProvider.expect({
                expectedUrl: 'http://example.com/_api/contextinfo',
                responseObject: {
                    'FormDigestValue': 'DIGEST_1',
                    'FormDigestTimeoutSeconds': 30
                }
            });
            digestCache.fetchDigest('http://example.com').then(function (value) {
                chai_1.assert.isTrue(value === 'DIGEST_1');
                done();
            }).catch(function (error) {
                done(error);
            });
        });
        it('should not refetch if not expired', function (done) {
            timeProvider.addMs(1000);
            digestCache.fetchDigest('http://example.com').then(function (value) {
                chai_1.assert.isTrue(value === 'DIGEST_1');
                fetchProvider.assertQueueEmpty();
                done();
            }).catch(function (error) {
                done(error);
            });
        });
        it('should refetch after expired', function (done) {
            timeProvider.addMs(29000);
            fetchProvider.expect({
                expectedUrl: 'http://example.com/_api/contextinfo',
                responseObject: {
                    'FormDigestValue': 'DIGEST_2',
                    'FormDigestTimeoutSeconds': 30
                }
            });
            digestCache.fetchDigest('http://example.com').then(function (value) {
                chai_1.assert.isTrue(value === 'DIGEST_2');
                done();
            }).catch(function (error) {
                done(error);
            });
        });
        it('should refetch if cleared', function (done) {
            digestCache.clearAllDigests();
            fetchProvider.expect({
                expectedUrl: 'http://example.com/_api/contextinfo',
                responseObject: {
                    'FormDigestValue': 'DIGEST_3',
                    'FormDigestTimeoutSeconds': 30
                }
            });
            digestCache.fetchDigest('http://example.com').then(function (value) {
                chai_1.assert.isTrue(value === 'DIGEST_3');
                done();
            }).catch(function (error) {
                done(error);
            });
        });
        it('should correctly add and clear one digest', function () {
            digestCache.addDigestToCache('http://example.com/web1', 'DIGEST_4', timeProvider.getTimestamp() + 1000);
            chai_1.assert.isTrue(digestCache.clearDigest('http://example.com/web1/'));
            chai_1.assert.isFalse(digestCache.clearDigest('http://example.com/web1/'));
        });
    });
});
