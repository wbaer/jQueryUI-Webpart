{"version":3,"sources":["hoist.ts"],"names":[],"mappings":";;;IAAA,IAAM,0BAA0B,GAAG;QACjC,UAAU;QACV,QAAQ;QACR,oBAAoB;QACpB,mBAAmB;QACnB,2BAA2B;QAC3B,uBAAuB;QACvB,qBAAqB;QACrB,oBAAoB;QACpB,sBAAsB;KACvB,CAAC;IAEF;;;;;;OAMG;IACH,sBAA6B,WAAW,EAAE,MAAM,EAAE,UAAiD;QAAjD,2BAAA,EAAA,uCAAiD;QACjG,IAAI,OAAO,GAAa,EAAE,CAAC;gCAClB,UAAU;YACjB,EAAE,CAAC,CACD,OAAO,MAAM,CAAC,UAAU,CAAC,KAAK,UAAU;gBACxC,WAAW,CAAC,UAAU,CAAC,KAAK,SAAS;gBACrC,CAAC,CAAC,UAAU,IAAI,UAAU,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CACvD,CAAC,CAAC,CAAC;gBACD,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBACzB,2CAA2C;gBAC3C,WAAW,CAAC,UAAU,CAAC,GAAG,cAAc,MAAM,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;gBACvF,mBAAmB;YACrB,CAAC;QACH,CAAC;QAXD,GAAG,CAAC,CAAC,IAAI,UAAU,IAAI,MAAM,CAAC;oBAArB,UAAU;SAWlB;QAED,MAAM,CAAC,OAAO,CAAC;IACjB,CAAC;IAhBD,oCAgBC;IAED;;;;OAIG;IACH,wBAA+B,MAAW,EAAE,WAAqB;QAC/D,WAAW;aACR,OAAO,CAAC,UAAC,UAAU,IAAK,OAAA,OAAO,MAAM,CAAC,UAAU,CAAC,EAAzB,CAAyB,CAAC,CAAC;IACxD,CAAC;IAHD,wCAGC","file":"hoist.js","sourcesContent":["const REACT_LIFECYCLE_EXCLUSIONS = [\r\n  'setState',\r\n  'render',\r\n  'componentWillMount',\r\n  'componentDidMount',\r\n  'componentWillReceiveProps',\r\n  'shouldComponentUpdate',\r\n  'componentWillUpdate',\r\n  'componentDidUpdate',\r\n  'componentWillUnmount'\r\n];\r\n\r\n/**\r\n * Allows you to hoist methods, except those in an exclusion set from a source object into a destination object.\r\n * @param destination The instance of the object to hoist the methods onto.\r\n * @param source The instance of the object where the methods are hoisted from.\r\n * @param exclusions (Optional) What methods to exclude from being hoisted.\r\n * @returns {string[]} An array of names of methods that were hoisted.\r\n */\r\nexport function hoistMethods(destination, source, exclusions: string[] = REACT_LIFECYCLE_EXCLUSIONS): string[] {\r\n  let hoisted: string[] = [];\r\n  for (let methodName in source) {\r\n    if (\r\n      typeof source[methodName] === 'function' &&\r\n      destination[methodName] === undefined &&\r\n      (!exclusions || exclusions.indexOf(methodName) === -1)\r\n    ) {\r\n      hoisted.push(methodName);\r\n      /* tslint:disable:no-function-expression */\r\n      destination[methodName] = function () { source[methodName].apply(source, arguments); };\r\n      /* tslint:enable */\r\n    }\r\n  }\r\n\r\n  return hoisted;\r\n}\r\n\r\n/**\r\n * Provides a method for convenience to unhoist hoisted methods.\r\n * @param {any} source The source object upon which methods were hoisted.\r\n * @param {string[]} methodNames An array of method names to unhoist.\r\n */\r\nexport function unhoistMethods(source: any, methodNames: string[]): void {\r\n  methodNames\r\n    .forEach((methodName) => delete source[methodName]);\r\n}\r\n"],"sourceRoot":"..\\src"}