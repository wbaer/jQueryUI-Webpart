/// <reference types="mocha" />
"use strict";
var chai_1 = require("chai");
var ts = require("typescript");
var path = require("path");
var Extractor_1 = require("../../Extractor");
var ApiDocumentation_1 = require("../ApiDocumentation");
/* tslint:disable:no-function-expression - Mocha uses a poorly scoped "this" pointer */
var capturedErrors = [];
function testErrorHandler(message, fileName, lineNumber) {
    capturedErrors.push({ message: message, fileName: fileName, lineNumber: lineNumber });
}
var inputFolder = './testInputs/example2';
var compilerOptions = {
    target: ts.ScriptTarget.ES5,
    module: ts.ModuleKind.CommonJS,
    moduleResolution: ts.ModuleResolutionKind.NodeJs,
    rootDir: inputFolder,
    typeRoots: ['./'] // We need to ignore @types in these tests
};
var extractor = new Extractor_1.default({
    compilerOptions: compilerOptions,
    errorHandler: testErrorHandler
});
extractor.loadExternalPackages('./testInputs/external-api-json');
// Run the analyzer once to be used by unit tests
extractor.analyze({
    entryPointFile: path.join(inputFolder, 'index.ts')
});
var myDocumentedClass = extractor.package.getSortedMemberItems()
    .filter(function (apiItem) { return apiItem.name === 'MyDocumentedClass'; })[0];
describe('ApiDocumentation tests', function () {
    this.timeout(10000);
    describe('ApiDocumentation internal methods', function () {
        var apiDoc = new ApiDocumentation_1.default('Some summary\n@remarks and some remarks\n@public', extractor.docItemLoader, extractor, console.log);
    });
    describe('Documentation Parser Tests', function () {
        it('Should report errors', function () {
            /**
             * To view the expected errors see:
             * - testInputs/example2/folder/MyDocumentedClass (9 errors)
             * - the test in this file '_parseApiReferenceExpression() without scope name and invalid memberName' (1 error)
             */
            chai_1.assert.equal(capturedErrors.length, 10);
        });
        it('Should parse API tag', function () {
            var expecedApiTag = ApiDocumentation_1.ApiTag.Public;
            var actualDoc = myDocumentedClass ? myDocumentedClass.documentation : undefined;
            chai_1.assert.isObject(actualDoc);
            chai_1.assert.equal(actualDoc.apiTag, expecedApiTag);
        });
    });
});

//# sourceMappingURL=ApiDocumentation.test.js.map
