"use strict";
var chai_1 = require("chai");
var test_1 = require("@microsoft/sp-core-library/lib/test");
var SPSystemJsComponentLoader_1 = require("./../SPSystemJsComponentLoader");
var normalizeName_1 = require("./../normalizeName");
var ComponentStore_1 = require("./../stores/ComponentStore");
var ManifestStore_1 = require("./../stores/ManifestStore");
var SystemJsLoader_1 = require("./../SystemJsLoader");
var TestManifests_1 = require("./TestManifests");
describe('SPSystemJsComponentLoader tests', function () {
    var componentLoader;
    before(function () {
        componentLoader = new SPSystemJsComponentLoader_1.default();
    });
    describe('System.config()', function () {
        it('throws if called', function () {
            chai_1.assert.throws(function () { System.config({}); });
        });
    });
    describe('loadScript()', function () {
        var systemJsLoaderMock;
        beforeEach(function () {
            systemJsLoaderMock = sinon.mock(SystemJsLoader_1.default.instance);
        });
        afterEach(function () {
            systemJsLoaderMock.restore();
        });
        it('loads script without options', function () {
            var url = 'thisIsAUrl';
            var retValue = new Promise(function () { }); 
            systemJsLoaderMock.expects('systemConfig').never();
            systemJsLoaderMock.expects('systemImport').once().withExactArgs(url).returns(retValue);
            var module = componentLoader.loadScript(url); 
            chai_1.assert.equal(module, retValue);
            systemJsLoaderMock.verify();
        });
        it('loads script with empty options', function () {
            var url = 'thisIsAUrl';
            var retValue = new Promise(function () { }); 
            systemJsLoaderMock.expects('systemConfig').never();
            systemJsLoaderMock.expects('systemImport').once().withExactArgs(url).returns(retValue);
            var module = componentLoader.loadScript(url, {}); 
            chai_1.assert.equal(module, retValue);
            systemJsLoaderMock.verify();
        });
        it('loads script with string as options', function () {
            chai_1.assert.throws(function () { componentLoader.loadScript('thisIsAUrl', 'thisIsAString'); });
        });
        it('loads script with global name', function () {
            var url = 'thisIsAUrl';
            var options = {
                globalExportsName: 'thisIsAName'
            };
            var configMeta = {}; 
            configMeta[url] = {
                format: 'global',
                exports: options.globalExportsName
            };
            var systemJsConfig = {
                meta: configMeta
            };
            var retValue = new Promise(function () { }); 
            systemJsLoaderMock.expects('systemConfig').once().withExactArgs(systemJsConfig);
            systemJsLoaderMock.expects('systemImport').once().withExactArgs(url).returns(retValue);
            var module = componentLoader.loadScript(url, options); 
            chai_1.assert.equal(module, retValue);
            systemJsLoaderMock.verify();
        });
    });
    describe('loadComponent()', function () {
        afterEach(function () {
            ComponentStore_1.default._instance = undefined; 
            ManifestStore_1.default._instance = undefined; 
        });
        it('loads component from cache, if available', function (done) {
            var manifest = TestManifests_1.default.manifest;
            var expectedOutput = 'thisIsTheModuleObject';
            var retValue = new Promise(function (resolve) { resolve(expectedOutput); });
            var componentStoreMock = sinon.mock(ComponentStore_1.default.instance);
            componentStoreMock.expects('getComponent').once().withArgs(manifest.id, manifest.version).returns(retValue);
            var systemMock = sinon.mock(System);
            systemMock.expects('import').never();
            var actualOutput = componentLoader.loadComponent(manifest);
            actualOutput.then(function (value) {
                chai_1.assert.equal(value, expectedOutput);
                componentStoreMock.verify();
                componentStoreMock.restore();
                systemMock.verify();
                systemMock.restore();
                done();
            });
        });
        it('loads component without dependencies', function (done) {
            var systemMock = sinon.mock(System);
            var manifest = TestManifests_1.default.manifest;
            var expectedOutput = 'thisIsTheModuleObject';
            systemImportLoadsComponentAndExpectsBeingCalledOnce(systemMock, manifest, expectedOutput);
            var actualOutput = componentLoader.loadComponent(manifest);
            actualOutput.then(function (value) {
                chai_1.assert.equal(value, expectedOutput);
                chai_1.assert.isDefined(System.packages[normalizeName_1.default(manifest)]); 
                systemMock.verify();
                systemMock.restore();
                done();
            });
        });
        it('loads component with a path dependency', function (done) {
            var systemMock = sinon.mock(System);
            var manifest = TestManifests_1.default.manifestWithPathDependency;
            var expectedOutput = 'thisIsTheModuleObject';
            systemImportLoadsComponentAndExpectsBeingCalledOnce(systemMock, manifest, expectedOutput);
            systemImportLoadsPathDependencyAndExpectsBeingCalledOnce(systemMock, manifest, TestManifests_1.default.pathDependencyName, 'anything');
            var actualOutput = componentLoader.loadComponent(manifest);
            actualOutput.then(function (value) {
                chai_1.assert.equal(value, expectedOutput);
                var normalizedName = normalizeName_1.default(manifest);
                var normalizedPathDepName = normalizeName_1.default(manifest, TestManifests_1.default.pathDependencyName);
                chai_1.assert.isDefined(System.packages[normalizedName]);
                chai_1.assert.equal(System.packages[normalizedName].map[TestManifests_1.default.pathDependencyName], normalizedPathDepName);
                systemMock.verify();
                systemMock.restore();
                done();
            });
        });
        it('loads component with a component dependency', function (done) {
            var systemMock = sinon.mock(System);
            var manifest = TestManifests_1.default.manifestWithComponentDependency;
            var expectedOutput = 'thisIsTheModuleObject';
            systemImportLoadsComponentAndExpectsBeingCalledOnce(systemMock, manifest, expectedOutput);
            var dependencyManifest = TestManifests_1.default.componentDependencyManifest;
            systemImportLoadsComponentAndExpectsBeingCalledOnce(systemMock, dependencyManifest, 'anything');
            componentLoader.registerManifests([dependencyManifest]);
            var actualOutput = componentLoader.loadComponent(manifest);
            actualOutput.then(function (value) {
                chai_1.assert.equal(value, expectedOutput);
                var normalizedName = normalizeName_1.default(manifest);
                var normalizedDependencyName = normalizeName_1.default(dependencyManifest);
                chai_1.assert.isDefined(System.packages[normalizedName]);
                chai_1.assert.equal(System.packages[normalizedName].map[TestManifests_1.default.componentDependencyName], normalizedDependencyName);
                systemMock.verify();
                systemMock.restore();
                done();
            });
        });
        it('loads component with a component dependency with failover path', function (done) {
            var systemMock = sinon.mock(System);
            var manifest = TestManifests_1.default.manifestWithComponentDependencyWithFailoverPath;
            var expectedOutput = 'thisIsTheModuleObject';
            systemImportLoadsComponentAndExpectsBeingCalledOnce(systemMock, manifest, expectedOutput);
            var normalizedFailoverPath = normalizeName_1.normalizeFailoverPathName(TestManifests_1.default.componentDependencyName);
            systemMock.expects('import').once().withArgs(normalizedFailoverPath)
                .returns(new Promise(function (resolve) { resolve('anything'); }));
            var actualOutput = componentLoader.loadComponent(manifest);
            actualOutput.then(function (value) {
                chai_1.assert.equal(value, expectedOutput);
                chai_1.assert.isDefined(System.packages[normalizeName_1.default(manifest)]);
                chai_1.assert.equal(System.map[TestManifests_1.default.componentDependencyName], normalizedFailoverPath);
                systemMock.verify();
                systemMock.restore();
                done();
            });
        });
        it('throws error when a component dependency has not been registered', function (done) {
            var manifest = TestManifests_1.default.manifestWithComponentDependency;
            componentLoader.loadComponent(manifest).then(function (value) {
                chai_1.assert.fail();
                done();
            }).catch(function (error) {
                done();
            });
        });
    });
    describe('loadComponentById()', function () {
        afterEach(function () {
            ComponentStore_1.default._instance = undefined; 
            ManifestStore_1.default._instance = undefined; 
        });
        it('fails if id is undefined or empty', function () {
            chai_1.assert.throws(function () { componentLoader.loadComponentById(test_1.TEST_UNDEFINED); });
            chai_1.assert.throws(function () { componentLoader.loadComponentById(''); });
        });
        it('fails if there is no manifest for the id and version', function () {
            chai_1.assert.throws(function () { componentLoader.loadComponentById(TestManifests_1.default.manifest.id); });
        });
        it('loads the component with a manifest matching id and version', function (done) {
            var systemMock = sinon.mock(System);
            var manifest = TestManifests_1.default.manifest;
            var expectedOutput = 'thisIsTheModuleObject';
            systemImportLoadsComponentAndExpectsBeingCalledOnce(systemMock, manifest, expectedOutput);
            componentLoader.registerManifests([manifest]);
            var actualOutput = componentLoader.loadComponentById(manifest.id, manifest.version);
            actualOutput.then(function (value) {
                chai_1.assert.equal(value, expectedOutput);
                chai_1.assert.isDefined(System.packages[normalizeName_1.default(manifest)]); 
                systemMock.verify();
                systemMock.restore();
                done();
            });
        });
    });
});
function systemImportLoadsComponentAndExpectsBeingCalledOnce(systemMock, manifest, module 
) {
    var retValue = new Promise(function (resolve) { resolve(module); });
    var normalizedName = normalizeName_1.default(manifest);
    systemMock.expects('import').once().withArgs(normalizedName).returns(retValue);
}
function systemImportLoadsPathDependencyAndExpectsBeingCalledOnce(systemMock, manifest, pathDependencyName, module 
) {
    var retValue = new Promise(function (resolve) { resolve(module); });
    var normalizedName = normalizeName_1.default(manifest, pathDependencyName);
    systemMock.expects('import').once().withArgs(normalizedName).returns(retValue);
}
