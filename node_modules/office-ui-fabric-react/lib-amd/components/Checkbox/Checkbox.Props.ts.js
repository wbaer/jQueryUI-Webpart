define([], function() { return "import * as React from 'react';\r\n\r\n/**\r\n * Checkbox class interface.\r\n */\r\nexport interface ICheckbox {\r\n  /** Gets the current checked state. */\r\n  checked: boolean;\r\n\r\n  /** Sets focus to the checkbox. */\r\n  focus(): void;\r\n}\r\n\r\n/**\r\n * Checkbox properties.\r\n */\r\nexport interface ICheckboxProps extends React.HTMLProps<HTMLElement | HTMLInputElement> {\r\n  /**\r\n   * Additional class name to provide on the root element, in addition to the ms-Checkbox class.\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * Checked state. Mutually exclusive to \"defaultChecked\". Use this if you control the checked state at a higher\r\n   * level and plan to pass in the correct value based on handling onChange events and re-rendering.\r\n   */\r\n  checked?: boolean;\r\n\r\n  /**\r\n   * Default checked state. Mutually exclusive to \"checked\". Use this if you want an uncontrolled component, and\r\n   * want the Checkbox instance to maintain its own state.\r\n   */\r\n  defaultChecked?: boolean;\r\n\r\n  /**\r\n   * Label to display next to the checkbox.\r\n   */\r\n  label?: string;\r\n\r\n  /**\r\n   * Disabled state of the checkbox.\r\n   */\r\n  disabled?: boolean;\r\n\r\n  /**\r\n   * Callback that is called when the checked value has changed.\r\n   */\r\n  onChange?: (ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => void;\r\n\r\n  /**\r\n   * Optional input props that will be mixed into the input element, *before* other props are applied. This allows\r\n   * you to extend the input element with additional attributes, such as data-automation-id needed for automation.\r\n   * Note that if you provide, for example, \"disabled\" as well as \"inputProps.disabled\", the former will take\r\n   * precedence over the later.\r\n   */\r\n  inputProps?: React.HTMLProps<HTMLElement | HTMLInputElement>;\r\n}\r\n"; });