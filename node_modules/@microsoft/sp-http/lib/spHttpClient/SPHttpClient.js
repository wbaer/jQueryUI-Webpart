"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var decorators_1 = require("@microsoft/decorators");
var lodash = require("@microsoft/sp-lodash-subset");
var sp_telemetry_1 = require("@ms/sp-telemetry");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var DigestCache_1 = require("./DigestCache");
var SPHttpClientConfiguration_1 = require("./SPHttpClientConfiguration");
var SPHttpClientResponse_1 = require("./SPHttpClientResponse");
var SPHttpClientBatch_1 = require("./SPHttpClientBatch");
var SPHttpClientHelper_1 = require("./SPHttpClientHelper");
var ODataVersion_1 = require("./ODataVersion");
var SPHttpClient = SPHttpClient_1 = (function () {
    function SPHttpClient(serviceScope) {
        var _this = this;
        this._spHttpClientHelper = new SPHttpClientHelper_1.default(serviceScope, 'SPHttpClient');
        this._serviceScope = serviceScope;
        this._serviceScope.whenFinished(function () {
            _this._digestCache = serviceScope.consume(DigestCache_1.default.serviceKey);
            _this._randomNumberGenerator = serviceScope.consume(sp_core_library_1.RandomNumberGenerator.serviceKey);
            _this._parentSource = serviceScope.consume(sp_telemetry_1._logSourceServiceKey);
        });
    }
    SPHttpClient.getWebUrlFromRequestUrl = function (requestUrl) {
        var segmentIndex = -1;
        var upperCaseUrl = requestUrl.toUpperCase();
        for (var _i = 0, _a = SPHttpClient_1._reservedUrlSegments; _i < _a.length; _i++) {
            var reservedUrlSegment = _a[_i];
            segmentIndex = upperCaseUrl.indexOf(reservedUrlSegment);
            if (segmentIndex >= 0) {
                return requestUrl.substr(0, segmentIndex);
            }
        }
        throw new Error('Unable to determine web URL');
    };
    SPHttpClient.prototype.fetch = function (url, configuration, options) {
        var _this = this;
        if (!options) {
            options = {};
        }
        var modifiedOptions = lodash.clone(options);
        if (configuration.defaultSameOriginCredentials) {
            if (!options.credentials) {
                modifiedOptions.credentials = 'same-origin';
            }
        }
        var headers = SPHttpClientHelper_1.default.cloneHeaders(options);
        modifiedOptions.headers = headers;
        if (configuration.defaultODataVersion) {
            if (!headers.has('OData-Version')) {
                headers.append('OData-Version', configuration.defaultODataVersion.toString());
            }
        }
        var oDataVersion = ODataVersion_1.default.tryParseFromHeaders(headers);
        SPHttpClientHelper_1.default.applyDefaultHeaders(headers, configuration, options, oDataVersion);
        if (configuration.requestDigest) {
            if (options.method) {
                var method = options.method.toUpperCase();
                if (method !== 'GET' && method !== 'HEAD' && method !== 'OPTIONS') {
                    if (!headers.has('X-RequestDigest')) {
                        var webUrl = options.webUrl || SPHttpClient_1.getWebUrlFromRequestUrl(url);
                        var promise = this._digestCache.fetchDigest(webUrl)
                            .then(function (digest) {
                            headers.append('X-RequestDigest', digest);
                            return _this._fetchWithInstrumentation(configuration, new Request(url, modifiedOptions));
                        });
                        return SPHttpClientHelper_1.default.handleAuthenticationErrors(promise, webUrl, this._digestCache)
                            .then(function (response) {
                            return new SPHttpClientResponse_1.default(response);
                        });
                    }
                }
            }
        }
        return this._fetchWithInstrumentation(configuration, new Request(url, modifiedOptions))
            .then(function (response) {
            return new SPHttpClientResponse_1.default(response);
        });
    };
    SPHttpClient.prototype.get = function (url, configuration, options) {
        return this.fetch(url, configuration, this._spHttpClientHelper.overrideHttpMethod(options, 'GET'));
    };
    SPHttpClient.prototype.post = function (url, configuration, options) {
        return this.fetch(url, configuration, this._spHttpClientHelper.overrideHttpMethod(options, 'POST'));
    };
    SPHttpClient.prototype.beginBatch = function (batchCreationOptions) {
        return new SPHttpClientBatch_1.default(this._serviceScope, batchCreationOptions);
    };
    SPHttpClient.prototype._fetchWithInstrumentation = function (configuration, request) {
        var _this = this;
        var tag = this._performanceTag;
        sp_telemetry_1._PerformanceLogger.startMarkForApi(tag);
        var qosMonitor = new sp_telemetry_1._QosMonitor('SPHttpClient');
        return this._spHttpClientHelper.fetchCore(configuration, request).then(function (response) {
            sp_telemetry_1._PerformanceLogger.endMarkForApi(tag, _this._logSourceId, request.url, response);
            if (response.status >= 200 && response.status <= 299) {
                qosMonitor.writeSuccess({ source: _this._logSourceId });
            }
            else if (response.status >= 300 && response.status <= 499) {
                qosMonitor.writeExpectedFailure('Fetch', undefined, { source: _this._logSourceId, responseStatus: response.status });
            }
            else {
                qosMonitor.writeUnexpectedFailure('Fetch', undefined, { source: _this._logSourceId, responseStatus: response.status });
            }
            return response;
        }).catch(function (error) {
            qosMonitor.writeUnexpectedFailure('Fetch', error, { source: _this._logSourceId });
            throw error;
        });
    };
    Object.defineProperty(SPHttpClient.prototype, "_performanceTag", {
        get: function () {
            var randomSuffix = Math.floor(this._randomNumberGenerator.generate() * 100000).toString();
            return this._logSourceId + "." + randomSuffix;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPHttpClient.prototype, "_logSourceId", {
        get: function () {
            if (this._parentSource.isEmpty()) {
                return SPHttpClient_1._logSource.id;
            }
            return this._parentSource.id;
        },
        enumerable: true,
        configurable: true
    });
    return SPHttpClient;
}());
SPHttpClient.configurations = SPHttpClientConfiguration_1.predefinedConfigurations;
SPHttpClient.serviceKey = sp_core_library_1.ServiceKey.create('sp-http:SPHttpClient', SPHttpClient_1);
SPHttpClient._logSource = sp_telemetry_1._LogSource.create('spHttpClient');
SPHttpClient._reservedUrlSegments = [
    '/_API/',
    '/_LAYOUTS/',
    '/_VTI_BIN/'
];
SPHttpClient = SPHttpClient_1 = __decorate([
    decorators_1.sealed
], SPHttpClient);
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SPHttpClient;
var SPHttpClient_1;
