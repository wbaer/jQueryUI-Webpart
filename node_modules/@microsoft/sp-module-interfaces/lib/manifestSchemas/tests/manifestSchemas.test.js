/// <reference types="mocha" />
"use strict";
var ZSchema = require("z-schema");
var fs = require("fs");
var path = require("path");
var chai_1 = require("chai");
var lodash_1 = require("lodash");
var os_1 = require("os");
var manifestSchemaValidator_1 = require("./../../manifestSchemaValidator");
// Discover the schema files
var schemasDirectory = path.join(__dirname, '..', 'jsonSchemas');
var schemaFiles = fs.readdirSync(schemasDirectory);
var errorSeparator = os_1.EOL + "          - ";
function assertValidSchema(schemaValidator, filePath) {
    var errors = schemaValidator.getLastErrors() || [];
    var errorMessages = errors.map(function (error) {
        return errorSeparator + "(" + error.path + ") " + error.message;
    });
    chai_1.assert(errors.length === 0, "Schema validation errors" + (filePath ? " (" + filePath + ")" : '') + ":" + errorMessages.join(''));
}
describe('Manifest schemas', function () {
    var schemas;
    var schemaValidator;
    beforeEach(function () {
        schemas = schemaFiles.map(function (schemaFile) { return lodash_1.cloneDeep(require(path.join(schemasDirectory, schemaFile))); });
        schemaValidator = new ZSchema(manifestSchemaValidator_1.zSchemaOptions);
    });
    it('schemas are valid', function () {
        // @todo 272561 - update the z-schema typings
        schemaValidator.validateSchema(schemas); // tslint:disable-line:no-any
        assertValidSchema(schemaValidator);
    });
});

//# sourceMappingURL=manifestSchemas.test.js.map
