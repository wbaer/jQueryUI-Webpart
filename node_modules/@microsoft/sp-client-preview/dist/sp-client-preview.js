define("4d5eb168-6729-49a8-aec7-0e397f486b6e_1.0.0", ["@ms/sp-telemetry","@microsoft/sp-core-library","@microsoft/sp-page-context","react","react-dom","office-ui-fabric-react","resx-strings","@microsoft/sp-webpart-base","@microsoft/sp-lodash-subset","@microsoft/sp-client-base","@microsoft/sp-http","@microsoft/sp-loader"], function(__WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_12__, __WEBPACK_EXTERNAL_MODULE_22__, __WEBPACK_EXTERNAL_MODULE_24__, __WEBPACK_EXTERNAL_MODULE_25__, __WEBPACK_EXTERNAL_MODULE_27__, __WEBPACK_EXTERNAL_MODULE_138__, __WEBPACK_EXTERNAL_MODULE_141__, __WEBPACK_EXTERNAL_MODULE_142__, __WEBPACK_EXTERNAL_MODULE_176__, __WEBPACK_EXTERNAL_MODULE_218__, __WEBPACK_EXTERNAL_MODULE_220__) { return /******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	var parentJsonpFunction = window["webpackJsonp4d5eb168_6729_49a8_aec7_0e397f486b6e_1_0_0"];
/******/ 	window["webpackJsonp4d5eb168_6729_49a8_aec7_0e397f486b6e_1_0_0"] = function webpackJsonpCallback(chunkIds, moreModules) {
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, callbacks = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId])
/******/ 				callbacks.push.apply(callbacks, installedChunks[chunkId]);
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			modules[moduleId] = moreModules[moduleId];
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);
/******/ 		while(callbacks.length)
/******/ 			callbacks.shift().call(null, __webpack_require__);
/******/
/******/ 	};
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// "0" means "already loaded"
/******/ 	// Array means "loading", array contains callbacks
/******/ 	var installedChunks = {
/******/ 		0:0
/******/ 	};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId, callback) {
/******/ 		// "0" is the signal for "already loaded"
/******/ 		if(installedChunks[chunkId] === 0)
/******/ 			return callback.call(null, __webpack_require__);
/******/
/******/ 		// an array means "currently loading".
/******/ 		if(installedChunks[chunkId] !== undefined) {
/******/ 			installedChunks[chunkId].push(callback);
/******/ 		} else {
/******/ 			// start chunk loading
/******/ 			installedChunks[chunkId] = [callback];
/******/ 			var head = document.getElementsByTagName('head')[0];
/******/ 			var script = document.createElement('script');
/******/ 			script.type = 'text/javascript';
/******/ 			script.charset = 'utf-8';
/******/ 			script.async = true;
/******/
/******/ 			script.src = __webpack_require__.p + "" + chunkId + "." + ({"1":"sp-client-preview-ckeditor","2":"sp-client-preview-quill"}[chunkId]||chunkId) + "_" + {"1":"1a9fe7be704db7c018bb","2":"7d6a0ba54bf8fbfa8504"}[chunkId] + ".js";
/******/ 			head.appendChild(script);
/******/ 		}
/******/ 	};
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(1));
	__webpack_require__(238);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(2);
	var ClientSideApplication_1 = __webpack_require__(3);
	exports.ClientSideApplication = ClientSideApplication_1.default;
	var PreloadedDataReader_1 = __webpack_require__(6);
	exports._PreloadedDataReader = PreloadedDataReader_1.default;
	var AppPageContext_1 = __webpack_require__(11);
	exports.PageContext = AppPageContext_1.default;
	exports.pageContextServiceKey = AppPageContext_1.appPageContextServiceKey;
	var SPSite_1 = __webpack_require__(16);
	exports.SPSite = SPSite_1.default;
	var SPWeb_1 = __webpack_require__(14);
	exports.SPWeb = SPWeb_1.default;
	var SPList_1 = __webpack_require__(17);
	exports.SPList = SPList_1.default;
	var SPListItem_1 = __webpack_require__(18);
	exports.SPListItem = SPListItem_1.default;
	var SPNavigationNode_1 = __webpack_require__(9);
	exports.SPNavigationNode = SPNavigationNode_1.default;
	var SPNavigationNodeCollection_1 = __webpack_require__(20);
	exports.SPNavigationNodeCollection = SPNavigationNodeCollection_1.default;
	var SPUser_1 = __webpack_require__(19);
	exports.SPUser = SPUser_1.default;
	var Canvas_1 = __webpack_require__(23);
	exports.Canvas = Canvas_1.default;
	var _spShell_1 = __webpack_require__(216);
	exports._spShell = _spShell_1.default;
	var alternativeUrls_1 = __webpack_require__(234);
	exports.AlternativeUrlMap = alternativeUrls_1.AlternativeUrlMap;
	exports.UserPhotoSize = alternativeUrls_1.UserPhotoSize;
	var GuidHelpers_1 = __webpack_require__(8);
	exports.GuidHelpers = GuidHelpers_1.default;
	var UrlUtilities_1 = __webpack_require__(235);
	exports.getPathNameFromAbsoluteUrl = UrlUtilities_1.getPathNameFromAbsoluteUrl;
	exports.combineURLPaths = UrlUtilities_1.combineURLPaths;
	var WebPartRte_1 = __webpack_require__(236);
	exports.WebPartRte = WebPartRte_1.default;
	var ToolbarButton_1 = __webpack_require__(158);
	exports.ToolbarButton = ToolbarButton_1.default;
	var SPThemeProvider_1 = __webpack_require__(228);
	exports.SPThemeProvider = SPThemeProvider_1.default;
	var SPGlobalErrorHandler_1 = __webpack_require__(230);
	exports.SPGlobalErrorHandler = SPGlobalErrorHandler_1.default;


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var scripts = document.getElementsByTagName('script');
	var regex = new RegExp('ScriptLoadName-DoNotChange', 'i');
	var found = false;
	
	if (scripts && scripts.length) {
	  for (var i = 0; i < scripts.length; i++) {
	    if (!scripts[i]) continue;
	    var path = scripts[i].getAttribute('src');
	    if (path && path.match(regex)) {
	      __webpack_require__.p = path.substring(0, path.lastIndexOf('/') + 1);
	      found = true;
	      break;
	    }
	  }
	}
	
	if (!found) {
	  for (var global in window.__setWebpackPublicPathLoaderSrcRegistry__) {
	    if (global && global.match(regex)) {
	      __webpack_require__.p = global.substring(0, global.lastIndexOf('/') + 1);
	      break;
	    }
	  }
	}

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var SuiteNavManagerConfiguration_1 = __webpack_require__(4);
	var ClientSideApplication = (function () {
	    function ClientSideApplication() {
	        this._shell = undefined;
	        this._domElement = undefined;
	        this['__type'] = 'ClientSideApplication';
	    }
	    Object.defineProperty(ClientSideApplication.prototype, "shell", {
	        get: function () {
	            return this._shell;
	        },
	        set: function (value) {
	            throw new Error('The property cannot be assigned because it is read-only');
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ClientSideApplication.prototype, "domElement", {
	        get: function () {
	            return this._domElement;
	        },
	        set: function (value) {
	            throw new Error('The property cannot be assigned because it is read-only');
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ClientSideApplication.prototype.load = function (shell) {
	        this._shell = shell;
	        this.onLoad();
	    };
	    ClientSideApplication.prototype.onLoad = function () {
	    };
	    ClientSideApplication.prototype.render = function (domElement) {
	        this._domElement = domElement;
	        this.onRender();
	    };
	    ClientSideApplication.prototype.onRender = function () {
	    };
	    ClientSideApplication.prototype.suiteNavConfiguration = function () {
	        return new SuiteNavManagerConfiguration_1.default(this._shell.appPageContext);
	    };
	    return ClientSideApplication;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ClientSideApplication;


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var SuiteNavLinkIds_1 = __webpack_require__(5);
	var SuiteNavManagerConfiguration = (function () {
	    function SuiteNavManagerConfiguration(pageContext) {
	        this._pageContext = pageContext;
	        this._currentUICultureName = this._pageContext.core.currentUICultureName;
	        this._webServerRelativeUrl = this._pageContext.core.webServerRelativeUrl;
	        this._o365ShellRenderSettings = {
	            disableDelayLoad: false,
	            disableShellPlus: false,
	            layout: 'Mouse',
	            top: undefined
	        };
	        this._hamburgerMenuCallback = undefined;
	        this._suiteNavPostRenderCallback = undefined;
	        this._systemUserKey = this._pageContext.core.systemUserKey;
	        this._siteClientTag = this._pageContext.core.siteClientTag;
	        this._isSuiteNavDisabled = this._shouldDisableSuiteNav();
	        if (this._pageContext.core.menuData) {
	            this._settingsLinks = this._pageContext.core.menuData['SettingsData'];
	            this._signoutUrl = this._pageContext.core.menuData['SignOutUrl'];
	        }
	    }
	    SuiteNavManagerConfiguration.prototype.isSuiteNavDisabled = function () {
	        return this._isSuiteNavDisabled;
	    };
	    SuiteNavManagerConfiguration.prototype.disableSuiteNav = function () {
	        this._isSuiteNavDisabled = true;
	    };
	    SuiteNavManagerConfiguration.prototype.modifySuiteNavData = function (suiteNavData) {
	        suiteNavData.CurrentMainLinkElementID = SuiteNavLinkIds_1.default.SITES;
	        suiteNavData.CurrentWorkloadSettingsSubLinks =
	            this._settingsLinks && this._settingsLinks.length > 0 ? this._settingsLinks : undefined;
	        suiteNavData.FeedbackLink = undefined;
	        if (suiteNavData.SignOutLink) {
	            suiteNavData.SignOutLink.Url = this._signoutUrl;
	        }
	        if (suiteNavData.HelpLink) {
	            suiteNavData.HelpLink.Url = 'https://go.microsoft.com/fwlink/p/?linkid=827181';
	        }
	        return suiteNavData;
	    };
	    ;
	    Object.defineProperty(SuiteNavManagerConfiguration.prototype, "systemUserKey", {
	        get: function () {
	            return this._systemUserKey || '';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SuiteNavManagerConfiguration.prototype, "cacheToken", {
	        get: function () {
	            var clientTag = this._siteClientTag;
	            if (clientTag !== undefined) {
	                return clientTag.substring(0, clientTag.indexOf('$$'));
	            }
	            return '';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    Object.defineProperty(SuiteNavManagerConfiguration.prototype, "o365ShellRenderSettings", {
	        get: function () {
	            return this._o365ShellRenderSettings;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SuiteNavManagerConfiguration.prototype, "currentUICultureName", {
	        get: function () {
	            return this._currentUICultureName;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SuiteNavManagerConfiguration.prototype, "webServerRelativeUrl", {
	        get: function () {
	            return this._webServerRelativeUrl;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SuiteNavManagerConfiguration.prototype, "hamburgerCallback", {
	        get: function () {
	            return this._hamburgerMenuCallback;
	        },
	        set: function (hamburgerCallback) {
	            this._hamburgerMenuCallback = hamburgerCallback;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SuiteNavManagerConfiguration.prototype, "suiteNavPostRenderCallback", {
	        get: function () {
	            return this._suiteNavPostRenderCallback;
	        },
	        set: function (suiteNavPostRenderCallback) {
	            this._suiteNavPostRenderCallback = suiteNavPostRenderCallback;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SuiteNavManagerConfiguration.prototype._shouldDisableSuiteNav = function () {
	        return (window.location.hostname === 'localhost' ||
	            this._pageContext.urlQueryParameters.getValue('disableSuiteNav') === 'true') ?
	            true :
	            false;
	    };
	    return SuiteNavManagerConfiguration;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SuiteNavManagerConfiguration;


/***/ },
/* 5 */
/***/ function(module, exports) {

	"use strict";
	var SuiteNavLinkIds = (function () {
	    function SuiteNavLinkIds() {
	    }
	    return SuiteNavLinkIds;
	}());
	SuiteNavLinkIds.CUSTOM_SETTINGS_1 = 'WorkloadSettingsSubLinks1';
	SuiteNavLinkIds.CUSTOM_SETTINGS_2 = 'WorkloadSettingsSubLinks2';
	SuiteNavLinkIds.CUSTOM_SETTINGS_3 = 'WorkloadSettingsSubLinks3';
	SuiteNavLinkIds.FEEDBACK = 'ShellFeedback';
	SuiteNavLinkIds.DIAGNOSTICS = 'Diagnostics';
	SuiteNavLinkIds.O365_SETTINGS = 'ShellO365Settings'; 
	SuiteNavLinkIds.ADD_APP = 'SuiteMenu_zz5_MenuItemCreate'; 
	SuiteNavLinkIds.CREATE_PAGE = 'SuiteMenu_MenuItemCreatePage'; 
	SuiteNavLinkIds.SITE_CONTENTS = 'SuiteMenu_zz6_MenuItem_ViewAllSiteContents'; 
	SuiteNavLinkIds.SITE_SETTINGS = 'SuiteMenu_zz7_MenuItem_Settings'; 
	SuiteNavLinkIds.USER_ACTIVITY = 'UserActivity'; 
	SuiteNavLinkIds.ABOUT_ME = 'ShellAboutMe'; 
	SuiteNavLinkIds.SETTINGS = 'ShellSettings'; 
	SuiteNavLinkIds.MY_SETTINGS = 'SuiteMenu_zz2_ID_PersonalInformation'; 
	SuiteNavLinkIds.SIGN_OUT = 'ShellSignout';
	SuiteNavLinkIds.HELP = 'HelpLink';
	SuiteNavLinkIds.COMMUNITY = 'ShellCommunity';
	SuiteNavLinkIds.PRIVACY = 'ShellPrivacy';
	SuiteNavLinkIds.LEGAL = 'ShellLegal';
	SuiteNavLinkIds.MAIL = 'ShellMail'; 
	SuiteNavLinkIds.CALENDAR = 'ShellCalendar';
	SuiteNavLinkIds.PEOPLE = 'ShellPeople';
	SuiteNavLinkIds.ONEDRIVE = 'ShellDocuments'; 
	SuiteNavLinkIds.WORD = 'ShellWordOnline';
	SuiteNavLinkIds.EXCEL = 'ShellExcelOnline';
	SuiteNavLinkIds.POWERPOINT = 'ShellPowerPointOnline';
	SuiteNavLinkIds.ONENOTE = 'ShellOneNoteOnline';
	SuiteNavLinkIds.SITES = 'ShellSites';
	SuiteNavLinkIds.YAMMER = 'ShellYammer';
	SuiteNavLinkIds.TASKS = 'ShellTasks';
	SuiteNavLinkIds.POWER_BI = 'ShellPowerBI';
	SuiteNavLinkIds.DELVE = 'ShellOfficeGraph'; 
	SuiteNavLinkIds.VIDEO = 'ShellVideo';
	SuiteNavLinkIds.ALCHEMY = 'ShellAlchemy';
	SuiteNavLinkIds.SMILE = 'ShellSendASmile';
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SuiteNavLinkIds;


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var sp_telemetry_1 = __webpack_require__(7);
	var GuidHelpers_1 = __webpack_require__(8);
	var SPNavigationNode_1 = __webpack_require__(9);
	var PreloadedDataReader = (function () {
	    function PreloadedDataReader(preloadedData) {
	        this._preloadedData = preloadedData;
	        this._isValid = false;
	        if (this._preloadedData === undefined ||
	            !GuidHelpers_1.default.isValid(this._preloadedData.clientSideApplicationId)) {
	            sp_telemetry_1._TraceLogger.logVerbose(PreloadedDataReader._logSource, 'Warning: PreloadedDataReader: No preloaded data was found');
	        }
	        else {
	            this._isValid = true;
	        }
	    }
	    PreloadedDataReader._toNavNodes = function (srcNodes, pageContext) {
	        var items = new Array();
	        if (srcNodes) {
	            for (var i = 0; i < srcNodes.length; i++) {
	                var srcItem = srcNodes[i];
	                var item = new SPNavigationNode_1.default(pageContext);
	                item.load({ id: srcItem.Id });
	                item.updateOdataObject(srcItem);
	                items.push(item);
	            }
	        }
	        return items;
	    };
	    PreloadedDataReader.prototype.initializePageContext = function (pageContext) {
	        if (this._isValid) {
	            pageContext.application.load({
	                clientSideApplicationId: this._preloadedData.clientSideApplicationId,
	                hostedByClassicPage: false
	            });
	            pageContext.application.updateOdataObject(undefined);
	            pageContext.web.updateOdataObject(undefined);
	            pageContext.list.updateOdataObject(undefined);
	            pageContext.listItem.updateOdataObject(undefined);
	            pageContext.core.updateOdataObject(undefined);
	            var pageData = this._preloadedData.page;
	            if (pageData) {
	                pageContext.application.updateOdataObject(pageData);
	            }
	            var web = this._preloadedData.web;
	            if (web) {
	                pageContext.web.load({
	                    id: GuidHelpers_1.default.getNormalized(web.Id),
	                    serverRelativeUrl: web.ServerRelativeUrl,
	                    title: web.Title
	                });
	                pageContext.web.updateOdataObject(web);
	            }
	            var list = this._preloadedData.list;
	            if (list) {
	                pageContext.list.load({
	                    id: GuidHelpers_1.default.getNormalized(list.Id),
	                    title: list.Title,
	                    description: list.Description
	                });
	                pageContext.list.updateOdataObject(list);
	            }
	            var listItem = this._preloadedData.item;
	            if (listItem) {
	                pageContext.listItem.load({
	                    id: listItem.ID
	                });
	                pageContext.listItem.updateOdataObject(listItem);
	            }
	            var user = this._preloadedData.user;
	            if (user) {
	                pageContext.user.load({
	                    id: user.Id
	                });
	                pageContext.user.updateOdataObject(user);
	            }
	            var spPageContextInfo = this._preloadedData.spPageContextInfo;
	            if (spPageContextInfo) {
	                pageContext.core.load({
	                    MenuData: spPageContextInfo.MenuData,
	                    currentCultureName: spPageContextInfo.currentCultureName,
	                    currentUICultureName: spPageContextInfo.currentUICultureName,
	                    correlationId: spPageContextInfo.CorrelationId,
	                    spoEnvironment: spPageContextInfo.env,
	                    farmLabel: spPageContextInfo.farmLabel,
	                    groupColor: spPageContextInfo.groupColor,
	                    hasManageWebPermission: spPageContextInfo.hasManageWebPermission,
	                    isWebWelcomePage: spPageContextInfo.isWebWelcomePage,
	                    layoutsUrl: spPageContextInfo.layoutsUrl,
	                    listPermsMask: spPageContextInfo.listPermsMask,
	                    siteAbsoluteUrl: spPageContextInfo.siteAbsoluteUrl,
	                    siteClientTag: spPageContextInfo.siteClientTag,
	                    siteId: spPageContextInfo.siteId,
	                    sitePagesEnabled: spPageContextInfo.sitePagesEnabled,
	                    siteServerRelativeUrl: spPageContextInfo.siteServerRelativeUrl,
	                    siteSubscriptionId: spPageContextInfo.siteSubscriptionId,
	                    systemUserKey: spPageContextInfo.systemUserKey,
	                    themedCssFolderUrl: spPageContextInfo.themedCssFolderUrl,
	                    userDisplayName: spPageContextInfo.userDisplayName,
	                    userLoginName: spPageContextInfo.userLoginName,
	                    webAbsoluteUrl: spPageContextInfo.webAbsoluteUrl,
	                    webId: spPageContextInfo.webId,
	                    webLogoUrl: spPageContextInfo.webLogoUrl,
	                    webServerRelativeUrl: spPageContextInfo.webServerRelativeUrl,
	                    webTitle: spPageContextInfo.webTitle,
	                    webTemplate: spPageContextInfo.webTemplate,
	                    webPermMasks: spPageContextInfo.webPermMasks
	                });
	                pageContext.core.updateOdataObject(spPageContextInfo);
	            }
	        }
	        else if (window['_spPageContextInfo'] !== undefined) {
	            pageContext.application.load({
	                clientSideApplicationId: '00000000-0000-0000-0000-000000000000',
	                hostedByClassicPage: true
	            });
	            pageContext.web.load({
	                id: '00000000-0000-0000-0000-000000000000',
	                serverRelativeUrl: _spPageContextInfo.webServerRelativeUrl,
	                title: _spPageContextInfo.webTitle
	            });
	            if (_spPageContextInfo.pageListId) {
	                pageContext.list.load({
	                    id: GuidHelpers_1.default.getNormalized(_spPageContextInfo.pageListId),
	                    title: '',
	                    description: ''
	                });
	                if (_spPageContextInfo.pageItemId) {
	                    pageContext.listItem.load({
	                        id: _spPageContextInfo.pageItemId
	                    });
	                }
	            }
	        }
	        else {
	        }
	        if (this._preloadedData.spPageContextInfo && this._preloadedData.spPageContextInfo.navigationInfo) {
	            this._initNav(pageContext.quickLaunch, this._preloadedData.spPageContextInfo.navigationInfo.quickLaunch, pageContext);
	            this._initNav(pageContext.topNav, this._preloadedData.spPageContextInfo.navigationInfo.topNav, pageContext);
	        }
	    };
	    PreloadedDataReader.prototype._initNav = function (target, source, pageContext) {
	        if (!target || !source) {
	            return;
	        }
	        target.updateOdataObject(source);
	        var items = PreloadedDataReader._toNavNodes(source, pageContext);
	        target.items = items;
	    };
	    return PreloadedDataReader;
	}());
	PreloadedDataReader._logSource = sp_telemetry_1._LogSource.create('PreloadedDataReader');
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = PreloadedDataReader;


/***/ },
/* 7 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_7__;

/***/ },
/* 8 */
/***/ function(module, exports) {

	"use strict";
	var GuidHelpers = (function () {
	    function GuidHelpers() {
	    }
	    GuidHelpers.isValid = function (guid) {
	        var regex = new RegExp('^[a-f0-9]{8}(?:-[a-f0-9]{4}){3}-[a-f0-9]{12}$', 'i');
	        return regex.test(guid);
	    };
	    GuidHelpers.requireValid = function (guid) {
	        if (!GuidHelpers.isValid(guid)) {
	            throw Error("Invalid GUID syntax " + guid);
	        }
	    };
	    GuidHelpers.getNormalized = function (guid) {
	        var normalized = guid;
	        var regexp = new RegExp('^/Guid\\((.*)\\)/', 'i');
	        var result = regexp.exec(guid);
	        if (result) {
	            normalized = result[1];
	        }
	        if (normalized.length === 38) {
	            normalized = normalized.substr(1, 36);
	        }
	        GuidHelpers.requireValid(normalized);
	        return normalized.toLowerCase();
	    };
	    GuidHelpers.generateGuid = function () {
	        return 'AAAAAAAA-AAAA-4AAA-BAAA-AAAAAAAAAAAA'
	            .replace(/[AB]/g, function (character) {
	            var num = Math.random() * 16 | 0;
	            var masked = character === 'A' ? num : (num & 0x3 | 0x8);
	            return masked.toString(16);
	        });
	    };
	    return GuidHelpers;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = GuidHelpers;


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var PageContextItem_1 = __webpack_require__(10);
	var SPNavigationNode = (function (_super) {
	    __extends(SPNavigationNode, _super);
	    function SPNavigationNode(pageContext) {
	        return _super.call(this, pageContext) || this;
	    }
	    SPNavigationNode.prototype.load = function (args) {
	        this.validateLoad();
	        this._id = args.id;
	        this.state = PageContextItem_1.PageContextItemState.Ready;
	    };
	    Object.defineProperty(SPNavigationNode.prototype, "id", {
	        get: function () {
	            return this._id;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SPNavigationNode.prototype.getOdataObject = function () {
	        return this._odataObject;
	    };
	    SPNavigationNode.prototype.updateOdataObject = function (value) {
	        this._odataObject = value;
	    };
	    return SPNavigationNode;
	}(PageContextItem_1.default));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SPNavigationNode;


/***/ },
/* 10 */
/***/ function(module, exports) {

	"use strict";
	var PageContextItemState;
	(function (PageContextItemState) {
	    PageContextItemState[PageContextItemState["Uninitialized"] = 0] = "Uninitialized";
	    PageContextItemState[PageContextItemState["Requested"] = 1] = "Requested";
	    PageContextItemState[PageContextItemState["Ready"] = 2] = "Ready";
	})(PageContextItemState = exports.PageContextItemState || (exports.PageContextItemState = {}));
	var PageContextItem = (function () {
	    function PageContextItem(pageContext) {
	        this._pageContext = pageContext;
	        this._state = PageContextItemState.Uninitialized;
	    }
	    PageContextItem.prototype.getPageContext = function () {
	        return this._pageContext;
	    };
	    Object.defineProperty(PageContextItem.prototype, "state", {
	        get: function () {
	            return this._state;
	        },
	        set: function (value) {
	            this._state = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    PageContextItem.prototype.validateLoad = function () {
	        if (this._state === PageContextItemState.Ready) {
	            throw new Error('The object has already been loaded');
	        }
	    };
	    return PageContextItem;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = PageContextItem;


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var sp_core_library_1 = __webpack_require__(12);
	var ApplicationContext_1 = __webpack_require__(13);
	var SPWeb_1 = __webpack_require__(14);
	var SPSite_1 = __webpack_require__(16);
	var SPList_1 = __webpack_require__(17);
	var SPListItem_1 = __webpack_require__(18);
	var SPUser_1 = __webpack_require__(19);
	var SPNavigationNodeCollection_1 = __webpack_require__(20);
	var PageContextCore_1 = __webpack_require__(21);
	var AppPageContext = (function () {
	    function AppPageContext(serviceScope) {
	        this._application = new ApplicationContext_1.default(this);
	        this._site = new SPSite_1.default(this);
	        this._web = new SPWeb_1.default(this);
	        this._list = new SPList_1.default(this);
	        this._listItem = new SPListItem_1.default(this);
	        this._quickLaunch = new SPNavigationNodeCollection_1.default(this);
	        this._topNav = new SPNavigationNodeCollection_1.default(this);
	        this._core = new PageContextCore_1.default(this);
	        this._user = new SPUser_1.default(this);
	        this._urlQueryParameters = new sp_core_library_1.UrlQueryParameterCollection(window.location.href);
	    }
	    Object.defineProperty(AppPageContext.prototype, "application", {
	        get: function () {
	            return this._application;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AppPageContext.prototype, "site", {
	        get: function () {
	            return this._site;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AppPageContext.prototype, "web", {
	        get: function () {
	            return this._web;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AppPageContext.prototype, "list", {
	        get: function () {
	            return this._list;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AppPageContext.prototype, "listItem", {
	        get: function () {
	            return this._listItem;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AppPageContext.prototype, "quickLaunch", {
	        get: function () {
	            return this._quickLaunch;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AppPageContext.prototype, "topNav", {
	        get: function () {
	            return this._topNav;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AppPageContext.prototype, "core", {
	        get: function () {
	            return this._core;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AppPageContext.prototype, "user", {
	        get: function () {
	            return this._user;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AppPageContext.prototype, "urlQueryParameters", {
	        get: function () {
	            return this._urlQueryParameters;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return AppPageContext;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = AppPageContext;
	exports.appPageContextServiceKey = sp_core_library_1.ServiceKey.create('sp-client-preview:PageContext', AppPageContext);


/***/ },
/* 12 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_12__;

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var PageContextItem_1 = __webpack_require__(10);
	var GuidHelpers_1 = __webpack_require__(8);
	var ApplicationContext = (function (_super) {
	    __extends(ApplicationContext, _super);
	    function ApplicationContext(pageContext) {
	        var _this = _super.call(this, pageContext) || this;
	        _this._clientSideApplicationId = undefined;
	        _this._hostedByClassicPage = undefined;
	        return _this;
	    }
	    ApplicationContext.prototype.load = function (args) {
	        this.validateLoad();
	        GuidHelpers_1.default.requireValid(args.clientSideApplicationId);
	        this._clientSideApplicationId = args.clientSideApplicationId;
	        this._hostedByClassicPage = args.hostedByClassicPage;
	        this.state = PageContextItem_1.PageContextItemState.Ready;
	    };
	    Object.defineProperty(ApplicationContext.prototype, "clientSideApplicationId", {
	        get: function () {
	            return this._clientSideApplicationId;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ApplicationContext.prototype, "hostedByClassicPage", {
	        get: function () {
	            return this._hostedByClassicPage;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ApplicationContext.prototype.getOdataObject = function () {
	        return this._hostedByClassicPage === false ? this._odataObject : undefined;
	    };
	    ApplicationContext.prototype.updateOdataObject = function (value) {
	        if (this._hostedByClassicPage === false) {
	            this._odataObject = value;
	        }
	    };
	    return ApplicationContext;
	}(PageContextItem_1.default));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ApplicationContext;


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var PageContextItem_1 = __webpack_require__(10);
	var url_1 = __webpack_require__(15);
	var GuidHelpers_1 = __webpack_require__(8);
	var SPWeb = (function (_super) {
	    __extends(SPWeb, _super);
	    function SPWeb(pageContext) {
	        var _this = _super.call(this, pageContext) || this;
	        _this._id = undefined;
	        _this._serverRelativeUrl = undefined;
	        _this._title = undefined;
	        return _this;
	    }
	    SPWeb.prototype.load = function (args) {
	        this.validateLoad();
	        GuidHelpers_1.default.requireValid(args.id);
	        this._id = args.id;
	        url_1.requireServerRelativeUrl(args.serverRelativeUrl);
	        this._serverRelativeUrl = args.serverRelativeUrl;
	        this._title = args.title;
	        this.state = PageContextItem_1.PageContextItemState.Ready;
	    };
	    Object.defineProperty(SPWeb.prototype, "id", {
	        get: function () {
	            return this._id;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SPWeb.prototype, "serverRelativeUrl", {
	        get: function () {
	            return this._serverRelativeUrl;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SPWeb.prototype, "title", {
	        get: function () {
	            return this._title;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SPWeb.prototype, "parentSite", {
	        get: function () {
	            return this.getPageContext().site;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SPWeb.prototype.getOdataObject = function () {
	        return this._odataObject;
	    };
	    SPWeb.prototype.updateOdataObject = function (value) {
	        this._odataObject = value;
	    };
	    return SPWeb;
	}(PageContextItem_1.default));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SPWeb;


/***/ },
/* 15 */
/***/ function(module, exports) {

	"use strict";
	function isServerRelative(url) {
	    return url && url[0] === '/';
	}
	exports.isServerRelative = isServerRelative;
	function requireServerRelativeUrl(url) {
	    if (!isServerRelative(url)) {
	        throw Error('A server-relative URL is required');
	    }
	}
	exports.requireServerRelativeUrl = requireServerRelativeUrl;


/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var PageContextItem_1 = __webpack_require__(10);
	var GuidHelpers_1 = __webpack_require__(8);
	var url_1 = __webpack_require__(15);
	var SPSite = (function (_super) {
	    __extends(SPSite, _super);
	    function SPSite(pageContext) {
	        var _this = _super.call(this, pageContext) || this;
	        _this._id = undefined;
	        _this._serverRelativeUrl = undefined;
	        _this._title = undefined;
	        return _this;
	    }
	    SPSite.prototype.load = function (args) {
	        this.validateLoad();
	        GuidHelpers_1.default.requireValid(args.id);
	        this._id = args.id;
	        url_1.requireServerRelativeUrl(args.serverRelativeUrl);
	        this._serverRelativeUrl = args.serverRelativeUrl;
	        this._title = args.title;
	        this.state = PageContextItem_1.PageContextItemState.Ready;
	    };
	    Object.defineProperty(SPSite.prototype, "id", {
	        get: function () {
	            return this._id;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SPSite.prototype, "serverRelativeUrl", {
	        get: function () {
	            return this._serverRelativeUrl;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SPSite.prototype, "title", {
	        get: function () {
	            return this._title;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return SPSite;
	}(PageContextItem_1.default));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SPSite;


/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var PageContextItem_1 = __webpack_require__(10);
	var GuidHelpers_1 = __webpack_require__(8);
	var SPList = (function (_super) {
	    __extends(SPList, _super);
	    function SPList(pageContext) {
	        var _this = _super.call(this, pageContext) || this;
	        _this._id = undefined;
	        _this._title = undefined;
	        _this._description = undefined;
	        return _this;
	    }
	    SPList.prototype.load = function (args) {
	        this.validateLoad();
	        GuidHelpers_1.default.requireValid(args.id);
	        this._id = args.id;
	        this._title = args.title;
	        this._description = args.description;
	        this.state = PageContextItem_1.PageContextItemState.Ready;
	    };
	    Object.defineProperty(SPList.prototype, "id", {
	        get: function () {
	            return this._id;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SPList.prototype, "title", {
	        get: function () {
	            return this._title;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SPList.prototype, "description", {
	        get: function () {
	            return this._description;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SPList.prototype, "parentWeb", {
	        get: function () {
	            return this.getPageContext().web;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SPList.prototype.getOdataObject = function () {
	        return this._odataObject;
	    };
	    SPList.prototype.updateOdataObject = function (value) {
	        this._odataObject = value;
	    };
	    return SPList;
	}(PageContextItem_1.default));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SPList;


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var PageContextItem_1 = __webpack_require__(10);
	var SPListItem = (function (_super) {
	    __extends(SPListItem, _super);
	    function SPListItem(pageContext) {
	        var _this = _super.call(this, pageContext) || this;
	        _this._id = undefined;
	        _this._list = undefined;
	        return _this;
	    }
	    SPListItem.prototype.load = function (args) {
	        this.validateLoad();
	        this._id = args.id;
	        this.state = PageContextItem_1.PageContextItemState.Ready;
	    };
	    Object.defineProperty(SPListItem.prototype, "id", {
	        get: function () {
	            return this._id;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SPListItem.prototype, "parentList", {
	        get: function () {
	            return this.getPageContext().list;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SPListItem.prototype.getOdataObject = function () {
	        return this._odataObject;
	    };
	    SPListItem.prototype.updateOdataObject = function (value) {
	        this._odataObject = value;
	    };
	    return SPListItem;
	}(PageContextItem_1.default));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SPListItem;


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var PageContextItem_1 = __webpack_require__(10);
	var SPUser = (function (_super) {
	    __extends(SPUser, _super);
	    function SPUser(pageContext) {
	        var _this = _super.call(this, pageContext) || this;
	        _this._id = undefined;
	        return _this;
	    }
	    SPUser.prototype.load = function (args) {
	        this.validateLoad();
	        this._id = args.id;
	        this.state = PageContextItem_1.PageContextItemState.Ready;
	    };
	    Object.defineProperty(SPUser.prototype, "id", {
	        get: function () {
	            return this._id;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SPUser.prototype.getOdataObject = function () {
	        return this._odataObject;
	    };
	    SPUser.prototype.updateOdataObject = function (value) {
	        this._odataObject = value;
	    };
	    return SPUser;
	}(PageContextItem_1.default));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SPUser;


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var PageContextItem_1 = __webpack_require__(10);
	var SPNavigationNodeCollection = (function (_super) {
	    __extends(SPNavigationNodeCollection, _super);
	    function SPNavigationNodeCollection(pageContext) {
	        var _this = _super.call(this, pageContext) || this;
	        _this.state = PageContextItem_1.PageContextItemState.Ready;
	        return _this;
	    }
	    Object.defineProperty(SPNavigationNodeCollection.prototype, "items", {
	        get: function () {
	            return this._items;
	        },
	        set: function (value) {
	            this._items = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SPNavigationNodeCollection.prototype.getOdataObject = function () {
	        return this._odataObject;
	    };
	    SPNavigationNodeCollection.prototype.updateOdataObject = function (value) {
	        this._odataObject = value;
	    };
	    return SPNavigationNodeCollection;
	}(PageContextItem_1.default));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SPNavigationNodeCollection;


/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var sp_page_context_1 = __webpack_require__(22);
	var PageContextItem_1 = __webpack_require__(10);
	var PageContextCore = (function (_super) {
	    __extends(PageContextCore, _super);
	    function PageContextCore(pageContext) {
	        return _super.call(this, pageContext) || this;
	    }
	    PageContextCore.prototype.load = function (args) {
	        this.validateLoad();
	        this._menuData = args.MenuData;
	        this._currentCultureName = args.currentCultureName;
	        this._currentUICultureName = args.currentUICultureName;
	        this._initialCorrelationId = args.correlationId;
	        this._spoEnvironment = args.spoEnvironment;
	        this._farmLabel = args.farmLabel;
	        this._groupColor = args.groupColor;
	        this._hasManageWebPermission = args.hasManageWebPermission;
	        this._isWebWelcomePage = args.isWebWelcomePage;
	        this._listPermsMask = args.listPermsMask;
	        this._layoutsUrl = args.layoutsUrl;
	        this._siteAbsoluteUrl = args.siteAbsoluteUrl;
	        this._siteClientTag = args.siteClientTag;
	        this._siteServerRelativeUrl = args.siteServerRelativeUrl;
	        this._siteSubscriptionId = args.siteSubscriptionId;
	        this._siteId = args.siteId;
	        this._sitePagesEnabled = args.sitePagesEnabled;
	        this._systemUserKey = args.systemUserKey;
	        this._themedCssFolderUrl = args.themedCssFolderUrl;
	        this._userDisplayName = args.userDisplayName;
	        this._userLoginName = args.userLoginName;
	        this._webAbsoluteUrl = args.webAbsoluteUrl;
	        this._webId = args.webId;
	        this._webLogoUrl = args.webLogoUrl;
	        this._webServerRelativeUrl = args.webServerRelativeUrl;
	        this._webTitle = args.webTitle;
	        this._webTemplate = args.webTemplate;
	        this._webPermMasks = new sp_page_context_1.SPPermission(args.webPermMasks);
	        this.state = PageContextItem_1.PageContextItemState.Ready;
	    };
	    Object.defineProperty(PageContextCore.prototype, "menuData", {
	        get: function () {
	            return this._menuData;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "currentCultureName", {
	        get: function () {
	            return this._currentCultureName;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "currentUICultureName", {
	        get: function () {
	            return this._currentUICultureName;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "initialCorrelationId", {
	        get: function () {
	            return this._initialCorrelationId;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "spoEnvironment", {
	        get: function () {
	            return this._spoEnvironment;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "farmLabel", {
	        get: function () {
	            return this._farmLabel;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "groupColor", {
	        get: function () {
	            return this._groupColor;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "layoutsUrl", {
	        get: function () {
	            return this._layoutsUrl;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "hasManageWebPermission", {
	        get: function () {
	            return this._hasManageWebPermission;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "isWebWelcomePage", {
	        get: function () {
	            return this._isWebWelcomePage;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "listPermsMask", {
	        get: function () {
	            return this._listPermsMask;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "siteAbsoluteUrl", {
	        get: function () {
	            return this._siteAbsoluteUrl;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "siteClientTag", {
	        get: function () {
	            return this._siteClientTag;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "siteId", {
	        get: function () {
	            return this._siteId;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "sitePagesEnabled", {
	        get: function () {
	            return this._sitePagesEnabled;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "siteServerRelativeUrl", {
	        get: function () {
	            return this._siteServerRelativeUrl;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "siteSubscriptionId", {
	        get: function () {
	            return this._siteSubscriptionId;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "systemUserKey", {
	        get: function () {
	            return this._systemUserKey;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "themedCssFolderUrl", {
	        get: function () {
	            return this._themedCssFolderUrl;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "userDisplayName", {
	        get: function () {
	            return this._userDisplayName;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "userLoginName", {
	        get: function () {
	            return this._userLoginName;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "webAbsoluteUrl", {
	        get: function () {
	            return this._webAbsoluteUrl;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "webId", {
	        get: function () {
	            return this._webId;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "webLogoUrl", {
	        get: function () {
	            return this._webLogoUrl;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "webServerRelativeUrl", {
	        get: function () {
	            return this._webServerRelativeUrl;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "webTitle", {
	        get: function () {
	            return this._webTitle;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "webTemplate", {
	        get: function () {
	            return this._webTemplate;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    PageContextCore.prototype.getOdataObject = function () {
	        return this._odataObject;
	    };
	    PageContextCore.prototype.updateOdataObject = function (value) {
	        this._odataObject = value;
	    };
	    Object.defineProperty(PageContextCore.prototype, "userPermissionsForWeb", {
	        get: function () {
	            return this._webPermMasks;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return PageContextCore;
	}(PageContextItem_1.default));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = PageContextCore;


/***/ },
/* 22 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_22__;

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var React = __webpack_require__(24);
	var reactDOM = __webpack_require__(25);
	var sp_core_library_1 = __webpack_require__(12);
	var CanvasComponent_1 = __webpack_require__(26);
	var CreateEmptyZoneLayout_1 = __webpack_require__(144);
	var CanvasStore_1 = __webpack_require__(140);
	if (CanvasStore_1.default.isLayoutSupported) {
	    __webpack_require__(212);
	}
	else {
	    __webpack_require__(214);
	}
	var Canvas = (function () {
	    function Canvas(container, canvasOptions) {
	        this._render = this._render.bind(this);
	        this._container = container;
	        this._store = new CanvasStore_1.default(canvasOptions.serviceScope, this._render, canvasOptions.mode, canvasOptions.serializedCanvasContent, canvasOptions.handleCanvasChanged, canvasOptions.scrollThreshold, canvasOptions.handleRenderComplete, canvasOptions.shouldCenterAlign);
	    }
	    Canvas.prototype.render = function (serializedCanvas) {
	        this.dispose();
	        this._store.webPartManager.dispose();
	        window.addEventListener('blur', this._store.handleWindowBlur, true);
	        this._store.deserialize(serializedCanvas);
	        this._render();
	    };
	    Object.defineProperty(Canvas.prototype, "count", {
	        get: function () {
	            return this._store.controlsProps.length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Canvas.prototype, "previewImageUrl", {
	        get: function () {
	            return this._store.tryGeneratePreviewImageUrl();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Canvas.prototype, "displayMode", {
	        get: function () {
	            return this._store.displayMode;
	        },
	        set: function (newMode) {
	            this._store.displayMode = newMode;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Canvas.prototype.dispose = function () {
	        window.removeEventListener('blur', this._store.handleWindowBlur, true);
	        reactDOM.unmountComponentAtNode(this._container);
	    };
	    Canvas.prototype.openToolbox = function (row) {
	        var didToolboxOpen = false;
	        if (this._store.displayMode === sp_core_library_1.DisplayMode.Edit &&
	            0 <= row &&
	            row <= this._store.controlsProps.length) {
	            var hint = document.querySelectorAll('.CanvasToolboxHint')[row];
	            if (CanvasStore_1.default.isLayoutSupported) {
	                this._store.openToolbox(CreateEmptyZoneLayout_1.CreateEmptyZoneLayout(row), hint.offsetTop);
	            }
	            else {
	                this._store.openToolbox(row, hint.offsetTop);
	            }
	            didToolboxOpen = true;
	        }
	        return didToolboxOpen;
	    };
	    Canvas.prototype.serialize = function () {
	        return this._store.serialize();
	    };
	    Canvas.prototype._render = function () {
	        var props = {
	            store: this._store
	        };
	        var coreElement = React.createElement(CanvasComponent_1.default, props);
	        this._coreComponent = reactDOM.render(coreElement, this._container);
	    };
	    return Canvas;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Canvas;


/***/ },
/* 24 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_24__;

/***/ },
/* 25 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_25__;

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var React = __webpack_require__(24);
	var ReactDOM = __webpack_require__(25);
	var office_ui_fabric_react_1 = __webpack_require__(27);
	var sp_core_library_1 = __webpack_require__(12);
	var CanvasControlFactory_1 = __webpack_require__(28);
	var CanvasStore_1 = __webpack_require__(140);
	var ControlZone_1 = __webpack_require__(175);
	var CanvasA11y_1 = __webpack_require__(164);
	var CanvasToolboxHint_1 = __webpack_require__(181);
	var ConfirmationDialog_1 = __webpack_require__(186);
	var CanvasLayout_1 = __webpack_require__(146);
	var CreateEmptyZoneLayout_1 = __webpack_require__(144);
	var CanvasZone_1 = __webpack_require__(187);
	var Toolbar_1 = __webpack_require__(189);
	var Toolbox_1 = __webpack_require__(199);
	var CanvasStrings_resx_1 = __webpack_require__(148);
	var CanvasComponent = (function (_super) {
	    __extends(CanvasComponent, _super);
	    function CanvasComponent(props, context) {
	        return _super.call(this, props, context) || this;
	    }
	    CanvasComponent.prototype.getChildContext = function () {
	        return {
	            store: this.props.store
	        };
	    };
	    CanvasComponent.prototype.componentDidMount = function () {
	        var canvasElement = ReactDOM.findDOMNode(this);
	        this.props.store.canvasElement = canvasElement;
	        this.props.store.a11yManager = new CanvasA11y_1.CanvasA11yManager(canvasElement);
	        var canvasContainer = canvasElement;
	        var hasScrollbar = false;
	        do {
	            canvasContainer = canvasContainer.parentElement;
	            if (canvasContainer) {
	                var overflowY = window.getComputedStyle(canvasContainer)['overflow-y'];
	                hasScrollbar = (overflowY === 'scroll' || overflowY === 'auto');
	            }
	        } while (!hasScrollbar && canvasContainer && canvasContainer.tagName !== 'BODY');
	        this.props.store.scrollableParent = canvasContainer;
	    };
	    CanvasComponent.prototype.render = function () {
	        return CanvasStore_1.default.isLayoutSupported ? this._renderWithLayout() : this._renderWithoutLayout();
	    };
	    CanvasComponent.prototype._renderWithLayout = function () {
	        var store = this.props.store;
	        var displayMode = store.displayMode;
	        var toolboxProps = store.toolboxProps;
	        var deletedControlLayout = store.deletedControlLayout;
	        var canvasLayout = store.canvasLayout;
	        var selectedLayout = canvasLayout.fetchControlPositionById(store.selectedControlId);
	        var shouldCenterAlign = store.shouldCenterAlign;
	        var zoneComponents = [];
	        var zones = canvasLayout.zones;
	        var numZones = zones.length;
	        zones.forEach(function (curZone, curIdx) {
	            zoneComponents.push(React.createElement(CanvasZone_1.default, { fullWidth: curZone.sections[0] && curZone.sections[0].factor === 0, selectedPosition: selectedLayout, key: curZone.index, zone: curZone, shouldCenterAlign: shouldCenterAlign }));
	            var nextZoneIndex = (curIdx + 1 === numZones) ?
	                curZone.index + 1 :
	                zones[curIdx + 1].index;
	            var nextZoneLayout = CreateEmptyZoneLayout_1.CreateEmptyZoneLayout(nextZoneIndex);
	            zoneComponents.push(React.createElement(CanvasToolboxHint_1.default, { ariaLabel: CanvasStrings_resx_1.default.ToolboxHintTitle, isVisible: true, shouldFocus: deletedControlLayout.zoneIndex === nextZoneIndex, row: undefined, layout: nextZoneLayout, key: "hint." + nextZoneLayout.zoneIndex, shouldCenterAlign: shouldCenterAlign }));
	        });
	        store.deletedControlLayout = CanvasLayout_1.default.undefinedControlPosition;
	        var className = office_ui_fabric_react_1.css('Canvas', 'Canvas--withLayout', 'ms-Grid', {
	            'Canvas--edit': displayMode === sp_core_library_1.DisplayMode.Edit
	        });
	        var firstZoneIdx = zones.length > 0 ?
	            zones[0].index :
	            CanvasLayout_1.default.firstLayoutIndex;
	        var firstZoneLayout = CreateEmptyZoneLayout_1.CreateEmptyZoneLayout(firstZoneIdx);
	        var toolBoxHintHasFocus = deletedControlLayout.zoneIndex === firstZoneLayout.zoneIndex;
	        return (React.createElement("div", { className: 'CanvasComponent' },
	            displayMode === sp_core_library_1.DisplayMode.Edit ? React.createElement("div", { className: 'CanvasSectionBarBg' }) : undefined,
	            React.createElement("div", { className: className, role: displayMode === sp_core_library_1.DisplayMode.Edit ? 'application' : undefined },
	                React.createElement(CanvasToolboxHint_1.default, { ariaLabel: CanvasStrings_resx_1.default.ToolboxHintTitle, isVisible: true, shouldFocus: toolBoxHintHasFocus, row: undefined, layout: firstZoneLayout, shouldCenterAlign: shouldCenterAlign }),
	                zoneComponents,
	                React.createElement(Toolbox_1.default, __assign({}, toolboxProps)),
	                React.createElement(ConfirmationDialog_1.default, __assign({}, store.confirmationDialogProps)))));
	    };
	    CanvasComponent.prototype._renderWithoutLayout = function () {
	        var store = this.props.store;
	        var controlsProps = store.controlsProps;
	        var deletedRow = store.deletedRow;
	        var displayMode = store.displayMode;
	        var toolboxProps = store.toolboxProps;
	        var shouldCenterAlign = store.shouldCenterAlign;
	        var rows = [];
	        var row = 0;
	        if (controlsProps) {
	            for (var _i = 0, controlsProps_1 = controlsProps; _i < controlsProps_1.length; _i++) {
	                var control = controlsProps_1[_i];
	                var newControl = CanvasControlFactory_1.default.CreateCanvasControl(control, store);
	                if (newControl) {
	                    var isSelected = store.selectedControlId === control.id;
	                    if (isSelected && row) {
	                        rows.pop();
	                        rows.push(React.createElement(CanvasToolboxHint_1.default, { ariaLabel: CanvasStrings_resx_1.default.ToolboxHintTitle, isVisible: true, key: row, row: row, shouldCenterAlign: shouldCenterAlign }));
	                    }
	                    rows.push(React.createElement(ControlZone_1.default, { displayMode: displayMode, id: control.id, isSelected: isSelected, key: control.id, row: row },
	                        newControl,
	                        React.createElement(Toolbar_1.default, { controlType: control.controlType, displayMode: displayMode, id: control.id, row: row, onConfigureButtonClick: store.handleConfigureButtonClicked, onDeleteButtonClick: store.handleDeleteControlButtonClicked })));
	                    ++row;
	                    rows.push(React.createElement(CanvasToolboxHint_1.default, { ariaLabel: CanvasStrings_resx_1.default.ToolboxHintTitle, isVisible: toolboxProps.row === row, shouldFocus: deletedRow === row, key: row, row: row, shouldCenterAlign: shouldCenterAlign }));
	                }
	            }
	        }
	        store.deletedRow = undefined;
	        var className = office_ui_fabric_react_1.css('Canvas', {
	            'Canvas--edit': displayMode === sp_core_library_1.DisplayMode.Edit
	        });
	        return (React.createElement("div", { className: className, role: displayMode === sp_core_library_1.DisplayMode.Edit ? 'application' : undefined },
	            React.createElement(CanvasToolboxHint_1.default, { ariaLabel: CanvasStrings_resx_1.default.ToolboxHintTitle, shouldFocus: deletedRow === 0, isVisible: rows[0] && rows[0].props.isSelected || toolboxProps.row === 0, row: 0, shouldCenterAlign: shouldCenterAlign }),
	            rows,
	            React.createElement(Toolbox_1.default, __assign({}, toolboxProps)),
	            React.createElement(ConfirmationDialog_1.default, __assign({}, store.confirmationDialogProps))));
	    };
	    return CanvasComponent;
	}(React.Component));
	CanvasComponent.childContextTypes = {
	    store: React.PropTypes.object.isRequired
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = CanvasComponent;


/***/ },
/* 27 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_27__;

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var React = __webpack_require__(24);
	var CanvasControlType_1 = __webpack_require__(29);
	var SPRte_1 = __webpack_require__(30);
	var SPRteTouchDevice_1 = __webpack_require__(173);
	var WebPartZone_1 = __webpack_require__(174);
	var Utilities_1 = __webpack_require__(162);
	var CanvasControlFactory = (function () {
	    function CanvasControlFactory() {
	    }
	    CanvasControlFactory.CreateCanvasControl = function (props, store) {
	        props.onChange = store.notifyChanged;
	        props.ref = store.addReference;
	        var control;
	        switch (props.controlType) {
	            case CanvasControlType_1.default.RTE:
	                if (Utilities_1.default.isTouchEnabled()) {
	                    control = React.createElement(SPRteTouchDevice_1.default, props);
	                }
	                else {
	                    control = React.createElement(SPRte_1.default, props);
	                }
	                break;
	            case CanvasControlType_1.default.WebPartZone:
	                control = React.createElement(WebPartZone_1.default, props);
	                break;
	        }
	        return control;
	    };
	    return CanvasControlFactory;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = CanvasControlFactory;


/***/ },
/* 29 */
/***/ function(module, exports) {

	"use strict";
	var CanvasControlType;
	(function (CanvasControlType) {
	    CanvasControlType[CanvasControlType["WebPartZone"] = 3] = "WebPartZone";
	    CanvasControlType[CanvasControlType["RTE"] = 4] = "RTE";
	    CanvasControlType[CanvasControlType["TwoColumns"] = 5] = "TwoColumns";
	    CanvasControlType[CanvasControlType["ThreeColumns"] = 6] = "ThreeColumns";
	    CanvasControlType[CanvasControlType["OneThirdColumnRight"] = 7] = "OneThirdColumnRight";
	    CanvasControlType[CanvasControlType["OneThirdColumnLeft"] = 8] = "OneThirdColumnLeft";
	    CanvasControlType[CanvasControlType["FullWidth"] = 9] = "FullWidth";
	    CanvasControlType[CanvasControlType["OneColumn"] = 10] = "OneColumn";
	})(CanvasControlType || (CanvasControlType = {}));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = CanvasControlType;


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var React = __webpack_require__(24);
	var CKTextEditor_1 = __webpack_require__(31);
	var QuillEditor_1 = __webpack_require__(127);
	var sp_core_library_1 = __webpack_require__(12);
	var sp_telemetry_1 = __webpack_require__(7);
	var CanvasStore_1 = __webpack_require__(140);
	var CanvasControlType_1 = __webpack_require__(29);
	var sp_lodash_subset_1 = __webpack_require__(142);
	var BaseRte_1 = __webpack_require__(151);
	var SPRteQuillConfiguration_1 = __webpack_require__(171);
	var SPRteCKEditorConfiguration_1 = __webpack_require__(172);
	var office_ui_fabric_react_1 = __webpack_require__(27);
	var CKEditorFlights_1 = __webpack_require__(125);
	var SPRte = (function (_super) {
	    __extends(SPRte, _super);
	    function SPRte(props) {
	        var _this = _super.call(this, props, SPRte._IS_CKEDITOR_FLIGHTED ?
	            { editor: CKTextEditor_1.default, config: new SPRteCKEditorConfiguration_1.default, loader: CKTextEditor_1.default.moduleLoader } :
	            { editor: QuillEditor_1.default, config: new SPRteQuillConfiguration_1.default(), loader: QuillEditor_1.default.moduleLoader }) || this;
	        _this.TAG_NAME = 'Canvas.';
	        _this._restoreScrollTopOnNextFocus = false;
	        _this._isPasting = false;
	        _this._handleScroll = _this._async.debounce(_this._handleScroll, 100);
	        return _this;
	    }
	    SPRte.prototype._createNewEditor = function (innerHTML, startupFocus) {
	        return this._options.editor.createNewEditor(this._config, innerHTML, this._editorElement, this._handleSelectionChange, this._handleTextChange.bind(this), startupFocus, this._onImagePaste.bind(this), this._onPaste.bind(this), this._onContextualMenu.bind(this));
	    };
	    SPRte.prototype._onImagePaste = function (isImageValid, imageBlob, innerHTML) {
	        _super.prototype._onImagePaste.call(this, isImageValid, imageBlob, innerHTML);
	        if (isImageValid) {
	            this._createImageWebPartAndSplitRTE(innerHTML, imageBlob, this.props.position, this.props.id);
	        }
	    };
	    Object.defineProperty(SPRte, "_IS_CKEDITOR_FLIGHTED", {
	        get: function () {
	            return sp_core_library_1._SPFlight.isEnabled(CKEditorFlights_1.CKEDITOR_FLIGHT_ID);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SPRte.prototype.componentDidMount = function () {
	        var _this = this;
	        if (this.state.displayMode === sp_core_library_1.DisplayMode.Edit) {
	            if (!this._createNewEditorMonitor) {
	                this._createNewEditorMonitor = new sp_telemetry_1._QosMonitor(BaseRte_1.CREATE_EDITOR_MONITOR);
	            }
	            this._createNewEditor(this.props.innerHTML || '', true).then(function (editor) {
	                _this._afterEditorCreated(editor);
	                _this.context.store.webPartManager.setPropertyPaneState(undefined);
	                if (!_this.props.addedFromPersistedData) {
	                    _this.focus();
	                }
	                _this._createNewEditorMonitor.writeSuccess();
	            }, function (error) {
	                _this._createNewEditorMonitor.writeUnexpectedFailure(BaseRte_1.CREATE_EDITOR_MONITOR_FAILURE, error, { 'innerHTML': _this.props.innerHTML });
	            });
	        }
	    };
	    SPRte.prototype.componentDidUpdate = function (prevProps, prevState) {
	        _super.prototype.componentDidUpdate.call(this, prevProps, prevState);
	        if (this.state.displayMode === sp_core_library_1.DisplayMode.Edit && this.context.store && this.context.store.scrollableParent) {
	            this._formattingbar ?
	                this.context.store.scrollableParent.addEventListener('scroll', this._handleScroll) :
	                this.context.store.scrollableParent.removeEventListener('scroll', this._handleScroll);
	        }
	    };
	    SPRte.prototype._closeLinkDialog = function () {
	        this._restoreScrollTopOnNextFocus = true;
	        this.context.store.scrollableParent.scrollTop = this._currentScrollTop;
	        _super.prototype._closeLinkDialog.call(this);
	    };
	    SPRte.prototype._openLinkDialog = function (defaultAddress) {
	        if (defaultAddress === void 0) { defaultAddress = ''; }
	        _super.prototype._openLinkDialog.call(this, defaultAddress);
	        this._currentScrollTop = this.context.store.scrollableParent.scrollTop;
	    };
	    SPRte.prototype._restoreOnFocus = function () {
	        var restore = _super.prototype._restoreOnFocus.call(this);
	        if (this._restoreScrollTopOnNextFocus && this._currentScrollTop) {
	            this._restoreScrollTopOnNextFocus = false;
	            this.context.store.scrollableParent.scrollTop = this._currentScrollTop;
	            restore = true;
	        }
	        return restore;
	    };
	    SPRte.prototype.focus = function () {
	        this._currentScrollTop = this.context.store.scrollableParent.scrollTop;
	        _super.prototype.focus.call(this);
	        this.context.store.scrollableParent.scrollTop = this._currentScrollTop;
	    };
	    SPRte.prototype._handleTextChange = function () {
	        _super.prototype._handleTextChange.call(this);
	        if (this._isPasting) {
	            this._onAfterPaste();
	        }
	        if (this.state.displayMode === sp_core_library_1.DisplayMode.Edit && this.props.onChange) {
	            this.props.onChange();
	        }
	    };
	    SPRte.prototype._updateFormattingBar = function (isHidden) {
	        if (!this._editorElement) {
	            return;
	        }
	        var updatePosition = true;
	        var newState = {
	            formattingBarPosition: {
	                left: SPRte._TOOLBAR_DEFAULT_POSITION.left,
	                top: SPRte._TOOLBAR_DEFAULT_POSITION.top,
	                position: SPRte._TOOLBAR_DEFAULT_POSITION.position,
	                right: SPRte._TOOLBAR_DEFAULT_POSITION.right
	            },
	            isFormattingBarHidden: isHidden
	        };
	        if (isHidden && this._formattingbarElement) {
	            if (this._editableDiv && document.activeElement && document.activeElement === this._editableDiv) {
	                isHidden = false;
	            }
	            else {
	                var buttonNodes = this._formattingbarElement.querySelectorAll('.ToolbarButton');
	                for (var i = 0; i < buttonNodes.length; i++) {
	                    if (this._isSelectionChangeFromToolbar || document.activeElement.isEqualNode(buttonNodes[i])) {
	                        this._isSelectionChangeFromToolbar = false;
	                        newState.isFormattingBarHidden = false;
	                        newState.formattingBarPosition = this.state.formattingBarPosition;
	                        isHidden = false;
	                        updatePosition = false;
	                        break;
	                    }
	                }
	            }
	            if (isHidden && !document.activeElement.isContentEditable) {
	                window.getSelection().removeAllRanges();
	            }
	        }
	        if (!isHidden) {
	            newState.isFormattingBarHidden = false;
	            if (updatePosition) {
	                newState.formattingBarPosition = this._getFormattingBarPosition();
	            }
	        }
	        this.setState(newState);
	    };
	    SPRte.prototype._onBeforePaste = function () {
	        this._currentScrollTop = this.context.store.scrollableParent.scrollTop;
	        this._isPasting = true;
	    };
	    SPRte.prototype._handleScroll = function () {
	        if (this.state.formattingBarPosition) {
	            var isSticky = this.state.formattingBarPosition.position === 'fixed';
	            if (this._shouldFormattingBarStick() ? !isSticky : isSticky) {
	                var newState = {
	                    formattingBarPosition: this._getFormattingBarPosition(),
	                    isLinkDialogOpen: false
	                };
	                this.setState(newState);
	            }
	        }
	    };
	    SPRte.prototype._getFormattingBarPosition = function () {
	        var floatRight = this._isRtl || this._isRTEInLastColumn();
	        var left = floatRight ? undefined : SPRte._TOOLBAR_DEFAULT_POSITION.left;
	        var top = SPRte._TOOLBAR_DEFAULT_POSITION.top;
	        var right = floatRight ? 0 : SPRte._TOOLBAR_DEFAULT_POSITION.right;
	        var position = 'absolute';
	        var isFloating = false;
	        if (this._formattingbarElement) {
	            if (this._currentSelection && this._currentSelection.start !== this._currentSelection.end) {
	                var startBounds = this._editor.getBounds(this._currentSelection.start);
	                var endBounds = this._editor.getBounds(Math.max(0, this._currentSelection.end - 1));
	                if (startBounds.top === endBounds.top) {
	                    isFloating = true;
	                    endBounds.left = startBounds.left <= endBounds.left ? endBounds.left : this._editorElement.offsetWidth;
	                    var toolbarLeft = (startBounds.left + endBounds.left) / 2 - this._formattingbarWidth / 2;
	                    var controlZoneWidth = this._editorElement.offsetWidth + SPRte._CONTROLZONE_PADDING_HORIZONTAL * 2;
	                    left = toolbarLeft + this._formattingbarWidth <= controlZoneWidth ?
	                        Math.max(toolbarLeft, SPRte._TOOLBAR_DEFAULT_POSITION.left) :
	                        controlZoneWidth - this._formattingbarWidth;
	                    top = startBounds.top < SPRte._LINE_HEIGHT ?
	                        SPRte._TOOLBAR_DEFAULT_POSITION.top :
	                        startBounds.top + SPRte._TOOLBAR_DEFAULT_POSITION.top;
	                    position = 'absolute';
	                    if (left === 0) {
	                        if (this._isRtl) {
	                            right = undefined;
	                        }
	                        else if (this._isRTEInLastColumn()) {
	                            left = undefined;
	                            right = 0;
	                        }
	                    }
	                }
	            }
	            if (!isFloating && this._shouldFormattingBarStick()) {
	                if (floatRight) {
	                    right = right + window.innerWidth -
	                        this._editorElement.getBoundingClientRect().right - SPRte._CONTROLZONE_PADDING_HORIZONTAL;
	                }
	                else {
	                    left = SPRte._TOOLBAR_DEFAULT_POSITION.left +
	                        this._editorElement.getBoundingClientRect().left - SPRte._CONTROLZONE_PADDING_HORIZONTAL;
	                }
	                top = this.context.store.canvasElement.getBoundingClientRect().top +
	                    this.context.store.scrollableParent.scrollTop - this.context.store.scrollThreshold;
	                position = 'fixed';
	            }
	        }
	        return { left: left, top: top, position: position, right: right };
	    };
	    SPRte.prototype._onAfterPaste = function () {
	        var _this = this;
	        sp_telemetry_1._EngagementLogger.logEvent(this.TAG_NAME + 'CopyPaste');
	        this._isPasting = false;
	        this.context.store.scrollableParent.scrollTop = this._currentScrollTop;
	        window.setTimeout(function () {
	            _this.context.store.scrollableParent.scrollTop = _this._currentScrollTop;
	            var range = _this._editor.getSelection();
	            if (range) {
	                var viewportHeight = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
	                var cursorTop = _this._editor.getBounds(range.start).top;
	                var editorTop = _this._editableDiv.getBoundingClientRect().top;
	                if (editorTop + cursorTop > viewportHeight) {
	                    _this.context.store.scrollableParent.scrollTop =
	                        _this._currentScrollTop + editorTop + cursorTop - viewportHeight + SPRte._LINE_HEIGHT;
	                }
	            }
	        }, 10);
	    };
	    SPRte.prototype._shouldFormattingBarStick = function () {
	        if (this._editorElement && this.context.store.canvasElement) {
	            var editorRelativeTop = this._editorElement.getBoundingClientRect().top - this.context.store.canvasElement.getBoundingClientRect().top;
	            return this.context.store.scrollableParent.scrollTop >
	                this.context.store.scrollThreshold + SPRte._BASE_SCROLL_THRESHOLD +
	                    editorRelativeTop + SPRte._TOOLBAR_DEFAULT_POSITION.top;
	        }
	    };
	    SPRte.prototype._isRTEInLastColumn = function () {
	        return CanvasStore_1.default.isLayoutSupported && this.props.position && this.props.position.sectionIndex === 3;
	    };
	    SPRte.prototype._createImageWebPartAndSplitRTE = function (innerHTML, imageSource, position, id) {
	        var itemPropsRTE = {
	            controlType: CanvasControlType_1.default.RTE,
	            displayMode: this.state.displayMode,
	            id: sp_core_library_1.Guid.newGuid().toString(),
	            innerHTML: innerHTML
	        };
	        var imageWebPartManifestId = 'd1d91016-032f-456d-98a4-721247c305e8';
	        var itemPropsImageWebPart = this.context.store.getToolBoxItem(imageWebPartManifestId);
	        if (itemPropsImageWebPart) {
	            itemPropsImageWebPart.webPartData.properties.imageBlob = imageSource;
	            itemPropsImageWebPart.webPartData.id = sp_core_library_1.Guid.newGuid().toString();
	            if (CanvasStore_1.default.isLayoutSupported) {
	                this._addRTEAndImageWebPartWithLayout(position, itemPropsRTE, itemPropsImageWebPart);
	            }
	            else {
	                this._addRTEAndImageWebPartWithoutLayout(id, itemPropsRTE, itemPropsImageWebPart);
	            }
	        }
	    };
	    SPRte.prototype._addRTEAndImageWebPartWithLayout = function (position, itemPropsRTE, itemPropsImageWebPart) {
	        var controls = this.context.store.canvasLayout.fetchAllControls();
	        var currentIndex = sp_lodash_subset_1.findIndex(controls, function (control) {
	            return position === control.position;
	        });
	        var nextIndex = currentIndex + 1;
	        var nextControlPosition;
	        if (nextIndex < controls.length - 1) {
	            nextControlPosition = sp_lodash_subset_1.clone(controls[nextIndex].position);
	            this.context.store.addControlToCanvas(sp_lodash_subset_1.clone(nextControlPosition), itemPropsImageWebPart, true);
	            this.context.store.addControlToCanvas(sp_lodash_subset_1.clone(nextControlPosition), itemPropsRTE, true);
	        }
	        else {
	            nextControlPosition = sp_lodash_subset_1.clone(position);
	            nextControlPosition.controlIndex = position.controlIndex + 1;
	            this.context.store.addControlToCanvas(sp_lodash_subset_1.clone(nextControlPosition), itemPropsRTE, true);
	            this.context.store.addControlToCanvas(sp_lodash_subset_1.clone(nextControlPosition), itemPropsImageWebPart, true);
	        }
	    };
	    SPRte.prototype._addRTEAndImageWebPartWithoutLayout = function (id, itemPropsRTE, itemPropsImageWebPart) {
	        var controls = this.context.store.controlsProps;
	        var currentIndex = sp_lodash_subset_1.findIndex(controls, function (control) {
	            return id === control.id;
	        });
	        this.context.store.addControlToCanvas(currentIndex + 1, itemPropsImageWebPart, true);
	        this.context.store.addControlToCanvas(currentIndex + 2, itemPropsImageWebPart, true);
	    };
	    return SPRte;
	}(BaseRte_1.BaseRte));
	SPRte.contextTypes = {
	    store: React.PropTypes.object.isRequired
	};
	SPRte._TOOLBAR_DEFAULT_POSITION = {
	    left: 0,
	    top: -36,
	    position: 'absolute',
	    right: undefined
	};
	SPRte._BASE_SCROLL_THRESHOLD = -10;
	SPRte._CONTROLZONE_PADDING_HORIZONTAL = 8;
	SPRte._LINE_HEIGHT = 23;
	__decorate([
	    office_ui_fabric_react_1.autobind
	], SPRte.prototype, "_onBeforePaste", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], SPRte.prototype, "_handleScroll", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], SPRte.prototype, "_onAfterPaste", null);
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SPRte;


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var office_ui_fabric_react_1 = __webpack_require__(27);
	var sp_telemetry_1 = __webpack_require__(7);
	var sp_core_library_1 = __webpack_require__(12);
	var CKLoader_1 = __webpack_require__(32);
	__webpack_require__(120);
	var CKEditorFlights_1 = __webpack_require__(125);
	var ImageUtilities_1 = __webpack_require__(126);
	var office_ui_fabric_react_2 = __webpack_require__(27);
	var CKTextEditor = (function () {
	    function CKTextEditor(config, currentHTML, editorElement, selectionChangeCallback, textChangeCallback, startUpFocus, onReadyCallback, onImagePasteCallBack, onPasteCallback, onContextMenuCallBack) {
	        this._config = config;
	        this._editorElement = editorElement;
	        this._handleSelectionChange = selectionChangeCallback;
	        this._handleTextChange = textChangeCallback;
	        this._onReadyCallback = onReadyCallback;
	        this._startupFocus = startUpFocus;
	        this._onImagePasteCallBack = onImagePasteCallBack;
	        this._onPasteCallback = onPasteCallback;
	        this._onContextMenuCallBack = onContextMenuCallBack;
	        this._initialize(currentHTML);
	        this._blockStyles =
	            this._config.supportedFormatsArray.filter(function (format) { return format.isBlockStyle; });
	        this._async = new office_ui_fabric_react_2.Async(this);
	    }
	    CKTextEditor.preloadEditor = function (config) {
	        try {
	            CKTextEditor.moduleLoader.loadModule(config.editorSource);
	        }
	        catch (error) {
	            sp_telemetry_1._TraceLogger.logError(CKTextEditor.logSource, error);
	        }
	    };
	    CKTextEditor.createNewEditor = function (config, currentHTML, editorElement, selectionChangeCallback, textChangeCallback, startupFocus, onImagePasteCallBack, onPasteCallback, onContextMenuCallBack) {
	        return new Promise(function (resolve) {
	            CKTextEditor.moduleLoader.loadModule(config.editorSource).then(function () {
	                var editor = new CKTextEditor(config, currentHTML, editorElement, selectionChangeCallback, textChangeCallback, startupFocus, function () { resolve(editor); }, onImagePasteCallBack, onPasteCallback, onContextMenuCallBack);
	            }).catch(function (error) {
	                sp_telemetry_1._TraceLogger.logError(CKTextEditor.logSource, error);
	            });
	        });
	    };
	    CKTextEditor._getSelectedLink = function (editor) {
	        var selection = editor.getSelection();
	        var selectedElement = selection.getSelectedElement();
	        if (!selectedElement || !selectedElement.is('a')) {
	            var ranges = selection.getRanges();
	            if (ranges && ranges.length) {
	                ranges[0].shrink(CKEDITOR.SHRINK_TEXT);
	                selectedElement = editor.elementPath(ranges[0].getCommonAncestor()).contains('a', true);
	            }
	        }
	        return selectedElement;
	    };
	    Object.defineProperty(CKTextEditor, "_IS_CKEDITOR_TABLEPASTE_FLIGHTED", {
	        get: function () {
	            return sp_core_library_1._SPFlight.isEnabled(CKEditorFlights_1.CKEDITOR_TABLEPASTE_FLIGHT_ID);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CKTextEditor, "_IS_CKEDITOR_IMAGEPASTE_FLIGHTED", {
	        get: function () {
	            return sp_core_library_1._SPFlight.isEnabled(CKEditorFlights_1.CKEDITOR_IMAGEPASTE_FLIGHT_ID);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CKTextEditor.prototype._initialize = function (currentHTML) {
	        this._editorElement.contentEditable = 'true';
	        var config = {
	            allowedContent: 'strong b em i u h2 h3 h4 blockquote ul ol li a[href, target];\
	        p h2 h3 h4 li(ql-align-*,ql-indent-*,quote-true); *{text-align}',
	            on: {
	                change: this._handleTextChange,
	                selectionChange: this._handleSelectionChangeConvert
	            },
	            removePlugins: 'toolbar,contextmenu,menubutton,scayt,liststyle,table,tabletools,magicline,link',
	            extraPlugins: 'justify',
	            removeButtons: '',
	            stylesSet: false,
	            toolbar: [],
	            startupFocus: this._startupFocus
	        };
	        if (CKTextEditor._IS_CKEDITOR_TABLEPASTE_FLIGHTED) {
	            var allowedStyles = 'width,border,line-height,padding,margin-bottom,margin-top;\
	          ,margin-left,margin-right,font-size,border-bottom,border-left;\
	          border-top,border-right,text-align';
	            config.extraAllowedContent = {
	                'tbody thead tfoot tr th td caption col colgroup footer': true,
	                'table': {
	                    attributes: 'width,border,cellpadding,cellspacing,align',
	                    styles: '*'
	                },
	                'tr': {
	                    attributes: 'height,rowspan,colspan,align',
	                    styles: allowedStyles
	                },
	                'td': {
	                    attributes: 'width,colspan,rowspan,align',
	                    styles: allowedStyles
	                },
	                'th': {
	                    attributes: 'align',
	                    styles: allowedStyles
	                }
	            };
	            config.removePlugins = 'toolbar,menubutton,scayt,liststyle,magicline,link';
	            config.keystrokes = [
	                [CKEDITOR.CTRL + CKEDITOR.SHIFT + 68, 'rowDelete'],
	                [CKEDITOR.CTRL + CKEDITOR.SHIFT + 65, 'rowInsertBefore'],
	                [CKEDITOR.CTRL + CKEDITOR.SHIFT + 90, 'rowInsertAfter'] 
	            ];
	        }
	        config.disableNativeSpellChecker = false;
	        this._editor = CKEDITOR.inline(this._editorElement, config);
	        this._editor.setData(currentHTML);
	        this._addCustomToolbarCommands();
	    };
	    CKTextEditor.prototype._addCustomToolbarCommands = function () {
	        this._editor.addCommand('unlink', {
	            exec: function (editor) {
	                var linkStyle = new CKEDITOR.style({
	                    element: 'a',
	                    type: CKEDITOR.STYLE_INLINE,
	                    alwaysRemoveElement: 1
	                });
	                editor.removeStyle(linkStyle);
	                return true;
	            }
	        });
	        this._editor.addCommand('link', {
	            contextSensitive: true,
	            exec: function (editor, data) {
	                if (!data) {
	                    editor.execCommand('unlink');
	                }
	                else {
	                    var elem = CKTextEditor._getSelectedLink(editor);
	                    if (elem) {
	                        elem.setAttribute('href', data);
	                        elem.setAttribute('target', '_blank');
	                    }
	                    else {
	                        var linkStyle = new CKEDITOR.style({
	                            name: 'link',
	                            element: 'a',
	                            type: CKEDITOR.STYLE_INLINE,
	                            attributes: { 'href': data, 'target': '_blank' }
	                        });
	                        editor.applyStyle(linkStyle);
	                    }
	                }
	                return true;
	            },
	            refresh: function (editor, path) {
	                var element = path.lastElement && path.lastElement.getAscendant('a', true);
	                if (element && element.getName() === 'a' && element.getAttribute('href') && element.getChildCount()) {
	                    this.setState(CKEDITOR.TRISTATE_ON);
	                }
	                else {
	                    this.setState(CKEDITOR.TRISTATE_OFF);
	                }
	            }
	        });
	        this._editor.addCommand('heading2', this._getHeadingCommandDefinition('h2'));
	        this._editor.addCommand('heading3', this._getHeadingCommandDefinition('h3'));
	        this._editor.addCommand('heading4', this._getHeadingCommandDefinition('h4'));
	        this._editor.on('blur', this._handleSelectionChangeConvert);
	        this._editor.on('loaded', this._handlePluginsLoaded);
	        this._editor.on('instanceReady', this._handleInstanceReady);
	        this._editor.on('paste', this._handlePaste);
	        this._editor.on('beforePaste', this._onBeforePaste);
	        this._editor.on('afterPaste', this._handleAfterPaste);
	        if (CKTextEditor._IS_CKEDITOR_TABLEPASTE_FLIGHTED) {
	            var self_1 = this;
	            this._editor.on('contentDom', function () {
	                this.editable().attachListener(this.editable(), 'contextmenu', function (evt) {
	                    var target = evt.data.getTarget() && evt.data.getTarget().$;
	                    if (target) {
	                        var tagName = target.tagName;
	                        var parentTagName = target.parentElement && target.parentElement.tagName;
	                        if (tagName === 'TD' || parentTagName === 'TD') {
	                            evt.stop();
	                            evt.data.preventDefault();
	                            self_1._onContextMenuCallBack(true, target);
	                        }
	                    }
	                }, undefined, undefined, 0);
	            });
	        }
	    };
	    CKTextEditor.prototype.clearFormatting = function (start, end) {
	        this.format(start, end, { removeFormat: true });
	        var sel = this._editor.getSelection();
	        if (sel) {
	            var ckRange = sel.getRanges();
	            var range = { start: 0, end: 0 };
	            if (ckRange && ckRange.length > 0) {
	                range.start = ckRange[0].startOffset;
	                range.end = ckRange[0].endOffset;
	                var formatsToClear = {};
	                for (var _i = 0, _a = this._blockStyles; _i < _a.length; _i++) {
	                    var format = _a[_i];
	                    formatsToClear[format.editorKey] = false;
	                }
	                this.format(start, end, formatsToClear, true);
	            }
	        }
	    };
	    CKTextEditor.prototype.destroy = function () {
	        this._editorElement.removeEventListener('keyup', this._fakeSelectionChange);
	        this._editorElement.removeEventListener('mouseup', this._fakeSelectionChange);
	        var data = this._editor.getData();
	        this._editor.destroy();
	        return data;
	    };
	    CKTextEditor.prototype.focus = function () {
	        this._editor.focus();
	    };
	    CKTextEditor.prototype.format = function (start, end, formats, applyAllFormatsToLine) {
	        for (var formatKey in formats) {
	            var command = this._editor.getCommand(formatKey);
	            if (command) {
	                if (formats[formatKey] !== (command.state === CKEDITOR.TRISTATE_ON)) {
	                    command.exec(formats[formatKey]);
	                }
	            }
	        }
	    };
	    CKTextEditor.prototype.formatTable = function (format, target) {
	        var command = this._editor.getCommand(format);
	        var sel = this._editor.getSelection();
	        var temp = CKEDITOR.dom.element.get(target);
	        if (sel) {
	            sel.selectElement(temp);
	            this._editor.selectionChange(true);
	            if (!(sel.getStartElement() && sel.getStartElement().getAscendant('table'))) {
	                return;
	            }
	        }
	        if (command) {
	            command.enable();
	            command.exec(format);
	        }
	    };
	    CKTextEditor.prototype.getBounds = function (position) {
	        var left = 0, top = 0;
	        var sel = this._editor.getSelection();
	        if (sel) {
	            var ranges = sel.getRanges();
	            if (ranges && ranges.length) {
	                var node = ranges[0].startContainer.$;
	                var docRange = document.createRange();
	                docRange.selectNodeContents(node);
	                var selectionRects = docRange.getClientRects();
	                if (selectionRects && selectionRects.length) {
	                    var editorRect = this._editor.element.$.getBoundingClientRect();
	                    left = selectionRects[0].left - editorRect.left;
	                    top = selectionRects[0].top - editorRect.top;
	                }
	            }
	        }
	        return { left: left, top: top };
	    };
	    CKTextEditor.prototype.getFormatValue = function (start, end, format) {
	        if (format.key === 'link') {
	            var selectedLink = CKTextEditor._getSelectedLink(this._editor);
	            return selectedLink ? selectedLink.getAttribute('href') : false;
	        }
	        return false;
	    };
	    CKTextEditor.prototype.getSelection = function () {
	        var sel = this._editor.getSelection();
	        if (sel) {
	            var ranges = sel ? sel.getRanges() : undefined;
	            if (ranges && ranges.length) {
	                if (this._editor.element.contains(ranges[0].getCommonAncestor())) {
	                    this._lastSelectedRanges = ranges;
	                }
	                return {
	                    start: ranges[0].startOffset,
	                    end: ranges[0].endOffset
	                };
	            }
	        }
	        return undefined;
	    };
	    CKTextEditor.prototype.getText = function (range) {
	        return this._editor.getData();
	    };
	    CKTextEditor.prototype.getHTML = function () {
	        return this._editor.getData();
	    };
	    CKTextEditor.prototype.getEditorType = function () {
	        return 'CKEditor';
	    };
	    CKTextEditor.prototype.isFormatAppliedToRange = function (start, end, format) {
	        var command = this._editor.getCommand(format.editorKey);
	        return command && (command.state === CKEDITOR.TRISTATE_ON);
	    };
	    CKTextEditor.prototype.onReady = function (callback) {
	        this._onReadyCallback = callback;
	    };
	    CKTextEditor.prototype.setSelection = function (range) {
	        this.focus();
	        var sel = this._editor.getSelection();
	        if (sel) {
	            if (this._lastSelectedRanges) {
	                sel.selectRanges(this._lastSelectedRanges);
	            }
	            else {
	                var ckRange = sel.getRanges();
	                if (ckRange && ckRange.length > 0 && range.start !== -1) {
	                    ckRange[0].startOffset = range.start;
	                    ckRange[0].endOffset = range.end;
	                    try {
	                        sel.selectRanges(ckRange);
	                    }
	                    catch (error) {
	                        sp_telemetry_1._TraceLogger.logError(CKTextEditor.logSource, error);
	                    }
	                }
	            }
	        }
	    };
	    CKTextEditor.prototype._handleSelectionChangeConvert = function (evt) {
	        var sel = this._editor.getSelection();
	        var newRange = undefined;
	        var forceUpdate = false;
	        if (evt) {
	            switch (evt.name) {
	                case 'selectionChange':
	                    sel = evt.data.selection;
	                    break;
	                case 'blur':
	                    sel = undefined;
	                    break;
	            }
	            var ranges = sel ? sel.getRanges() : undefined;
	            newRange = ranges && ranges.length ? {
	                start: ranges[0].startOffset,
	                end: ranges[0].endOffset
	            } : undefined;
	            forceUpdate = ranges && ranges.length &&
	                this._lastSelectedRanges && this._lastSelectedRanges.length &&
	                ranges[0].startContainer !== this._lastSelectedRanges[0].startContainer;
	        }
	        this._handleSelectionChange(newRange, forceUpdate);
	    };
	    CKTextEditor.prototype._isHeadingActive = function (tagName, path) {
	        path = path || this._editor.elementPath();
	        var element = path.lastElement && path.lastElement.getAscendant(tagName, true);
	        return (element && element.getName() === tagName);
	    };
	    CKTextEditor.prototype._getHeadingCommandDefinition = function (tagName) {
	        var isHeadingActive = this._isHeadingActive;
	        return {
	            contextSensitive: true,
	            exec: function (editor) {
	                var styleDef;
	                switch (tagName) {
	                    case 'h2':
	                        styleDef = editor.config.format_h2;
	                        break;
	                    case 'h3':
	                        styleDef = editor.config.format_h3;
	                        break;
	                    case 'h4':
	                        styleDef = editor.config.format_h4;
	                        break;
	                }
	                if (!styleDef) {
	                    return false;
	                }
	                var style = new CKEDITOR.style(styleDef);
	                if (isHeadingActive(tagName)) {
	                    editor.removeStyle(style);
	                }
	                else {
	                    editor.applyStyle(style);
	                }
	                return true;
	            },
	            refresh: function (editor, path) {
	                this.setState(isHeadingActive(tagName, path) ? CKEDITOR.TRISTATE_ON : CKEDITOR.TRISTATE_OFF);
	            }
	        };
	    };
	    CKTextEditor.prototype._fakeSelectionChange = function () {
	        this._handleSelectionChangeConvert();
	    };
	    CKTextEditor.prototype._handlePluginsLoaded = function (evt) {
	        var _loop_1 = function (command) {
	            if (this_1._config.supportedFormatsArray.filter(function (format) { return format.editorKey === command; }).length) {
	                this_1._editor.commands[command].on('state', this_1._handleSelectionChangeConvert);
	            }
	        };
	        var this_1 = this;
	        for (var command in this._editor.commands) {
	            _loop_1(command);
	        }
	        this._editorElement.addEventListener('keyup', this._fakeSelectionChange);
	        this._editorElement.addEventListener('mouseup', this._fakeSelectionChange);
	    };
	    CKTextEditor.prototype._handleInstanceReady = function () {
	        this._onReadyCallback();
	    };
	    CKTextEditor.prototype._handleAfterPaste = function () {
	        var _this = this;
	        this._async.setTimeout(function () {
	            if (_this._onPasteCallback && !_this._isAfterPasteCalled) {
	                _this._onPasteCallback(false);
	                _this._isAfterPasteCalled = true;
	            }
	        }, CKTextEditor._PASTETIMEOUT);
	    };
	    CKTextEditor.prototype._handlePaste = function (evt) {
	        var pastedData = evt.data && evt.data.dataValue;
	        if (pastedData) {
	            var tables = pastedData.match(CKTextEditor._TABLE_REGEX);
	            if (tables && tables.length > 0) {
	                sp_telemetry_1._EngagementLogger.logEvent('Table.Paste');
	                if (CKTextEditor._IS_CKEDITOR_TABLEPASTE_FLIGHTED) {
	                    var extraParagraph = '<p></p>';
	                    if (this._editor.getData() === '' && tables.length === 1) {
	                        evt.data.dataValue = extraParagraph + pastedData;
	                    }
	                    evt.data.dataValue += extraParagraph;
	                    if (CKTextEditor._IS_CKEDITOR_IMAGEPASTE_FLIGHTED) {
	                        this._onImagePasteInsideTable(pastedData);
	                    }
	                }
	            }
	        }
	        if (CKTextEditor._IS_CKEDITOR_IMAGEPASTE_FLIGHTED) {
	            if (pastedData) {
	                var images = pastedData.match(CKTextEditor._IMAGE_REGEX_WITH_SRC);
	                if (images && images.length > 0 && CKTextEditor._IS_CKEDITOR_IMAGEPASTE_FLIGHTED) {
	                    this._onImagePasteInDataValue(evt, images, pastedData);
	                }
	            }
	            else if (evt.data.dataTransfer) {
	                for (var i = 0; i < evt.data.dataTransfer.getFilesCount(); i++) {
	                    sp_telemetry_1._EngagementLogger.logEvent(CKTextEditor._IMAGE_PASTE);
	                    this._onImagePasteInChrome(evt.data.dataTransfer.getFile(i));
	                }
	            }
	        }
	        this._handleAfterPaste();
	    };
	    CKTextEditor.prototype._onBeforePaste = function () {
	        var _this = this;
	        this._async.setTimeout(function () {
	            if (_this._onPasteCallback) {
	                _this._onPasteCallback(true);
	                _this._isAfterPasteCalled = false;
	            }
	        }, CKTextEditor._PASTETIMEOUT);
	    };
	    CKTextEditor.prototype._onImagePasteInDataValue = function (evt, images, pastedData) {
	        var pastedRTEData = this._removeImagesFromPasteData(pastedData);
	        if (pastedRTEData.length === 0) {
	            var orignalRTEData = this._splitRTEContentAtSelection();
	            if (orignalRTEData) {
	                var isImageFileValid = false;
	                for (var _i = 0, images_1 = images; _i < images_1.length; _i++) {
	                    var img = images_1[_i];
	                    var src = img.match(CKTextEditor._IMAGE_REGEX_SRC)[1];
	                    if (src.length > 0 && src.indexOf('file://') === -1) {
	                        evt.cancel();
	                        evt.stop();
	                        sp_telemetry_1._EngagementLogger.logEvent(CKTextEditor._IMAGE_PASTE);
	                        var rteData = '';
	                        if (orignalRTEData.postSelectionData) {
	                            rteData = orignalRTEData.postSelectionData;
	                        }
	                        this._onImagePasteCallBack(true, this._handleBase64Image(src), rteData);
	                    }
	                    else {
	                        sp_telemetry_1._EngagementLogger.logEvent('InvalidImageFile.Paste');
	                        this._onImagePasteCallBack(false);
	                        isImageFileValid = true;
	                    }
	                }
	                if (!isImageFileValid && orignalRTEData.preSelectionData) {
	                    this._editor.setData(orignalRTEData.preSelectionData);
	                }
	            }
	        }
	        else {
	            sp_telemetry_1._EngagementLogger.logEvent('ImageWrappedWithText.Paste');
	            this._onImagePasteCallBack(false);
	        }
	    };
	    CKTextEditor.prototype._handleBase64Image = function (src) {
	        var contentType = ImageUtilities_1.Base64MimeType(src);
	        var b64Data = src.split(',').pop();
	        return ImageUtilities_1.Base64toBlob(b64Data, contentType);
	    };
	    CKTextEditor.prototype._onImagePasteInsideTable = function (pastedData) {
	        if (this._isImagePastedInsideTable(pastedData)) {
	            sp_telemetry_1._EngagementLogger.logEvent('ImageInsideTable.Paste');
	            this._onImagePasteCallBack(false);
	        }
	    };
	    CKTextEditor.prototype._isImagePastedInsideTable = function (data) {
	        var tables = data.match(CKTextEditor._TABLE_REGEX);
	        if (tables) {
	            for (var _i = 0, tables_1 = tables; _i < tables_1.length; _i++) {
	                var table = tables_1[_i];
	                if (table.match(CKTextEditor._IMAGE_REGEX)) {
	                    return true;
	                }
	            }
	            return false;
	        }
	    };
	    CKTextEditor.prototype._removeImagesFromPasteData = function (pastedData) {
	        var images = pastedData.match(CKTextEditor._IMAGE_REGEX);
	        if (!images) {
	            return [];
	        }
	        var data = [];
	        var temp = [];
	        for (var _i = 0, images_2 = images; _i < images_2.length; _i++) {
	            var img = images_2[_i];
	            temp = pastedData.split(img);
	            if (temp.length > 1) {
	                data.push(temp[0]);
	                pastedData = temp[1];
	            }
	        }
	        if (temp[1]) {
	            data.push(temp[1]);
	        }
	        return data;
	    };
	    CKTextEditor.prototype._splitRTEContentAtSelection = function () {
	        var innerHTML = this._editor.getData();
	        if (this._validHTML(innerHTML) && this._isCurrentSelectionTagValid()) {
	            var data = [];
	            var tempId = sp_core_library_1.Guid.newGuid().toString();
	            var tempElement = CKEDITOR.dom.element.createFromHtml('<div>' + tempId + '</div>');
	            var tempHTML = tempElement.$.outerHTML;
	            this._editor.insertElement(tempElement);
	            innerHTML = this._editor.getData();
	            data = innerHTML.split(tempHTML);
	            var editorData = {
	                preSelectionData: data[0],
	                postSelectionData: data[1]
	            };
	            return editorData;
	        }
	        else {
	            return undefined;
	        }
	    };
	    CKTextEditor.prototype._isCurrentSelectionTagValid = function () {
	        var tagName = this._editor.getSelection().getStartElement().$ &&
	            this._editor.getSelection().getStartElement().$.tagName;
	        if (tagName === 'A') {
	            return false;
	        }
	        tagName = this._editor.getSelection().getStartElement().$.parentElement &&
	            this._editor.getSelection().getStartElement().$.parentElement.tagName;
	        return tagName !== 'TD' && tagName !== 'LI';
	    };
	    CKTextEditor.prototype._validHTML = function (html) {
	        html = html.replace(/<[^>]*\/\s?>/g, ''); 
	        html = html.replace(/<(br|hr|img).*?>/g, ''); 
	        var openingTags = html.match(/<[^\/].*?>/g) || []; 
	        var closingTags = html.match(/<\/.+?>/g) || []; 
	        return openingTags.length === closingTags.length ? true : false;
	    };
	    CKTextEditor.prototype._onImagePasteInChrome = function (src) {
	        var data = this._splitRTEContentAtSelection();
	        if (data) {
	            this._editor.setData(data.preSelectionData);
	            this._onImagePasteCallBack(true, src, data.postSelectionData);
	        }
	    };
	    return CKTextEditor;
	}());
	CKTextEditor.moduleLoader = new CKLoader_1.default();
	CKTextEditor.logSource = sp_telemetry_1._LogSource.create('SPRteCKTextEditor');
	CKTextEditor._IMAGE_REGEX = new RegExp('<img.+?\/>', 'gi');
	CKTextEditor._TABLE_REGEX = new RegExp('<table([\\w\\W]+?)\/table>', 'gi');
	CKTextEditor._IMAGE_REGEX_WITH_SRC = new RegExp('<img.*?src="(.*?)"', 'gi');
	CKTextEditor._IMAGE_REGEX_SRC = new RegExp('<img.*?src="(.*?)"', 'i');
	CKTextEditor._IMAGE_PASTE = 'Image.Paste';
	CKTextEditor._PASTETIMEOUT = 5;
	__decorate([
	    office_ui_fabric_react_1.autobind
	], CKTextEditor.prototype, "_initialize", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], CKTextEditor.prototype, "_handleSelectionChangeConvert", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], CKTextEditor.prototype, "_isHeadingActive", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], CKTextEditor.prototype, "_getHeadingCommandDefinition", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], CKTextEditor.prototype, "_fakeSelectionChange", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], CKTextEditor.prototype, "_handlePluginsLoaded", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], CKTextEditor.prototype, "_handleInstanceReady", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], CKTextEditor.prototype, "_handleAfterPaste", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], CKTextEditor.prototype, "_handlePaste", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], CKTextEditor.prototype, "_onBeforePaste", null);
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = CKTextEditor;


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var sp_telemetry_1 = __webpack_require__(7);
	var odsp_utilities_bundle_1 = __webpack_require__(33);
	var RESOURCES_PATH = __webpack_require__.p;
	var CKEDITOR_PATH_KEY = 'CKEDITOR_BASEPATH';
	var CKLoader = (function () {
	    function CKLoader() {
	    }
	    CKLoader.prototype.loadModule = function (editorSrc) {
	        if (!CKLoader._editorPromise) {
	            window[CKEDITOR_PATH_KEY] = editorSrc || odsp_utilities_bundle_1.Uri.concatenate(RESOURCES_PATH, '/ckeditor/');
	            CKLoader._editorPromise = new Promise(function (complete) {
	                if (editorSrc) {
	                    __webpack_require__.e/* nsure */(1, function (require) {
	                        var editor = __webpack_require__(118);
	                        CKLoader._editorModule = editor;
	                        complete(editor);
	                    });
	                }
	                else {
	                    __webpack_require__.e/* nsure */(1, function (require) {
	                        var editor = __webpack_require__(119);
	                        CKLoader._editorModule = editor;
	                        complete(editor);
	                    });
	                }
	            });
	            CKLoader._editorPromise.catch(function (error) {
	                sp_telemetry_1._TraceLogger.logError(CKLoader.logSource, error);
	            });
	        }
	        return CKLoader._editorPromise;
	    };
	    return CKLoader;
	}());
	CKLoader.logSource = sp_telemetry_1._LogSource.create('SPRteCKLoader');
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = CKLoader;


/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__webpack_require__(2);
	__export(__webpack_require__(34));


/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(35));
	__export(__webpack_require__(78));


/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var EventBase_1 = __webpack_require__(36);
	exports.ClonedEventType = EventBase_1.ClonedEventType;
	exports.ValidationErrorType = EventBase_1.ValidationErrorType;
	exports.AccountType = EventBase_1.AccountType;
	exports.EventBase = EventBase_1.EventBase;
	var Engagement_event_1 = __webpack_require__(43);
	exports.Engagement = Engagement_event_1.Engagement;
	var Nav_event_1 = __webpack_require__(45);
	exports.Nav = Nav_event_1.Nav;
	var PLTHttpRequest_event_1 = __webpack_require__(46);
	exports.PLTHttpRequest = PLTHttpRequest_event_1.PLTHttpRequest;
	var Qos_event_1 = __webpack_require__(47);
	exports.Qos = Qos_event_1.Qos;
	var ResultTypeEnum_1 = __webpack_require__(49);
	exports.ResultTypeEnum = ResultTypeEnum_1.ResultTypeEnum;
	var APICallPerformanceData_1 = __webpack_require__(57);
	exports.APICallPerformanceData = APICallPerformanceData_1.default;
	var Beacon_1 = __webpack_require__(64);
	exports.Beacon = Beacon_1.default;
	var BeaconCache_1 = __webpack_require__(69);
	exports.BeaconCache = BeaconCache_1.default;
	var ControlPerformanceData_1 = __webpack_require__(77);
	exports.ControlPerformanceData = ControlPerformanceData_1.default;
	var CorrelationVector_1 = __webpack_require__(40);
	exports.CorrelationVector = CorrelationVector_1.default;
	var ErrorHelper_1 = __webpack_require__(50);
	exports.ErrorHelper = ErrorHelper_1.default;
	var PageTransitionType_1 = __webpack_require__(59);
	exports.PageTransitionType = PageTransitionType_1.default;
	var RUMOneLogger_1 = __webpack_require__(58);
	exports.RumOneLogger = RUMOneLogger_1.default;
	var RUMOneSLAPI_1 = __webpack_require__(60);
	exports.RumOneSLAPI = RUMOneSLAPI_1.default;


/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:CoverageThreshold(96)
	"use strict";
	var Manager_1 = __webpack_require__(37);
	var CorrelationVector_1 = __webpack_require__(40);
	var ObjectUtil_1 = __webpack_require__(38);
	var Features_1 = __webpack_require__(42);
	var _id = 0;
	var ClonedEventType;
	(function (ClonedEventType) {
	    ClonedEventType[ClonedEventType["Single"] = 0] = "Single";
	    ClonedEventType[ClonedEventType["Start"] = 1] = "Start";
	    ClonedEventType[ClonedEventType["End"] = 2] = "End";
	})(ClonedEventType = exports.ClonedEventType || (exports.ClonedEventType = {}));
	var ValidationErrorType;
	(function (ValidationErrorType) {
	    ValidationErrorType[ValidationErrorType["NoParent"] = 1] = "NoParent";
	})(ValidationErrorType = exports.ValidationErrorType || (exports.ValidationErrorType = {}));
	var AccountType;
	(function (AccountType) {
	    AccountType[AccountType["Consumer"] = 0] = "Consumer";
	    AccountType[AccountType["ConsumerAnonymous"] = 1] = "ConsumerAnonymous";
	    AccountType[AccountType["Business"] = 2] = "Business";
	    AccountType[AccountType["BusinessAnonymous"] = 3] = "BusinessAnonymous";
	    AccountType[AccountType["Unknown"] = 4] = "Unknown";
	})(AccountType = exports.AccountType || (exports.AccountType = {}));
	function addEventProps(eventPrototype, props, metadata, baseClass) {
	    ObjectUtil_1.default.extend(eventPrototype, props);
	    var resultMetadata = {};
	    for (var key in metadata) {
	        var item = metadata[key];
	        var result = resultMetadata[key] = (typeof item === 'number' ? { type: item } : item);
	        result.definedInName = props.shortEventName;
	        if (result.type === 2 /* Number */) {
	            result.isMetric = true;
	        }
	    }
	    eventPrototype.metadata = baseClass ? ObjectUtil_1.default.extend(ObjectUtil_1.default.extend({}, baseClass.prototype.metadata), resultMetadata) : resultMetadata;
	}
	exports.addEventProps = addEventProps;
	var EventBase = (function () {
	    function EventBase(data, startType, parent) {
	        this.validationErrors = 0;
	        this.data = {};
	        this.id = _id++;
	        this.enabled = this._isEnabled();
	        // Set the parent id if needed
	        if (parent) {
	            this.parentId = parent.id;
	        }
	        else if (this.requiresParent) {
	            this.addValidationError(ValidationErrorType.NoParent);
	        }
	        // Set the start time
	        this.startTime = Manager_1.Manager.getTime();
	        this.vector = new CorrelationVector_1.default(parent ? parent.vector : CorrelationVector_1.default.RootVector);
	        // Set the data if we have it
	        if (data) {
	            this._setData(data);
	        }
	        // Send the start event
	        this._logEvent(startType);
	    }
	    /**
	     * This will return true if the event is enabled
	     */
	    EventBase.enabled = function () {
	        return this.prototype._isEnabled();
	    };
	    /**
	     * This will return true if the event is of this type
	     * @param event {IEvent} The event to compare
	     */
	    EventBase.isTypeOf = function (event) {
	        return event.eventName.indexOf(this.prototype.shortEventName + ',') >= 0;
	    };
	    EventBase.prototype._isEnabled = function () {
	        // All events are enabled by default
	        return !this.samplingFeature || Features_1.default.isFeatureEnabled(this.samplingFeature);
	    };
	    EventBase.prototype._setData = function (data) {
	        var stored = this.data;
	        for (var _i = 0, _a = Object.keys(data); _i < _a.length; _i++) {
	            var key = _a[_i];
	            if (key in this.metadata) {
	                var value = data[key];
	                switch (typeof value) {
	                    case 'string':
	                        stored[key] = Manager_1.Manager.cleanString(value);
	                        break;
	                    case 'undefined':
	                        break;
	                    default:
	                        stored[key] = value;
	                        break;
	                }
	            }
	        }
	    };
	    EventBase.prototype._logEvent = function (eventType) {
	        Manager_1.Manager.logEvent(this, eventType);
	    };
	    EventBase.prototype.addValidationError = function (type) {
	        this.validationErrors = this.validationErrors | type;
	        Manager_1.Manager.logValidationError(this, type);
	    };
	    return EventBase;
	}());
	exports.EventBase = EventBase;
	var proto = EventBase.prototype;
	proto.eventName = 'EventBase,';
	proto.shortEventName = 'EventBase';
	// All events are not critical by default
	proto.critical = false;
	// All events require parents by default
	proto.requiresParent = true;


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:CoverageThreshold(75)
	"use strict";
	var ObjectUtil_1 = __webpack_require__(38);
	var handlers = [];
	var buffer = [];
	var maxBufferSize = 100;
	function getStartDate() {
	    'use strict';
	    if (window.performance && window.performance.timing && window.performance.timing.navigationStart) {
	        return new Date(window.performance.timing.navigationStart);
	    }
	    else {
	        return new Date();
	    }
	}
	var startDate = getStartDate();
	var Manager = (function () {
	    function Manager() {
	    }
	    Manager.getTime = function () {
	        return (new Date()).getTime();
	    };
	    /** This is the overrideable clean string function */
	    Manager.cleanString = function (str) {
	        return str;
	    };
	    Manager.addLogHandler = function (handler) {
	        handlers.push(handler);
	        // Return the buffer so the handler can get missed events
	        return buffer;
	    };
	    Manager.removeLogHandler = function (handler) {
	        for (var x = 0; x < handlers.length; x++) {
	            if (handlers[x] === handler) {
	                // Remove the handler
	                handlers.splice(x, 1);
	                break;
	            }
	        }
	    };
	    Manager.logEvent = function (event, eventType) {
	        // Clone the object (do it natively because the browser can mark it as a type)
	        var clonedEvent = Object.freeze({
	            data: ObjectUtil_1.default.deepCopy(event.data),
	            id: event.id,
	            enabled: event.enabled,
	            critical: event.critical,
	            endTime: event.endTime,
	            eventName: event.eventName,
	            shortEventName: event.shortEventName,
	            parentId: event.parentId,
	            startTime: event.startTime,
	            eventType: eventType,
	            metadata: event.metadata,
	            vector: event.vector,
	            validationErrors: event.validationErrors
	        });
	        // Add to the buffer
	        buffer.push(clonedEvent);
	        if (buffer.length > maxBufferSize) {
	            buffer = buffer.slice(1);
	            // Make sure we have a handler before the buffer is overrun
	            if (handlers.length === 0) {
	                this.handleBaseLoggingError(new Error("Logging buffer overflow hit before any logging handler was registered"));
	            }
	        }
	        // Let handlers know the log event has completed
	        for (var x = 0; x < handlers.length; x++) {
	            try {
	                handlers[x](clonedEvent);
	            }
	            catch (e) {
	                this.handleBaseLoggingError(e);
	            }
	        }
	    };
	    Manager.logValidationError = function (event, type) {
	        // Do nothing so that we can intialize around circular reference issue
	    };
	    Manager.getStack = function () {
	        var error;
	        try {
	            var w = window;
	            w["______ExpectedError______"]();
	        }
	        catch (e) {
	            error = e;
	        }
	        return error.stack;
	    };
	    Manager.handleBaseLoggingError = function (error) {
	        // TODO: Log somewhere
	    };
	    return Manager;
	}());
	Manager.startDate = startDate;
	Manager.startTime = startDate.getTime();
	exports.Manager = Manager;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Manager;


/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var UriEncoding_1 = __webpack_require__(39);
	var ObjectUtil;
	(function (ObjectUtil) {
	    "use strict";
	    ObjectUtil.DEFAULT_DELIMITER = '&';
	    ObjectUtil.KEYVALUE_DELIMITER = '=';
	    // Returns a copy of the specified object by deeply cloning all of its properties.
	    function deepCopy(object) {
	        var refsCopied = [];
	        var copyRecurse = function (obj) {
	            var result = null;
	            if (obj) {
	                if (Array.isArray(obj)) {
	                    result = [];
	                }
	                else {
	                    // create clone of the object with same prototype chain
	                    result = Object.create(Object.getPrototypeOf(obj));
	                }
	                // iterate over all the properties in the object
	                Object.keys(obj).forEach(function (key) {
	                    // recursively copy the object's properties if the property is an object
	                    var value = obj[key];
	                    if (typeof value === "object") {
	                        if (refsCopied.indexOf(value) !== -1) {
	                            throw new Error("Cannot perform DeepCopy() because a circular reference was encountered, object: " + String(obj) + ", property: " + String(key));
	                        }
	                        refsCopied.push(value);
	                        result[key] = copyRecurse(value);
	                        refsCopied.pop();
	                    }
	                    else {
	                        result[key] = value;
	                    }
	                });
	            }
	            return result;
	        };
	        return copyRecurse(object);
	    }
	    ObjectUtil.deepCopy = deepCopy;
	    // Deeply compares the objects by recursively comparing all their properties, objects with circular references are not supported, prototype members and functions are ignored
	    function deepCompare(objA, objB, equivalent) {
	        // keep track of references that have been compared to find circular references while walking down either object
	        var refsComparedA = [];
	        var refsComparedB = [];
	        var compare = Boolean(equivalent) ? equivalent : function (a, b) { return (a === b); };
	        var equals = function (a, b) {
	            // try a simple equality test first
	            if (a === b) {
	                return true;
	            }
	            if ((a === null) || (b === null)) {
	                return false;
	            }
	            // if both are objects, then further comparison is required
	            if ((typeof (a) === "object") && (typeof (b) === "object")) {
	                // perform deep comparison over object's properties
	                var aKeys = Object.keys(a).sort();
	                var bKeys_1 = Object.keys(b).sort();
	                // does one object have a different number of properties?
	                if (aKeys.length !== bKeys_1.length) {
	                    return false;
	                }
	                var keysMatch = aKeys.every(function (key, index) {
	                    // key names should match
	                    if (key !== bKeys_1[index]) {
	                        return false;
	                    }
	                    else if (typeof (a[key]) === 'function' || typeof (b[key]) === 'function') {
	                        //skip comparison of function properties
	                        return true;
	                    }
	                    else if (!compare(a[key], b[key])) {
	                        // if this is an Object then recursive testing is needed on its properties
	                        if (typeof a[key] === "object") {
	                            // if this property was encountered before then we're going in circles, give up
	                            if (refsComparedA.indexOf(a[key]) !== -1) {
	                                throw new Error("Cannot perform DeepCompare() because a circular reference was encountered, object: " + String(a) + ", property: " + key);
	                            }
	                            refsComparedA.push(a[key]);
	                            if (refsComparedB.indexOf(b[key]) !== -1) {
	                                throw new Error("Cannot perform DeepCompare() because a circular reference was encountered, object: " + String(b) + ", property: " + key);
	                            }
	                            refsComparedB.push(b[key]);
	                            // recursive compare object's properties
	                            if (!equals(a[key], b[key])) {
	                                return false;
	                            }
	                            refsComparedA.pop();
	                            refsComparedB.pop();
	                            return true;
	                        }
	                        else {
	                            // properties don't match
	                            return false;
	                        }
	                    }
	                    else {
	                        return true;
	                    }
	                });
	                if (!keysMatch) {
	                    return false;
	                }
	            }
	            else {
	                // parameters aren't equal, and at least one is not an Object
	                return false;
	            }
	            // everything is equal
	            return true;
	        };
	        return equals(objA, objB);
	    }
	    ObjectUtil.deepCompare = deepCompare;
	    /**
	     * This is a function you can call to safely serialize anything to JSON.
	     * The built-in JSON.stringify() throws an exception for circular references and can't handle
	     * many built-ins such as HTMLElements and the global window object.
	     */
	    function safeSerialize(obj) {
	        var str;
	        try {
	            var seenObjects_1 = [];
	            str = JSON.stringify(obj, function (key, value) {
	                if (value === window) {
	                    return "[window]";
	                }
	                else if (value instanceof HTMLElement) {
	                    return "[HTMLElement]";
	                }
	                else if (typeof value === "function") {
	                    return "[function]";
	                }
	                else if (typeof value === "object") {
	                    if (value === null) {
	                        return value;
	                    }
	                    else if (seenObjects_1.indexOf(value) === -1) {
	                        seenObjects_1.push(value);
	                        return value;
	                    }
	                    else {
	                        return "[circular]";
	                    }
	                }
	                else {
	                    return value;
	                }
	            });
	        }
	        catch (err) {
	            // Note: we make this be a JSON string, so that consumers
	            // can always call JSON.parse.
	            str = JSON.stringify("[object]");
	        }
	        return str;
	    }
	    ObjectUtil.safeSerialize = safeSerialize;
	    /**
	     * Serializes the object Name Values Pairs (Depth of 1).
	     * Used for Query Strings and Cookie Values
	     * @param {any} obj Object with name value pairs
	     * @param {string} delimeter  Delimiter seperates the pairs
	     * @param {boolean} skipEncoding True to skip encoding
	     */
	    function serialize(obj, delimiter, skipEncoding) {
	        delimiter = delimiter || ObjectUtil.DEFAULT_DELIMITER;
	        var values = Object.keys(obj).map(function (name) {
	            // Get the value and convert it to a string
	            var value = obj[name];
	            value = value ? value.toString() : "";
	            if (!skipEncoding) {
	                value = UriEncoding_1.default.encodeURIComponent(value);
	            }
	            // Add the encoded value to the array
	            return name + ObjectUtil.KEYVALUE_DELIMITER + value;
	        });
	        return values.join(delimiter);
	    }
	    ObjectUtil.serialize = serialize;
	    /**
	     * Copy the values of all enumerable own properties from one or more source objects to a target object.
	     */
	    function extend(target, source) {
	        if (source) {
	            for (var _i = 0, _a = Object.keys(source); _i < _a.length; _i++) {
	                var prop = _a[_i];
	                target[prop] = source[prop];
	            }
	        }
	        return target;
	    }
	    ObjectUtil.extend = extend;
	})(ObjectUtil || (ObjectUtil = {}));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ObjectUtil;


/***/ },
/* 39 */
/***/ function(module, exports) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var UriEncoding = (function () {
	    function UriEncoding() {
	    }
	    /////////////////////////////
	    // This file is more clean of all unneeded pollutants. It only contains the minimum amount of code required for someone to use the URI class.
	    // You should think twice before adding anything else into this file because you will be causing unneeded bloat from someone else.
	    /////////////////////////////
	    /**
	     * This function performs an aggressive unicode URL-encoding.
	     * Convert non alphanum character into UTF-8 code string in format %XX%XX%XX.
	     *
	     * Escape unsafe characters
	     *   CTL | SP | <"> | "#" | "%" | "<" | ">" | "'" | "&"
	     * in the URL path (before "?", "#")
	     * No encoding on query string.
	     *
	     * @param {string} str - String to encode
	     * @param {boolean} bAsUrl - Encode in the same way as the code in unmanaged (Url::UrlEncode) code and
	     *                           SP OM (SPHttpUtility.UrlKeyValueEncode and SPHttpUtility.UrlPathEncode).
	     * @param {boolean} bForFilterQuery
	     * @param {boolean} bForCallback - Only escape the characters after 0x7F to workaround bug O12: 452191
	     */
	    UriEncoding.encodeURIComponent = function (str, bAsUrl, bForFilterQuery, bForCallback) {
	        var strOut = "";
	        var strByte;
	        var ix = 0;
	        var strEscaped = " \"%<>\'&";
	        if (!str) {
	            return "";
	        }
	        var len = str.length;
	        for (ix = 0; ix < len; ix++) {
	            var charCode = str.charCodeAt(ix);
	            var curChar = str.charAt(ix);
	            if (bAsUrl && (curChar === '#' || curChar === '?')) {
	                strOut += str.substr(ix);
	                break;
	            }
	            if (bForFilterQuery && curChar === '&') {
	                strOut += curChar;
	                continue;
	            }
	            if (charCode <= 0x7f) {
	                if (bForCallback) {
	                    strOut += curChar;
	                }
	                else {
	                    if ((charCode >= 97 && charCode <= 122) ||
	                        (charCode >= 65 && charCode <= 90) ||
	                        (charCode >= 48 && charCode <= 57) ||
	                        (bAsUrl && (charCode >= 32 && charCode <= 95) && strEscaped.indexOf(curChar) < 0)) {
	                        strOut += curChar;
	                    }
	                    else if (charCode <= 0x0f) {
	                        strOut += "%0" + charCode.toString(16).toUpperCase();
	                    }
	                    else if (charCode <= 0x7f) {
	                        strOut += "%" + charCode.toString(16).toUpperCase();
	                    }
	                }
	            }
	            else if (charCode <= 0x07ff) {
	                strByte = 0xc0 | (charCode >> 6);
	                strOut += "%" + strByte.toString(16).toUpperCase();
	                strByte = 0x80 | (charCode & 0x003f);
	                strOut += "%" + strByte.toString(16).toUpperCase();
	            }
	            else if ((charCode & 0xFC00) !== 0xD800) {
	                strByte = 0xe0 | (charCode >> 12);
	                strOut += "%" + strByte.toString(16).toUpperCase();
	                strByte = 0x80 | ((charCode & 0x0fc0) >> 6); // middle 6 bits
	                strOut += "%" + strByte.toString(16).toUpperCase();
	                strByte = 0x80 | (charCode & 0x003f); // lower 6 bits
	                strOut += "%" + strByte.toString(16).toUpperCase();
	            }
	            else if (ix < str.length - 1) {
	                charCode = (charCode & 0x03FF) << 10; // lower 10 bits of first char
	                ix++;
	                var nextCharCode = str.charCodeAt(ix);
	                charCode |= nextCharCode & 0x03FF; // lower 10 bits of second char
	                charCode += 0x10000;
	                strByte = 0xf0 | (charCode >> 18);
	                strOut += "%" + strByte.toString(16).toUpperCase();
	                strByte = 0x80 | ((charCode & 0x3f000) >> 12); // upper 6 bits
	                strOut += "%" + strByte.toString(16).toUpperCase();
	                strByte = 0x80 | ((charCode & 0x0fc0) >> 6); // middle 6 bits
	                strOut += "%" + strByte.toString(16).toUpperCase();
	                strByte = 0x80 | (charCode & 0x003f); // lower 6 bits
	                strOut += "%" + strByte.toString(16).toUpperCase();
	            }
	        }
	        return strOut;
	    };
	    /**
	     * Callbacks do not work if a #bookmark is in the URL. If there is a bookmark then we need to remove it. We also need to
	     * deal with the scenario where there is not a bookmark but there is an unencoded # as a part of a name/value after the '?'.
	     * This is how things should work here:
	     * .../foo.aspx -> .../foo.aspx (unchanged)
	     * .../foo.aspx#bookmark -> .../foo.aspx (bookmark is removed)
	     * .../foo.aspx#bookmark?name=value -> .../foo.aspx?name=value (bookmark is removed)
	     * .../foo.aspx#bookmark?name1=value#extra1&name2=value2 -> .../foo.aspx?name1=value#extra1&name2=value2 (only the bookmark # is removed)
	     * .../foo.aspx?name1=value#extra1&name2=value2 -> .../foo.aspx?name1=value#extra1&name2=value2 (unchanged)
	     */
	    UriEncoding.escapeUrlForCallback = function (str) {
	        var iPound = str.indexOf("#");
	        var iQues = str.indexOf("?");
	        if ((iPound > 0) && ((iQues === -1) || (iPound < iQues))) {
	            var strNew = str.substr(0, iPound);
	            if (iQues > 0) {
	                strNew += str.substr(iQues); // Need to include the '?' along with the "name=value" pairs.
	            }
	            str = strNew;
	        }
	        return UriEncoding.encodeURIComponent(str, true, false, true);
	    };
	    /**
	     * SharePoint REST processor expect single quote ' to be escaped to '' in tokens (this applies to %27 too).
	     * See example for usage.
	     * @example
	     * "getFolderByServerRelativeUrl('"+encodeRestUriStringToken("don't know.txt")+"')" should became "getFolderByServerRelativeUrl('don''t know.txt')""
	     */
	    UriEncoding.encodeRestUriStringToken = function (stringToken) {
	        if (stringToken) {
	            stringToken = stringToken.replace(/'/g, "''");
	            stringToken = stringToken.replace(/%27/g, "%27%27");
	            stringToken = UriEncoding.encodeURIComponent(stringToken);
	        }
	        return stringToken;
	    };
	    return UriEncoding;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = UriEncoding;


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Guid_1 = __webpack_require__(41);
	var CorrelationVector = (function () {
	    function CorrelationVector(parent, current) {
	        if (parent) {
	            this.root = parent.root;
	            this.parent = parent.current;
	        }
	        else {
	            this.root = this.parent = Guid_1.default.Empty;
	        }
	        if (current) {
	            this.current = current;
	        }
	        else {
	            this.current = Guid_1.default.generate();
	        }
	    }
	    CorrelationVector.prototype.toString = function () {
	        return this.root + "#" + this.parent + "#" + this.current;
	    };
	    return CorrelationVector;
	}());
	CorrelationVector.RootVector = window['rootVector'] || new CorrelationVector();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = CorrelationVector;


/***/ },
/* 41 */
/***/ function(module, exports) {

	"use strict";
	function generateUuidPart(length) {
	    "use strict";
	    var str = '';
	    while (str.length < length) {
	        var num = Math.random() * 16;
	        num = num | 0; // clear decimal
	        str += num.toString(16);
	    }
	    return str;
	}
	var Guid = (function () {
	    function Guid() {
	    }
	    /**
	     * Return a v4 UUID as specified by RFC 4122 http://tools.ietf.org/html/rfc4122
	     */
	    Guid.generate = function () {
	        var parts = [];
	        parts.push(generateUuidPart(8));
	        parts.push(generateUuidPart(4));
	        // first digit must be 4 since we are using pseudorandom numbers
	        var timeHighAndVersion = '4' + generateUuidPart(3);
	        parts.push(timeHighAndVersion);
	        // first digit must have first two bits set to 10
	        var clockSeqHiAndReserved = generateUuidPart(4);
	        var intVal = parseInt(clockSeqHiAndReserved[0], 10);
	        intVal = intVal & 3; // clear out first two bits
	        intVal = intVal | 8; // set first bit to 1
	        clockSeqHiAndReserved = intVal.toString(16) + clockSeqHiAndReserved.substr(1);
	        parts.push(clockSeqHiAndReserved);
	        parts.push(generateUuidPart(12));
	        return parts.join('-');
	    };
	    /**
	     * Normalizes a GUID to lowercase. Returns '' if guid is not given.
	     * @param includeBrackets - if true, add or keep brackets; if false, strip brackets
	     */
	    Guid.normalizeLower = function (guid, includeBrackets) {
	        return guid ? Guid._normalizeBrackets(guid.toLowerCase(), includeBrackets) : '';
	    };
	    /**
	     * Normalizes a GUID to uppercase. Returns '' if guid is not given.
	     * @param includeBrackets - if true, add or keep brackets; if false, strip brackets
	     */
	    Guid.normalizeUpper = function (guid, includeBrackets) {
	        return guid ? Guid._normalizeBrackets(guid.toUpperCase(), includeBrackets) : '';
	    };
	    Guid._normalizeBrackets = function (guid, includeBrackets) {
	        var match = guid.match(/^\{(.*)\}$/);
	        if (match) {
	            return includeBrackets ? match[0] : match[1];
	        }
	        return includeBrackets ? '{' + guid + '}' : guid;
	    };
	    return Guid;
	}());
	Guid.Empty = "00000000-0000-0000-0000-000000000000";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Guid;


/***/ },
/* 42 */
/***/ function(module, exports) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	/**
	 * This file contains the known list of features (a.k.a. flights or ramps).
	 * The signature of one entry is:
	 *  static FeatureName: IFlight = { ODB: 100, ODC: "foo", Fallback: true };
	 * ODB            Is the numerical value of the flight from the ExpFeature enumeration.
	 *                Omit if the flight does not have a correspondent in ODB.
	 * ODC            Is the string identifier in ODC.
	 *                Omit if the flight does not have a correspondent ramp in ODC.
	 * Fallback       The state of the flight, true = on false = off.
	 *                The fallback is used only when the ODB or ODC flight is not applicable.
	 *                For example: The Flight is an ODB flight with no ODC counterpart and the app runs in ODC mode.
	 *                The fallback also allows declaring app only switches that are not known to the backend.
	 *                Omit if false.
	 */
	var Features = (function () {
	    function Features() {
	    }
	    //You should not add features here but in your own file
	    /**
	     * This function will return true when the feature is enabled and
	     * will check the proper config for ODB and ODC to determine this
	     */
	    Features.isFeatureEnabled = function (feature) {
	        var result = !!feature.Fallback;
	        var _spPageContextInfo = window['_spPageContextInfo'];
	        var _odcFlightInfo = window['Flight'];
	        var _odcConfig = window['FilesConfig'];
	        var Flighting = window['Flighting']; // Old SharePoint pages use this.
	        if (_spPageContextInfo) {
	            if (!_spPageContextInfo.ExpFeatures &&
	                Flighting && Flighting.ExpFeatures) {
	                _spPageContextInfo.ExpFeatures = Flighting.ExpFeatures;
	            }
	            if (typeof feature.ODB === 'boolean') {
	                result = feature.ODB;
	            }
	            else if (_spPageContextInfo.ExpFeatures && feature.ODB > 0) {
	                var elem = Math.floor(feature.ODB / 32);
	                var mask = 1 << (feature.ODB % 32);
	                result = (elem < _spPageContextInfo.ExpFeatures.length) &&
	                    (_spPageContextInfo.ExpFeatures[elem] & mask) !== 0;
	            }
	        }
	        if (feature.ODC && !!_odcConfig) {
	            if (typeof feature.ODC === 'boolean') {
	                result = feature.ODC;
	            }
	            else if (_odcFlightInfo && _odcFlightInfo.Ramps && _odcFlightInfo.Ramps[feature.ODC]) {
	                result = true;
	            }
	            else if (_odcConfig && _odcConfig[feature.ODC]) {
	                result = true;
	            }
	        }
	        return result;
	    };
	    return Features;
	}());
	/* This feature is always on */
	Features.On = { Fallback: true };
	/* This feature is always off */
	Features.Off = {};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Features;


/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var SingleEventBase_1 = __webpack_require__(44);
	exports.Engagement = SingleEventBase_1.createSingleEvent({
	    eventName: 'Engagement,',
	    shortEventName: 'Engagement'
	}, {
	    name: {
	        isKey: true,
	        isPrefixingDisabled: true,
	        type: 1 /* String */
	    },
	    isIntentional: {
	        isPrefixingDisabled: true,
	        type: 3 /* Boolean */
	    },
	    scenario: {
	        isPrefixingDisabled: true,
	        type: 1 /* String */
	    },
	    location: {
	        isPrefixingDisabled: true,
	        type: 1 /* String */
	    },
	    usageType: {
	        isPrefixingDisabled: true,
	        type: 1 /* String */
	    },
	    currentPage: {
	        isPrefixingDisabled: true,
	        type: 1 /* String */
	    },
	    previousPage: {
	        isPrefixingDisabled: true,
	        type: 1 /* String */
	    },
	    experiment: {
	        isPrefixingDisabled: true,
	        type: 4 /* Object */
	    },
	    extraData: 4 /* Object */
	});
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = exports.Engagement;


/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:CoverageThreshold(72)
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var EventBase_1 = __webpack_require__(36);
	function logData(data, parent) {
	    return new this(data, EventBase_1.ClonedEventType.Single, parent);
	}
	function logEmptyData(parent) {
	    return new this(null, EventBase_1.ClonedEventType.Single, parent);
	}
	function createSingleEvent(props, metadata, baseClass) {
	    var SingleEvent = (function (_super) {
	        __extends(SingleEvent, _super);
	        function SingleEvent() {
	            return _super.apply(this, arguments) || this;
	        }
	        return SingleEvent;
	    }(EventBase_1.EventBase));
	    SingleEvent.logData = metadata ? logData : logEmptyData;
	    EventBase_1.addEventProps(SingleEvent.prototype, props, metadata || {}, baseClass);
	    return SingleEvent;
	}
	exports.createSingleEvent = createSingleEvent;


/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var SingleEventBase_1 = __webpack_require__(44);
	exports.Nav = SingleEventBase_1.createSingleEvent({
	    eventName: 'Nav,',
	    shortEventName: 'Nav'
	}, {
	    viewParams: 4 /* Object */,
	    url: 1 /* String */
	});
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = exports.Nav;


/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var SingleEventBase_1 = __webpack_require__(44);
	exports.PLTHttpRequest = SingleEventBase_1.createSingleEvent({
	    eventName: 'PLTHttpRequest,',
	    shortEventName: 'PLTHttpRequest',
	    samplingFeature: { ODB: true, ODC: 'PLTHttpRequestSampling', Fallback: false }
	}, {
	    startTime: 2 /* Number */,
	    url: 1 /* String */,
	    duration: 2 /* Number */
	});
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = exports.PLTHttpRequest;


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var PairedEventBase_1 = __webpack_require__(48);
	var ResultTypeEnum_1 = __webpack_require__(49);
	exports.ResultTypeEnum = ResultTypeEnum_1.ResultTypeEnum;
	exports.Qos = PairedEventBase_1.createPairedEvent({
	    eventName: 'Qos,',
	    shortEventName: 'Qos'
	}, {
	    name: {
	        isKey: true,
	        isPrefixingDisabled: true,
	        type: 1 /* String */
	    },
	    resultCode: {
	        isPrefixingDisabled: true,
	        type: 1 /* String */
	    },
	    resultType: {
	        typeRef: ResultTypeEnum_1.ResultTypeEnum,
	        isPrefixingDisabled: true,
	        type: 6 /* Enum */
	    },
	    error: {
	        isPrefixingDisabled: true,
	        type: 1 /* String */
	    },
	    extraData: 4 /* Object */,
	    extraMetrics: {
	        isPrefixingDisabled: true,
	        type: 4 /* Object */
	    }
	});
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = exports.Qos;


/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:CoverageThreshold(75)
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var EventBase_1 = __webpack_require__(36);
	var Manager_1 = __webpack_require__(37);
	var ResultTypeEnum_1 = __webpack_require__(49);
	var ErrorHelper_1 = __webpack_require__(50);
	var Async_1 = __webpack_require__(56);
	var ObjectUtil_1 = __webpack_require__(38);
	var schemaExceptionErrorCode = 'GetSchemaException';
	var promiseCreationFailureErrorCode = 'PromiseCreationFailed';
	var timeoutErrorCode = 'Timeout';
	function generateQosResult(resultType, resultCode, error) {
	    var schema = {
	        resultType: resultType
	    };
	    if (resultCode) {
	        schema.resultCode = resultCode;
	    }
	    if (error) {
	        schema.error = error;
	    }
	    return schema;
	}
	function createPairedEvent(props, metadata, baseClass) {
	    var PairedEvent = (function (_super) {
	        __extends(PairedEvent, _super);
	        function PairedEvent() {
	            return _super.apply(this, arguments) || this;
	        }
	        return PairedEvent;
	    }(PairedEventBase));
	    EventBase_1.addEventProps(PairedEvent.prototype, props, metadata, baseClass);
	    return PairedEvent;
	}
	exports.createPairedEvent = createPairedEvent;
	var PairedEventBase = (function (_super) {
	    __extends(PairedEventBase, _super);
	    function PairedEventBase(data, parent) {
	        return _super.call(this, data, EventBase_1.ClonedEventType.Start, parent) || this;
	    }
	    PairedEventBase.instrumentPromise = function (startSchema, createPromise, getCompleteSchema, getErrorSchema, timeoutMs, timeoutSchema, parent) {
	        var promise;
	        var event = new this(startSchema, parent);
	        if (timeoutMs) {
	            event.setTimeout(timeoutMs, timeoutSchema);
	        }
	        var onComplete = function (result) {
	            var schema;
	            if (getCompleteSchema) {
	                try {
	                    schema = getCompleteSchema(result);
	                }
	                catch (e) {
	                    schema = generateQosResult(ResultTypeEnum_1.ResultTypeEnum.Failure, schemaExceptionErrorCode, e.toString());
	                }
	            }
	            else {
	                schema = generateQosResult(ResultTypeEnum_1.ResultTypeEnum.Success);
	            }
	            event.end(schema);
	        };
	        var onError = function (errorArgs) {
	            var schema;
	            if (getErrorSchema) {
	                try {
	                    schema = getErrorSchema(errorArgs);
	                }
	                catch (e) {
	                    schema = generateQosResult(ResultTypeEnum_1.ResultTypeEnum.Failure, schemaExceptionErrorCode, e.toString());
	                }
	            }
	            else if (errorArgs) {
	                var failureResultType = (errorArgs instanceof Error && errorArgs.name === "Canceled") ?
	                    ResultTypeEnum_1.ResultTypeEnum.ExpectedFailure : ResultTypeEnum_1.ResultTypeEnum.Failure;
	                schema = generateQosResult(failureResultType, null, ObjectUtil_1.default.safeSerialize(errorArgs));
	            }
	            else {
	                schema = generateQosResult(ResultTypeEnum_1.ResultTypeEnum.Failure);
	            }
	            event.end(schema);
	        };
	        try {
	            promise = createPromise();
	        }
	        catch (e) {
	            event.end(generateQosResult(ResultTypeEnum_1.ResultTypeEnum.Failure, promiseCreationFailureErrorCode, e.toString()));
	            throw e;
	        }
	        promise.then(onComplete, onError);
	        return promise;
	    };
	    PairedEventBase.prototype.setTimeout = function (ms, data) {
	        if (!this.async) {
	            this.async = new Async_1.default(this);
	        }
	        this._clearTimeout();
	        if (!data) {
	            data = generateQosResult(ResultTypeEnum_1.ResultTypeEnum.Failure, timeoutErrorCode);
	        }
	        this.async.setTimeout(this.end.bind(this, data), ms);
	    };
	    PairedEventBase.prototype.verbose = function (message) {
	        if (this.endTime) {
	            // event already ended, no need to log anymore
	            return;
	        }
	        if (this._isQosEvent()) {
	            var qosSchema = this.data;
	            ErrorHelper_1.default.verbose(message, qosSchema.name);
	        }
	    };
	    PairedEventBase.prototype.end = function (data) {
	        // Make sure end can only be called once
	        if (!this.endTime) {
	            if (data) {
	                this._setData(data);
	            }
	            // Set the end time
	            this.endTime = Manager_1.Manager.getTime();
	            // Log the event end
	            this._logEvent(EventBase_1.ClonedEventType.End);
	            // If this is a QOS event log and contains an error message trigger the upload of logs by calling
	            // the ErrorHelper
	            if (this._isQosEvent()) {
	                var qosSchema = this.data;
	                if (qosSchema.error) {
	                    ErrorHelper_1.default.log(qosSchema.error, qosSchema.name, qosSchema.resultCode, qosSchema.resultType);
	                }
	            }
	            this._clearTimeout();
	        }
	    };
	    PairedEventBase.prototype._clearTimeout = function () {
	        if (this.async && this.timeoutId) {
	            this.async.clearTimeout(this.timeoutId);
	            this.timeoutId = null;
	        }
	    };
	    PairedEventBase.prototype._isQosEvent = function () {
	        return this.eventName.indexOf('Qos,') >= 0;
	    };
	    return PairedEventBase;
	}(EventBase_1.EventBase));


/***/ },
/* 49 */
/***/ function(module, exports) {

	"use strict";
	var ResultTypeEnum;
	(function (ResultTypeEnum) {
	    ResultTypeEnum[ResultTypeEnum["Success"] = 0] = "Success";
	    ResultTypeEnum[ResultTypeEnum["Failure"] = 1] = "Failure";
	    ResultTypeEnum[ResultTypeEnum["ExpectedFailure"] = 2] = "ExpectedFailure";
	})(ResultTypeEnum = exports.ResultTypeEnum || (exports.ResultTypeEnum = {}));


/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var CaughtError_event_1 = __webpack_require__(51);
	var QosError_event_1 = __webpack_require__(53);
	var Verbose_event_1 = __webpack_require__(54);
	var CircularBuffer_1 = __webpack_require__(55);
	var ObjectUtil_1 = __webpack_require__(38);
	var MAX_VERBOSE_LOGS = 50;
	var ErrorHelper = (function () {
	    function ErrorHelper() {
	    }
	    ErrorHelper.verbose = function (message, eventName) {
	        ErrorHelper._verboseLogs.push({
	            name: eventName,
	            message: message
	        });
	    };
	    ErrorHelper.logError = function (error, extraData, qosData) {
	        if (!error || error._handled) {
	            return;
	        }
	        var message = this.getErrorMessage(error);
	        var stack = error && error.stack ? error.stack : "";
	        var schema;
	        while (Boolean(schema = ErrorHelper._verboseLogs.popOldest())) {
	            Verbose_event_1.Verbose.logData(schema);
	        }
	        if (qosData && qosData.eventName) {
	            QosError_event_1.QosError.logData({
	                name: qosData.eventName,
	                resultCode: qosData.resultCode,
	                resultType: qosData.resultType,
	                extraData: extraData || undefined,
	                message: message,
	                stack: stack
	            });
	        }
	        else {
	            CaughtError_event_1.CaughtError.logData({
	                extraData: extraData || undefined,
	                message: message,
	                stack: stack
	            });
	        }
	    };
	    ErrorHelper.log = function (error, eventName, resultCode, resultType) {
	        this.logError(error, null, { eventName: eventName, resultCode: resultCode, resultType: resultType });
	    };
	    /**
	     * Extract the error message from the error
	     */
	    ErrorHelper.getErrorMessage = function (error) {
	        var message = '';
	        if (error) {
	            if (error.message) {
	                message = error.message;
	            }
	            else if (error.description) {
	                message = error.description;
	            }
	            else if (typeof (error) === 'object') {
	                message = ObjectUtil_1.default.safeSerialize(error);
	            }
	            else if (error.toString) {
	                message = error.toString();
	            }
	        }
	        return message;
	    };
	    return ErrorHelper;
	}());
	ErrorHelper._verboseLogs = new CircularBuffer_1.default(MAX_VERBOSE_LOGS);
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ErrorHelper;


/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var SingleEventBase_1 = __webpack_require__(44);
	var Trace_event_1 = __webpack_require__(52);
	exports.CaughtError = SingleEventBase_1.createSingleEvent({
	    eventName: 'CaughtError,Trace,',
	    shortEventName: 'CaughtError',
	    critical: true,
	    requiresParent: false
	}, {
	    stack: 1 /* String */,
	    extraData: 4 /* Object */
	}, Trace_event_1.Trace);
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = exports.CaughtError;


/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var SingleEventBase_1 = __webpack_require__(44);
	exports.Trace = SingleEventBase_1.createSingleEvent({
	    eventName: 'Trace,',
	    shortEventName: 'Trace',
	    requiresParent: false
	}, {
	    message: 1 /* String */
	});
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = exports.Trace;


/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var SingleEventBase_1 = __webpack_require__(44);
	var CaughtError_event_1 = __webpack_require__(51);
	var ResultTypeEnum_1 = __webpack_require__(49);
	exports.ResultTypeEnum = ResultTypeEnum_1.ResultTypeEnum;
	exports.QosError = SingleEventBase_1.createSingleEvent({
	    eventName: 'QosError,CaughtError,Trace,',
	    shortEventName: 'QosError',
	    critical: true
	}, {
	    name: {
	        isKey: true,
	        type: 1 /* String */
	    },
	    resultCode: 1 /* String */,
	    resultType: {
	        typeRef: ResultTypeEnum_1.ResultTypeEnum,
	        type: 6 /* Enum */
	    }
	}, CaughtError_event_1.CaughtError);
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = exports.QosError;


/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var SingleEventBase_1 = __webpack_require__(44);
	var Trace_event_1 = __webpack_require__(52);
	exports.Verbose = SingleEventBase_1.createSingleEvent({
	    eventName: 'Verbose,Trace,',
	    shortEventName: 'Verbose',
	    requiresParent: false
	}, {
	    name: {
	        isKey: true,
	        type: 1 /* String */
	    }
	}, Trace_event_1.Trace);
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = exports.Verbose;


/***/ },
/* 55 */
/***/ function(module, exports) {

	// OneDrive:CoverageThreshold(100)
	"use strict";
	var CircularBuffer = (function () {
	    function CircularBuffer(size) {
	        this._length = 0;
	        this._head = -1;
	        if (size <= 0) {
	            throw new Error("Size must be positive");
	        }
	        this._size = size;
	        this._buffer = new Array(size);
	    }
	    CircularBuffer.prototype.push = function (item) {
	        if (this._length < this._size) {
	            this._length++;
	        }
	        this._head++;
	        if (this._head === this._size) {
	            this._head = 0;
	        }
	        this._buffer[this._head] = item;
	    };
	    CircularBuffer.prototype.popOldest = function () {
	        if (this._length === 0) {
	            return null;
	        }
	        var tail = (this._head - this._length + 1 + this._size) % this._size;
	        this._length--;
	        return this._buffer[tail];
	    };
	    return CircularBuffer;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = CircularBuffer;


/***/ },
/* 56 */
/***/ function(module, exports) {

	/**
	 * Bugs often appear in async code when stuff gets disposed, but async operations don't get canceled.
	 * This Async helper class solves these issues by tying async code to the lifetime of a disposable object.
	 *
	 * Usage: Anything class extending from BaseModel can access this helper via this.async. Otherwise create a
	 * new instance of the class and remember to call dispose() during your code's dispose handler.
	 */
	"use strict";
	function noop() {
	    // Do nothing.
	}
	var Async = (function () {
	    function Async(parent, onError) {
	        this._isDisposed = false;
	        this._parent = parent || null;
	        this._onErrorHandler = onError;
	        this._timeoutIds = null;
	        this._immediateIds = null;
	        this._animationFrameIds = null;
	        this._intervalIds = null;
	    }
	    /**
	     * Dispose function, clears all async operations.
	     */
	    Async.prototype.dispose = function () {
	        if (this._isDisposed) {
	            return;
	        }
	        this._isDisposed = true;
	        this._parent = null;
	        // Clear timeouts.
	        if (this._timeoutIds) {
	            for (var _i = 0, _a = Object.keys(this._timeoutIds); _i < _a.length; _i++) {
	                var id = _a[_i];
	                this.clearTimeout(Number(id));
	            }
	            this._timeoutIds = null;
	        }
	        // Clear immediates.
	        if (this._immediateIds) {
	            for (var _b = 0, _c = Object.keys(this._immediateIds); _b < _c.length; _b++) {
	                var id = _c[_b];
	                this.clearImmediate(Number(id));
	            }
	            this._immediateIds = null;
	        }
	        // Clear intervals.
	        if (this._intervalIds) {
	            for (var _d = 0, _e = Object.keys(this._intervalIds); _d < _e.length; _d++) {
	                var id = _e[_d];
	                this.clearInterval(Number(id));
	            }
	            this._intervalIds = null;
	        }
	        // Clear animation frames.
	        if (this._animationFrameIds) {
	            for (var _f = 0, _g = Object.keys(this._animationFrameIds); _f < _g.length; _f++) {
	                var id = _g[_f];
	                this.cancelAnimationFrame(Number(id));
	            }
	            this._animationFrameIds = null;
	        }
	    };
	    /**
	     * SetTimeout override, which will auto cancel the timeout during dispose.
	     * @param callback Callback to execute.
	     * @param duration Duration in milliseconds.
	     * @return The setTimeout id.
	     */
	    Async.prototype.setTimeout = function (callback, duration) {
	        var _this = this;
	        var timeoutId = 0;
	        if (!this._isDisposed) {
	            var timeoutIds_1 = this._timeoutIds || (this._timeoutIds = {});
	            /* tslint:disable:ban-native-functions */
	            timeoutId = setTimeout(function () {
	                // Time to execute the timeout, enqueue it as a foreground task to be executed.
	                try {
	                    // Now delete the record and call the callback.
	                    delete timeoutIds_1[timeoutId];
	                    callback.apply(_this._parent);
	                }
	                catch (e) {
	                    if (_this._onErrorHandler) {
	                        _this._onErrorHandler(e);
	                    }
	                }
	            }, duration);
	            /* tslint:enable:ban-native-functions */
	            timeoutIds_1[timeoutId] = true;
	        }
	        return timeoutId;
	    };
	    /**
	     * Clears the timeout.
	     * @param id Id to cancel.
	     */
	    Async.prototype.clearTimeout = function (id) {
	        var timeoutIds = this._timeoutIds;
	        if (timeoutIds && timeoutIds[id]) {
	            /* tslint:disable:ban-native-functions */
	            clearTimeout(id);
	            /* tslint:enable:ban-native-functions */
	            delete timeoutIds[id];
	        }
	    };
	    /**
	     * SetImmediate override, which will auto cancel the immediate during dispose.
	     * @param callback Callback to execute.
	     * @return The setTimeout id.
	     */
	    Async.prototype.setImmediate = function (callback) {
	        var _this = this;
	        var immediateId = 0;
	        if (!this._isDisposed) {
	            var immediateIds_1 = this._immediateIds || (this._immediateIds = {});
	            var setImmediateCallback = function () {
	                // Time to execute the timeout, enqueue it as a foreground task to be executed.
	                try {
	                    // Now delete the record and call the callback.
	                    delete immediateIds_1[immediateId];
	                    callback.apply(_this._parent);
	                }
	                catch (e) {
	                    _this._logError(e);
	                }
	            };
	            /* tslint:disable:ban-native-functions */
	            immediateId = window.setImmediate ? window.setImmediate(setImmediateCallback) : window.setTimeout(setImmediateCallback, 0);
	            /* tslint:enable:ban-native-functions */
	            immediateIds_1[immediateId] = true;
	        }
	        return immediateId;
	    };
	    /**
	     * Clears the immediate.
	     * @param id Id to cancel.
	     */
	    Async.prototype.clearImmediate = function (id) {
	        var immediateIds = this._immediateIds;
	        if (immediateIds && immediateIds[id]) {
	            /* tslint:disable:ban-native-functions */
	            window.clearImmediate ? window.clearImmediate(id) : window.clearTimeout(id);
	            delete immediateIds[id];
	        }
	    };
	    /**
	     * SetInterval override, which will auto cancel the timeout during dispose.
	     * @param callback Callback to execute.
	     * @param duration Duration in milliseconds.
	     * @return The setTimeout id.
	     */
	    Async.prototype.setInterval = function (callback, duration) {
	        var _this = this;
	        var intervalId = 0;
	        if (!this._isDisposed) {
	            if (!this._intervalIds) {
	                this._intervalIds = {};
	            }
	            /* tslint:disable:ban-native-functions */
	            intervalId = setInterval(function () {
	                // Time to execute the interval callback, enqueue it as a foreground task to be executed.
	                try {
	                    callback.apply(_this._parent);
	                }
	                catch (e) {
	                    _this._logError(e);
	                }
	            }, duration);
	            /* tslint:enable:ban-native-functions */
	            this._intervalIds[intervalId] = true;
	        }
	        return intervalId;
	    };
	    /**
	     * Clears the interval.
	     * @param id Id to cancel.
	     */
	    Async.prototype.clearInterval = function (id) {
	        if (this._intervalIds && this._intervalIds[id]) {
	            /* tslint:disable:ban-native-functions */
	            clearInterval(id);
	            delete this._intervalIds[id];
	        }
	    };
	    /**
	     * Creates a function that, when executed, will only call the func function at most once per
	     * every wait milliseconds. Provide an options object to indicate that func should be invoked
	     * on the leading and/or trailing edge of the wait timeout. Subsequent calls to the throttled
	     * function will return the result of the last func call.
	     *
	     * Note: If leading and trailing options are true func will be called on the trailing edge of
	     * the timeout only if the the throttled function is invoked more than once during the wait timeout.
	     *
	     * @param func The function to throttle.
	     * @param wait The number of milliseconds to throttle executions to. Defaults to 0.
	     * @param options The options object.
	     * @param options.leading Specify execution on the leading edge of the timeout.
	     * @param options.trailing Specify execution on the trailing edge of the timeout.
	     * @return The new throttled function.
	     */
	    Async.prototype.throttle = function (func, wait, options) {
	        var _this = this;
	        if (options === void 0) { options = {}; }
	        if (this._isDisposed) {
	            return noop;
	        }
	        var waitMS = wait || 0;
	        var _a = options.leading, leading = _a === void 0 ? true : _a, _b = options.trailing, trailing = _b === void 0 ? true : _b;
	        var lastExecuteTime = 0;
	        var lastResult;
	        var lastArgs;
	        var timeoutId = null;
	        var callback = function (userCall) {
	            var now = (new Date()).getTime();
	            var delta = now - lastExecuteTime;
	            var waitLength = leading ? waitMS - delta : waitMS;
	            if (delta >= waitMS && (!userCall || leading)) {
	                lastExecuteTime = now;
	                if (timeoutId) {
	                    _this.clearTimeout(timeoutId);
	                    timeoutId = null;
	                }
	                lastResult = func.apply(_this._parent, lastArgs);
	            }
	            else if (timeoutId === null && trailing) {
	                timeoutId = _this.setTimeout(callback, waitLength);
	            }
	            return lastResult;
	        };
	        var resultFunction = function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            lastArgs = args;
	            return callback(true);
	        };
	        return resultFunction;
	    };
	    /**
	     * Creates a function that will delay the execution of func until after wait milliseconds have
	     * elapsed since the last time it was invoked. Provide an options object to indicate that func
	     * should be invoked on the leading and/or trailing edge of the wait timeout. Subsequent calls
	     * to the debounced function will return the result of the last func call.
	     *
	     * Note: If leading and trailing options are true func will be called on the trailing edge of
	     * the timeout only if the the debounced function is invoked more than once during the wait
	     * timeout.
	     *
	     * @param func The function to debounce.
	     * @param wait The number of milliseconds to delay.
	     * @param options The options object.
	     * @param options.leading Specify execution on the leading edge of the timeout.
	     * @param options.maxWait The maximum time func is allowed to be delayed before it's called.
	     * @param options.trailing Specify execution on the trailing edge of the timeout.
	     * @return The new debounced function.
	     */
	    Async.prototype.debounce = function (func, wait, options) {
	        var _this = this;
	        if (options === void 0) { options = {}; }
	        if (this._isDisposed) {
	            return noop;
	        }
	        var waitMS = wait || 0;
	        var _a = options.leading, leading = _a === void 0 ? false : _a, _b = options.trailing, trailing = _b === void 0 ? true : _b, _c = options.maxWait, maxWait = _c === void 0 ? NaN : _c;
	        var lastCallTime = 0;
	        var lastExecuteTime = (new Date()).getTime();
	        var lastResult;
	        var lastArgs;
	        var timeoutId = null;
	        var callback = function (userCall) {
	            var now = (new Date()).getTime();
	            var executeImmediately = false;
	            if (userCall) {
	                if (leading && now - lastCallTime >= waitMS) {
	                    executeImmediately = true;
	                }
	                lastCallTime = now;
	            }
	            var delta = now - lastCallTime;
	            var waitLength = waitMS - delta;
	            var maxWaitDelta = now - lastExecuteTime;
	            var maxWaitExpired = false;
	            if (!isNaN(maxWait)) {
	                // maxWait only matters when there is a pending callback
	                if (maxWaitDelta >= maxWait && timeoutId) {
	                    maxWaitExpired = true;
	                }
	                else {
	                    waitLength = Math.min(waitLength, maxWait - maxWaitDelta);
	                }
	            }
	            if (delta >= waitMS || maxWaitExpired || executeImmediately) {
	                if (timeoutId) {
	                    _this.clearTimeout(timeoutId);
	                    timeoutId = null;
	                }
	                lastExecuteTime = now;
	                lastResult = func.apply(_this._parent, lastArgs);
	            }
	            else if ((timeoutId === null || !userCall) && trailing) {
	                timeoutId = _this.setTimeout(callback, waitLength);
	            }
	            return lastResult;
	        };
	        var resultFunction = function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            lastArgs = args;
	            return callback(true);
	        };
	        return resultFunction;
	    };
	    Async.prototype.requestAnimationFrame = function (callback) {
	        var _this = this;
	        var animationFrameId = 0;
	        if (!this._isDisposed) {
	            var animationFrameIds_1 = this._animationFrameIds || (this._animationFrameIds = {});
	            var animationFrameCallback = function () {
	                try {
	                    // Now delete the record and call the callback.
	                    delete animationFrameIds_1[animationFrameId];
	                    callback.apply(_this._parent);
	                }
	                catch (e) {
	                    _this._logError(e);
	                }
	            };
	            /* tslint:disable:ban-native-functions */
	            animationFrameId = window.requestAnimationFrame ? window.requestAnimationFrame(animationFrameCallback) : window.setTimeout(animationFrameCallback, 0);
	            /* tslint:enable:ban-native-functions */
	            animationFrameIds_1[animationFrameId] = true;
	        }
	        return animationFrameId;
	    };
	    Async.prototype.cancelAnimationFrame = function (id) {
	        var animationFrameIds = this._animationFrameIds;
	        if (animationFrameIds && animationFrameIds[id]) {
	            /* tslint:disable:ban-native-functions */
	            window.cancelAnimationFrame ? window.cancelAnimationFrame(id) : window.clearTimeout(id);
	            /* tslint:enable:ban-native-functions */
	            delete animationFrameIds[id];
	        }
	    };
	    Async.prototype._logError = function (e) {
	        if (this._onErrorHandler) {
	            this._onErrorHandler(e);
	        }
	    };
	    return Async;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Async;


/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var RUMOneLogger_1 = __webpack_require__(58);
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = RUMOneLogger_1.APICallPerformanceData;


/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	// OneDrive:IgnoreCodeCoverage
	var Async_1 = __webpack_require__(56);
	var PageTransitionType_1 = __webpack_require__(59);
	var RUMOneSLAPI_1 = __webpack_require__(60);
	var RUMOneErrorsSLAPI_1 = __webpack_require__(61);
	var RUMOneDataUpload_event_1 = __webpack_require__(62);
	var PlatformDetection_1 = __webpack_require__(63);
	var PerformanceDataState;
	(function (PerformanceDataState) {
	    PerformanceDataState[PerformanceDataState["Incomplete"] = 1] = "Incomplete";
	    PerformanceDataState[PerformanceDataState["ReadyToUpload"] = 2] = "ReadyToUpload";
	    PerformanceDataState[PerformanceDataState["Uploaded"] = 3] = "Uploaded";
	    PerformanceDataState[PerformanceDataState["TimeOut"] = 4] = "TimeOut";
	})(PerformanceDataState || (PerformanceDataState = {}));
	var MARKER_PREFIX = "EUPL.";
	var APICallPerformanceData = (function () {
	    function APICallPerformanceData(url, duration, correlationid, status, startTime, endTime, name) {
	        this.url = url;
	        this.duration = duration;
	        this.correlationId = correlationid;
	        this.status = status;
	        this.startTime = startTime;
	        this.endTime = endTime;
	        this.name = name;
	    }
	    return APICallPerformanceData;
	}());
	exports.APICallPerformanceData = APICallPerformanceData;
	var ControlPerformanceData = (function () {
	    function ControlPerformanceData(controlId, startTime, endTime, renderTimeCalculator, renderTimeRequiredDataChecker) {
	        this.controlId = controlId;
	        this.startTime = startTime;
	        this.endTime = endTime;
	        this.renderTimeCalculator = renderTimeCalculator;
	        this.renderTimeRequiredDataChecker = renderTimeRequiredDataChecker;
	    }
	    return ControlPerformanceData;
	}());
	exports.ControlPerformanceData = ControlPerformanceData;
	/**
	 * It is a new client side perf instrumentation, it logs more metrics, like scenario, api data, server request id, duration, etc in 1 single schema.
	 * It has server side usage DB and cosmos supports.
	 */
	var RUMOneLogger = (function () {
	    function RUMOneLogger(logFunc) {
	        this.async = new Async_1.default(this);
	        this.dataStartTime = Number((new Date()).getTime());
	        this.performanceData = null;
	        this.dataState = PerformanceDataState.Incomplete;
	        this.controls = [];
	        this.apis = [];
	        this.perfDataTimer = null;
	        this.expectedControls = [];
	        this.euplBreakDown = {};
	        this.serverMetrics = {};
	        this.isW3cTimingCollected = false;
	        this.isW3cResourceTimingCollected = false;
	        this.tempData = {};
	        this.markerIndex = 0;
	        this.performanceData = null;
	        this.loggingFunc = logFunc;
	        this.getPerformanceData();
	        this.setPerfDataTimer();
	        this._platformDetection = new PlatformDetection_1.default();
	    }
	    RUMOneLogger.isNullOrUndefined = function (item) {
	        return item === null || item === undefined;
	    };
	    /**
	     * RUMOneLogger.getRUMOneLogger: Use this method to get a singleton reference of RUMOneLogger
	     * with default parameters.
	     */
	    RUMOneLogger.getRUMOneLogger = function (logFunc) {
	        var loggingFunc = logFunc || (function (streamName, dictProperties) {
	            RUMOneDataUpload_event_1.RUMOneDataUpload.logData({ streamName: streamName, dictionary: dictProperties });
	        });
	        if (!RUMOneLogger.rumOneLogger) {
	            try {
	                RUMOneLogger.rumOneLogger = new RUMOneLogger(loggingFunc);
	            }
	            catch (e) {
	                // If RUMOneLogger fails, don't block UX
	                RUMOneLogger.rumOneLogger = null;
	            }
	        }
	        return RUMOneLogger.rumOneLogger;
	    };
	    RUMOneLogger.prototype.getPerformanceData = function () {
	        if (!this.performanceData) {
	            this.performanceData = new RUMOneSLAPI_1.default();
	            this.logMessageInConsole("RUMOne object initiated!");
	        }
	        return this.performanceData;
	    };
	    RUMOneLogger.prototype.resetLogger = function () {
	        this.dataStartTime = (new Date()).getTime();
	        this.dataState = PerformanceDataState.Incomplete;
	        this.isW3cTimingCollected = false;
	        this.isW3cResourceTimingCollected = false;
	        this.expectedControls = [];
	        this.controls = [];
	        this.apis = [];
	        this.tempData = {};
	        this.performanceData = null;
	        this.getPerformanceData();
	        this.clearPerfDataTimer();
	        this.setPerfDataTimer();
	        this.euplBreakDown = {};
	        this.serverMetrics = {};
	        this.logMessageInConsole("Reset performance Logger Done");
	        this.clearResourceTimings();
	        this.clearMarks();
	    };
	    RUMOneLogger.prototype.logPerformanceData = function (key, value) {
	        if (!key || !this.performanceData || !this.verifyPropertyMatchingSchema(key)) {
	            return;
	        }
	        this.getPerformanceData();
	        this.performanceData[key] = value;
	    };
	    RUMOneLogger.prototype.getPerformanceDataPropertyValue = function (key) {
	        if (!this.performanceData || !key || !this.verifyPropertyMatchingSchema(key)) {
	            return null;
	        }
	        return this.performanceData[key];
	    };
	    RUMOneLogger.prototype.verifyPropertyMatchingSchema = function (propertyName) {
	        var properties = this.getRUMOnePropertyNames(this.performanceData);
	        return properties.join().indexOf(propertyName) !== -1;
	    };
	    RUMOneLogger.prototype.addExpectedControl = function (control) {
	        if (this.expectedControls.indexOf(control) === -1) {
	            this.expectedControls.push(control);
	        }
	    };
	    RUMOneLogger.prototype.expectingControl = function (control) {
	        return this.expectedControls.indexOf(control) >= 0;
	    };
	    RUMOneLogger.prototype.writeServerCorrelationId = function (correlationId) {
	        if (!this.isCollected('ServerCorrelationId')) {
	            this.logPerformanceData('ServerCorrelationId', correlationId);
	        }
	    };
	    RUMOneLogger.prototype.writeServerUrl = function (url) {
	        if (!this.isCollected('ServerUrl')) {
	            var serverUrl = url || window.location.href;
	            this.logPerformanceData('ServerUrl', serverUrl);
	        }
	    };
	    RUMOneLogger.prototype.writeServerSideLatency = function (duration, iisLatency) {
	        if (!this.isCollected('ServerRequestDuration')) {
	            this.logPerformanceData('ServerRequestDuration', duration);
	            this.logPerformanceData('IISLatency', iisLatency);
	        }
	    };
	    RUMOneLogger.prototype.writeControlPerformanceData = function (controlData) {
	        if (controlData) {
	            var foundControl = this.controls.filter(function (control) {
	                return control.controlId === controlData.controlId;
	            });
	            if (foundControl.length === 0) {
	                this.controls.push(controlData);
	            }
	        }
	    };
	    RUMOneLogger.prototype.writeAPICallPerformanceData = function (apiData) {
	        if (apiData) {
	            this.apis.push(apiData);
	        }
	    };
	    RUMOneLogger.prototype.readAPICallPerformanceData = function () {
	        return this.apis;
	    };
	    RUMOneLogger.prototype.writeAppCache = function (appCache) {
	        if (!this.isCollected('AppCache')) {
	            this.logPerformanceData('AppCache', appCache);
	        }
	    };
	    RUMOneLogger.prototype.writePageTransitionType = function (pageTransitionType, overwrite) {
	        if ((!this.isCollected('PageTransitionType') || overwrite) &&
	            !RUMOneLogger.isNullOrUndefined(pageTransitionType) &&
	            (pageTransitionType === PageTransitionType_1.default.fullPageLoad || pageTransitionType === PageTransitionType_1.default.none || pageTransitionType === PageTransitionType_1.default.onePageAppNavigation)) {
	            this.logPerformanceData('PageTransitionType', pageTransitionType);
	        }
	    };
	    RUMOneLogger.prototype.writeScenarioId = function (scenarioId, overwrite) {
	        if (!this.isCollected('ScenarioId') || overwrite) {
	            this.logPerformanceData('ScenarioId', scenarioId);
	        }
	    };
	    RUMOneLogger.prototype.collectW3CPerfTimings = function () {
	        if (!this.isW3cTimingCollected) {
	            var w3cTimeStampNames = ['navigationStart', 'unloadEventStart', 'unloadEventEnd', 'fetchStart', 'redirectStart', 'redirectEnd', 'domainLookupStart', 'domainLookupEnd', 'connectStart', 'secureConnectionStart', 'connectEnd', 'requestStart', 'responseStart', 'responseEnd', 'domLoading', 'domComplete', 'loadEventStart', 'loadEventEnd'];
	            var perfTimingObject = this.getWindowPerfTimingObject();
	            if (perfTimingObject) {
	                for (var index = 0; index < w3cTimeStampNames.length; index++) {
	                    var w3cObject = perfTimingObject[w3cTimeStampNames[index]];
	                    if (w3cObject) {
	                        this.logPerformanceData(this.getW3cTimingName(w3cTimeStampNames[index]), Number(w3cObject));
	                    }
	                }
	                this.isW3cTimingCollected = true;
	            }
	        }
	    };
	    RUMOneLogger.prototype.collectW3cResourceTimings = function () {
	        if (!this.isW3cResourceTimingCollected && window.performance && window.performance.getEntriesByType) {
	            var allRequests = performance.getEntriesByType("resource");
	            var iFrames = document.getElementsByTagName("iframe");
	            for (var index = 0; index < iFrames.length; index++) {
	                var iFramePerformance = null;
	                try {
	                    iFramePerformance = iFrames[index].contentWindow.performance;
	                }
	                catch (e) {
	                }
	                if (iFramePerformance && iFramePerformance.getEntriesByType) {
	                    allRequests.concat(iFramePerformance.getEntriesByType("resource"));
	                }
	            }
	            var fromSources = {};
	            fromSources["SharePoint"] = function (element) { return /\.sharepoint\.com|\.spoppe\.com/i.test(element.name); }; //matching sharepoint.com or spoppe.com
	            fromSources["CDN"] = function (element) { return /(cdn(ppe)?|static(ppe)?)\.sharepointonline\.com|\.akamaihd\.net/i.test(element.name); }; //matching cdn(ppe)sharepointonline.com or adamaihd.net
	            fromSources["ThirdParty"] = function (element) { return !fromSources["SharePoint"](element) && !fromSources["CDN"](element); }; // all requests other than sharepoint requests or cdn requests
	            var types = {};
	            types["ASPX"] = function (element) { return /\.aspx/i.test(element.name); };
	            types["JS"] = function (element) { return /script/i.test(element.initiatorType); };
	            types["CSS"] = function (element) { return /link|css/i.test(element.initiatorType); };
	            types["IMG"] = function (element) { return /img/i.test(element.initiatorType); };
	            var sources = Object.keys(fromSources);
	            for (var index = 0; index < sources.length; index++) {
	                var source = sources[index];
	                var requests = this.categorizeResourceRequests(allRequests, {
	                    from: fromSources[source],
	                    requestType: null //match any type to get total request count for this source
	                });
	                this.logPerformanceData(source + "RequestCountTotal", requests.length); //SharePoint|CDN|ThirdParty resource request count
	                var typeKeys = Object.keys(types);
	                for (var typeIndex = 0; typeIndex < typeKeys.length; typeIndex++) {
	                    var type = typeKeys[typeIndex];
	                    this.logPerformanceData(source + "RequestCount" + type, this.categorizeResourceRequests(requests, {
	                        from: null,
	                        requestType: types[type]
	                    }).length); //SharePoint|CDN|ThirdParty ASPX resource request count
	                }
	                if (requests.length > 0) {
	                    this.logPerformanceData(source + "RequestDownloadTime", Math.round(requests.reduce(function (sum, currentVal) {
	                        return sum + currentVal.duration;
	                    }, 0) / requests.length)); //SharePoint|CDN|ThirdParty resource request average duration
	                    // log the file names of all resource requests in a JSON string. The output after processing will looks like:
	                    // [{name: "require-db6c47e2.js", startTime: 500, duration: 100},{name: "RenderListDataAsStream", startTime: 200, duration: 10}]
	                    // The raw resource name before this processing is "https://msft.spoppe.com/teams/SPGroups/_api/web/GetList(@listUrl)/RenderListDataAsStream?Paged=TRUE&p_FileLeafRef=test%2eurl&p_ID=213&PageFirstRow=121&View=6eab4254-2f2f-4086-91c0-549ae900cc93&@listUrl=%27%2Fteams%2FSPGroups%2FVNextDocLib%27"
	                    var files = JSON.stringify(requests.map(function (timing) {
	                        return {
	                            name: timing.name.split("/").map(function (urlToken) {
	                                return urlToken.split("?")[0];
	                            }).filter(function (urlToken) {
	                                return urlToken && urlToken.length > 0;
	                            }).slice(-1)[0].replace(/\(.*?\)/g, '()'),
	                            startTime: Math.round(timing.startTime),
	                            duration: Math.round(timing.duration)
	                        };
	                    }));
	                    this.logPerformanceData(source + "RequestNames", files);
	                }
	            }
	            this.isW3cResourceTimingCollected = true;
	        }
	    };
	    RUMOneLogger.prototype.saveTempData = function (key, value) {
	        this.tempData[key] = value;
	    };
	    RUMOneLogger.prototype.readTempData = function (key) {
	        return this.tempData[key];
	    };
	    RUMOneLogger.prototype.writeRenderTime = function (renderTime, overwrite) {
	        if (!this.isCollected('RenderTime') || overwrite) {
	            this.logPerformanceData('RenderTime', renderTime);
	        }
	    };
	    RUMOneLogger.prototype.writePreRenderTime = function (preRender) {
	        if (!this.isCollected('PreRender')) {
	            this.logPerformanceData('PreRender', preRender);
	        }
	    };
	    RUMOneLogger.prototype.writePostRenderTime = function (postRender) {
	        if (!this.isCollected('PostRender')) {
	            this.logPerformanceData('PostRender', postRender);
	        }
	    };
	    RUMOneLogger.prototype.writeDataFetchTime = function (dataFetch, overwrite) {
	        if (!this.isCollected('DataFetch') || overwrite) {
	            this.logPerformanceData('DataFetch', dataFetch);
	        }
	    };
	    RUMOneLogger.prototype.isRunning = function () {
	        return !(this.dataState === PerformanceDataState.Uploaded || this.dataState === PerformanceDataState.TimeOut);
	    };
	    RUMOneLogger.prototype.writeEUPLBreakdown = function (euplBreakdown, overwrite) {
	        if (euplBreakdown) {
	            try {
	                var breakdown = JSON.parse(euplBreakdown);
	                for (var key in breakdown) {
	                    if (!breakdown.hasOwnProperty(key)) {
	                        continue;
	                    }
	                    this.addEUPLBreakdown(key, breakdown[key], overwrite);
	                }
	            }
	            catch (e) {
	                // in case the euplBreakdown is invalid JSON
	                this.logMessageInConsole("Failed to write EUPL breakdown data:" + e.toString());
	            }
	        }
	    };
	    RUMOneLogger.prototype.addEUPLBreakdown = function (name, value, overwrite) {
	        if (name && !RUMOneLogger.isNullOrUndefined(value)) {
	            if (RUMOneLogger.isNullOrUndefined(this.euplBreakDown[name]) || overwrite) {
	                this.euplBreakDown[name] = value;
	            }
	        }
	    };
	    RUMOneLogger.prototype.addServerMetrics = function (metric, overwrite) {
	        if (metric) {
	            for (var key in metric) {
	                if (key && !RUMOneLogger.isNullOrUndefined(metric[key]) &&
	                    (RUMOneLogger.isNullOrUndefined(this.serverMetrics[key]) || overwrite)) {
	                    this.serverMetrics[key] = metric[key];
	                }
	            }
	        }
	    };
	    RUMOneLogger.prototype.readControlPerformanceData = function () {
	        return this.controls;
	    };
	    RUMOneLogger.prototype.mark = function (name) {
	        if (window.performance && window.performance.mark) {
	            window.performance.mark(MARKER_PREFIX + name);
	        }
	    };
	    RUMOneLogger.prototype.clearResourceTimings = function () {
	        var perfObject = window.self["performance"];
	        if (perfObject && perfObject.clearResourceTimings) {
	            perfObject.clearResourceTimings();
	        }
	    };
	    RUMOneLogger.prototype.collectMarks = function () {
	        var _this = this;
	        if (window.performance && window.performance.getEntriesByType) {
	            var marks_1 = {};
	            window.performance.getEntriesByType("mark").filter(function (mark) {
	                return mark.name.lastIndexOf(MARKER_PREFIX, 0) === 0;
	            }).forEach(function (mark) {
	                if (_this.markerIndex < RUMOneLogger.MAX_MARKS) {
	                    var markName = mark.name.substr(MARKER_PREFIX.length) + (".mark" + _this.markerIndex++);
	                    marks_1[markName] = Math.round(mark.startTime); // covert to rumone collected marks to object and merge to EUPL Breakdown
	                }
	            });
	            this.writeEUPLBreakdown(JSON.stringify(marks_1));
	        }
	    };
	    RUMOneLogger.prototype.clearMarks = function () {
	        if (window.performance && window.performance.getEntriesByType && window.performance.clearMarks) {
	            window.performance.getEntriesByType("mark").filter(function (mark) {
	                return mark.name.lastIndexOf(MARKER_PREFIX, 0) === 0;
	            }).forEach(function (mark) {
	                window.performance.clearMarks(mark.name);
	            });
	        }
	        this.markerIndex = 0;
	    };
	    RUMOneLogger.prototype.logMessageInConsole = function (message) {
	        try {
	            if ('sessionStorage' in window && window.sessionStorage) {
	                var debugStr = window.sessionStorage["enableRUMOneDebugging"];
	                var debug = debugStr && debugStr.toLowerCase() === "true";
	            }
	        }
	        catch (e) {
	        }
	        if (debug && typeof console !== "undefined" && console) {
	            console.log(message);
	        }
	    };
	    RUMOneLogger.prototype.logObjectForDebugging = function (propertyName, dictProperties) {
	        var logMessageText = propertyName + " : " + JSON.stringify(dictProperties);
	        this.logMessageInConsole(logMessageText);
	    };
	    RUMOneLogger.prototype.isCollected = function (name) {
	        return !RUMOneLogger.isNullOrUndefined(this.getPerformanceDataPropertyValue(name));
	    };
	    RUMOneLogger.prototype.getRUMOnePropertyNames = function (obj) {
	        var names = [];
	        var index = 0;
	        if (!RUMOneLogger.isNullOrUndefined(obj)) {
	            for (var property in obj) {
	                if (obj.hasOwnProperty(property)) {
	                    names[index++] = property;
	                }
	            }
	        }
	        return names;
	    };
	    RUMOneLogger.prototype.setPerfDataTimer = function () {
	        this.perfDataTimer = this.async.setTimeout(this.loopForDataCompleteness, RUMOneLogger.CHECK_INTERVAL);
	    };
	    RUMOneLogger.prototype.clearPerfDataTimer = function () {
	        if (!RUMOneLogger.isNullOrUndefined(this.perfDataTimer)) {
	            this.async.clearTimeout(this.perfDataTimer);
	            this.perfDataTimer = null;
	        }
	    };
	    RUMOneLogger.prototype.categorizeResourceRequests = function (requests, categorizer) {
	        var ret = [];
	        for (var index = 0; index < requests.length; index++) {
	            var request = requests[index];
	            if ((!categorizer.from || categorizer.from(request)) && (!categorizer.requestType || categorizer.requestType(request))) {
	                ret.push(request);
	            }
	        }
	        return ret;
	    };
	    RUMOneLogger.prototype.collectSupplementaryData = function () {
	        this.setAPIDataToRUMOne();
	        this.collectMarks();
	        this.writeServerUrl(null);
	        this.setBrowseInfo();
	        this.setReferrer();
	        this.logPerformanceData('ServerMetrics', JSON.stringify(this.serverMetrics));
	        this.logPerformanceData('EUPLBreakdown', JSON.stringify(this.euplBreakDown));
	    };
	    RUMOneLogger.prototype.loopForDataCompleteness = function () {
	        this.clearPerfDataTimer();
	        this.logObjectForDebugging("RUMONE: ", this.performanceData);
	        this.logObjectForDebugging("RUMOne DataState: ", String(this.getReadableDataState(this.dataState)));
	        this.logObjectForDebugging("Control Performance Data: ", this.controls);
	        this.logObjectForDebugging("API Performance Data: ", this.apis);
	        this.logObjectForDebugging("Temp Data: ", this.tempData);
	        this.logObjectForDebugging("EUPLBreakdown: ", this.euplBreakDown);
	        this.logObjectForDebugging("ServerMetrics: ", this.serverMetrics);
	        this.logMessageInConsole("====================================================================");
	        if (!this.isRunning()) {
	            return;
	        }
	        var collected = true;
	        var missedKeyMetrics = [];
	        for (var i = 0; i < RUMOneLogger.KeyMetrics.length; i++) {
	            var keyMetricValue = this.getPerformanceDataPropertyValue(RUMOneLogger.KeyMetrics[i]);
	            if (RUMOneLogger.isNullOrUndefined(keyMetricValue)) {
	                collected = false;
	                missedKeyMetrics.push(RUMOneLogger.KeyMetrics[i]);
	            }
	        }
	        this.dataState = collected ? PerformanceDataState.ReadyToUpload : PerformanceDataState.Incomplete;
	        if (this.dataState === PerformanceDataState.Incomplete) {
	            if (Number((new Date()).getTime()) - Number(this.dataStartTime) > RUMOneLogger.ERROR_TIMEOUT) {
	                this.dataState = PerformanceDataState.TimeOut;
	                this.collectSupplementaryData();
	                this.uploadPerfData();
	                this.reportErrors('TimeOut', 'Did not get key perf metrics in ' + String(RUMOneLogger.ERROR_TIMEOUT) + ' milliseconds. Missed metrics: ' + missedKeyMetrics.join() + '.');
	            }
	            else {
	                this.processControlPerfData();
	                if (this.readyToComputeEUPL()) {
	                    this.setEUPL();
	                }
	            }
	        }
	        else {
	            this.collectSupplementaryData();
	            try {
	                this.uploadPerfData();
	            }
	            catch (e) {
	                (function (errorText) {
	                    if (typeof console !== "undefined" && Boolean(console)) {
	                        console.error(errorText);
	                    }
	                })("PerformanceLogger error writing RUMOne data: " + String(e));
	            }
	            this.dataState = PerformanceDataState.Uploaded;
	        }
	        this.setPerfDataTimer();
	    };
	    RUMOneLogger.prototype.getReadableDataState = function (_dataState) {
	        for (var key in PerformanceDataState) {
	            if (_dataState === Number(PerformanceDataState[key])) {
	                return key;
	            }
	        }
	        return 'NaN';
	    };
	    RUMOneLogger.prototype.writeControlDataToRUMOne = function (controlData) {
	        var _this = this;
	        if (controlData) {
	            var indexes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].filter(function (index) {
	                return !_this.isCollected("Control" + index + "Id");
	            });
	            var index = indexes.length > 0 ? indexes[0] : -1;
	            if (index > 0) {
	                this.logPerformanceData("Control" + index + "Id", controlData.controlId);
	                this.logPerformanceData("Control" + index + "RenderTime", controlData.renderTime);
	            }
	        }
	    };
	    RUMOneLogger.prototype.processControlPerfData = function () {
	        for (var index = 0; index < this.controls.length; index++) {
	            var control = this.controls[index];
	            if (!Boolean(control.renderTime) && control.renderTimeRequiredDataChecker(this, control)) {
	                control.renderTime = control.renderTimeCalculator(this, control);
	                this.writeControlDataToRUMOne(control);
	            }
	        }
	    };
	    RUMOneLogger.prototype.readyToComputeEUPL = function () {
	        var readyControls = 0;
	        for (var index = 0; index < this.expectedControls.length; index++) {
	            var keyControl = this.lookUpControls(this.expectedControls[index], this.controls);
	            if (keyControl && Boolean(keyControl.renderTime)) {
	                readyControls++;
	            }
	        }
	        return this.expectedControls.length > 0 && this.expectedControls.length === readyControls;
	    };
	    RUMOneLogger.prototype.lookUpControls = function (_controlId, _controls) {
	        if (_controls) {
	            for (var index = 0; index < _controls.length; index++) {
	                if (_controlId === _controls[index].controlId) {
	                    return _controls[index];
	                }
	            }
	        }
	        return null;
	    };
	    RUMOneLogger.prototype.setEUPL = function () {
	        if (!this.isCollected('EUPL')) {
	            var eupl = 0;
	            for (var index = 0; index < this.controls.length; index++) {
	                var controlData = this.controls[index];
	                if (Boolean(controlData.renderTime) && eupl < controlData.renderTime) {
	                    eupl = controlData.renderTime;
	                }
	            }
	            this.logPerformanceData('EUPL', eupl);
	        }
	    };
	    RUMOneLogger.prototype.setBrowseInfo = function () {
	        this.logPerformanceData('Browser', this._platformDetection.browserName + this._platformDetection.browserMajor);
	        this.logPerformanceData('BrowserIsMobile', this._platformDetection.isMobile);
	    };
	    RUMOneLogger.prototype.setAPIDataToRUMOne = function () {
	        var calls = 0;
	        var durationSum = 0;
	        for (var index = 0; index < this.apis.length; index++) {
	            var apiData = this.apis[index];
	            if (apiData) {
	                calls++;
	                durationSum += apiData.duration;
	                // only take the function part of the API url to avoid cosmos data scrubber
	                // url before processing: /teams/SPGroups/_api/web/GetList(@listUrl)/RenderListDataAsStream?Paged=TRUE&p_FileLeafRef=test%2eurl&p_ID=213&PageFirstRow=121&View=6eab4254-2f2f-4086-91c0-549ae900cc93&@listUrl=%27%2Fteams%2FSPGroups%2FVNextDocLib%27"
	                // url after processing: RenderListDataAsStream
	                apiData.url = apiData.url.split("/").map(function (s) { return s.split("?")[0]; }).slice(-1)[0].replace(/\(.*?\)/g, '()');
	            }
	        }
	        this.logPerformanceData('APICallCount', calls);
	        this.logPerformanceData('APICallDurationSum', durationSum);
	        this.logPerformanceData('APICalls', JSON.stringify(this.apis));
	    };
	    RUMOneLogger.prototype.setReferrer = function () {
	        if (!this.isCollected('Referrer')) {
	            this.logPerformanceData('Referrer', document.referrer);
	        }
	    };
	    RUMOneLogger.prototype.getW3cTimingName = function (timingName) {
	        if (timingName !== 'secureConnectionStart') {
	            return 'W3c' + timingName.charAt(0).toUpperCase() + timingName.slice(1);
	        }
	        else {
	            return 'W3cSecureConnectStart'; // to workaround a RUMOne schema issue W3cSecureConnectStart should be W3cSecureConnectionStart
	        }
	    };
	    RUMOneLogger.prototype.getWindowPerfTimingObject = function () {
	        var perfObject = window.self["performance"];
	        if (!RUMOneLogger.isNullOrUndefined(perfObject) && !RUMOneLogger.isNullOrUndefined(perfObject.timing)) {
	            return perfObject.timing;
	        }
	        return null;
	    };
	    RUMOneLogger.prototype.uploadPerfData = function () {
	        if (this.performanceData && this.loggingFunc &&
	            (this.dataState === PerformanceDataState.ReadyToUpload ||
	                this.dataState === PerformanceDataState.TimeOut)) {
	            this.loggingFunc("RUMOne", this.getPerformanceData());
	        }
	    };
	    RUMOneLogger.prototype.reportErrors = function (reason, message) {
	        var errorObj = new RUMOneErrorsSLAPI_1.default();
	        errorObj.Reason = reason;
	        errorObj.Message = message;
	        if (this.loggingFunc) {
	            this.loggingFunc("RUMOneErrors", errorObj);
	        }
	    };
	    return RUMOneLogger;
	}());
	RUMOneLogger.rumOneLogger = null;
	RUMOneLogger.CHECK_INTERVAL = 100; // in milliseconds
	RUMOneLogger.ERROR_TIMEOUT = 30000; // in milliseconds
	RUMOneLogger.MAX_MARKS = 50; // suppport maximum 50 perf markers
	RUMOneLogger.KeyMetrics = ['EUPL', 'ScenarioId'];
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = RUMOneLogger;


/***/ },
/* 59 */
/***/ function(module, exports) {

	"use strict";
	// OneDrive:IgnoreCodeCoverage
	var PageTransitionType;
	(function (PageTransitionType) {
	    PageTransitionType[PageTransitionType["none"] = 0] = "none";
	    PageTransitionType[PageTransitionType["fullPageLoad"] = 4] = "fullPageLoad";
	    PageTransitionType[PageTransitionType["onePageAppNavigation"] = 5] = "onePageAppNavigation";
	})(PageTransitionType || (PageTransitionType = {}));
	;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = PageTransitionType;


/***/ },
/* 60 */
/***/ function(module, exports) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	//Intentionally Override the normal camel casing style to title casing style because the schema has to match exactly the server side schema which is Title casing.
	//Please do not change back to camel casing.
	var RUMOneSLAPI = (function () {
	    function RUMOneSLAPI() {
	        this.ServerCorrelationId = null;
	        this.ScenarioId = null;
	        this.EUPL = undefined;
	        this.ServerUrl = null;
	        this.Browser = null;
	        this.ClientIP = null;
	        this.UserAgent = null;
	        this.Flights = null;
	        this.PageTransitionType = undefined;
	        this.AppCache = undefined;
	        this.FolderNav = undefined;
	        this.InitiationTimeOffset = undefined;
	        this.ServerRequestDuration = undefined;
	        this.IISLatency = undefined;
	        this.TTFB = undefined;
	        this.TTLB = undefined;
	        this.ParseTime = undefined;
	        this.RenderTime = undefined;
	        this.Control1Id = null;
	        this.Control1RenderTime = undefined;
	        this.Control2Id = null;
	        this.Control2RenderTime = undefined;
	        this.Control3Id = null;
	        this.Control3RenderTime = undefined;
	        this.Control4Id = null;
	        this.Control4RenderTime = undefined;
	        this.SharePointRequestCountTotal = undefined;
	        this.SharePointRequestCountASPX = undefined;
	        this.SharePointRequestCountJS = undefined;
	        this.SharePointRequestCountCSS = undefined;
	        this.SharePointRequestCountIMG = undefined;
	        this.SharePointRequestCountNoneCached = undefined;
	        this.SharePointRequestBytes = undefined;
	        this.SharePointRequestDownloadTime = undefined;
	        this.CDNRequestCountTotal = undefined;
	        this.CDNRequestCountASPX = undefined;
	        this.CDNRequestCountJS = undefined;
	        this.CDNRequestCountCSS = undefined;
	        this.CDNRequestCountIMG = undefined;
	        this.CDNRequestCountNoneCached = undefined;
	        this.CDNRequestBytes = undefined;
	        this.CDNRequestDownloadTime = undefined;
	        this.ThirdPartyRequestCountTotal = undefined;
	        this.ThirdPartyRequestCountASPX = undefined;
	        this.ThirdPartyRequestCountJS = undefined;
	        this.ThirdPartyRequestCountCSS = undefined;
	        this.ThirdPartyRequestCountIMG = undefined;
	        this.ThirdPartyRequestCountNoneCached = undefined;
	        this.ThirdPartyRequestBytes = undefined;
	        this.ThirdPartyRequestDownloadTime = undefined;
	        this.FromEdge = undefined;
	        this.APICallCount = undefined;
	        this.APICallDurationSum = undefined;
	        this.PreRender = undefined;
	        this.DataFetch = undefined;
	        this.PostRender = undefined;
	        this.W3cNavigationStart = undefined;
	        this.W3cUnloadEventStart = undefined;
	        this.W3cUnloadEventEnd = undefined;
	        this.W3cFetchStart = undefined;
	        this.W3cRedirectStart = undefined;
	        this.W3cRedirectEnd = undefined;
	        this.W3cDomainLookupStart = undefined;
	        this.W3cDomainLookupEnd = undefined;
	        this.W3cConnectStart = undefined;
	        this.W3cSecureConnectStart = undefined;
	        this.W3cConnectEnd = undefined;
	        this.W3cRequestStart = undefined;
	        this.W3cResponseStart = undefined;
	        this.W3cResponseEnd = undefined;
	        this.W3cDomLoading = undefined;
	        this.W3cDomLoadEnd = undefined;
	        this.W3cLoadEventStart = undefined;
	        this.W3cLoadEventEnd = undefined;
	        this.MDSDownloadStart = undefined;
	        this.MDSParseDeltaStart = undefined;
	        this.MDSParseDeltaEnd = undefined;
	        this.MDSGCStart = undefined;
	        this.MDSGCEnd = undefined;
	        this.MDSCSSStart = undefined;
	        this.MDSCSSEnd = undefined;
	        this.MDSInnerHTMLStart = undefined;
	        this.MDSScriptLoaderStart = undefined;
	        this.MDSScriptLoaderEnd = undefined;
	        this.MDSAnimationStart = undefined;
	        this.MDSAnimationEnd = undefined;
	        this.MDSParallelDownloadStart = undefined;
	        this.MDSParallelDownloadEnd = undefined;
	        this.APICalls = undefined;
	        this.SharePointRequestNames = undefined;
	        this.CDNRequestNames = undefined;
	        this.ThirdPartyRequestNames = undefined;
	        this.EUPLBreakdown = undefined;
	        this.Control5Id = null;
	        this.Control5RenderTime = undefined;
	        this.Control6Id = null;
	        this.Control6RenderTime = undefined;
	        this.Control7Id = null;
	        this.Control7RenderTime = undefined;
	        this.Control8Id = null;
	        this.Control8RenderTime = undefined;
	        this.Control9Id = null;
	        this.Control9RenderTime = undefined;
	        this.Control10Id = null;
	        this.Control10RenderTime = undefined;
	        this.ServerMetrics = null;
	        this.Referrer = null;
	        this.BrowserIsMobile = undefined;
	    }
	    return RUMOneSLAPI;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = RUMOneSLAPI;


/***/ },
/* 61 */
/***/ function(module, exports) {

	// OneDrive:IgnoreCodeCoverage
	//Intentionally Override the normal camel casing style to title casing style because the schema has to match exactly the server side schema which is Title casing.
	//Please do not change back to camel casing.
	"use strict";
	var RUMOneErrorsSLAPI = (function () {
	    function RUMOneErrorsSLAPI() {
	        this.Reason = null;
	        this.Message = null;
	    }
	    return RUMOneErrorsSLAPI;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = RUMOneErrorsSLAPI;


/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var SingleEventBase_1 = __webpack_require__(44);
	exports.RUMOneDataUpload = SingleEventBase_1.createSingleEvent({
	    eventName: 'RUMOneDataUpload,',
	    shortEventName: 'RUMOneDataUpload'
	}, {
	    streamName: 1 /* String */,
	    dictionary: 4 /* Object */
	});
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = exports.RUMOneDataUpload;


/***/ },
/* 63 */
/***/ function(module, exports) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	/**
	 * Use PlatformDetection to evaluate which user experience makes sense for the user's
	 * platform. NOTE: This class is NOT COMPLETE! Meaning not all values are parsed out of
	 * the user agent. If something is missing that you need, add it and add unit tests.
	 * WARNING: Avoid using browser checks when you can use detection techniques for caps checking.
	 */
	var PlatformDetection = (function () {
	    function PlatformDetection(agent) {
	        // OS checks
	        this.isWindows = false;
	        this.isWinPhone = false;
	        this.isMac = false;
	        this.isIOS = false;
	        this.isAndroid = false;
	        this.isWindows10 = false;
	        this.isWindows81 = false;
	        this.isWindows7 = false;
	        // Check to see if we are definitely on a mobile device.
	        this.isMobile = false;
	        // Browser boolean checks
	        this.isChrome = false;
	        this.isIE = false;
	        this.isIE9 = false;
	        this.isEdge = false;
	        this.isFirefox = false;
	        this.isSafari = false;
	        // Device information
	        this.isIPad = false;
	        this.browserMinor = '0';
	        this.browserMajor = 0;
	        this.areCSS3TransitionsSupported = true;
	        this.isHtml5FileUploadSupported = false;
	        this.isFolderUploadSupported = false;
	        this.isRetinaSupported = false;
	        this.isUnlimitedStyleSheetsSupported = false;
	        this.areTouchEventsSupported = false;
	        this.isWebDavSupported = false;
	        agent = agent || (window && window.navigator && navigator.userAgent) || '';
	        this.userAgent = agent;
	        agent = agent.toLowerCase();
	        // We want to figure out which ONE browser the user is most likely on.
	        // The order of the checks is important so we're not deceived by (for example)
	        // Chrome saying that it's Safari.
	        // (Each regular expression captures the version number so we can parse it later.)
	        var match;
	        if (match = /msie (\d+)([\d.]*)/.exec(agent)) {
	            // IE <= 10 has something like "MSIE 9" in the user agent.
	            // This is also what newer versions do in compatibility mode.
	            this.isIE = true;
	            if (/msie 9/.exec(agent)) {
	                this.isIE9 = true;
	            }
	        }
	        else if (match = /trident.*rv:(\d+)([\d.]*)/.exec(agent)) {
	            // This is IE 11. Sample user agent contains:
	            // Trident/7.0; other stuff... rv:11.0
	            this.isIE = true;
	        }
	        else if (match = /edge\/(\d+)([\d.]*)/.exec(agent)) {
	            // This is Edge (it pretends to be Chrome and Safari).
	            this.isEdge = true;
	        }
	        else if (match = /firefox\/(\d+)([\d.]*)|fxios/.exec(agent)) {
	            this.isFirefox = true;
	        }
	        else if (match = /(?:chrome|crios)\/(\d+)([\d.]*)/.exec(agent)) {
	            // Note: lots of random browsers say they're Chrome and will end up in this bucket
	            this.isChrome = true;
	        }
	        else if (match = /safari\/(\d+)/.exec(agent)) {
	            this.isSafari = true;
	            match = /version\/(\d+)([\d.]*)/.exec(agent);
	        }
	        // Some other browser categories:
	        //   IE Mobile: /iemobile\/(\d+)/
	        //   IE Mobile in desktop mode: contains WPDesktop; get version from Trident version
	        //   Opera (currently goes into Chrome bucket): /opr\/(\d+)/
	        // Parse the captured version number for user's browser.
	        if (match) {
	            this.browserMajor = parseInt(match[1], 10) || 0;
	            var browserMinorVersion = match[2];
	            if (browserMinorVersion) {
	                var minorStart = browserMinorVersion.indexOf('.');
	                if (minorStart >= 0 && minorStart < browserMinorVersion.length - 1) {
	                    this.browserMinor = browserMinorVersion.substr(minorStart + 1);
	                }
	            }
	        }
	        // Parse device which gives hints about os / mobile state.
	        // Windows Phone IE sometimes pretends to be Android, so explicitly check for Windows Phone first.
	        // (wpdesktop is used by Windows Phone in desktop mode.)
	        var deviceMatch = agent.match(/windows phone|wpdesktop/) || agent.match(/ipad|iphone|ipod|android/);
	        if (deviceMatch) {
	            var device = deviceMatch[0];
	            this.isWinPhone = device === 'windows phone' || device === 'wpdesktop';
	            this.isAndroid = device === 'android';
	            this.isIOS = device === 'ipad' || device === 'ipod' || device === 'iphone';
	            this.isIPad = device === 'ipad';
	            this.isMobile = this.isWinPhone || this.isAndroid || this.isIOS;
	        }
	        else {
	            this.isMac = agent.indexOf('macintosh') !== -1;
	            this.isWindows = agent.indexOf('windows nt') !== -1;
	            this.isWindows81 = /(windows 8\.1|windows nt 6\.3)/.test(agent) && !this.isWinPhone;
	            this.isWindows10 = agent.indexOf('windows nt 10') !== -1 && !this.isWinPhone;
	            this.isWindows7 = agent.indexOf('windows nt 6.1') !== -1 && !this.isWinPhone;
	        }
	        // Other operating systems:
	        //   Chrome OS: /cros/
	        //   Linux: /linux/ (Android can also say it's Linux, so check for Android first)
	        // WARNING: Avoid using browser checks when you can use detection techniques for caps checking.
	        this.isRetinaSupported = !!(window['devicePixelRatio'] && window.devicePixelRatio > 1);
	        var input = document.createElement("input");
	        input.type = "file";
	        this.isFolderUploadSupported = "webkitdirectory" in input;
	        this.isHtml5FileUploadSupported = !!(window['File'] && (window['File'].prototype.slice || window['File'].prototype.mozSlice || window['File'].prototype.webkitSlice));
	        this.isUnlimitedStyleSheetsSupported = !this._shouldUseCssText();
	        this.areTouchEventsSupported = 'ontouchstart' in window;
	        this.isWebDavSupported = 'addBehavior' in document.createElement('div');
	        if (this.isIE && this.browserMajor <= 9) {
	            this.areCSS3TransitionsSupported = false;
	        }
	        var osVersionMatch = /[\s\(](os|os x|windows phone|windows nt|android) ([\d._]+)/.exec(agent);
	        this.osVersion = osVersionMatch ? osVersionMatch[2] : "NA";
	        // Set browser name
	        if (this.isIE) {
	            this.browserName = "IE";
	        }
	        else if (this.isEdge) {
	            this.browserName = "Edge";
	        }
	        else if (this.isChrome) {
	            this.browserName = "Chrome";
	        }
	        else if (this.isFirefox) {
	            this.browserName = "Firefox";
	        }
	        else if (this.isSafari) {
	            this.browserName = "Safari";
	        }
	        else {
	            this.browserName = "NA";
	        }
	        if (this.isWindows) {
	            this.osName = "Windows";
	        }
	        else if (this.isWinPhone) {
	            this.osName = "Windows Phone";
	        }
	        else if (this.isMac) {
	            this.osName = "OSX";
	        }
	        else if (this.isIOS) {
	            this.osName = "IOS";
	        }
	        else if (this.isAndroid) {
	            this.osName = "Android";
	        }
	        else {
	            this.osName = "NA";
	        }
	    }
	    /**
	     * Checks to see if styleSheet exists as a property off of a style element.
	     * This will determine if style registration should be done via cssText (<= IE9) or not
	     */
	    PlatformDetection.prototype._shouldUseCssText = function () {
	        var emptyStyle = document.createElement("style");
	        emptyStyle.type = "text/css";
	        return !!emptyStyle["styleSheet"];
	    };
	    return PlatformDetection;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = PlatformDetection;


/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ErrorHelper_1 = __webpack_require__(50);
	var BeaconBase_1 = __webpack_require__(65);
	var BeaconCache_1 = __webpack_require__(69);
	var BaseDataStore_1 = __webpack_require__(70);
	var DataStoreCachingType_1 = __webpack_require__(71);
	var LogProcessor_1 = __webpack_require__(72);
	var Beacon;
	(function (Beacon) {
	    "use strict";
	    var LOGGING_REQUEST_TIMEOUT = 10000; // 10 seconds
	    var FLUSH_TIMEOUT = 5000; // 5 seconds
	    var BEACON_BATCH_SIZE = 100;
	    var BEACON_MAX_CRITICAL_FLUSH_INTERVAL_SIZE = 5000; // 5 seconds
	    // SLAPI
	    var SLAPI_STREAM_ID = 1234;
	    var SLAPI_JSON_VERSION = "V1";
	    var SLAPI_IDX_VERSION = 0;
	    var SLAPI_IDX_EVENTNAME = 1;
	    var SLAPI_IDX_PROPERTY_START = 2;
	    // BSQM Constants
	    var SLAPI_MAX_DATA_SIZE = 64 * 1024;
	    var SLAPI_MAX_ROWS_IN_STREAM = 1000;
	    var SLAPI_SIZE_DWORD = 4;
	    var SLAPI_SIZE_DATAPOINT_ENTRY = 3 * 4 /*SIZE_DWORD*/;
	    var SLAPI_SIZE_STREAM_ENTRY = 3 * 4 /*SIZE_DATAPOINT_ENTRY*/;
	    var SLAPI_MS_BTN_EPOCHS = 11644473600000; // Milliseconds between 1/1/1070 and 1/1/1601
	    var SLAPI_MAX_INT32 = 0xFFFFFFFF;
	    var SLAPI_MAX_SQM_DATAID = 0x7FFFFFFF;
	    var SLAPI_DATAKEY_SESSION_NORMAL = 0;
	    var SLAPI_DATAKEY_SESSION_CONTINUATION = 1;
	    var SLAPI_FLAG_BSQM_ENABLED = 0x00000010;
	    // const SLAPI_FLAG_QOS_ENABLED = 0x00000020;
	    // SQM Datapoints
	    var SLAPI_DATAID_BSQM_MAXSTREAMROWSSTREAMID = 8048;
	    var SLAPI_DATAID_BSQM_MAXSTREAMROWS = 7993;
	    var SLAPI_DATAID_SESSION_TYPE = 60;
	    var WSAStreamRow = (function () {
	        function WSAStreamRow(values) {
	            this.Tic = 0;
	            this.Vals = null;
	            var _this = this;
	            _this.Tic = _getTicks32();
	            var numValues = values.length;
	            _this.Vals = new Array(numValues);
	            for (var i = 0; i < numValues; i++) {
	                _this.Vals[i] = values[i];
	            }
	        }
	        return WSAStreamRow;
	    }());
	    var WSADatapoint = (function () {
	        function WSADatapoint(id, value) {
	            var _this = this;
	            _this.Id = id;
	            _this.Val = value;
	            _this.Tic = _getTicks32();
	        }
	        return WSADatapoint;
	    }());
	    var WSAStream = (function () {
	        function WSAStream(id, width) {
	            var _this = this;
	            _this.Id = id;
	            _this.Width = width;
	            _this.Rows = new Array(0);
	        }
	        return WSAStream;
	    }());
	    var WSAData = (function () {
	        function WSAData() {
	            this.StartTime = null;
	            this.EndTime = null;
	            this.Flags = 0;
	            this.wsaDatapoints = null;
	            this.wsaStreams = null;
	            var _this = this;
	            _this.StartTime = _getTicks64();
	            _this.EndTime = null;
	            _this.CorrelationId = null;
	            _this.Flags = SLAPI_FLAG_BSQM_ENABLED;
	            _this.wsaDatapoints = new Array(0);
	            _this.wsaStreams = new Array(0);
	        }
	        return WSAData;
	    }());
	    var _startTicks = 0;
	    var _wsaData = null;
	    var _numDatapoints = 0;
	    var _numStreams = 0;
	    var _numStreamBytes = 0;
	    var _dictStreams = null;
	    var _dictDatapoints = null;
	    var _streamRowCount = 0;
	    var _isDataAvailableForUpload = false;
	    var _isContinuation = false;
	    var _isInitialized = false;
	    var _emptyCorrelationId = '00000000-0000-0000-0000-000000000000';
	    var _eventNamePrefix = "";
	    var _store = null;
	    var _storeSize = null;
	    var _instance = null;
	    var _handlers = null;
	    if (true) {
	        try {
	            console.log("Beacon: To disable logging to the console set \"window.disableBeaconLogToConsole = true\" in the debug window");
	        }
	        catch (error) {
	        }
	    }
	    var OdbBeacon = (function (_super) {
	        __extends(OdbBeacon, _super);
	        function OdbBeacon(eventNamePrefix, handlers, cacheEnabled, correlationId, flushTimeout) {
	            if (flushTimeout === void 0) { flushTimeout = FLUSH_TIMEOUT; }
	            var _this = _super.call(this, '/_layouts/15/WsaUpload.ashx', BEACON_BATCH_SIZE, [flushTimeout], true, /* useSlidingWindow */ BEACON_MAX_CRITICAL_FLUSH_INTERVAL_SIZE, BeaconBase_1.default.DEFAULT_TOTAL_RETRIES, BeaconBase_1.default.DEFAULT_RESET_TOTAL_RETRIES_AFTER, cacheEnabled /* ignorePreviousEvents */) || this;
	            _eventNamePrefix = eventNamePrefix;
	            _handlers = handlers;
	            _store = new BaseDataStore_1.default(LogProcessor_1.default.STORE_KEY,  true ? DataStoreCachingType_1.default.sharedMemory : DataStoreCachingType_1.default.session);
	            _storeSize = _store.getValue(LogProcessor_1.default.STORE_SIZE_KEY);
	            if (!_storeSize) {
	                _storeSize = 0;
	            }
	            if (correlationId) {
	                _this._cid = correlationId;
	            }
	            return _this;
	        }
	        OdbBeacon.prototype.beacon = function () {
	            if (false) {
	                var json = _getUploadData();
	                if (json != null && json.length > 0) {
	                    var headers = {};
	                    headers["Content-Type"] = "application/json";
	                    this.sendBeacon(json, headers, LOGGING_REQUEST_TIMEOUT);
	                }
	            }
	            else if (!window["disableBeaconLogToConsole"]) {
	                try {
	                    console.log("Beacon: Uploaded to COSMOS (To disable logging to the console set \"window.disableBeaconLogToConsole = true\" in the debug window)");
	                }
	                catch (error) {
	                }
	            }
	            // Set session storage size to zero instead of clearing
	            _storeSize = 0;
	            _store.setValue(LogProcessor_1.default.STORE_SIZE_KEY, _storeSize);
	        };
	        OdbBeacon.prototype._createBeaconRequest = function (events) {
	            _SetCorrelationId(this._correlationId);
	            // Converts to SP logging format
	            for (var x = 0; x < events.length; x++) {
	                var event = events[x];
	                LogProcessor_1.default.processAndLogEvent({
	                    event: event,
	                    logFunc: function (streamName, dictProperties) {
	                        _WriteLog(streamName, dictProperties);
	                    },
	                    eventNamePrefix: _eventNamePrefix,
	                    handlers: _handlers
	                });
	            }
	            this.beacon();
	        };
	        OdbBeacon.prototype._onNewEvent = function (event) {
	            // BeaconCache puts every new event to the session storage so that Sharepoint can upload it for us
	            // if user navigates away before Beacon event. So we do nothing here.
	        };
	        Object.defineProperty(OdbBeacon.prototype, "_correlationId", {
	            get: function () {
	                // Avoid reading from the global variable if correlationId has been passed in.
	                // The _spPageContextInfo may not always exist.
	                if (this._cid) {
	                    return this._cid;
	                }
	                var spPageContextInfo = window['_spPageContextInfo'];
	                if (spPageContextInfo) {
	                    return spPageContextInfo.CorrelationId;
	                }
	                return _emptyCorrelationId;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        return OdbBeacon;
	    }(BeaconBase_1.default));
	    function addToLoggingManager(eventNamePrefix, handlers, correlationId, flushTimeout) {
	        if (!_instance) {
	            var cacheEnabled = false;
	            if (BeaconCache_1.default.instance) {
	                eventNamePrefix = BeaconCache_1.default.eventNamePrefix;
	                handlers = BeaconCache_1.default.handlers;
	                cacheEnabled = true;
	            }
	            if (!eventNamePrefix || !handlers) {
	                throw new Error("You have to pass in eventNamePrefix and IBeaconHandlers object if no BeaconCache present.");
	            }
	            _instance = new OdbBeacon(eventNamePrefix, handlers, cacheEnabled, correlationId, flushTimeout);
	            // read any events Sharepoint (or BeaconCache) put into session storage but haven't uploaded
	            for (var i = 0; i < _storeSize; i++) {
	                var item = _store.getValue(i.toString());
	                if (!item || !item['name'] || !item['props']) {
	                    continue;
	                }
	                _WriteLog(item['name'], item['props']);
	            }
	        }
	        else {
	            throw new Error("The beacon has already been added to the logging manager with event name prefix " + _eventNamePrefix + ".");
	        }
	    }
	    Beacon.addToLoggingManager = addToLoggingManager;
	    function _initialize() {
	        if (_isInitialized) {
	            return;
	        }
	        _wsaData = new WSAData();
	        _dictStreams = new Array(0);
	        _dictDatapoints = new Array(0);
	        _createStream(SLAPI_STREAM_ID, 1);
	        _isInitialized = true;
	    }
	    function _createStream(streamId, width) {
	        if (!Boolean(_dictStreams[streamId])) {
	            var wsaStream = new WSAStream(streamId, width);
	            var idxStream = _numStreams;
	            _wsaData.wsaStreams[idxStream] = wsaStream;
	            _numStreams++;
	            _numStreamBytes += SLAPI_SIZE_STREAM_ENTRY;
	            _dictStreams[streamId] = idxStream;
	        }
	    }
	    function _addToStream(streamId, dictValues) {
	        try {
	            var wsaStreamRow = new WSAStreamRow(dictValues);
	            if (_isMaxSizeReachedCheck()) {
	                return;
	            }
	            _isDataAvailableForUpload = true;
	            _setDatapoint(SLAPI_DATAID_BSQM_MAXSTREAMROWSSTREAMID, streamId);
	            var wsaStream = _wsaData.wsaStreams[_dictStreams[streamId]];
	            if (Boolean(wsaStream)) {
	                if (_streamRowCount < SLAPI_MAX_ROWS_IN_STREAM) {
	                    wsaStream.Rows[_streamRowCount++] = wsaStreamRow;
	                    _numStreamBytes += _getTotalBytesForRow(wsaStreamRow);
	                    _setDatapoint(SLAPI_DATAID_BSQM_MAXSTREAMROWS, _streamRowCount); // update row count datapoint
	                }
	                else {
	                    throw ("Beacon: MAX_ROWS_IN_STREAM exceeded for stream ID " + String(streamId));
	                }
	            }
	        }
	        catch (e) {
	            ErrorHelper_1.default.log(e);
	        }
	    }
	    function _getTotalBytesForRow(row) {
	        var numTotalBytes = SLAPI_SIZE_DWORD;
	        for (var i = 0; i < row.Vals.length; i++) {
	            var value = String(row.Vals[i]);
	            numTotalBytes += value.length * 2; // A JavaScript char is 16 bit 2 byte
	        }
	        numTotalBytes += (row.Vals.length - 1) * 6; // plus the commas and quotes when serialized
	        return numTotalBytes;
	    }
	    function _setDatapoint(datapointId, datapointValue) {
	        if (datapointId < 1 || datapointId > SLAPI_MAX_SQM_DATAID) {
	            return;
	        }
	        if (datapointValue < 0 || datapointValue > SLAPI_MAX_INT32) {
	            return;
	        }
	        var savedDatapoint = null;
	        var idxDP = _dictDatapoints[datapointId];
	        if (Boolean(idxDP)) {
	            savedDatapoint = _wsaData.wsaDatapoints[idxDP];
	        }
	        if (savedDatapoint == null) {
	            var datapoint = new WSADatapoint(datapointId, datapointValue);
	            var idxDatapoint = _numDatapoints;
	            _wsaData.wsaDatapoints[idxDatapoint] = datapoint;
	            _dictDatapoints[datapointId] = idxDatapoint;
	            _numDatapoints++;
	        }
	        else {
	            savedDatapoint.Val = datapointValue;
	        }
	    }
	    function _uploadData() {
	        if (_wsaData == null) {
	            return "";
	        }
	        try {
	            if (_isDataAvailableForUpload) {
	                // Add final datapoints
	                if (Boolean(_isContinuation)) {
	                    _setDatapoint(SLAPI_DATAID_SESSION_TYPE, SLAPI_DATAKEY_SESSION_CONTINUATION);
	                }
	                else {
	                    _setDatapoint(SLAPI_DATAID_SESSION_TYPE, SLAPI_DATAKEY_SESSION_NORMAL);
	                    _isContinuation = true;
	                }
	                _wsaData.EndTime = _getTicks64();
	                var jsonString = null;
	                try {
	                    jsonString = JSON.stringify(_wsaData);
	                }
	                catch (e) {
	                    ErrorHelper_1.default.log(e);
	                }
	                // Initialize the session data for continuation session
	                _initContinuationSession();
	                return jsonString;
	            }
	        }
	        catch (e) {
	            ErrorHelper_1.default.log(e);
	            return "";
	        }
	    }
	    function _initContinuationSession() {
	        _dictStreams = new Array(0);
	        _dictDatapoints = new Array(0);
	        _numDatapoints = 0;
	        _numStreams = 0;
	        _streamRowCount = 0;
	        _numStreamBytes = 0;
	        _numDatapoints = 0;
	        var sessID = _wsaData.CorrelationId;
	        _wsaData = new WSAData();
	        _wsaData.CorrelationId = sessID;
	        _createStream(SLAPI_STREAM_ID, 1);
	        _isDataAvailableForUpload = false;
	    }
	    function _isMaxSizeReachedCheck() {
	        var size = _numDatapoints * SLAPI_SIZE_DATAPOINT_ENTRY + _numStreamBytes;
	        if (size >= SLAPI_MAX_DATA_SIZE) {
	            _instance.beacon();
	            size = _numDatapoints * SLAPI_SIZE_DATAPOINT_ENTRY + _numStreamBytes;
	            return size >= SLAPI_MAX_DATA_SIZE;
	        }
	        return false;
	    }
	    function _SetCorrelationId(correlationId) {
	        _initialize();
	        if (Boolean(_wsaData)) {
	            if (correlationId !== null && correlationId !== undefined) {
	                _wsaData.CorrelationId = correlationId;
	            }
	            else {
	                _wsaData.CorrelationId = _emptyCorrelationId;
	            }
	        }
	    }
	    function _WriteLog(eventName, dictProperties) {
	        _initialize();
	        if ((!Boolean(eventName)) || (!Boolean(dictProperties))) {
	            return;
	        }
	        if (false) {
	            var values = new Array(SLAPI_IDX_PROPERTY_START + 1);
	            values[SLAPI_IDX_VERSION] = SLAPI_JSON_VERSION;
	            values[SLAPI_IDX_EVENTNAME] = eventName;
	            var index = SLAPI_IDX_PROPERTY_START;
	            for (var key in dictProperties) {
	                var propVal = dictProperties[key];
	                if (propVal !== undefined && propVal !== null) {
	                    if (propVal instanceof Date) {
	                        propVal = propVal.getTime();
	                    }
	                    values[index++] = key;
	                    values[index++] = propVal;
	                }
	            }
	            _addToStream(SLAPI_STREAM_ID, values);
	        }
	        else if (!window["disableBeaconLogToConsole"]) {
	            try {
	                console.log("Beacon: Logged to " + eventName + " with properties: " + JSON.stringify(dictProperties));
	            }
	            catch (error) {
	            }
	        }
	    }
	    function _getUploadData() {
	        _initialize();
	        return _uploadData();
	    }
	    function _getTicks32() {
	        var timeNow = new Date();
	        var ticks64 = timeNow.getTime();
	        if (_startTicks === 0) {
	            _startTicks = ticks64;
	        }
	        return ((1 + ticks64 - _startTicks) & 0x7FFFFFFF);
	    }
	    function _getTicks64() {
	        var timeNow = new Date();
	        var ticks64 = timeNow.getTime();
	        ticks64 = ticks64 + SLAPI_MS_BTN_EPOCHS; // Epoch change from 1/1/1070 to 1/1/1601
	        ticks64 = ticks64 * 10000; // 1ms to 100ns resolution
	        return ticks64;
	    }
	})(Beacon || (Beacon = {}));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Beacon;


/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var Manager_1 = __webpack_require__(37);
	var EventBatchCache_1 = __webpack_require__(66);
	var XHR_1 = __webpack_require__(68);
	var Beacon_event_1 = __webpack_require__(67);
	var BeaconBase = (function () {
	    function BeaconBase(endPointUrl, batchSize, flushTimeouts, useSlidingWindow, maxCriticalFlushInterval, totalRetries, resetTotalRetriesAfter, ignorePreviousEvents) {
	        var _this = this;
	        this._lastSendBeacon = 0;
	        this._endPointUrl = endPointUrl;
	        this._maxCriticalFlushInterval = maxCriticalFlushInterval;
	        this._totalRetries = totalRetries === undefined ? BeaconBase.DEFAULT_TOTAL_RETRIES : totalRetries;
	        this._totalRetriesStartValue = this._totalRetries;
	        this._resetTotalRetriesAfter = resetTotalRetriesAfter === undefined ? BeaconBase.DEFAULT_RESET_TOTAL_RETRIES_AFTER : resetTotalRetriesAfter;
	        this._ignorePreviousEvents = ignorePreviousEvents === undefined ? false : ignorePreviousEvents;
	        this._eventBatchCache = new EventBatchCache_1.default(batchSize, flushTimeouts, function (event) {
	            if (_this._onNewEvent) {
	                _this._onNewEvent(event);
	            }
	        }, function (events) {
	            // Create the beacon request
	            _this._createBeaconRequest(events);
	        }, useSlidingWindow);
	        this.init();
	    }
	    BeaconBase.prototype.sendBeacon = function (json, headers, requestTimeoutInMS) {
	        this._sendBeacon(json, headers, requestTimeoutInMS, 0);
	    };
	    BeaconBase.prototype._sendBeacon = function (json, headers, requestTimeoutInMS, retryCount) {
	        var _this = this;
	        if (retryCount === 0) {
	            this._lastSendBeacon = Manager_1.Manager.getTime();
	        }
	        var xhr = new XHR_1.default({
	            url: this._endPointUrl,
	            json: json,
	            headers: headers,
	            requestTimeoutInMS: requestTimeoutInMS
	        });
	        var beaconEvent = new Beacon_event_1.Beacon({
	            retryCount: retryCount,
	            totalRetries: this._totalRetries
	        });
	        xhr.start(function (xhr, status) {
	            beaconEvent.end({ status: status + '', success: true });
	            if (++_this._successfulLogRequests >= _this._resetTotalRetriesAfter) {
	                _this._successfulLogRequests = _this._resetTotalRetriesAfter;
	                _this._totalRetries = _this._totalRetriesStartValue;
	            }
	        }, function (xhr, status, timeout) {
	            _this._successfulLogRequests = 0;
	            beaconEvent.end({ status: status + '', success: false });
	            // Retry if we timed out since we failed
	            if (status === -2 /* timeout */ && _this._totalRetries > 0) {
	                _this._totalRetries--;
	                _this._sendBeacon(json, headers, requestTimeoutInMS, retryCount + 1);
	            }
	        });
	    };
	    BeaconBase.prototype.init = function () {
	        var _this = this;
	        var bufferedEvents = Manager_1.Manager.addLogHandler(function (event) {
	            _this.addEvent(event);
	        });
	        if (!this._ignorePreviousEvents) {
	            for (var x = 0; x < bufferedEvents.length; x++) {
	                this.addEvent(bufferedEvents[x]);
	            }
	        }
	    };
	    BeaconBase.prototype.addEvent = function (event) {
	        if (event.enabled) {
	            this._eventBatchCache.addEvent(event);
	            if (event.critical &&
	                (!this._lastSendBeacon ||
	                    Manager_1.Manager.getTime() - this._lastSendBeacon > this._maxCriticalFlushInterval)) {
	                this._eventBatchCache.flush();
	            }
	        }
	    };
	    return BeaconBase;
	}());
	BeaconBase.DEFAULT_TOTAL_RETRIES = 3;
	BeaconBase.DEFAULT_RESET_TOTAL_RETRIES_AFTER = 3;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = BeaconBase;


/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var Async_1 = __webpack_require__(56);
	var Beacon_event_1 = __webpack_require__(67);
	var ErrorHelper_1 = __webpack_require__(50);
	var EventBatchCache = (function () {
	    function EventBatchCache(maxSize, maxFlushTimes, newEventHandler, flushHandler, useSlidingWindow) {
	        this._events = [];
	        this._flushCount = 0;
	        this._async = new Async_1.default(this);
	        this._maxSize = maxSize;
	        this._newEventHandler = newEventHandler;
	        this._flushHandler = flushHandler;
	        this._maxFlushTimes = maxFlushTimes;
	        this._useSlidingWindow = useSlidingWindow;
	    }
	    EventBatchCache.prototype.addEvent = function (event) {
	        this._events.push(event);
	        if (this._newEventHandler) {
	            try {
	                this._newEventHandler(event);
	            }
	            catch (e) {
	                ErrorHelper_1.default.log(e);
	            }
	        }
	        // Dont create a timer for events that are of type beacon
	        if (Beacon_event_1.Beacon.isTypeOf(event)) {
	            return;
	        }
	        if (this._events.length >= this._maxSize) {
	            this.flush();
	        }
	        else {
	            this._setFlushTimeout(false);
	        }
	    };
	    EventBatchCache.prototype.flush = function () {
	        this._setFlushTimeout(true);
	    };
	    EventBatchCache.prototype._handleFlush = function () {
	        this._clearFlushTimeout();
	        if (this._events.length) {
	            this._flushHandler(this._events);
	            // Reset the events array
	            this._events = [];
	        }
	    };
	    EventBatchCache.prototype._clearFlushTimeout = function () {
	        if (this._flushTimeoutId) {
	            this._async.clearTimeout(this._flushTimeoutId);
	            this._flushTimeoutId = null;
	        }
	        if (this._immediateflushTimeoutId) {
	            this._async.clearTimeout(this._immediateflushTimeoutId);
	            this._immediateflushTimeoutId = null;
	        }
	    };
	    EventBatchCache.prototype._setFlushTimeout = function (immediate) {
	        var _this = this;
	        // if another immediate flush is already queued, disregard
	        if (!!this._immediateflushTimeoutId) {
	            return;
	        }
	        if (this._useSlidingWindow) {
	            this._clearFlushTimeout();
	            if (immediate) {
	                this._immediateflushTimeoutId = this._async.setTimeout(function () {
	                    _this._handleFlush();
	                }, 0);
	            }
	            else {
	                this._flushTimeoutId = this._async.setTimeout(function () {
	                    _this._handleFlush();
	                }, this._getFlushTime());
	            }
	        }
	        else {
	            if (immediate) {
	                if (!this._immediateflushTimeoutId) {
	                    this._immediateflushTimeoutId = this._async.setTimeout(function () {
	                        _this._handleFlush();
	                    }, 0);
	                }
	            }
	            else if (!this._flushTimeoutId) {
	                this._flushTimeoutId = this._async.setTimeout(function () {
	                    _this._handleFlush();
	                }, this._getFlushTime());
	            }
	        }
	    };
	    EventBatchCache.prototype._getFlushTime = function () {
	        if (this._flushCount < this._maxFlushTimes.length) {
	            var flushCount = this._flushCount;
	            this._flushCount++;
	            return this._maxFlushTimes[flushCount];
	        }
	        else {
	            return this._maxFlushTimes[this._maxFlushTimes.length - 1];
	        }
	    };
	    return EventBatchCache;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = EventBatchCache;


/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var PairedEventBase_1 = __webpack_require__(48);
	exports.Beacon = PairedEventBase_1.createPairedEvent({
	    eventName: 'Beacon,',
	    shortEventName: 'Beacon',
	    requiresParent: false
	}, {
	    name: 1 /* String */,
	    status: 1 /* String */,
	    success: 3 /* Boolean */,
	    retryCount: 2 /* Number */,
	    totalRetries: 2 /* Number */,
	    eventCount: 2 /* Number */
	});
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = exports.Beacon;


/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Async_1 = __webpack_require__(56);
	var ErrorHelper_1 = __webpack_require__(50);
	var ObjectUtil_1 = __webpack_require__(38);
	var XHR = (function () {
	    function XHR(options) {
	        this._async = new Async_1.default(this);
	        var url = options.url, _a = options.requestTimeoutInMS, requestTimeoutInMS = _a === void 0 ? XHR.DEFAULT_TIMEOUT_MS : _a, postData = options.json, _b = options.headers, headers = _b === void 0 ? {} : _b, _c = options.withCredentials, withCredentials = _c === void 0 ? false : _c, _d = options.needsCors, needsCors = _d === void 0 ? false : _d, progressCallback = options.onProgress, uploadProgressCallback = options.onUploadProgress;
	        var _e = options.method, method = _e === void 0 ? postData ? 'POST' : 'GET' : _e;
	        this._url = url;
	        this._requestTimeoutInMS = requestTimeoutInMS;
	        this._postData = postData;
	        this._headers = headers;
	        this._method = method;
	        this._withCredentials = withCredentials;
	        this._needsCors = needsCors;
	        this._progressCallback = progressCallback;
	        this._uploadProgressCallback = uploadProgressCallback;
	    }
	    XHR.prototype.abort = function (isCancelled) {
	        var aborted = this._abortRequest();
	        if (aborted && !isCancelled) {
	            this._callFailureCallback(this._request, -3 /* abort */, false);
	        }
	    };
	    XHR.prototype.start = function (successCallback, failureCallback) {
	        var _this = this;
	        this._successCallback = successCallback;
	        this._failureCallback = failureCallback;
	        var _a = this, method = _a._method, headers = _a._headers;
	        try {
	            this._request = this._getRequest();
	            var _b = this, progressCallback_1 = _b._progressCallback, uploadProgressCallback_1 = _b._uploadProgressCallback, request_1 = _b._request;
	            if (progressCallback_1) {
	                request_1.onprogress = function (event) {
	                    try {
	                        progressCallback_1(event);
	                    }
	                    catch (error) {
	                        ErrorHelper_1.default.logError(error);
	                    }
	                };
	            }
	            if (uploadProgressCallback_1) {
	                request_1.upload.onprogress = function (event) {
	                    try {
	                        uploadProgressCallback_1(event);
	                    }
	                    catch (error) {
	                        ErrorHelper_1.default.logError(error);
	                    }
	                };
	            }
	            this._async.setTimeout(function () {
	                // Check if we havent logged this event already
	                if (!_this._completed) {
	                    _this._timeoutCallback();
	                }
	            }, this._requestTimeoutInMS);
	            // Report Qos on the actual qos calls
	            request_1.onreadystatechange = function () {
	                // Check if we havent logged this event in a timeout
	                if (!_this._completed) {
	                    var DONE = 4; // Default done readystate
	                    try {
	                        DONE = request_1.DONE || 4;
	                    }
	                    catch (e) {
	                    }
	                    if (request_1.readyState === DONE) {
	                        _this._requestEndCallback();
	                    }
	                }
	            };
	            request_1.open(method, this._url, true);
	            if ("withCredentials" in request_1) {
	                request_1.withCredentials = this._withCredentials;
	            }
	            // Headers have to be set after open is called
	            for (var x in headers) {
	                request_1.setRequestHeader(x, headers[x]);
	            }
	            request_1.send(this._postData);
	        }
	        catch (error) {
	            ErrorHelper_1.default.logError(error, {
	                origin: location ? location.origin : 'unknown',
	                withCredentials: this._withCredentials,
	                requestUrl: this._url,
	                headers: ObjectUtil_1.default.safeSerialize(headers),
	                method: method
	            });
	            // abort the request and set the exception status code
	            this._abortRequest();
	            this._callFailureCallback(this._request, -1 /* exception */, false);
	        }
	    };
	    XHR.prototype._getRequest = function () {
	        var _this = this;
	        if (!this._needsCors || !window['XDomainRequest']) {
	            return new XMLHttpRequest();
	        }
	        // This is only needed for IE 9 to support CORS requests
	        // Note: we can not set headers on XDomainRequest
	        var request = new XDomainRequest();
	        request.setRequestHeader = function () { };
	        request.onprogress = function () { };
	        request.ontimeout = function () { };
	        request.onload = function () {
	            _this._requestEndCallback();
	        };
	        return request;
	    };
	    XHR.prototype._abortRequest = function () {
	        var actuallyAborted = false;
	        if (!this._completed) {
	            this._completed = true;
	            // Clear the timeout for the request
	            this._async.dispose();
	            // Cancel the request
	            try {
	                if (this._request) {
	                    this._request.abort();
	                }
	            }
	            catch (error) {
	            }
	            actuallyAborted = true;
	        }
	        return actuallyAborted;
	    };
	    XHR.prototype._timeoutCallback = function () {
	        if (!this._completed) {
	            this._abortRequest();
	            this._callFailureCallback(this._request, -2 /* timeout */, true);
	        }
	    };
	    XHR.prototype._callSuccessCallback = function (xhr, statusCode) {
	        try {
	            if (this._successCallback) {
	                this._successCallback(xhr, statusCode);
	            }
	        }
	        catch (error) {
	            ErrorHelper_1.default.log(error);
	        }
	    };
	    XHR.prototype._callFailureCallback = function (xhr, statusCode, timeout) {
	        try {
	            if (this._failureCallback) {
	                this._failureCallback(xhr, statusCode, timeout);
	            }
	        }
	        catch (error) {
	            ErrorHelper_1.default.log(error);
	        }
	    };
	    XHR.prototype._requestEndCallback = function () {
	        if (!this._completed) {
	            this._completed = true;
	            var status_1 = -1 /* exception */;
	            try {
	                // Clear the timeout for the request
	                this._async.dispose();
	                try {
	                    status_1 = this._request.status;
	                }
	                catch (error) {
	                }
	            }
	            catch (error) {
	                status_1 = -1 /* exception */;
	                ErrorHelper_1.default.log(error);
	            }
	            if (status_1 < 400 && status_1 > 0) {
	                this._callSuccessCallback(this._request, status_1);
	            }
	            else {
	                this._callFailureCallback(this._request, status_1, false);
	            }
	        }
	    };
	    return XHR;
	}());
	XHR.DEFAULT_TIMEOUT_MS = 30000;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = XHR;


/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var BaseDataStore_1 = __webpack_require__(70);
	var DataStoreCachingType_1 = __webpack_require__(71);
	var Manager_1 = __webpack_require__(37);
	var LogProcessor_1 = __webpack_require__(72);
	var BeaconCache;
	(function (BeaconCache) {
	    "use strict";
	    var _store = new BaseDataStore_1.default(LogProcessor_1.default.STORE_KEY,  true ? DataStoreCachingType_1.default.sharedMemory : DataStoreCachingType_1.default.session);
	    BeaconCache.eventNamePrefix = "";
	    BeaconCache.instance = null;
	    BeaconCache.handlers = null;
	    if (true) {
	        try {
	            console.log("Beacon: To disable logging to the console set \"window.disableBeaconLogToConsole = true\" in the debug window");
	        }
	        catch (error) {
	        }
	    }
	    var OdbBeaconCache = (function () {
	        function OdbBeaconCache(eventNamePrefix, handlers) {
	            var _this = this;
	            BeaconCache.eventNamePrefix = eventNamePrefix;
	            BeaconCache.handlers = handlers;
	            var bufferedEvents = Manager_1.Manager.addLogHandler(function (event) {
	                _this.addEvent(event);
	            });
	            // Add bufferred events to local store
	            for (var x = 0; x < bufferedEvents.length; x++) {
	                this.addEvent(bufferedEvents[x]);
	            }
	        }
	        OdbBeaconCache.prototype.addEvent = function (event) {
	            if (event.enabled) {
	                // put every new event to the session storage so that Sharepoint can upload it for us
	                // if user navigates away before Beacon event
	                LogProcessor_1.default.processAndLogEvent({
	                    event: event,
	                    logFunc: function (streamName, dictProperties) {
	                        var storeSize = _store.getValue(LogProcessor_1.default.STORE_SIZE_KEY);
	                        if (!storeSize) {
	                            storeSize = 0;
	                        }
	                        _store.setValue(storeSize.toString(), { name: streamName, props: dictProperties });
	                        _store.setValue(LogProcessor_1.default.STORE_SIZE_KEY, ++storeSize);
	                    },
	                    eventNamePrefix: BeaconCache.eventNamePrefix,
	                    handlers: BeaconCache.handlers
	                });
	            }
	        };
	        return OdbBeaconCache;
	    }());
	    function addToLoggingManager(eventNamePrefix, handlers) {
	        if (!BeaconCache.instance) {
	            BeaconCache.instance = new OdbBeaconCache(eventNamePrefix, handlers);
	        }
	        else {
	            throw new Error("The beaconCache has already been added to the logging manager with event name prefix " + eventNamePrefix + ".");
	        }
	    }
	    BeaconCache.addToLoggingManager = addToLoggingManager;
	})(BeaconCache || (BeaconCache = {}));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = BeaconCache;


/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var DataStoreCachingType_1 = __webpack_require__(71);
	// DataStore class is used for transparent caching of data in memory and/or browser storage
	// - Parameter defaultCachingType defines whether you want to use browser storage for all operations
	// and which type of storage - session or local
	// - Parameter dataStoreKey is used to prefix every key in browser storage. Actual key for browser storage
	// will be dataStoreKey + key used in setValue method.
	// - If DataStore is instantiated with some type of browser caching enabled - it will test if browser storage
	// is available and use it. If it's not it will fall back to in-memory cache.
	// - If DataStore is instantiated from two different places with same dataStoreKey and some type of
	// browser storage caching, the memory storage will be shared as well as browser storage.
	var DataStore = (function () {
	    function DataStore(dataStoreKey, defaultCachingType) {
	        if (defaultCachingType === void 0) { defaultCachingType = DataStoreCachingType_1.default.none; }
	        DataStore.init();
	        this.dataStoreKey = dataStoreKey;
	        this.defaultCachingType = defaultCachingType;
	        if (defaultCachingType === DataStoreCachingType_1.default.none) {
	            this.dataStore = {};
	        }
	        else {
	            var store = DataStore._dataStore[this.dataStoreKey];
	            if (store === undefined) {
	                DataStore._dataStore[this.dataStoreKey] = {};
	            }
	            this.dataStore = DataStore._dataStore[this.dataStoreKey];
	        }
	    }
	    DataStore.hasStorageType = function (storageType) {
	        DataStore.init();
	        switch (storageType) {
	            case DataStoreCachingType_1.default.none: return true;
	            case DataStoreCachingType_1.default.sharedMemory: return true;
	            case DataStoreCachingType_1.default.session: return !!DataStore._sessionStorage;
	            case DataStoreCachingType_1.default.local: return !!DataStore._localStorage;
	        }
	        return false;
	    };
	    DataStore.init = function () {
	        if (DataStore._initialized) {
	            return;
	        }
	        // Need a try/catch since window.localStorage can throw.
	        try {
	            if ('localStorage' in window && window.localStorage && DataStore.testStorage(window.localStorage)) {
	                DataStore._localStorage = window.localStorage;
	            }
	        }
	        catch (exUsingLocalStorage) {
	        }
	        try {
	            if ('sessionStorage' in window && window.sessionStorage && DataStore.testStorage(window.sessionStorage)) {
	                DataStore._sessionStorage = window.sessionStorage;
	            }
	        }
	        catch (exUsingSessionStorage) {
	        }
	        // Fallback logic
	        if (DataStore._localStorage == null) {
	            DataStore._localStorage = DataStore._sessionStorage;
	        }
	        DataStore._initialized = true;
	    };
	    /** Need to check whether the value in localStorage is of the correct type.
	     * In Private Browsing in Safari, for example, localStorage is accessible,
	     * but all of the non-built-in properties return undefined, and setting
	     * such a property causes an exception.
	     */
	    DataStore.testStorage = function (storage) {
	        var _testKey = "BrowserStorageTest";
	        var _testValue = "1";
	        var result = false;
	        try {
	            storage.setItem(_testKey, _testValue);
	            if (storage.getItem(_testKey) === _testValue) {
	                result = true;
	            }
	            storage.removeItem(_testKey);
	        }
	        catch (e) { }
	        return result;
	    };
	    DataStore.prototype.setValue = function (key, value, cachingTypeOverride, normalizeKey) {
	        if (normalizeKey === void 0) { normalizeKey = true; }
	        key = normalizeKey ? this.normalizeKey(key) : key;
	        this.dataStore[key] = value;
	        var storage = this.getStorage(cachingTypeOverride);
	        if (storage) {
	            try {
	                var objectsFound = [];
	                var s = JSON.stringify(value, function (key, value) {
	                    if (typeof value === 'object' && value !== null) {
	                        if (objectsFound.indexOf(value) !== -1) {
	                            // discard the key if circular dependency was found
	                            return;
	                        }
	                        // Otherwise store value in the cache
	                        objectsFound.push(value);
	                    }
	                    return value;
	                });
	                // empty cache
	                objectsFound = null;
	                storage.setItem(this.dataStoreKey + key, s);
	            }
	            catch (e) {
	            }
	        }
	    };
	    DataStore.prototype.getValue = function (key, cachingTypeOverride, normalizeKey) {
	        if (normalizeKey === void 0) { normalizeKey = true; }
	        key = normalizeKey ? this.normalizeKey(key) : key;
	        var value = this.dataStore[key];
	        var storage = this.getStorage(cachingTypeOverride);
	        if (value === undefined && storage) {
	            var s = storage.getItem(this.dataStoreKey + key);
	            if (s) {
	                try {
	                    value = JSON.parse(s);
	                    this.dataStore[key] = value;
	                }
	                catch (e) {
	                    value = undefined;
	                }
	            }
	        }
	        return value;
	    };
	    DataStore.prototype.remove = function (key, cachingTypeOverride, normalizeKey) {
	        if (normalizeKey === void 0) { normalizeKey = true; }
	        key = normalizeKey ? this.normalizeKey(key) : key;
	        var storage = this.getStorage(cachingTypeOverride);
	        if (storage) {
	            storage.removeItem(this.dataStoreKey + key);
	        }
	        delete this.dataStore[key];
	    };
	    DataStore.prototype.getStorage = function (cachingTypeOverride) {
	        var cachingType = cachingTypeOverride ? cachingTypeOverride : this.defaultCachingType;
	        switch (cachingType) {
	            case DataStoreCachingType_1.default.none:
	                return null;
	            case DataStoreCachingType_1.default.sharedMemory:
	                return null;
	            case DataStoreCachingType_1.default.session:
	                return DataStore._sessionStorage;
	            case DataStoreCachingType_1.default.local:
	                return DataStore._localStorage;
	        }
	        return null;
	    };
	    DataStore.prototype.normalizeKey = function (key) {
	        return key && key.toLowerCase() || '';
	    };
	    return DataStore;
	}());
	DataStore._sessionStorage = null;
	DataStore._localStorage = null;
	DataStore._dataStore = {};
	DataStore._initialized = false;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = DataStore;


/***/ },
/* 71 */
/***/ function(module, exports) {

	"use strict";
	var DataStoreCachingType;
	(function (DataStoreCachingType) {
	    DataStoreCachingType[DataStoreCachingType["none"] = 0] = "none";
	    DataStoreCachingType[DataStoreCachingType["session"] = 1] = "session";
	    DataStoreCachingType[DataStoreCachingType["local"] = 2] = "local";
	    DataStoreCachingType[DataStoreCachingType["sharedMemory"] = 3] = "sharedMemory";
	})(DataStoreCachingType || (DataStoreCachingType = {}));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = DataStoreCachingType;


/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var Qos_event_1 = __webpack_require__(47);
	var PLT_event_1 = __webpack_require__(73);
	var Beacon_event_1 = __webpack_require__(67);
	var UnhandledError_event_1 = __webpack_require__(74);
	var RequireJSError_event_1 = __webpack_require__(75);
	var CaughtError_event_1 = __webpack_require__(51);
	var QosError_event_1 = __webpack_require__(53);
	var Verbose_event_1 = __webpack_require__(54);
	var Engagement_event_1 = __webpack_require__(43);
	var EventBase_1 = __webpack_require__(36);
	var RUMOneDataUpload_event_1 = __webpack_require__(62);
	var DebugPriorityLevel_1 = __webpack_require__(76);
	var LogProcessor;
	(function (LogProcessor) {
	    "use strict";
	    LogProcessor.STORE_KEY = "SPCacheLogger";
	    LogProcessor.STORE_SIZE_KEY = "Size";
	    var SOURCE_V2_Engagement = "ClientV2Engagement";
	    var DEBUG_LOG_STREAM = "ReliabilityLog";
	    var USER_ENGAGEMENT_STREAM = "UserEngagement";
	    var SOURCE_V2_Reliability = "ClientV2Reliability";
	    // regex for SLAPI event names
	    var SLAPI_EVENT_NAME_ALLOW = /[^a-z0-9\.\_\-\+]+/ig;
	    var _spModuleLink = window['_spModuleLink'];
	    var _appVersion = _spModuleLink ? _spModuleLink.buildNumber : "";
	    function processAndLogEvent(params) {
	        // Ignored events
	        if (params.handlers.ignoredEventsHandler && params.handlers.ignoredEventsHandler(params.event)) {
	            return;
	        }
	        // Get the data to log
	        var logDataArray = Engagement_event_1.Engagement.isTypeOf(params.event) ? _processEngagementEvent(params.event) :
	            Qos_event_1.Qos.isTypeOf(params.event) ? _processQosEvent(params.event, params.handlers.qosEventNameHandler || null, params.handlers.qosEventExtraDataHandler || null) :
	                PLT_event_1.PLT.isTypeOf(params.event) ? _processPLTEvent(params.event) :
	                    UnhandledError_event_1.UnhandledError.isTypeOf(params.event) ? _processUnhandledErrorEvent(params.event) :
	                        RequireJSError_event_1.RequireJSError.isTypeOf(params.event) ? _processRequireJSErrorEvent(params.event) :
	                            CaughtError_event_1.CaughtError.isTypeOf(params.event) ? _processCaughtErrorEvent(params.event) :
	                                Verbose_event_1.Verbose.isTypeOf(params.event) ? _processVerboseEvent(params.event) :
	                                    Beacon_event_1.Beacon.isTypeOf(params.event) ? _processBeaconEvent(params.event) :
	                                        RUMOneDataUpload_event_1.RUMOneDataUpload.isTypeOf(params.event) ? _processRUMOneDataUploadEvent(params.event) :
	                                            null;
	        // If the log data array is not defined the event was unhandled, log
	        // the event name so is easy to discover and fix
	        if (!logDataArray) {
	            logDataArray = [{
	                    userEngagementData: {
	                        EngagementName: "UnknownEvent",
	                        Duration: 0,
	                        LogType: 0,
	                        Properties: JSON.stringify({ name: params.event.eventName }),
	                        ClientTime: params.event.eventType === EventBase_1.ClonedEventType.End ? params.event.endTime : params.event.startTime,
	                        Source: SOURCE_V2_Engagement
	                    }
	                }];
	        }
	        // Log all the data in the array adding the event prefix to the tag/name
	        for (var index = 0, length = logDataArray.length; index < length; index++) {
	            var logData = logDataArray[index];
	            if (logData.debugData) {
	                logData.debugData.Tag = _addEventPrefix(logData.debugData.Tag, params.eventNamePrefix).replace(SLAPI_EVENT_NAME_ALLOW, "");
	                params.logFunc(DEBUG_LOG_STREAM, logData.debugData);
	            }
	            if (logData.userEngagementData) {
	                // SPList: special case for Engagement events
	                // set prefix to the name of the list type
	                // to be able to track usage/engagement by list type
	                var prefix = params.eventNamePrefix;
	                if (Engagement_event_1.Engagement.isTypeOf(params.event) && prefix === 'SPList') {
	                    // prefix will be set to a list type based on list base template
	                    // if list type not found, [refix will be set back to generic SPList
	                    prefix = _getScenarioNameFromListType();
	                }
	                logData.userEngagementData.EngagementName = _addEventPrefix(logData.userEngagementData.EngagementName, prefix).replace(SLAPI_EVENT_NAME_ALLOW, "");
	                // SPList: special case for Qos events; add listBaseTemplate ID to the property bag
	                if (Qos_event_1.Qos.isTypeOf(params.event) && params.eventNamePrefix === 'SPList') {
	                    params.event.data.extraData["ListBaseTemplate"] = _getListBaseTemplate();
	                }
	                params.logFunc(USER_ENGAGEMENT_STREAM, logData.userEngagementData);
	            }
	            if (logData.rumOneData) {
	                params.logFunc(logData.rumOneData.streamName, logData.rumOneData.dictionary);
	            }
	        }
	    }
	    LogProcessor.processAndLogEvent = processAndLogEvent;
	    // get the list base template id
	    function _getListBaseTemplate() {
	        var listTemplate = -1;
	        var spPageContextInfo = window['_spPageContextInfo'];
	        if (spPageContextInfo !== undefined && spPageContextInfo !== null) {
	            listTemplate = spPageContextInfo.listBaseTemplate;
	        }
	        return listTemplate;
	    }
	    // get the name of the listType; it's SPList for the unrecognized
	    // list templates; TODO: add all templates
	    function _getScenarioNameFromListType() {
	        var scenarioName = "";
	        var listTemplate = _getListBaseTemplate();
	        switch (listTemplate) {
	            case 100:
	                scenarioName = "ListNext";
	                break;
	            case 101:
	                scenarioName = "DocsNext";
	                break;
	            case 102:
	                scenarioName = "SurveyNext";
	                break;
	            case 103:
	                scenarioName = "LinksNext";
	                break;
	            case 104:
	                scenarioName = "AnnouncementsNext";
	                break;
	            case 107:
	                scenarioName = "TasksNext";
	                break;
	            case 109:
	                scenarioName = "PicLibNext";
	                break;
	            default:
	                scenarioName = "SPList";
	                break;
	        }
	        return scenarioName;
	    }
	    // string examples: "{\"w3cResponseEnd\":2", "\"appStart\":750"
	    function _cleanString(dataPLT) {
	        var cleanString = dataPLT;
	        cleanString = cleanString.replace("{", "");
	        cleanString = cleanString.replace(/\"/gi, "");
	        cleanString = cleanString.replace("}", "");
	        return cleanString;
	    }
	    function _addEventPrefix(eventName, prefix) {
	        if (!prefix) {
	            return eventName;
	        }
	        return prefix + '.' + eventName;
	    }
	    function _getResultTypeSuffix(resultType) {
	        if (resultType === Qos_event_1.ResultTypeEnum.Success) {
	            return ".Success";
	        }
	        else if (resultType === Qos_event_1.ResultTypeEnum.Failure) {
	            return ".Failure";
	        }
	        else if (resultType === Qos_event_1.ResultTypeEnum.ExpectedFailure) {
	            return ".ExpectedFailure";
	        }
	        return "";
	    }
	    function _processRUMOneDataUploadEvent(event) {
	        if (!event.data) {
	            return [{
	                    userEngagementData: {
	                        EngagementName: "RUMOne.no_EventData",
	                        Duration: 0,
	                        LogType: 0,
	                        ClientTime: event.startTime,
	                        Source: SOURCE_V2_Engagement
	                    }
	                }];
	        }
	        var rumOneDataUpdateEventData = event.data;
	        return [{
	                rumOneData: {
	                    streamName: rumOneDataUpdateEventData.streamName,
	                    dictionary: rumOneDataUpdateEventData.dictionary
	                }
	            }];
	    }
	    function _processEngagementEvent(event) {
	        var logDataList = [];
	        // if the event has not data we will get this in COSMOS
	        // if it's a start we have only the name and append ".Start" to it
	        // else we look for resultCode and append it to data.name with result type
	        // if resultCode is not present than we append only the result type to the name
	        // i.e. serverDataGetValue.Start OR serverDataGetValue.ResponseText.GetAuth.ExpectedFailure
	        var name = "no_EngagementName";
	        var properties = "";
	        if (event.data) {
	            var engagementData = event.data;
	            if (engagementData.name) {
	                name = engagementData.name;
	            }
	            // if there is an experimentData object, it means there is an experiment so create and log a new tag for it
	            // put all the experiment data in the properties bag;
	            if (engagementData.experiment) {
	                var abExperiment = engagementData.experiment;
	                var experimentData = abExperiment.GetExperimentData();
	                logDataList.push({ userEngagementData: {
	                        EngagementName: _getExperimentEventName(experimentData, abExperiment.IsExperimentOn()),
	                        Properties: JSON.stringify(experimentData),
	                        Duration: 0,
	                        LogType: 0,
	                        ClientTime: event.startTime,
	                        Source: SOURCE_V2_Engagement
	                    } });
	            }
	            // put the extraData in the properties bag
	            properties = engagementData.extraData ? JSON.stringify(engagementData.extraData) : "";
	        }
	        logDataList.push({ userEngagementData: {
	                EngagementName: name,
	                Properties: properties,
	                Duration: 0,
	                LogType: 0,
	                ClientTime: event.startTime,
	                Source: SOURCE_V2_Engagement
	            } });
	        return logDataList;
	    }
	    function _getExperimentEventName(experimentData, isOn) {
	        var name = (experimentData.name ? experimentData.name : 'noExperimentData') +
	            '.Experiment' +
	            (isOn ? 'ON' : 'OFF');
	        return name;
	    }
	    function _processQosEvent(event, qoSEventNameHandler, qosEventExtraDataHandler) {
	        var logData = {};
	        // if the event has not data we will get this in COSMOS
	        // if it's a start we have only the name and append ".Start" to it
	        // else we look for resultCode and append it to data.name with result type
	        // if resultCode is not present than we append only the result type to the name
	        // i.e. serverDataGetValue.ResponseText.Success OR serverDataGetValue.ResponseText.GetAuth.ExpectedFailure
	        var name = "no_QosName";
	        var qosData = event.data ? event.data : null;
	        if (qosData) {
	            if (qosData.name) {
	                name = qosData.name;
	            }
	            if (qoSEventNameHandler != null) {
	                name = qoSEventNameHandler(event, name);
	            }
	            qosData.extraData = qosData.extraData || {};
	            if (qosEventExtraDataHandler != null) {
	                qosEventExtraDataHandler(event, qosData);
	            }
	            qosData.extraData["appver"] = _appVersion;
	        }
	        // Duration is calculated only when we have an END event
	        var durationTime;
	        if (event.eventType === EventBase_1.ClonedEventType.End && event.startTime && event.endTime) {
	            durationTime = event.endTime - event.startTime;
	        }
	        else {
	            durationTime = 0;
	        }
	        logData.userEngagementData = {
	            EngagementName: name,
	            Properties: qosData && qosData.extraData ? JSON.stringify(qosData.extraData) : "",
	            Duration: durationTime,
	            LogType: 0,
	            ClientTime: event.eventType === EventBase_1.ClonedEventType.End ? event.endTime : event.startTime,
	            Source: SOURCE_V2_Reliability
	        };
	        return [logData];
	    }
	    function _processBeaconEvent(event) {
	        var logData = {};
	        var durationTime;
	        if (event.eventType === EventBase_1.ClonedEventType.End && event.startTime && event.endTime) {
	            durationTime = event.endTime - event.startTime;
	        }
	        else {
	            durationTime = 0;
	        }
	        logData.userEngagementData = {
	            EngagementName: "Beacon",
	            Properties: event.data ? JSON.stringify(event.data) : "no_EventData",
	            Duration: durationTime,
	            LogType: 0,
	            ClientTime: event.eventType === EventBase_1.ClonedEventType.End ? event.endTime : event.startTime,
	            Source: SOURCE_V2_Reliability
	        };
	        return [logData];
	    }
	    function _processPLTEvent(event) {
	        if (!event.data) {
	            return [{
	                    userEngagementData: {
	                        EngagementName: "PLT.no_EventData",
	                        Duration: 0,
	                        LogType: 0,
	                        ClientTime: event.startTime,
	                        Source: SOURCE_V2_Engagement
	                    }
	                }];
	        }
	        var logDataList = [];
	        //get the data for this event
	        var pltData = event.data;
	        // this will be the prefix for the tags; i.e. PLT.SetView-Files.w3cResponseEnd
	        var name = "PLT." + pltData.name.replace(" ", "");
	        // break down the PLT data and log each one as a separate record in the stream
	        //{"name":"SetView-Files","w3cResponseEnd":424,"appStart":254,"preRender":20,"dataFetch":310,"postRender":327,"render":347,"plt":1335}
	        var dataPLT = JSON.stringify(pltData).split(',');
	        var duration = 0;
	        // iterate through data and extract each type
	        // create tags like this: PLT.<pagename>.w3cResponseEnd; PLT.<pagename>.appStart
	        for (var i = 0; i < dataPLT.length; i++) {
	            var cleanedPLTString = _cleanString(dataPLT[i]);
	            // split the string and get the name and duration
	            // special case for duration when appCacheHit is a boolean
	            var subDataPLTs = cleanedPLTString.split(':');
	            // skip the 'name' key-value pair
	            if (_cleanString(subDataPLTs[1]) !== pltData.name) {
	                if (subDataPLTs[1] === 'true') {
	                    duration = 1;
	                }
	                else if (subDataPLTs[1] === 'false' || subDataPLTs[1] === 'null') {
	                    duration = 0;
	                }
	                else {
	                    duration = parseInt(subDataPLTs[1], 10);
	                }
	                logDataList.push({ userEngagementData: {
	                        EngagementName: name + "." + subDataPLTs[0],
	                        Properties: (subDataPLTs[0] === 'appCacheHit') ? JSON.stringify(event.data) : "",
	                        Duration: duration,
	                        LogType: 0,
	                        ClientTime: event.startTime,
	                        Source: SOURCE_V2_Engagement
	                    } });
	            }
	        }
	        return logDataList;
	    }
	    function _processUnhandledErrorEvent(event) {
	        return [{
	                userEngagementData: {
	                    EngagementName: "UnhandledError",
	                    Duration: 0,
	                    LogType: 0,
	                    ClientTime: event.startTime,
	                    Source: SOURCE_V2_Engagement
	                },
	                debugData: {
	                    Tag: "UnhandledError",
	                    Level: DebugPriorityLevel_1.default.Normal,
	                    Message: event.data ? JSON.stringify(event.data) : "no_EventData",
	                    Misc: "",
	                    ClientTime: event.startTime
	                }
	            }];
	    }
	    function _processRequireJSErrorEvent(event) {
	        var logData = {};
	        var name = "RequireJSError";
	        var errorData;
	        var errorMessage;
	        if (event.data) {
	            // clone all properties so that we can omit 'message' in JSON
	            errorData = {};
	            for (var key in event.data) {
	                if (key !== "message") {
	                    errorData[key] = event.data[key];
	                }
	                else {
	                    errorMessage = event.data[key];
	                }
	            }
	        }
	        logData.userEngagementData = {
	            EngagementName: name,
	            Duration: 0,
	            LogType: 0,
	            ClientTime: event.startTime,
	            Source: SOURCE_V2_Engagement
	        };
	        logData.debugData = {
	            Tag: name,
	            Level: DebugPriorityLevel_1.default.Normal,
	            Message: errorMessage ? errorMessage : "no_ErrorMessage",
	            Misc: errorData ? JSON.stringify(errorData) : "no_ErrorData",
	            ClientTime: event.startTime
	        };
	        return [logData];
	    }
	    function _processCaughtErrorEvent(event) {
	        var logData = {};
	        var name = "CaughtError";
	        if (QosError_event_1.QosError.isTypeOf(event)) {
	            if (event.data) {
	                var qosErrorData = event.data;
	                name = qosErrorData.name;
	                if (qosErrorData.resultCode) {
	                    name += "." + qosErrorData.resultCode;
	                }
	                name += _getResultTypeSuffix(qosErrorData.resultType);
	            }
	            else {
	                name = "QosErrorEvent.no_EventData";
	            }
	        }
	        else {
	            // log it once in the UserEngagement stream to count the hits
	            logData.userEngagementData = {
	                EngagementName: name,
	                Duration: 0,
	                LogType: 0,
	                ClientTime: event.startTime,
	                Source: SOURCE_V2_Engagement
	            };
	        }
	        // log it again in ReliabilityLog stream with data for debugging
	        var caughtErrorData = event.data ? event.data : null;
	        logData.debugData = {
	            Tag: name,
	            Level: DebugPriorityLevel_1.default.Normal,
	            Message: caughtErrorData && caughtErrorData.message ? caughtErrorData.message : "",
	            Misc: caughtErrorData && caughtErrorData.stack ? JSON.stringify(caughtErrorData.stack) : "",
	            ClientTime: event.startTime
	        };
	        return [logData];
	    }
	    function _processVerboseEvent(event) {
	        var logData = {};
	        var name = "Verbose";
	        if (event.data) {
	            var verboseData = event.data;
	            if (verboseData.name) {
	                name = verboseData.name + ".Verbose";
	            }
	        }
	        else {
	            name += ".no_EventData";
	        }
	        // log it in ReliabilityLog stream with data for debugging
	        logData.debugData = {
	            Tag: name,
	            Level: DebugPriorityLevel_1.default.Low,
	            Message: verboseData.message,
	            Misc: "",
	            ClientTime: event.startTime
	        };
	        return [logData];
	    }
	})(LogProcessor || (LogProcessor = {}));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = LogProcessor;


/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var SingleEventBase_1 = __webpack_require__(44);
	exports.PLT = SingleEventBase_1.createSingleEvent({
	    eventName: 'PLT,',
	    shortEventName: 'PLT',
	    samplingFeature: { ODB: true, ODC: 'PLTLoggingSampling', Fallback: false }
	}, {
	    name: {
	        isKey: true,
	        type: 1 /* String */
	    },
	    w3cResponseEnd: 2 /* Number */,
	    prefetchStart: 2 /* Number */,
	    deferredListDataRender: 2 /* Number */,
	    appStart: 2 /* Number */,
	    preRender: 2 /* Number */,
	    dataFetch: 2 /* Number */,
	    dataFetchServerTime: 2 /* Number */,
	    postRender: 2 /* Number */,
	    render: 2 /* Number */,
	    plt: 2 /* Number */,
	    pltWithUnload: 2 /* Number */,
	    httpRequests: 2 /* Number */,
	    appCacheHit: 3 /* Boolean */
	});
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = exports.PLT;


/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var SingleEventBase_1 = __webpack_require__(44);
	exports.UnhandledError = SingleEventBase_1.createSingleEvent({
	    eventName: 'UnhandledError,',
	    shortEventName: 'UnhandledError',
	    critical: true,
	    requiresParent: false
	}, {
	    message: 1 /* String */,
	    stack: 1 /* String */,
	    builtStack: 1 /* String */,
	    line: 2 /* Number */,
	    col: 2 /* Number */,
	    url: 1 /* String */
	});
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = exports.UnhandledError;


/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var SingleEventBase_1 = __webpack_require__(44);
	exports.RequireJSError = SingleEventBase_1.createSingleEvent({
	    eventName: 'RequireJSError,',
	    shortEventName: 'RequireJSError',
	    critical: true,
	    requiresParent: false
	}, {
	    message: 1 /* String */,
	    requireModules: 5 /* Array */,
	    requireType: 1 /* String */,
	    stack: 1 /* String */
	});
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = exports.RequireJSError;


/***/ },
/* 76 */
/***/ function(module, exports) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var DebugPriorityLevel;
	(function (DebugPriorityLevel) {
	    DebugPriorityLevel[DebugPriorityLevel["Low"] = 0] = "Low";
	    DebugPriorityLevel[DebugPriorityLevel["Normal"] = 1] = "Normal";
	})(DebugPriorityLevel || (DebugPriorityLevel = {}));
	;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = DebugPriorityLevel;


/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	// OneDrive:IgnoreCodeCoverage
	var RUMOneLogger_1 = __webpack_require__(58);
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = RUMOneLogger_1.ControlPerformanceData;


/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var DateTime = __webpack_require__(79);
	exports.DateTime = DateTime;
	var StringHelper = __webpack_require__(82);
	exports.StringHelper = StringHelper;
	var StringUtilities = __webpack_require__(83);
	exports.StringUtilities = StringUtilities;
	var HashtagUtilities = __webpack_require__(84);
	exports.HashtagUtilities = HashtagUtilities;
	var IconSelector = __webpack_require__(85);
	exports.IconSelector = IconSelector;
	var SharingTypeHelper = __webpack_require__(88);
	exports.SharingTypeHelper = SharingTypeHelper;
	var SingleEventBase = __webpack_require__(44);
	exports.SingleEventBase = SingleEventBase;
	var Killswitch = __webpack_require__(90);
	exports.Killswitch = Killswitch;
	var Signal = __webpack_require__(91);
	exports.Signal = Signal;
	var Api_event_1 = __webpack_require__(94);
	exports.Api = Api_event_1.Api;
	var PLT_event_1 = __webpack_require__(73);
	exports.PLT = PLT_event_1.PLT;
	var ABExperiment_1 = __webpack_require__(95);
	exports.ABExperiment = ABExperiment_1.ABExperiment;
	var Async_1 = __webpack_require__(56);
	exports.Async = Async_1.default;
	var Component_1 = __webpack_require__(96);
	exports.Component = Component_1.default;
	var BaseDataStore_1 = __webpack_require__(70);
	exports.DataStore = BaseDataStore_1.default;
	var DataStoreCachingType_1 = __webpack_require__(71);
	exports.DataStoreCachingType = DataStoreCachingType_1.default;
	var EventGroup_1 = __webpack_require__(93);
	exports.EventGroup = EventGroup_1.default;
	var FabricTheming_1 = __webpack_require__(101);
	exports.FabricTheming = FabricTheming_1.default;
	var Features_1 = __webpack_require__(42);
	exports.Features = Features_1.default;
	var GroupDataSource_1 = __webpack_require__(105);
	exports.GroupDataSource = GroupDataSource_1.default;
	var Guid_1 = __webpack_require__(41);
	exports.Guid = Guid_1.default;
	var HtmlEncoding_1 = __webpack_require__(107);
	exports.HtmlEncoding = HtmlEncoding_1.default;
	var Locale_1 = __webpack_require__(81);
	exports.Locale = Locale_1.default;
	var Manager_1 = __webpack_require__(37);
	exports.Manager = Manager_1.default;
	var ObjectUtil_1 = __webpack_require__(38);
	exports.ObjectUtil = ObjectUtil_1.default;
	var PerformanceCollection_1 = __webpack_require__(108);
	exports.PerformanceCollection = PerformanceCollection_1.default;
	var PlatformDetection_1 = __webpack_require__(63);
	exports.PlatformDetection = PlatformDetection_1.default;
	var Promise_1 = __webpack_require__(92);
	exports.Promise = Promise_1.default;
	var RgbaColor_1 = __webpack_require__(103);
	exports.RgbaColor = RgbaColor_1.default;
	var SiteHeaderLogoAcronym_1 = __webpack_require__(109);
	exports.SiteHeaderLogoAcronym = SiteHeaderLogoAcronym_1.default;
	var ThemeProvider_1 = __webpack_require__(110);
	exports.ThemeProvider = ThemeProvider_1.default;
	var Uri_1 = __webpack_require__(112);
	exports.Uri = Uri_1.default;
	var UriEncoding_1 = __webpack_require__(39);
	exports.UriEncoding = UriEncoding_1.default;
	var WebTheme_1 = __webpack_require__(113);
	exports.WebTheme = WebTheme_1.default;
	var ItemType_1 = __webpack_require__(87);
	exports.ItemType = ItemType_1.default;
	var DriveSpaceHelper_1 = __webpack_require__(114);
	exports.DriveSpaceHelper = DriveSpaceHelper_1.default;
	var AddressParser_1 = __webpack_require__(115);
	exports.AddressParser = AddressParser_1.default;
	var ShortcutUtilities_1 = __webpack_require__(116);
	exports.ShortcutUtilities = ShortcutUtilities_1.default;
	var FileTypeIconMap_1 = __webpack_require__(86);
	exports.FileTypeIconMap = FileTypeIconMap_1.default;
	var SharingType_1 = __webpack_require__(89);
	exports.SharingType = SharingType_1.default;
	var Sanitize_1 = __webpack_require__(117);
	exports.Sanitize = Sanitize_1.default;


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var DatetimeResx = __webpack_require__(80);
	var Locale_1 = __webpack_require__(81);
	var StringHelper_1 = __webpack_require__(82);
	// this is the difference between the .net ticks and the javascript Date ticks
	var TICKS_CONVERSION_CONSTANT = 62135596800000;
	// number of milliseconds for the given timespan
	// copied from SPRelativeDateTime, including 32 days to a month
	var ONE_SECOND = 1000;
	var ONE_MINUTE = 60 * ONE_SECOND;
	var TWO_MINUTES = 2 * ONE_MINUTE;
	var ONE_HOUR = 60 * ONE_MINUTE;
	var TWO_HOURS = 2 * ONE_HOUR;
	var ONE_DAY = 24 * ONE_HOUR;
	var TWO_DAYS = 2 * ONE_DAY;
	var ONE_WEEK = 7 * ONE_DAY;
	var ONE_MONTH = 32 * ONE_DAY;
	var _getLocale;
	var supportsTimeZoneDateOptions;
	var shortDateFormat;
	var shortTimeFormat;
	var shortDateFormatUTC;
	var shortTimeFormatUTC;
	var formatShortDate;
	var formatShortTime;
	var formatShortDateUTC;
	var formatShortTimeUTC;
	/**
	 * Convert a date-time string to a JavaScript Date object, for IE8 compat.
	 *  Modern browsers and IE9+ can just take the string directly to the Date constructor.
	 *  Format is: 1999-12-31T12:34:56.0000000Z
	 *  Trailing Z indicates UTC timezone, otherwise it uses the browser's time zone.
	 */
	function iso8601DateTimeToJsDate(dateTime) {
	    'use strict';
	    // note that Date.parse() doesn't work for this format in IE8 either
	    var isUTC = false;
	    if (dateTime.toUpperCase().indexOf('Z') === dateTime.length - 1) {
	        isUTC = true;
	    }
	    var timeValues = dateTime.split(/[^0-9]/);
	    if (timeValues.length < 6) {
	        return; // error
	    }
	    // note that Date 0-indexes months
	    if (!isUTC) {
	        return new Date(Number(timeValues[0]), Number(timeValues[1]) - 1, Number(timeValues[2]), Number(timeValues[3]), Number(timeValues[4]), Number(timeValues[5]));
	    }
	    else {
	        return new Date(Date.UTC(Number(timeValues[0]), Number(timeValues[1]) - 1, Number(timeValues[2]), Number(timeValues[3]), Number(timeValues[4]), Number(timeValues[5])));
	    }
	}
	exports.iso8601DateTimeToJsDate = iso8601DateTimeToJsDate;
	/**
	 * Get a string like "X minutes ago" that reflects the time elapsed since the input time.
	 * Only works for past times, future times just return a browser-determined localized time string.
	 */
	function getRelativeDateTimeStringPast(pastTime, startWithLowerCase) {
	    'use strict';
	    if (startWithLowerCase === void 0) { startWithLowerCase = false; }
	    var timespan = Date.now() - pastTime.getTime(); // time elapsed in ms
	    if (timespan < -5 * ONE_MINUTE) {
	        return pastTime.toLocaleDateString(Locale_1.default.language);
	    }
	    else if (timespan < ONE_MINUTE) {
	        // "Less than a minute ago"
	        return startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_LessThanAMinute_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_LessThanAMinute;
	    }
	    else if (timespan < TWO_MINUTES) {
	        // "About a minute ago"
	        return startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_AboutAMinute_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_AboutAMinute;
	    }
	    else if (timespan < ONE_HOUR) {
	        // "{0} minutes ago"
	        var minutes = Math.floor(timespan / ONE_MINUTE);
	        return StringHelper_1.getLocalizedCountValue(DatetimeResx.strings.RelativeDateTime_XMinutes, DatetimeResx.strings.RelativeDateTime_XMinutesIntervals, minutes).replace("{0}", String(minutes));
	    }
	    else if (timespan < TWO_HOURS) {
	        // "About an hour ago"
	        return startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_AboutAnHour_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_AboutAnHour;
	    }
	    else if (timespan < ONE_DAY) {
	        // "{0} hours ago"
	        var hours = Math.floor(timespan / ONE_HOUR);
	        return StringHelper_1.getLocalizedCountValue(DatetimeResx.strings.RelativeDateTime_XHours, DatetimeResx.strings.RelativeDateTime_XHoursIntervals, hours).replace("{0}", String(hours));
	    }
	    else if (timespan < TWO_DAYS) {
	        // "Yesterday at {0}"
	        return startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_YesterdayAndTime_StartWithLowerCase.replace("{0}", pastTime.toLocaleTimeString(Locale_1.default.language)) :
	            DatetimeResx.strings.RelativeDateTime_YesterdayAndTime.replace("{0}", pastTime.toLocaleTimeString(Locale_1.default.language));
	    }
	    else if (timespan < ONE_MONTH) {
	        // "{0} days ago" (in the past month-ish)
	        var days = Math.floor(timespan / ONE_DAY);
	        return StringHelper_1.getLocalizedCountValue(DatetimeResx.strings.RelativeDateTime_XDays, DatetimeResx.strings.RelativeDateTime_XDaysIntervals, days).replace("{0}", String(days));
	    }
	    // Any other time, just return the regular full original time
	    return pastTime.toLocaleDateString(Locale_1.default.language); // browser-determined localized date (no time)
	}
	exports.getRelativeDateTimeStringPast = getRelativeDateTimeStringPast;
	/**
	 * This is a modified implementation of DateTime.GetRelativeDateTimeStringPast(...).
	 * The differences here are as follows:
	 *      (1) The time string for yesterday does not include the seconds
	 *      (2) Instead of showing 'X days ago' for dates older than a month, default to showing the full date
	 *      (3) The full date will also include the time (also without seconds)
	 */
	function getRelativeDateTimeStringPastWithHourMinute(pastTime) {
	    'use strict';
	    var timespan = Date.now() - pastTime.getTime(); // time elapsed in ms
	    var date = pastTime.toLocaleDateString(Locale_1.default.language); // browser-determined localized date
	    var time = pastTime.toLocaleTimeString(Locale_1.default.language, { hour: 'numeric', minute: '2-digit' }); //time without seconds
	    if (timespan < ONE_DAY) {
	        return getRelativeDateTimeStringPast(pastTime);
	    }
	    else if (timespan < TWO_DAYS) {
	        // "Yesterday at {0}" without seconds
	        return StringHelper_1.format(DatetimeResx.strings.RelativeDateTime_YesterdayAndTime, time);
	    }
	    // Any other time, just return the regular full original date with time, without seconds
	    return StringHelper_1.format(DatetimeResx.strings.DateTime_DateAndTime, date, time);
	}
	exports.getRelativeDateTimeStringPastWithHourMinute = getRelativeDateTimeStringPastWithHourMinute;
	/**
	 * True if the date is on or between the first and last day of the current week. This uses the Date function getDay()
	 * which returns the day of the week for the specified date according to local time, where 0 represents Sunday.
	 */
	function isThisWeek(pastTime) {
	    'use strict';
	    var today = new Date();
	    var start = new Date(today.getTime() - today.getDay() * ONE_DAY);
	    var end = new Date(start.getTime() + ONE_WEEK - ONE_DAY);
	    var isThisWeek = (start.getTime() <= pastTime.getTime() && pastTime.getTime() <= end.getTime());
	    return isThisWeek;
	}
	exports.isThisWeek = isThisWeek;
	/**
	 * True if the date is on or between the first and last day of the previous week. This uses the Date function getDay()
	 * which returns the day of the week for the specified date according to local time, where 0 represents Sunday.
	 */
	function isLastWeek(pastTime) {
	    'use strict';
	    var today = new Date();
	    var start = new Date(today.getTime() - today.getDay() * ONE_DAY - ONE_WEEK);
	    var end = new Date(start.getTime() + ONE_WEEK - ONE_DAY);
	    var isLastWeek = (start.getTime() <= pastTime.getTime() && pastTime.getTime() <= end.getTime());
	    return isLastWeek;
	}
	exports.isLastWeek = isLastWeek;
	// for use with lists' server-processed date value
	/**
	 * @param relativeDateTimeJSString: list server-processed date value string
	 * @startWithLowerCase: use this option when the return string is not at beginning of the sentence.
	 */
	function getRelativeDateTimeStringForLists(relativeDateTimeJSString, startWithLowerCase) {
	    'use strict';
	    if (startWithLowerCase === void 0) { startWithLowerCase = false; }
	    var ret = null;
	    var retTemplate = null;
	    var codes = relativeDateTimeJSString.split('|');
	    // Passthrough case
	    if (codes[0] === "0") {
	        return relativeDateTimeJSString.substring(2);
	    }
	    var bFuture = codes[1] === "1";
	    var timeBucket = codes[2];
	    var timeValue = codes.length >= 4 ? codes[3] : null;
	    var timeValue2 = codes.length >= 5 ? codes[4] : null;
	    switch (timeBucket) {
	        // a few seconds
	        case "1":
	            ret = bFuture ? (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_AFewSecondsFuture_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_AFewSecondsFuture) :
	                (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_AFewSeconds_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_AFewSeconds);
	            break;
	        // about a minute
	        case "2":
	            ret = bFuture ? (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_AboutAMinuteFuture_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_AboutAMinuteFuture) :
	                (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_AboutAMinute_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_AboutAMinute);
	            break;
	        // x minutes
	        case "3":
	            retTemplate = StringHelper_1.getLocalizedCountValue(bFuture ? (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_XMinutesFuture_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_XMinutesFuture)
	                : DatetimeResx.strings.RelativeDateTime_XMinutes, bFuture ? DatetimeResx.strings.RelativeDateTime_XMinutesFutureIntervals : DatetimeResx.strings.RelativeDateTime_XMinutesIntervals, Number(timeValue));
	            break;
	        // about an hour
	        case "4":
	            ret = bFuture ? (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_AboutAnHourFuture_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_AboutAnHourFuture)
	                : (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_AboutAnHour_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_AboutAnHour);
	            break;
	        // yesterday / tomorrow
	        case "5":
	            if (timeValue == null) {
	                ret = bFuture ? (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_Tomorrow_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_Tomorrow)
	                    : (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_Yesterday_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_Yesterday);
	            }
	            else {
	                retTemplate = bFuture ? (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_TomorrowAndTime_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_TomorrowAndTime)
	                    : (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_YesterdayAndTime_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_YesterdayAndTime);
	            }
	            break;
	        // x hours
	        case "6":
	            retTemplate = StringHelper_1.getLocalizedCountValue(bFuture ? (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_XHoursFuture_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_XHoursFuture)
	                : DatetimeResx.strings.RelativeDateTime_XHours, bFuture ? DatetimeResx.strings.RelativeDateTime_XHoursFutureIntervals : DatetimeResx.strings.RelativeDateTime_XHoursIntervals, Number(timeValue));
	            break;
	        // day and time
	        case "7":
	            if (timeValue2 === null) {
	                ret = timeValue;
	            }
	            else {
	                retTemplate = DatetimeResx.strings.RelativeDateTime_DayAndTime;
	            }
	            break;
	        // <Days> days
	        case "8":
	            retTemplate = StringHelper_1.getLocalizedCountValue(bFuture ? DatetimeResx.strings.RelativeDateTime_XDaysFuture : DatetimeResx.strings.RelativeDateTime_XDays, bFuture ? DatetimeResx.strings.RelativeDateTime_XDaysFutureIntervals : DatetimeResx.strings.RelativeDateTime_XDaysIntervals, Number(timeValue));
	            break;
	        // today
	        case "9":
	            ret = startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_Today_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_Today;
	            break;
	    }
	    if (retTemplate !== null) {
	        ret = retTemplate.replace("{0}", timeValue);
	        if (timeValue2 !== null) {
	            ret = ret.replace("{1}", timeValue2);
	        }
	    }
	    return ret;
	}
	exports.getRelativeDateTimeStringForLists = getRelativeDateTimeStringForLists;
	/**
	 * Converts a given date string into its UTC/ISO standard format
	 */
	function convertDateToISOString(expiration) {
	    'use strict';
	    var expirationDate = new Date(expiration);
	    // For more info on the time zone offset and its signage, see:
	    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset
	    var isOffsetNegative = (expirationDate.getTimezoneOffset() < 0) ? true : false;
	    var year = expirationDate.getFullYear().toString();
	    var month = _padStringWithZeroes((expirationDate.getMonth() + 1).toString(), 2); //zero based month
	    var day = _padStringWithZeroes(expirationDate.getDate().toString(), 2);
	    var hours = _padStringWithZeroes(expirationDate.getHours().toString(), 2);
	    var minutes = _padStringWithZeroes(expirationDate.getMinutes().toString(), 2);
	    var seconds = _padStringWithZeroes(expirationDate.getSeconds().toString(), 2);
	    var offsetHours = _padStringWithZeroes((isOffsetNegative ? Math.ceil(expirationDate.getTimezoneOffset() / 60).toString().replace("-", "") : Math.floor(expirationDate.getTimezoneOffset() / 60).toString()), 2);
	    var offsetMinutes = _padStringWithZeroes((expirationDate.getTimezoneOffset() % 60).toString().replace("-", ""), 2);
	    var expirationString = year + month + day + 'T' + hours + minutes + seconds + (isOffsetNegative ? '+' : '-') + offsetHours + offsetMinutes;
	    return expirationString;
	}
	exports.convertDateToISOString = convertDateToISOString;
	/**
	 * get the last day of the month based on the input date
	 */
	function getLastDayOfMonth(date) {
	    'use strict';
	    var lastDay = new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), 1, 0, 0, 0, 0));
	    // To get the last day of the month we will increment the month
	    lastDay.setUTCMonth(lastDay.getUTCMonth() + 1);
	    // Then subtract a day
	    lastDay.setUTCDate(lastDay.getUTCDate() - 1);
	    // Then set the time to be the last second of the day
	    lastDay.setUTCHours(23, 59, 59, 999);
	    return lastDay;
	}
	exports.getLastDayOfMonth = getLastDayOfMonth;
	/**
	 * Given the .Net ticks of a date, convert it to a Date
	 */
	function getDateFromDotNetTicks(dotNetTicks) {
	    'use strict';
	    if (!dotNetTicks) {
	        return null;
	    }
	    var ticksInMilliseconds = (dotNetTicks / 10000) - TICKS_CONVERSION_CONSTANT;
	    return new Date(ticksInMilliseconds);
	}
	exports.getDateFromDotNetTicks = getDateFromDotNetTicks;
	function createShortDateFormatters() {
	    'use strict';
	    var locale = _getLocale();
	    var supportsUTC = _supportsTimeZoneDateOptions();
	    if (window['Intl'] && window['Intl']['DateTimeFormat']) {
	        var dateOptions = {};
	        var timeOptions = { hour: '2-digit', minute: '2-digit' };
	        shortDateFormat = new Intl.DateTimeFormat(locale, dateOptions);
	        shortTimeFormat = new Intl.DateTimeFormat(locale, timeOptions);
	        if (supportsUTC) {
	            dateOptions.timeZone = 'UTC';
	            timeOptions.timeZone = 'UTC';
	        }
	        shortDateFormatUTC = new Intl.DateTimeFormat(locale, dateOptions);
	        shortTimeFormatUTC = new Intl.DateTimeFormat(locale, timeOptions);
	        formatShortDate = shortDateFormat.format;
	        formatShortTime = shortTimeFormat.format;
	        formatShortDateUTC = shortDateFormatUTC.format;
	        formatShortTimeUTC = shortTimeFormatUTC.format;
	    }
	    else {
	        // No support for formatter objects.
	        formatShortDate = formatShortDateUTC = function (date) {
	            return date.toLocaleDateString(locale);
	        };
	        formatShortTime = formatShortTimeUTC = function (date) {
	            return date.toLocaleTimeString(locale);
	        };
	    }
	}
	/**
	 * Returns a short version of a date to display (e.g. 11:45 PM if today, or 11/2/2015 if not today)
	 */
	function getShortDisplayDate(date, useUTCTimezone) {
	    'use strict';
	    if (!date) {
	        return '';
	    }
	    if (!formatShortDate) {
	        createShortDateFormatters();
	    }
	    var now = new Date();
	    var isToday = date.getDate() === now.getDate() && Math.abs(now.getTime() - date.getTime()) < ONE_DAY;
	    var formatter;
	    if (useUTCTimezone) {
	        if (isToday) {
	            formatter = formatShortTimeUTC;
	        }
	        else {
	            formatter = formatShortDateUTC;
	        }
	    }
	    else {
	        if (isToday) {
	            formatter = formatShortTime;
	        }
	        else {
	            formatter = formatShortDate;
	        }
	    }
	    return formatter(date);
	}
	exports.getShortDisplayDate = getShortDisplayDate;
	/**
	 * Returns a full version of a date to display (e.g. 11/2/2015 11:45 PM)
	 * useUTCTimezone defaults to false
	 * useHour12 is ignored, and will be determined by the locale.
	 */
	function getFullDisplayDate(date, useUTCTimezone, useHour12) {
	    'use strict';
	    if (!formatShortDate) {
	        createShortDateFormatters();
	    }
	    var dateString = useUTCTimezone ? formatShortDateUTC(date) : formatShortDate(date);
	    var timeString = useUTCTimezone ? formatShortTimeUTC(date) : formatShortTime(date);
	    return StringHelper_1.format(DatetimeResx.strings.DateAndTime, dateString, timeString);
	}
	exports.getFullDisplayDate = getFullDisplayDate;
	_getLocale = function () {
	    'use strict';
	    var validLocale;
	    var locales = [
	        window['$Config'] && window['$Config']['mkt'],
	        Locale_1.default.language,
	        navigator.language,
	        'en'
	    ].filter(function (str) { return !!str; });
	    for (var _i = 0, locales_1 = locales; _i < locales_1.length; _i++) {
	        var locale = locales_1[_i];
	        try {
	            new Date().toLocaleDateString(locale);
	            validLocale = locale;
	            break;
	        }
	        catch (e) {
	        }
	    }
	    _getLocale = function () { return validLocale; };
	    return validLocale;
	};
	function _supportsTimeZoneDateOptions() {
	    'use strict';
	    if (supportsTimeZoneDateOptions === void 0) {
	        try {
	            var locale = _getLocale();
	            (new Date()).toLocaleDateString(locale, { timeZone: 'UTC' });
	            supportsTimeZoneDateOptions = true;
	        }
	        catch (E) {
	            // We know of some versions of IE 11 that fail when date options with a timezone is specified.
	            supportsTimeZoneDateOptions = false;
	        }
	    }
	    return supportsTimeZoneDateOptions;
	}
	/**
	 * Pads a date string with the request number of '0' characters
	 */
	function _padStringWithZeroes(toPad, numDigits) {
	    'use strict';
	    var paddedString = toPad;
	    while (paddedString.length < numDigits) {
	        paddedString = '0' + paddedString;
	    }
	    return paddedString;
	}


/***/ },
/* 80 */
/***/ function(module, exports) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	exports.strings = { "RelativeDateTime_AFewSeconds": "A few seconds ago", "RelativeDateTime_AFewSeconds_StartWithLowerCase": "a few seconds ago", "RelativeDateTime_Format_DateTimeFormattingString_Override": "", "RelativeDateTime_Format_DateTimeFormattingString": "{0}, {1}", "RelativeDateTime_AFewSecondsFuture": "In a few seconds", "RelativeDateTime_AFewSecondsFuture_StartWithLowerCase": "in a few seconds", "RelativeDateTime_AboutAMinuteFuture": "In about a minute", "RelativeDateTime_AboutAMinuteFuture_StartWithLowerCase": "in about a minute", "RelativeDateTime_LessThanAMinute": "Less than a minute ago", "RelativeDateTime_LessThanAMinute_StartWithLowerCase": "less than a minute ago", "RelativeDateTime_AboutAMinute": "About a minute ago", "RelativeDateTime_AboutAMinute_StartWithLowerCase": "about a minute ago", "RelativeDateTime_XMinutesFuture": "In {0} minute||In {0} minutes", "RelativeDateTime_XMinutesFuture_StartWithLowerCase": "in {0} minute||in {0} minutes", "RelativeDateTime_XMinutesFutureIntervals": "1||2-", "RelativeDateTime_XMinutesIntervals": "1||2-", "RelativeDateTime_AboutAnHourFuture": "In about an hour", "RelativeDateTime_AboutAnHourFuture_StartWithLowerCase": "in about an hour", "RelativeDateTime_AboutAnHour": "About an hour ago", "RelativeDateTime_AboutAnHour_StartWithLowerCase": "about an hour ago", "RelativeDateTime_Tomorrow": "Tomorrow", "RelativeDateTime_Tomorrow_StartWithLowerCase": "tomorrow", "RelativeDateTime_Yesterday": "Yesterday", "RelativeDateTime_Yesterday_StartWithLowerCase": "yesterday", "RelativeDateTime_YesterdayAndTime": "Yesterday at {0}", "RelativeDateTime_YesterdayAndTime_StartWithLowerCase": "yesterday at {0}", "DateTime_DateAndTime": "{0} at {1}", "RelativeDateTime_TomorrowAndTime": "Tomorrow at {0}", "RelativeDateTime_TomorrowAndTime_StartWithLowerCase": "tomorrow at {0}", "RelativeDateTime_XHoursFuture": "In {0} hour||In {0} hours", "RelativeDateTime_XHoursFuture_StartWithLowerCase": "in {0} hour||in {0} hours", "RelativeDateTime_XHours": "{0} hour ago||{0} hours ago", "RelativeDateTime_XHoursFutureIntervals": "1||2-", "RelativeDateTime_XHoursIntervals": "1||2-", "RelativeDateTime_DayAndTime": "{0} at {1}", "RelativeDateTime_XDaysFuture": "{0} day from now||{0} days from now", "RelativeDateTime_XDays": "{0} day ago||{0} days ago", "RelativeDateTime_XDaysFutureIntervals": "1||2-", "RelativeDateTime_XDaysIntervals": "1||2-", "RelativeDateTime_Today": "Today", "RelativeDateTime_Today_StartWithLowerCase": "today", "RelativeDateTime_XMinutes": "{0} minute ago||{0} minutes ago", "DateAndTime": "{0} {1}" };


/***/ },
/* 81 */
/***/ function(module, exports) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var Locale = (function () {
	    function Locale() {
	    }
	    Locale.invalidate = function () {
	        Locale.isRightToLeft = (document.documentElement.getAttribute('dir') === 'rtl');
	        Locale.safeLeft = Locale.isRightToLeft ? 'right' : 'left';
	        Locale.safeRight = Locale.isRightToLeft ? 'left' : 'right';
	        /** Robert Chen has the detailed explanation here : The most magic thing here is that OneDrive page and teamsite page has exactly the same line of code with regard to html tag Lang attribute.
	         * <SharePoint:SPHtmlTag lang="<%$Resources:wss,language_value%>" dir="<%$Resources:wss,multipages_direction_dir_value%>" ID="SPHtmlTag" runat="server">
	         * And in teamsite doclib, this lang gets executed to the current user locale. And that is actually already a magic------What happens here is the in order to get the doclib page in ContentDB, we had a standard MondoSproc call which gets the page and the SPWeb. In constructing the web, SP *  * code has smart logic to set Thread.CurrentThread.CurrentUICulture to match the MUI language! And with that magic, ="<%$Resources:wss,language_value%> actually gets sets properly to the user language, not the pre-defined web language.
	         * For OneDrive.aspx which lives inside _layouts folder, the order of code execution changes. We must have executed this line of ASPX code first ="<%$Resources:wss,language_value%> before SPWeb was opened and did the magic to set Thread.CurrentThread.CurrentUICulture.
	         * So the Thread.CurrentThread.CurrentUICulture affecting ="<%$Resources:wss,language_value%> with SPWeb magic end up not working in Onedrive.aspx! And there’s really nothing that we can do about it unless we rewrite the page!
	         * So the conclusion is that the lang attribute is by design (of implementation) different from the regular team site pages which live inside content db.
	         */
	        var language = window["_spPageContextInfo"] && window["_spPageContextInfo"].currentCultureName;
	        // fallback of xml:lang for IE9
	        Locale.language = language ||
	            document.documentElement.getAttribute('lang') ||
	            document.documentElement.getAttribute('xml:lang') ||
	            'en-us';
	    };
	    return Locale;
	}());
	Locale.invalidate();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Locale;


/***/ },
/* 82 */
/***/ function(module, exports) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	// Regex that finds {#} so it can be replaced by the arguments in string format
	var FORMAT_REGEX = /\{(\d+)\}/g;
	/**
	 * String Format is like C# string format. Use template strings instead unless the string is dynamic.
	 * Usage Example: "hello {0}!".format("mike") will return "hello mike!"
	 * Calling format on a string with less arguments than specified in the format will substitute "undefined"
	 */
	function format(template) {
	    var values = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        values[_i - 1] = arguments[_i];
	    }
	    return template.replace(FORMAT_REGEX, function (match, index) {
	        var value = values[index];
	        // Checking null for consistency with old behavior, all other values pass through.
	        return value === null ? '' : value;
	    });
	}
	exports.format = format;
	/**
	 * Returns true if s ends with suffix.
	 */
	function doesStringEndWith(s, suffix) {
	    return s.substr(s.length - suffix.length) === suffix;
	}
	exports.doesStringEndWith = doesStringEndWith;
	/**
	 * Returns true if s starts with prefix.
	 */
	function doesStringStartWith(s, prefix) {
	    return s.substr(0, prefix.length) === prefix;
	}
	exports.doesStringStartWith = doesStringStartWith;
	/**
	 * Return a string of the given length, using 0s to pad in from the right.
	 */
	function rightPad(data, length) {
	    var result = data.toString();
	    while (result.length < length) {
	        result = result + "0";
	    }
	    return result;
	}
	exports.rightPad = rightPad;
	/**
	 * Look for any of the chars in searchValues in str.
	 * Returns the index of the char found or -1 if nothing is found.
	 */
	function findOneOf(str, searchValues) {
	    for (var idx = 0; idx < str.length; idx++) {
	        if (searchValues.indexOf(str[idx]) >= 0) {
	            return idx;
	        }
	    }
	    return -1; //none of the searchValues exist in string
	}
	exports.findOneOf = findOneOf;
	/**
	 * Determines if two strings are equal when both converted to uppercase.
	 */
	function equalsCaseInsensitive(a, b) {
	    if (a && b) {
	        return a.toUpperCase() === b.toUpperCase();
	    }
	    return a === b;
	}
	exports.equalsCaseInsensitive = equalsCaseInsensitive;
	/**
	 * Capitalizes the first letter of str.
	 */
	function capitalize(str) {
	    if (str) {
	        return str[0].toUpperCase() + str.substr(1);
	    }
	    return str;
	}
	exports.capitalize = capitalize;
	/**
	 * De-capitalizes the first letter of str.
	 */
	function decapitalize(str) {
	    if (str) {
	        return str[0].toLowerCase() + str.substr(1);
	    }
	    return str;
	}
	exports.decapitalize = decapitalize;
	/**
	 * Selects a string based on plurality.
	 *
	 * @param count - The value to base selection on
	 * @param single - The string to select when it's a singular value
	 * @param multiple - The string to select when it's a plural value
	 *
	 * @deprecated This method does NOT give accurate results for many languages!!
	 *             Use getLocalizedCountValue instead.
	 */
	function pluralSelect(count, single, plural) {
	    return count === 1 ? single : plural;
	}
	exports.pluralSelect = pluralSelect;
	/**
	 * Given a specially formatted localized text, a set of intervals, and a count,
	 * return the localized text which corresponds to the first interval the
	 * count falls into.
	 *
	 * Please see https://microsoft.sharepoint.com/teams/OISGPortal/LocKits/_layouts/15/start.aspx#/Lockit%20Instructions/SharePoint%20Core%20Localization.aspx
	 * for more details.
	 *
	 * @param {string} locText - || deliminated blocks of localized texts, representing
	 *  the various singular and plural forms of the string  being localized
	 * @param {string} intervals - || deliminated blocks of numeric intervals, defining the ranges
	 *  of that interval. Has special support for , * and -.
	 * @param {number} count - The count used to determine which interval to return.
	 *
	 * @return
	 * The localized block which corresponds to the first interval the count falls into.
	 *
	 * @example
	 * StringHelper.getLocalizedCountValue('items||item||items', '0||1||2-', 0)
	 *   returns items
	 * StringHelper.getLocalizedCountValue('items||item||items', '0||1||2-', 1)
	 *   returns item
	 * StringHelper.getLocalizedCountValue('items||item||items', '0||1||2-', 2)
	 *   returns items
	 */
	function getLocalizedCountValue(locText, intervals, count) {
	    'use strict';
	    count = Number(count); // defensively make sure count is a number
	    // !!!IMPORTANT!!! changes in this function need to be in sync with
	    // the methods with the same name located at:
	    // otools/inc/sts/stsom/utilities/SPLocUtility.cs
	    // sts/Client/Script/Init/LocUtility.cs
	    if (locText === undefined || intervals === undefined || count === undefined) {
	        return null;
	    }
	    var ret = '';
	    var locIndex = -1;
	    var intervalsArray = intervals.split('||');
	    for (var i = 0, length_1 = intervalsArray.length; i < length_1; i++) {
	        var interval = intervalsArray[i];
	        if (!interval) {
	            continue;
	        }
	        var subIntervalsArray = interval.split(',');
	        for (var _i = 0, subIntervalsArray_1 = subIntervalsArray; _i < subIntervalsArray_1.length; _i++) {
	            var subInterval = subIntervalsArray_1[_i];
	            if (!subInterval) {
	                continue;
	            }
	            // there are three possiblities, wildcard, interval, or number
	            if (isNaN(Number(subInterval))) {
	                if (subInterval.indexOf('-') !== -1) {
	                    // if it's an interval the format is Number-Number
	                    var range = subInterval.split('-');
	                    if (range.length !== 2) {
	                        continue;
	                    }
	                    var min = void 0;
	                    var max = void 0;
	                    if (range[0] === '') {
	                        min = 0;
	                    }
	                    else {
	                        if (isNaN(Number(range[0]))) {
	                            continue;
	                        }
	                        else {
	                            min = parseInt(range[0], 10);
	                        }
	                    }
	                    if (count >= min) {
	                        if (range[1] === '') {
	                            locIndex = i;
	                            break;
	                        }
	                        else {
	                            if (isNaN(Number(range[1]))) {
	                                continue;
	                            }
	                            else {
	                                max = parseInt(range[1], 10);
	                            }
	                        }
	                        if (count <= max) {
	                            locIndex = i;
	                            break;
	                        }
	                    }
	                }
	                else if (subInterval.indexOf('*') !== -1) {
	                    // Wildcard
	                    var regexExpr = subInterval.trim().replace(/\*/g, '[0-9]*');
	                    var regex = new RegExp("^" + regexExpr + "$");
	                    if (regex.test(count.toString())) {
	                        locIndex = i;
	                        break;
	                    }
	                }
	            }
	            else {
	                var exactNumber = parseInt(subInterval, 10);
	                if (count === exactNumber) {
	                    locIndex = i;
	                    break;
	                }
	            }
	        }
	        if (locIndex !== -1) {
	            break;
	        }
	    }
	    if (locIndex !== -1) {
	        var locValues = locText.split('||');
	        if (locValues[locIndex]) {
	            ret = locValues[locIndex];
	        }
	    }
	    return ret;
	}
	exports.getLocalizedCountValue = getLocalizedCountValue;
	/**
	 * Format the locText with the localized count value.
	 */
	function formatWithLocalizedCountValue(locText, intervals, count) {
	    'use strict';
	    var template = getLocalizedCountValue(locText, intervals, count);
	    var result = format(template, count.toString());
	    return result;
	}
	exports.formatWithLocalizedCountValue = formatWithLocalizedCountValue;


/***/ },
/* 83 */
/***/ function(module, exports) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	exports.strings = { "fileSizeTB": "{0} TB", "fileSizeGB": "{0} GB", "fileSizeMB": "{0} MB", "fileSizeKB": "{0} KB", "fileSizeBytesPlural": "{0} bytes", "fileSizeBytesSingular": "1 byte" };


/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var Features_1 = __webpack_require__(42);
	exports.HASHTAG_DISPLAY_PREFIX = "#";
	exports.HASHTAG_DELIMITER = ";";
	exports.MVL_DELIMITER = ";#";
	exports.HASHTAG_FIELD_ID = "968052CC-891E-4197-ABBB-19C3EDFF3CD2";
	var Hashtags = { ODB: 581, ODC: null, Fallback: false };
	var HashtagsUI = { ODB: 824, ODC: null, Fallback: false };
	function isHashtagEnabled() {
	    return Features_1.default.isFeatureEnabled(Hashtags) && Features_1.default.isFeatureEnabled(HashtagsUI);
	}
	exports.isHashtagEnabled = isHashtagEnabled;
	function isClientFormHashtagField(field) {
	    return (field &&
	        field.schema &&
	        isHashtagField(field.schema.FieldType, field.schema.Id));
	}
	exports.isClientFormHashtagField = isClientFormHashtagField;
	function isHashtagField(fieldType, fieldId) {
	    return (isHashtagEnabled() &&
	        fieldType &&
	        fieldType.toLowerCase() === "lookupmulti" &&
	        fieldId &&
	        fieldId.toLowerCase() === exports.HASHTAG_FIELD_ID.toLowerCase());
	}
	exports.isHashtagField = isHashtagField;


/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var FileTypeIconMap_1 = __webpack_require__(86);
	var ItemType_1 = __webpack_require__(87);
	var SharingTypeHelper = __webpack_require__(88);
	var GENERIC_FILE = 'genericfile';
	var CODE_FILE = 'code';
	var ONENOTE_FILE = 'one';
	var FOLDER = 'folder';
	var SHARED_FOLDER = 'sharedfolder';
	var DOCSET_FOLDER = 'docset';
	var VIDEO_FILE = 'video';
	var PHOTO_FILE = 'photo';
	var LIST_ITEM = 'listitem';
	var _extensionToIconName;
	exports.genericFile = GENERIC_FILE;
	exports.codeFile = CODE_FILE;
	exports.videoFile = VIDEO_FILE;
	exports.photoFile = PHOTO_FILE;
	function getIconNameFromItem(item) {
	    var iconName = '';
	    if (item.type === ItemType_1.default.Folder) {
	        iconName = SharingTypeHelper.usePrivateFolderIcon(item.sharingType) ? FOLDER : SHARED_FOLDER;
	        if (item.isDocSet) {
	            iconName = DOCSET_FOLDER;
	        }
	    }
	    else if (item.type === ItemType_1.default.OneNote) {
	        iconName = ONENOTE_FILE;
	    }
	    else if (item.listItem) {
	        iconName = LIST_ITEM;
	    }
	    else if (item.textEditorMimeType === 'text/typescript') {
	        iconName = CODE_FILE;
	    }
	    else {
	        iconName = getIconNameFromExtension(item.extension);
	    }
	    return iconName;
	}
	exports.getIconNameFromItem = getIconNameFromItem;
	function getItemTypeFromExtension(extension) {
	    var itemType;
	    try {
	        if (extension) {
	            var iconName = getIconNameFromExtension(extension);
	            if (FileTypeIconMap_1.default[iconName]) {
	                var iconItemType = FileTypeIconMap_1.default[iconName].type;
	                if (iconItemType === (void 0)) {
	                    iconItemType = ItemType_1.default.File;
	                }
	                itemType = iconItemType;
	            }
	        }
	    }
	    catch (e) {
	    }
	    if (itemType === (void 0)) {
	        itemType = ItemType_1.default.Unknown;
	    }
	    return itemType;
	}
	exports.getItemTypeFromExtension = getItemTypeFromExtension;
	function getIconNameFromExtension(extension) {
	    if (!_extensionToIconName) {
	        _extensionToIconName = {};
	        for (var iconName in FileTypeIconMap_1.default) {
	            var extensions = FileTypeIconMap_1.default[iconName].extensions;
	            if (extensions) {
	                for (var i = 0; i < extensions.length; i++) {
	                    _extensionToIconName[extensions[i]] = iconName;
	                }
	            }
	        }
	    }
	    // Strip periods, force lowercase.
	    extension = extension.replace('.', '').toLowerCase();
	    return _extensionToIconName[extension] || GENERIC_FILE;
	}
	exports.getIconNameFromExtension = getIconNameFromExtension;


/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var ItemType_1 = __webpack_require__(87);
	/**
	 * Enumeration of icon file names, and what extensions they map to.
	 * Please keep items alphabetical. Items without extensions may require specific logic in the code to map.
	 * Track icon accuracy status here: https://msft-my.spoppe.com/personal/caperez_microsoft_com/Documents/Missing%20List.xlsx?web=1
	 */
	var FileTypeIconMap = {
	    'accdb': { extensions: ['accdb', 'mdb'] },
	    'archive': { type: ItemType_1.default.Unknown, extensions: ['7z', 'ace', 'arc', 'arj', 'dmg', 'gz', 'iso', 'lzh', 'pkg', 'rar', 'sit', 'tgz', 'tar', 'rar', 'z'] },
	    'audio': { type: ItemType_1.default.Unknown, extensions: ['aif', 'aiff', 'aac', 'amr', 'au', 'awb', 'dct', 'dss', 'dvf', 'flac', 'gsm', 'm4a', 'm4p', 'mid', 'mmf', 'mp3', 'ogg', 'oga', 'ra', 'rm', 'wav', 'wma', 'wv'] },
	    'code': { extensions: ['asp', 'bat', 'c', 'coffee', 'config', 'cpp', 'cs', 'cshtml', 'css', 'dat', 'fsx', 'h', 'inf', 'ini', 'java', 'js', 'json', 'less', 'log', 'manifest', 'master', 'nfo', 'php', 'prefs', 'preferences', 'ps', 'ps1', 'pss', 'py', 'rb', 'rdf', 'reg', 'ruby', 'sql', 'svn-base', 'vmg', 'webpart', 'wsp', 'vb'] },
	    'css': {},
	    'csv': { extensions: ['csv'] },
	    'docset': { type: ItemType_1.default.Folder, iconType: 'svg' },
	    'docx': { extensions: ['doc', 'docm', 'docx'] },
	    'dotx': { extensions: ['dot', 'dotm', 'dotx'] },
	    'email': { type: ItemType_1.default.Unknown, extensions: ['eml', 'msg', 'ost', 'pst'] },
	    'exe': { type: ItemType_1.default.Unknown, extensions: ['application', 'appref-ms', 'apk', 'app', 'appx', 'exe', 'ipa', 'msi', 'xap'] },
	    'folder': { type: ItemType_1.default.Folder, iconType: 'svg' },
	    'font': { type: ItemType_1.default.Unknown, extensions: ['ttf', 'otf', 'woff'] },
	    'genericfile': { type: ItemType_1.default.Unknown },
	    'html': { type: ItemType_1.default.Unknown, extensions: ['htm', 'html', 'mht'] },
	    'link': { type: ItemType_1.default.Unknown, extensions: ['lnk', 'link', 'url', 'website', 'webloc'] },
	    'listitem': { type: ItemType_1.default.Unknown, extensions: ['listitem'] },
	    'model': { extensions: ['3ds', 'blend', 'dae', 'df', 'dwfx', 'dwg', 'dxf', 'layout', 'off', 'max', 'skp', 'stp', 't', 'thl', 'x'] },
	    'mpp': { extensions: ['mpp'] },
	    'mpt': { extensions: ['mpt'] },
	    'odp': { extensions: ['odp'] },
	    'ods': { extensions: ['ods'] },
	    'odt': { extensions: ['odt'] },
	    'one': { type: ItemType_1.default.OneNote, extensions: ['one'] },
	    'onepkg': { type: ItemType_1.default.OneNote, extensions: ['onepkg'] },
	    'onetoc': { type: ItemType_1.default.OneNote, extensions: ['ms-one-stub', 'onetoc', 'onetoc2'] },
	    'pdf': { extensions: ['pdf'] },
	    'photo': { type: ItemType_1.default.Media, extensions: ['arw', 'bmp', 'cr2', 'crw', 'dcr', 'dds', 'dib', 'dng', 'erf', 'gif', 'ico', 'jfi', 'jfif', 'jif', 'jpe', 'jpeg', 'jpg', 'kdc', 'mrw', 'nef', 'orf', 'pct', 'pict', 'png', 'pns', 'psd', 'raw', 'tga', 'tif', 'tiff', 'wdp'] },
	    'potx': { extensions: ['pot', 'potm', 'potx'] },
	    'ppsx': { extensions: ['pps', 'ppsm', 'ppsx'] },
	    'pptx': { extensions: ['ppt', 'pptm', 'pptx'] },
	    'pub': { extensions: ['pub'] },
	    'spo': { extensions: ['aspx'] },
	    'rtf': { extensions: ['epub', 'rtf', 'wri'] },
	    'sharedfolder': { type: ItemType_1.default.Folder, iconType: 'svg' },
	    'sysfile': { type: ItemType_1.default.Unknown, extensions: ['bak', 'bin', 'cab', 'cache', 'cat', 'cer', 'class', 'dat', 'db', 'dbg', 'dl_', 'dll', 'ithmb', 'jar', 'kb', 'kdc', 'ldt', 'lrprev', 'obj', 'ppa', 'ppam', 'pdb', 'rom', 'thm', 'thmx', 'vsl', 'xla', 'xlam', 'xll'] },
	    'txt': { extensions: ['md', 'readme', 'text', 'txt'] },
	    'vector': { type: ItemType_1.default.Unknown, extensions: ['ai', 'dgn', 'pd', 'emf', 'eps', 'indd', 'indt', 'ps', 'svg', 'svgz', 'wmf'] },
	    'video': { type: ItemType_1.default.Media, extensions: ['3gp', 'asf', 'avi', 'dvr-ms', 'flv', 'm1v', 'm4v', 'mkv', 'mod', 'mov', 'mm4p', 'mp2', 'mp2v', 'mp4', ' mpa', 'mpe', 'mpeg', 'mpg', 'mpv', 'mpv2', 'mts', 'ogg', 'qt', 'swf', 'ts', 'vob', 'webm', 'wlmp', 'wm', 'wmv', 'wmx'] },
	    'vsdx': { extensions: ['vsd', 'vsdm', 'vsdx', 'vdw'] },
	    'vssx': { extensions: ['vss', 'vssm', 'vssx'] },
	    'vstx': { extensions: ['vst', 'vstm', 'vstx'] },
	    'xlsx': { extensions: ['xls', 'xlsb', 'xlsm', 'xlsx'] },
	    'xltx': { extensions: ['xlt', 'xltm', 'xltx'] },
	    'xml': { extensions: ['xaml', 'xml', 'xsl'] },
	    'xps': { extensions: ['oxps', 'xps'] },
	    'xsn': { extensions: ['xsn'] },
	    'zip': { type: ItemType_1.default.Unknown, extensions: ['zip'] }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = FileTypeIconMap;


/***/ },
/* 87 */
/***/ function(module, exports) {

	"use strict";
	var ItemType;
	(function (ItemType) {
	    ItemType[ItemType["File"] = 0] = "File";
	    ItemType[ItemType["Folder"] = 1] = "Folder";
	    ItemType[ItemType["Media"] = 2] = "Media";
	    ItemType[ItemType["OneNote"] = 3] = "OneNote";
	    ItemType[ItemType["Unknown"] = 4] = "Unknown";
	    ItemType[ItemType["Error"] = 5] = "Error";
	    ItemType[ItemType["App"] = 6] = "App";
	    ItemType[ItemType["Subsite"] = 7] = "Subsite";
	    /** A shortcut link pointing to some target destination or Url */
	    ItemType[ItemType["Shortcut"] = 8] = "Shortcut";
	})(ItemType = exports.ItemType || (exports.ItemType = {}));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ItemType;


/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var SharingType_1 = __webpack_require__(89);
	function usePrivateFolderIcon(itemSharingType) {
	    return (itemSharingType === undefined ||
	        itemSharingType === SharingType_1.default.Private ||
	        itemSharingType === SharingType_1.default.Unknown); // erring on caution--if sharingType is Unknown, show it as not shared
	}
	exports.usePrivateFolderIcon = usePrivateFolderIcon;
	function showSubTextSharingIcon(itemSharingType) {
	    return (itemSharingType !== undefined &&
	        itemSharingType !== SharingType_1.default.Private &&
	        itemSharingType !== SharingType_1.default.Unknown); // additionally, the Unknown case should be not shared as well
	}
	exports.showSubTextSharingIcon = showSubTextSharingIcon;
	function shouldRequestSharedWithData(itemSharingType) {
	    return (itemSharingType !== SharingType_1.default.Private); // not including Unknown, should fetch the shared with information when uncertain
	}
	exports.shouldRequestSharedWithData = shouldRequestSharedWithData;
	function useSharedFolderAriaLabel(itemSharingType) {
	    return (itemSharingType === SharingType_1.default.Shared); // not including Unknown, don't mentioned sharing state when uncertain
	}
	exports.useSharedFolderAriaLabel = useSharedFolderAriaLabel;


/***/ },
/* 89 */
/***/ function(module, exports) {

	"use strict";
	var SharingType;
	(function (SharingType) {
	    SharingType[SharingType["Public"] = 0] = "Public";
	    SharingType[SharingType["PublicUnlisted"] = 2] = "PublicUnlisted";
	    SharingType[SharingType["Shared"] = 3] = "Shared";
	    SharingType[SharingType["Private"] = 4] = "Private";
	    SharingType[SharingType["Unknown"] = 5] = "Unknown";
	})(SharingType || (SharingType = {}));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SharingType;


/***/ },
/* 90 */
/***/ function(module, exports) {

	"use strict";
	var Killswitch = (function () {
	    function Killswitch() {
	    }
	    /**
	     * Returns the active state of an SPO kill switch.
	     * Works in GU47 or above!
	     */
	    Killswitch.isActivated = function (killSwitch, date, message) {
	        var _spPageContextInfo = window['_spPageContextInfo'];
	        return killSwitch && _spPageContextInfo && _spPageContextInfo.killSwitches && _spPageContextInfo.killSwitches[killSwitch.toUpperCase()];
	    };
	    return Killswitch;
	}());
	exports.Killswitch = Killswitch;


/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	// OneDrive:IgnoreCodeCoverage
	var Promise_1 = __webpack_require__(92);
	/**
	 * Signal is used to manage a promise without having to pass a function to the Promise constructor.
	 * Example:
	 * var s = new Signal<boolean>();
	 * setTimeout(() => {
	 *    s.complete(true);
	 * }, 1000);
	 * return s.promise;
	 */
	var Signal = (function () {
	    /**
	     * Create a new Signal (also known as a Deferred in some circles.)
	     * @param: oncancel A function to be called when the promise is cancelled.
	     */
	    function Signal(oncancel) {
	        this._promise = new Promise_1.SignalPromise(oncancel);
	    }
	    /**
	     * The underlying promise that the Signal manages.
	     */
	    Signal.prototype.getPromise = function () {
	        return this._promise;
	    };
	    /**
	     * Cancel the underlying promise.
	     */
	    Signal.prototype.cancel = function () {
	        this._promise.cancel();
	    };
	    /**
	     * Complete the underlying promise with the given value.
	     */
	    Signal.prototype.complete = function (value) {
	        this._promise._completed(value);
	    };
	    /**
	     * Put the underlying promise into the error state with the given value.
	     */
	    Signal.prototype.error = function (value) {
	        this._promise._error(value);
	    };
	    return Signal;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Signal;


/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * This file was originally ported from WinJS.
	 */
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Async_1 = __webpack_require__(56);
	var EventGroup_1 = __webpack_require__(93);
	var async = new Async_1.default();
	function doneHandler(value) {
	    async.setImmediate(function () {
	        throw value;
	    });
	}
	var errorET = "error";
	var canceledName = "Canceled";
	var events;
	//
	// Global error counter, for each error which enters the system we increment this once and then
	// the error number travels with the error as it traverses the tree of potential handlers.
	//
	// When someone has registered to be told about error [using EventGroup.on(Promise, 'error')] promises
	// which are in error will get tagged with a ._errorId field. This tagged field is the
	// contract by which nested promises with errors will be identified as chaining for the
	// purposes of the callonerror semantics. If a nested promise in error is encountered without
	// a ._errorId it will be assumed to be foreign and treated as an interop boundary and
	// a new error id will be minted.
	//
	var error_number = 1;
	;
	var state_created; // -> working
	var state_working; // -> error | error_notify | success | success_notify | canceled | waiting
	var state_waiting; // -> error | error_notify | success | success_notify | waiting_canceled
	var state_waiting_canceled; // -> error | error_notify | success | success_notify | canceling
	var state_canceled; // -> error | error_notify | success | success_notify | canceling
	var state_canceling; // -> error_notify
	var state_success_notify; // -> success
	var state_success; // -> .
	var state_error_notify; // -> error
	var state_error; // -> .
	// Noop function, used in the various states to indicate that they don't support a given
	// message. Named with the somewhat cute name '_' because it reads really well in the states.
	function _() {
	    "use strict";
	}
	// Initial state
	//
	state_created = {
	    name: "created",
	    enter: function (promise) {
	        promise._setState(state_working);
	    },
	    cancel: _,
	    done: _,
	    then: _,
	    _completed: _,
	    _error: _,
	    _notify: _,
	    _setCompleteValue: _,
	    _setErrorValue: _
	};
	// Ready state, waiting for a message (completed/error), able to be canceled
	//
	state_working = {
	    name: "working",
	    enter: _,
	    cancel: function (promise) {
	        promise._setState(state_canceled);
	    },
	    done: done,
	    then: then,
	    _completed: completed,
	    _error: error,
	    _notify: _,
	    _setCompleteValue: setCompleteValue,
	    _setErrorValue: setErrorValue
	};
	// Waiting state, if a promise is completed with a value which is itself a promise
	// (has a then() method) it signs up to be informed when that child promise is
	// fulfilled at which point it will be fulfilled with that value.
	//
	state_waiting = {
	    name: "waiting",
	    enter: function (promise) {
	        var waitedUpon = promise._value;
	        // We can special case our own intermediate promises which are not in a
	        //  terminal state by just pushing this promise as a listener without
	        //  having to create new indirection functions
	        if (waitedUpon instanceof ThenPromise &&
	            waitedUpon._state !== state_error &&
	            waitedUpon._state !== state_success) {
	            pushListener(waitedUpon, { promise: promise });
	        }
	        else {
	            var error_1 = function (value) {
	                if (waitedUpon._errorId) {
	                    promise._chainedError(value, waitedUpon);
	                }
	                else {
	                    // Because this is an interop boundary we want to indicate that this
	                    //  error has been handled by the promise infrastructure before we
	                    //  begin a new handling chain.
	                    //
	                    callonerror(promise, value, detailsForHandledError, waitedUpon, error_1);
	                    promise._error(value);
	                }
	            };
	            error_1.handlesOnError = true;
	            waitedUpon.then(promise._completed.bind(promise), error_1);
	        }
	    },
	    cancel: function (promise) {
	        promise._setState(state_waiting_canceled);
	    },
	    done: done,
	    then: then,
	    _completed: completed,
	    _error: error,
	    _notify: _,
	    _setCompleteValue: setCompleteValue,
	    _setErrorValue: setErrorValue
	};
	// Waiting canceled state, when a promise has been in a waiting state and receives a
	// request to cancel its pending work it will forward that request to the child promise
	// and then waits to be informed of the result. This promise moves itself into the
	// canceling state but understands that the child promise may instead push it to a
	// different state.
	//
	state_waiting_canceled = {
	    name: "waiting_canceled",
	    enter: function (promise) {
	        // Initiate a transition to canceling. Triggering a cancel on the promise
	        // that we are waiting upon may result in a different state transition
	        // before the state machine pump runs again.
	        promise._setState(state_canceling);
	        var waitedUpon = promise._value;
	        if (waitedUpon.cancel) {
	            waitedUpon.cancel();
	        }
	    },
	    cancel: _,
	    done: done,
	    then: then,
	    _completed: completed,
	    _error: error,
	    _notify: _,
	    _setCompleteValue: setCompleteValue,
	    _setErrorValue: setErrorValue
	};
	// Canceled state, moves to the canceling state and then tells the promise to do
	// whatever it might need to do on cancelation.
	//
	state_canceled = {
	    name: "canceled",
	    enter: function (promise) {
	        // Initiate a transition to canceling. The _cancelAction may change the state
	        // before the state machine pump runs again.
	        promise._setState(state_canceling);
	        promise._cancelAction();
	    },
	    cancel: _,
	    done: done,
	    then: then,
	    _completed: completed,
	    _error: error,
	    _notify: _,
	    _setCompleteValue: setCompleteValue,
	    _setErrorValue: setErrorValue
	};
	// Canceling state, commits to the promise moving to an error state with an error
	// object whose 'name' and 'message' properties contain the string "Canceled"
	//
	state_canceling = {
	    name: "canceling",
	    enter: function (promise) {
	        var error = new Error(canceledName);
	        error.name = error.message;
	        error["_handled"] = true;
	        promise._value = error;
	        promise._setState(state_error_notify);
	    },
	    cancel: _,
	    done: _,
	    then: _,
	    _completed: _,
	    _error: _,
	    _notify: _,
	    _setCompleteValue: _,
	    _setErrorValue: _
	};
	// Success notify state, moves a promise to the success state and notifies all children
	//
	state_success_notify = {
	    name: "complete_notify",
	    enter: function (promise) {
	        promise.done = CompletePromise.prototype.done;
	        promise.then = CompletePromise.prototype.then;
	        if (promise._listeners) {
	            var queue = [promise];
	            var p = void 0;
	            while (queue.length) {
	                p = queue.shift();
	                p._state._notify(p, queue);
	            }
	        }
	        promise._setState(state_success);
	    },
	    cancel: _,
	    done: null,
	    then: null,
	    _completed: _,
	    _error: _,
	    _notify: notifySuccess,
	    _setCompleteValue: _,
	    _setErrorValue: _
	};
	// Success state, moves a promise to the success state and does NOT notify any children.
	// Some upstream promise is owning the notification pass.
	//
	state_success = {
	    name: "success",
	    enter: function (promise) {
	        promise.done = CompletePromise.prototype.done;
	        promise.then = CompletePromise.prototype.then;
	        promise._cleanupAction();
	    },
	    cancel: _,
	    done: null,
	    then: null,
	    _completed: _,
	    _error: _,
	    _notify: notifySuccess,
	    _setCompleteValue: _,
	    _setErrorValue: _
	};
	// Error notify state, moves a promise to the error state and notifies all children
	//
	state_error_notify = {
	    name: "error_notify",
	    enter: function (promise) {
	        promise.done = ErrorPromise.prototype.done;
	        promise.then = ErrorPromise.prototype.then;
	        if (promise._listeners) {
	            var queue = [promise];
	            var p = void 0;
	            while (queue.length) {
	                p = queue.shift();
	                p._state._notify(p, queue);
	            }
	        }
	        promise._setState(state_error);
	    },
	    cancel: _,
	    done: null,
	    then: null,
	    _completed: _,
	    _error: _,
	    _notify: notifyError,
	    _setCompleteValue: _,
	    _setErrorValue: _
	};
	// Error state, moves a promise to the error state and does NOT notify any children.
	// Some upstream promise is owning the notification pass.
	//
	state_error = {
	    name: "error",
	    enter: function (promise) {
	        promise.done = ErrorPromise.prototype.done;
	        promise.then = ErrorPromise.prototype.then;
	        promise._cleanupAction();
	    },
	    cancel: _,
	    done: null,
	    then: null,
	    _completed: _,
	    _error: _,
	    _notify: notifyError,
	    _setCompleteValue: _,
	    _setErrorValue: _
	};
	//
	// The statemachine implementation follows a very particular pattern, the states are specified
	// as static stateless bags of functions which are then indirected through the state machine
	// instance (a Promise). As such all of the functions on each state have the promise instance
	// passed to them explicitly as a parameter and the Promise instance members do a little
	// dance where they indirect through the state and insert themselves in the argument list.
	//
	// We could instead call directly through the promise states however then every caller
	// would have to remember to do things like pumping the state machine to catch state transitions.
	//
	//
	// Implementations of shared state machine code.
	//
	function completed(promise, value) {
	    promise._value = value;
	    promise._setState(Promise.is(value) ? state_waiting : state_success_notify);
	}
	function createErrorDetails(exception, error, promise, id, parent, handler) {
	    return {
	        exception: exception,
	        error: error,
	        promise: promise,
	        handler: handler,
	        id: id,
	        parent: parent
	    };
	}
	function detailsForHandledError(promise, errorValue, context, handler) {
	    var exception = context._isException;
	    var errorId = context._errorId;
	    return createErrorDetails(exception ? errorValue : null, exception ? null : errorValue, promise, errorId, context, handler);
	}
	function detailsForChainedError(promise, errorValue, context) {
	    var exception = context._isException;
	    var errorId = context._errorId;
	    setErrorInfo(promise, errorId, exception);
	    return createErrorDetails(exception ? errorValue : null, exception ? null : errorValue, promise, errorId, context);
	}
	function detailsForError(promise, errorValue) {
	    var errorId = ++error_number;
	    setErrorInfo(promise, errorId);
	    return createErrorDetails(null, errorValue, promise, errorId);
	}
	function detailsForException(promise, exceptionValue) {
	    var errorId = ++error_number;
	    setErrorInfo(promise, errorId, true);
	    return createErrorDetails(exceptionValue, null, promise, errorId);
	}
	function done(promise, onComplete, onError) {
	    pushListener(promise, { c: onComplete, e: onError });
	}
	function error(promise, value, onerrorDetails, context) {
	    promise._value = value;
	    callonerror(promise, value, onerrorDetails, context);
	    promise._setState(state_error_notify);
	}
	function notifySuccess(promise, queue) {
	    var value = promise._value;
	    var listeners = promise._listeners;
	    if (!listeners) {
	        return;
	    }
	    promise._listeners = null;
	    var i;
	    var len;
	    for (i = 0, len = Array.isArray(listeners) ? listeners.length : 1; i < len; i++) {
	        var listener = len === 1 ? listeners : listeners[i];
	        var onComplete = listener.c;
	        var target = listener.promise;
	        if (target) {
	            try {
	                target._setCompleteValue(onComplete ? onComplete(value) : value);
	            }
	            catch (ex) {
	                target._setExceptionValue(ex);
	            }
	            if (target._state !== state_waiting && target._listeners) {
	                queue.push(target);
	            }
	        }
	        else {
	            CompletePromise.prototype.done.call(promise, onComplete);
	        }
	    }
	}
	function notifyError(promise, queue) {
	    var value = promise._value;
	    var listeners = promise._listeners;
	    if (!listeners) {
	        return;
	    }
	    promise._listeners = null;
	    var i;
	    var len;
	    for (i = 0, len = Array.isArray(listeners) ? listeners.length : 1; i < len; i++) {
	        var listener = len === 1 ? listeners : listeners[i];
	        var onError = listener.e;
	        var target = listener.promise;
	        if (target) {
	            var asyncCallbackStarted = false;
	            try {
	                if (onError) {
	                    asyncCallbackStarted = true;
	                    if (!onError.handlesOnError) {
	                        callonerror(target, value, detailsForHandledError, promise, onError);
	                    }
	                    target._setCompleteValue(onError(value));
	                }
	                else {
	                    target._setChainedErrorValue(value, promise);
	                }
	            }
	            catch (ex) {
	                target._setExceptionValue(ex);
	            }
	            if (target._state !== state_waiting && target._listeners) {
	                queue.push(target);
	            }
	        }
	        else {
	            ErrorPromise.prototype.done.call(promise, null, onError);
	        }
	    }
	}
	function callonerror(promise, value, onerrorDetailsGenerator, context, handler) {
	    if (value instanceof Error && value.message === canceledName) {
	        return;
	    }
	    events.raise(errorET, onerrorDetailsGenerator(promise, value, context, handler));
	}
	function pushListener(promise, listener) {
	    var listeners = promise._listeners;
	    if (listeners) {
	        // We may have either a single listener (which will never be wrapped in an array)
	        // or 2+ listeners (which will be wrapped). Since we are now adding one more listener
	        // we may have to wrap the single listener before adding the second.
	        listeners = Array.isArray(listeners) ? listeners : [listeners];
	        listeners.push(listener);
	    }
	    else {
	        listeners = listener;
	    }
	    promise._listeners = listeners;
	}
	// The difference beween setCompleteValue()/setErrorValue() and complete()/error() is that setXXXValue() moves
	// a promise directly to the success/error state without starting another notification pass (because one
	// is already ongoing).
	function setErrorInfo(promise, errorId, isException) {
	    promise._isException = isException || false;
	    promise._errorId = errorId;
	}
	function setErrorValue(promise, value, onerrorDetails, context) {
	    promise._value = value;
	    callonerror(promise, value, onerrorDetails, context);
	    promise._setState(state_error);
	}
	function setCompleteValue(promise, value) {
	    var targetState;
	    if (Promise.is(value)) {
	        targetState = state_waiting;
	    }
	    else {
	        targetState = state_success;
	    }
	    promise._value = value;
	    promise._setState(targetState);
	}
	function then(promise, onComplete, onError) {
	    var result = new ThenPromise(promise);
	    pushListener(promise, { promise: result, c: onComplete, e: onError });
	    return result;
	}
	//
	// Slim promise implementations for already completed promises, these are created
	// under the hood on synchronous completion paths as well as by Promise.wrap
	// and Promise.wrapError.
	//
	var ErrorPromise = (function () {
	    function ErrorPromise(value, errorFunc) {
	        if (errorFunc === void 0) { errorFunc = detailsForError; }
	        this._value = value;
	        callonerror(this, value, errorFunc);
	    }
	    ErrorPromise.prototype.cancel = function () {
	        /* No-op */
	    };
	    ErrorPromise.prototype.done = function (unused, onError) {
	        var value = this._value;
	        if (onError) {
	            try {
	                if (!onError.handlesOnError) {
	                    callonerror(null, value, detailsForHandledError, this, onError);
	                }
	                var result = onError(value);
	                if (Promise.is(result)) {
	                    // If a promise is returned we need to wait on it.
	                    result.done();
	                }
	                return;
	            }
	            catch (ex) {
	                value = ex;
	            }
	        }
	        if (value instanceof Error && value.message === canceledName) {
	            // suppress cancel
	            return;
	        }
	        // force the exception to be thrown asyncronously to avoid any try/catch blocks
	        //
	        doneHandler(value);
	    };
	    ErrorPromise.prototype.then = function (unused, onError) {
	        // If the promise is already in a error state and no error handler is provided
	        // we optimize by simply returning the promise instead of creating a new one.
	        //
	        if (!onError) {
	            return this;
	        }
	        var result;
	        var value = this._value;
	        try {
	            if (!onError.handlesOnError) {
	                callonerror(null, value, detailsForHandledError, this, onError);
	            }
	            result = new CompletePromise(onError(value));
	        }
	        catch (ex) {
	            // If the value throw from the error handler is the same as the value
	            // provided to the error handler then there is no need for a new promise.
	            //
	            if (ex === value) {
	                result = this;
	            }
	            else {
	                result = new ExceptionPromise(ex);
	            }
	        }
	        return result;
	    };
	    return ErrorPromise;
	}());
	var ExceptionPromise = (function (_super) {
	    __extends(ExceptionPromise, _super);
	    function ExceptionPromise(value) {
	        return _super.call(this, value, detailsForException) || this;
	    }
	    return ExceptionPromise;
	}(ErrorPromise));
	var CompletePromise = (function () {
	    function CompletePromise(value) {
	        if (Promise.is(value)) {
	            var result = new ThenPromise(undefined);
	            result._setCompleteValue(value);
	            return result;
	        }
	        this._value = value;
	    }
	    CompletePromise.prototype.cancel = function () {
	        /* No-op */
	    };
	    CompletePromise.prototype.done = function (onComplete) {
	        if (!onComplete) {
	            return;
	        }
	        try {
	            var result = onComplete(this._value);
	            if (Promise.is(result)) {
	                result.done();
	            }
	        }
	        catch (ex) {
	            // force the exception to be thrown asynchronously to avoid any try/catch blocks
	            doneHandler(ex);
	        }
	    };
	    CompletePromise.prototype.then = function (onComplete) {
	        var resultPromise;
	        try {
	            // If the value returned from the completion handler is the same as the value
	            // provided to the completion handler then there is no need for a new promise.
	            //
	            var newValue = onComplete ? onComplete(this._value) : this._value;
	            resultPromise = newValue === this._value ? this : new CompletePromise(newValue);
	        }
	        catch (ex) {
	            resultPromise = new ExceptionPromise(ex);
	        }
	        return resultPromise;
	    };
	    return CompletePromise;
	}());
	function timeout(timeoutMS) {
	    var id;
	    return new Promise(function (c) {
	        if (timeoutMS) {
	            id = async.setTimeout(c, timeoutMS);
	        }
	        else {
	            async.setImmediate(c);
	        }
	    }, function () {
	        if (id) {
	            async.clearTimeout(id);
	        }
	    });
	}
	function timeoutWithPromise(timeout, promise) {
	    var cancelPromise = function () { promise.cancel(); };
	    var cancelTimeout = function () { timeout.cancel(); };
	    timeout.then(cancelPromise);
	    promise.then(cancelTimeout, cancelTimeout);
	    return promise;
	}
	function getCancelAll(values) {
	    return function () {
	        for (var _i = 0, _a = Object.keys(values); _i < _a.length; _i++) {
	            var key = _a[_i];
	            var promise = Promise.as(values[key]);
	            if (typeof promise.cancel === "function") {
	                promise.cancel();
	            }
	        }
	    };
	}
	var staticCanceledPromise;
	var Promise = (function () {
	    function Promise(init, oncancel) {
	        this._init(init, oncancel);
	    }
	    Object.defineProperty(Promise, "cancel", {
	        get: function () {
	            return staticCanceledPromise || (staticCanceledPromise = new ErrorPromise(canceledName));
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Returns a promise that is fulfilled when one of the input promises
	     * has been fulfilled.
	     */
	    Promise.any = function (values) {
	        return new Promise(function (complete, error) {
	            var keys = Object.keys(values);
	            var pending = keys.length;
	            if (pending === 0) {
	                complete();
	            }
	            var _loop_1 = function (key) {
	                Promise.as(values[key]).then(function () { complete({ key: key, value: values[key] }); }, function (e) {
	                    if (e instanceof Error && e.name === canceledName) {
	                        if (--pending === 0) {
	                            complete(Promise.cancel);
	                        }
	                        return;
	                    }
	                    error({ key: key, value: values[key] });
	                });
	            };
	            for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
	                var key = keys_1[_i];
	                _loop_1(key);
	            }
	        }, getCancelAll(values));
	    };
	    /**
	     * Returns a promise. If the object is already a promise it is returned;
	     * otherwise the object is wrapped in a promise.
	     */
	    Promise.as = function (value) {
	        return Promise.is(value) ? value : new CompletePromise(value);
	    };
	    /**
	     * Determines whether a value fulfills the promise contract.
	     */
	    Promise.is = function (value) {
	        return value && typeof value === "object" && typeof value.then === "function";
	    };
	    /**
	     * Determines whether an error value represents a promise cancellation.
	     */
	    Promise.isCanceled = function (e) {
	        return (e instanceof Error && e.name === canceledName);
	    };
	    Promise.all = function (values) {
	        return new Promise(function (complete, error) {
	            var keys = Object.keys(values);
	            var errors = Array.isArray(values) ? [] : {};
	            var results = Array.isArray(values) ? [] : {};
	            var pending = keys.length;
	            var argDone = function () {
	                if ((--pending) === 0) {
	                    var errorKeys = Object.keys(errors);
	                    var errorCount = errorKeys.length;
	                    if (errorCount === 0) {
	                        complete(results);
	                    }
	                    else {
	                        if (errorKeys.every(function (key) { return Promise.isCanceled(errors[key]); })) {
	                            complete(Promise.cancel);
	                        }
	                        else {
	                            error(errors);
	                        }
	                    }
	                }
	            };
	            var _loop_2 = function (key) {
	                var value = values[key];
	                if (value === undefined) {
	                    pending--;
	                }
	                else {
	                    Promise.then(value, function (result) { results[key] = result; argDone(); }, function (error) { errors[key] = error; argDone(); });
	                }
	            };
	            for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {
	                var key = keys_2[_i];
	                _loop_2(key);
	            }
	            if (pending === 0) {
	                complete(results);
	            }
	        }, getCancelAll(values));
	    };
	    Promise.then = function (value, onComplete, onError) {
	        return Promise.as(value).then(onComplete, onError);
	    };
	    Promise.thenEach = function (values, onComplete, onError) {
	        var result = Array.isArray(values) ? [] : {};
	        for (var _i = 0, _a = Object.keys(values); _i < _a.length; _i++) {
	            var key = _a[_i];
	            result[key] = Promise.then(values[key], onComplete, onError);
	        }
	        return Promise.all(result);
	    };
	    Promise.serial = function (tasks) {
	        return tasks.reduce(function (previous, task) {
	            return previous.then(task);
	        }, Promise.wrap());
	    };
	    /**
	     * Creates a promise that is fulfilled after a timeout.
	     */
	    Promise.timeout = function (time, promise) {
	        var to = timeout(time);
	        return promise ? timeoutWithPromise(to, promise) : to;
	    };
	    /**
	     * Wraps a non-promise value in a promise. You can use this function if you need
	     * to pass a value to a function that requires a promise.
	     */
	    Promise.wrap = function (value) {
	        return new CompletePromise(value);
	    };
	    /**
	     * Wraps a non-promise error value in a promise. You can use this function if you need
	     * to pass an error to a function that requires a promise.
	     */
	    Promise.wrapError = function (error) {
	        return new ErrorPromise(error);
	    };
	    /**
	     * Attempts to cancel the fulfillment of a promised value. If the promise hasn't
	     * already been fulfilled and cancellation is supported, the promise enters
	     * the error state with a value of Error("Canceled").
	     */
	    Promise.prototype.cancel = function () {
	        this._state.cancel(this);
	        this._run();
	    };
	    /**
	     * Allows you to specify the work to be done on the fulfillment of the promised value,
	     * the error handling to be performed if the promise fails to fulfill
	     * a value.
	     *
	     * After the handlers have finished executing, this function throws any error that would have been returned
	     * from then() as a promise in the error state.
	     *
	     * @param onComplete The function to be called if the promise is fulfilled successfully with a value. The fulfilled value is passed as the single argument. If the value is null, the fulfilled value is returned. The value returned from the function becomes the fulfilled value of the promise returned by then. If an exception is thrown while executing the function, the promise returned by then moves into the error state.
	     * @param onError The function to be called if the promise is fulfilled with an error. The error is passed as the single argument. If it is null, the error is forwarded. The value returned from the function is the fulfilled value of the promise returned by then.
	     */
	    Promise.prototype.done = function (onComplete, onError) {
	        this._state.done(this, onComplete, onError);
	    };
	    /**
	     * Allows you to specify the work to be done on the fulfillment of the promised value,
	     * the error handling to be performed if the promise fails to fulfill
	     * a value.
	     *
	     * @param onComplete The function to be called if the promise is fulfilled successfully with a value. The value is passed as the single argument. If the value is null, the value is returned. The value returned from the function becomes the fulfilled value of the promise returned by then. If an exception is thrown while this function is being executed, the promise returned by then moves into the error state.
	     * @param onError The function to be called if the promise is fulfilled with an error. The error is passed as the single argument. In different cases this object may be of different types, so it is necessary to test the object for the properties you expect. If the error is null, it is forwarded. The value returned from the function becomes the value of the promise returned by the then function.
	     * @returns The promise whose value is the result of executing the complete or error function.
	     */
	    Promise.prototype.then = function (onComplete, onError) {
	        return this._state.then(this, onComplete, onError);
	    };
	    Promise.prototype._init = function (init, oncancel) {
	        this._oncancel = oncancel;
	        this._setState(state_created);
	        this._run();
	        try {
	            init(this._completed.bind(this), this._error.bind(this));
	        }
	        catch (ex) {
	            this._setExceptionValue(ex);
	        }
	    };
	    Promise.prototype._cancelAction = function () {
	        if (this._oncancel) {
	            try {
	                this._oncancel();
	            }
	            catch (ex) { }
	        }
	    };
	    Promise.prototype._cleanupAction = function () {
	        this._oncancel = null;
	    };
	    Promise.prototype._chainedError = function (value, context) {
	        var result = this._state._error(this, value, detailsForChainedError, context);
	        this._run();
	        return result;
	    };
	    Promise.prototype._completed = function (value) {
	        var result = this._state._completed(this, value);
	        this._run();
	        return result;
	    };
	    Promise.prototype._error = function (value) {
	        var result = this._state._error(this, value, detailsForError);
	        this._run();
	        return result;
	    };
	    Promise.prototype._setState = function (state) {
	        this._nextState = state;
	    };
	    Promise.prototype._setCompleteValue = function (value) {
	        this._state._setCompleteValue(this, value);
	        this._run();
	    };
	    Promise.prototype._setChainedErrorValue = function (value, context) {
	        var result = this._state._setErrorValue(this, value, detailsForChainedError, context);
	        this._run();
	        return result;
	    };
	    Promise.prototype._setExceptionValue = function (value) {
	        var result = this._state._setErrorValue(this, value, detailsForException);
	        this._run();
	        return result;
	    };
	    Promise.prototype._run = function () {
	        while (this._nextState) {
	            this._state = this._nextState;
	            this._nextState = null;
	            this._state.enter(this);
	        }
	    };
	    return Promise;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Promise;
	events = new EventGroup_1.default(Promise);
	events.declare(errorET);
	//
	// Internal implementation detail promise, ThenPromise is created when a promise needs
	// to be returned from a then() method.
	//
	var ThenPromise = (function (_super) {
	    __extends(ThenPromise, _super);
	    function ThenPromise(creator) {
	        var _this = _super.call(this) || this;
	        _this._creator = creator;
	        _this._initThen();
	        return _this;
	    }
	    ThenPromise.prototype._init = function () {
	        // Override to do nothing.
	    };
	    ThenPromise.prototype._cancelAction = function () {
	        if (this._creator) {
	            this._creator.cancel();
	        }
	    };
	    ThenPromise.prototype._cleanupAction = function () {
	        this._creator = null;
	    };
	    ThenPromise.prototype._initThen = function () {
	        this._setState(state_created);
	        this._run();
	    };
	    return ThenPromise;
	}(Promise));
	var SignalPromise = (function (_super) {
	    __extends(SignalPromise, _super);
	    function SignalPromise(cancel) {
	        var _this = _super.call(this) || this;
	        _this._oncancel = cancel;
	        _this._initSignal();
	        return _this;
	    }
	    SignalPromise.prototype._init = function () {
	        // Override to do nothing.
	    };
	    SignalPromise.prototype._cancelAction = function () {
	        if (this._oncancel) {
	            this._oncancel();
	        }
	    };
	    SignalPromise.prototype._cleanupAction = function () {
	        this._oncancel = null;
	    };
	    SignalPromise.prototype._initSignal = function () {
	        this._setState(state_created);
	        this._run();
	    };
	    return SignalPromise;
	}(Promise));
	exports.SignalPromise = SignalPromise;


/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var ErrorHelper_1 = __webpack_require__(50);
	/** An instance of EventGroup allows anything with a handle to it to trigger events on it.
	 *  If the target is an HTMLElement, the event will be attached to the element and can be
	 *  triggered as usual (like clicking for onclick).
	 *  The event can be triggered by calling EventGroup.raise() here. If the target is an
	 *  HTMLElement, the event gets raised and is handled by the browser. Otherwise, it gets
	 *  handled here in EventGroup, and the handler is called in the context of the parent
	 *  (which is passed in in the constructor).
	 */
	var EventGroup = (function () {
	    /** parent: the context in which events attached to non-HTMLElements are called */
	    function EventGroup(parent) {
	        this._id = EventGroup._uniqueId++;
	        this._parent = parent;
	        this._eventRecords = [];
	    }
	    /** For IE8, bubbleEvent is ignored here and must be dealt with by the handler.
	     *  Events raised here by default have bubbling set to false and cancelable set to true.
	     *  This applies also to built-in events being raised manually here on HTMLElements,
	     *  which may lead to unexpected behavior if it differs from the defaults.
	     */
	    EventGroup.raise = function (target, eventName, eventArgs, bubbleEvent) {
	        var retVal;
	        if (EventGroup._isElement(target)) {
	            if (document.createEvent) {
	                var ev = document.createEvent('HTMLEvents');
	                ev.initEvent(eventName, bubbleEvent, true);
	                ev['args'] = eventArgs;
	                retVal = target.dispatchEvent(ev);
	            }
	            else if (document['createEventObject']) {
	                var evObj = document['createEventObject'](eventArgs);
	                // cannot set cancelBubble on evObj, fireEvent will overwrite it
	                target.fireEvent("on" + eventName, evObj);
	            }
	        }
	        else {
	            while (target && retVal !== false) {
	                var events = target.__events__;
	                var eventRecords = events ? events[eventName] : null;
	                for (var id in eventRecords) {
	                    var eventRecordList = eventRecords[id];
	                    for (var listIndex = 0; retVal !== false && listIndex < eventRecordList.length; listIndex++) {
	                        var record = eventRecordList[listIndex];
	                        if (record.objectCallback) {
	                            retVal = record.objectCallback.call(record.parent, eventArgs);
	                        }
	                    }
	                }
	                // If the target has a parent, bubble the event up.
	                target = bubbleEvent ? target.parent : null;
	            }
	        }
	        return retVal;
	    };
	    EventGroup.isObserved = function (target, eventName) {
	        var events = target && target.__events__;
	        return !!events && !!events[eventName];
	    };
	    /** Check to see if the target has declared support of the given event. */
	    EventGroup.isDeclared = function (target, eventName) {
	        var declaredEvents = target && target.__declaredEvents;
	        return !!declaredEvents && !!declaredEvents[eventName];
	    };
	    EventGroup.stopPropagation = function (event) {
	        if (event.stopPropagation) {
	            event.stopPropagation();
	        }
	        else {
	            event.cancelBubble = true;
	        }
	    };
	    EventGroup._isElement = function (target) {
	        return !!target && (target instanceof HTMLElement || target.addEventListener);
	    };
	    EventGroup.prototype.dispose = function () {
	        if (!this._isDisposed) {
	            this._isDisposed = true;
	            this.off();
	            this._parent = null;
	        }
	    };
	    /** On the target, attach a set of events, where the events object is a name to function mapping. */
	    EventGroup.prototype.onAll = function (target, events, useCapture) {
	        for (var eventName in events) {
	            this.on(target, eventName, events[eventName], useCapture);
	        }
	    };
	    /** On the target, attach an event whose handler will be called in the context of the parent
	     * of this instance of EventGroup.
	     */
	    EventGroup.prototype.on = function (target, eventName, callback, useCapture) {
	        var _this = this;
	        if (eventName.indexOf(',') > -1) {
	            var events = eventName.split(/[ ,]+/);
	            for (var i = 0; i < events.length; i++) {
	                this.on(target, events[i], callback, useCapture);
	            }
	        }
	        else {
	            var parent = this._parent;
	            var eventRecord = {
	                target: target,
	                eventName: eventName,
	                parent: parent,
	                callback: callback,
	                objectCallback: null,
	                elementCallback: null,
	                useCapture: useCapture
	            };
	            // Initialize and wire up the record on the target, so that it can call the callback if the event fires.
	            var events_1 = (target.__events__ = target.__events__ || {});
	            events_1[eventName] = events_1[eventName] || {
	                count: 0
	            };
	            events_1[eventName][this._id] = events_1[eventName][this._id] || [];
	            events_1[eventName][this._id].push(eventRecord);
	            events_1[eventName].count++;
	            if (EventGroup._isElement(target)) {
	                var processElementEvent = function () {
	                    var args = [];
	                    for (var _i = 0; _i < arguments.length; _i++) {
	                        args[_i] = arguments[_i];
	                    }
	                    if (_this._isDisposed) {
	                        return;
	                    }
	                    try {
	                        var result = callback.apply(parent, args);
	                        if (result === false && args[0] && args[0].preventDefault) {
	                            var e = args[0];
	                            e.preventDefault();
	                            e.cancelBubble = true;
	                        }
	                    }
	                    catch (e) {
	                        ErrorHelper_1.default.log(e);
	                    }
	                    return result;
	                };
	                eventRecord.elementCallback = processElementEvent;
	                if (target.addEventListener) {
	                    /* tslint:disable:ban-native-functions */
	                    target.addEventListener(eventName, processElementEvent, useCapture);
	                }
	                else if (target.attachEvent) {
	                    target.attachEvent("on" + eventName, processElementEvent);
	                }
	            }
	            else {
	                var processObjectEvent = function () {
	                    var args = [];
	                    for (var _i = 0; _i < arguments.length; _i++) {
	                        args[_i] = arguments[_i];
	                    }
	                    if (_this._isDisposed) {
	                        return;
	                    }
	                    return callback.apply(parent, args);
	                };
	                eventRecord.objectCallback = processObjectEvent;
	            }
	            // Remember the record locally, so that it can be removed.
	            this._eventRecords.push(eventRecord);
	        }
	    };
	    EventGroup.prototype.off = function (target, eventName, callback, useCapture) {
	        for (var i = 0; i < this._eventRecords.length; i++) {
	            var eventRecord = this._eventRecords[i];
	            if ((!target || target === eventRecord.target) &&
	                (!eventName || eventName === eventRecord.eventName) &&
	                (!callback || callback === eventRecord.callback) &&
	                ((typeof useCapture !== 'boolean') || useCapture === eventRecord.useCapture)) {
	                var events = eventRecord.target.__events__;
	                var targetArrayLookup = events[eventRecord.eventName];
	                var targetArray = targetArrayLookup ? targetArrayLookup[this._id] : null;
	                // We may have already target's entries, so check for null.
	                if (targetArray) {
	                    if (targetArray.length === 1 || !callback) {
	                        targetArrayLookup.count -= targetArray.length;
	                        delete events[eventRecord.eventName][this._id];
	                    }
	                    else {
	                        targetArrayLookup.count--;
	                        targetArray.splice(targetArray.indexOf(eventRecord), 1);
	                    }
	                    if (!targetArrayLookup.count) {
	                        delete events[eventRecord.eventName];
	                    }
	                }
	                if (eventRecord.elementCallback) {
	                    if (eventRecord.target.removeEventListener) {
	                        eventRecord.target.removeEventListener(eventRecord.eventName, eventRecord.elementCallback, eventRecord.useCapture);
	                    }
	                    else if (eventRecord.target.detachEvent) {
	                        eventRecord.target.detachEvent("on" + eventRecord.eventName, eventRecord.elementCallback);
	                    }
	                }
	                this._eventRecords.splice(i--, 1);
	            }
	        }
	    };
	    /** Trigger the given event in the context of this instance of EventGroup. */
	    EventGroup.prototype.raise = function (eventName, eventArgs, bubbleEvent) {
	        return EventGroup.raise(this._parent, eventName, eventArgs, bubbleEvent);
	    };
	    /** Declare an event as being supported by this instance of EventGroup. */
	    EventGroup.prototype.declare = function (event) {
	        var declaredEvents = this._parent.__declaredEvents = this._parent.__declaredEvents || {};
	        if (typeof event === 'string') {
	            declaredEvents[event] = true;
	        }
	        else {
	            for (var i = 0; i < event.length; i++) {
	                declaredEvents[event[i]] = true;
	            }
	        }
	    };
	    return EventGroup;
	}());
	EventGroup._uniqueId = 0;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = EventGroup;


/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var PairedEventBase_1 = __webpack_require__(48);
	var Qos_event_1 = __webpack_require__(47);
	var ResultTypeEnum_1 = __webpack_require__(49);
	exports.ResultTypeEnum = ResultTypeEnum_1.ResultTypeEnum;
	exports.Api = PairedEventBase_1.createPairedEvent({
	    eventName: 'Api,Qos,',
	    shortEventName: 'Api',
	    samplingFeature: { ODB: true, ODC: 'ApiEventLogging', Fallback: false }
	}, {
	    url: 1 /* String */
	}, Qos_event_1.Qos);
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = exports.Api;


/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var Engagement_event_1 = __webpack_require__(43);
	;
	;
	/**
	 * Enum for the types of targets that can be used to run an experiment.
	 * @enum {number}
	 */
	var TargetType;
	(function (TargetType) {
	    /** Value for user population. */
	    TargetType[TargetType["user"] = 1] = "user";
	    /** Value for tenant population.  */
	    TargetType[TargetType["tenant"] = 2] = "tenant";
	    /** Value for farm population. */
	    TargetType[TargetType["farm"] = 3] = "farm";
	})(TargetType = exports.TargetType || (exports.TargetType = {}));
	/**
	 * This class will be used for AB Testing type of experiments.
	 */
	var ABExperiment = (function () {
	    /**
	     * @constructor
	     * @param {IABExperimentData} experimentData The data for the experiment.
	     * @example
	     * // set the experiment data
	     * let newMenuExperimentData: IABExperimentData = { name: "NewMenu", startDate: "11/17/2016", segmentPopulation: 0.4};
	     * // create the experiment object
	     * let newMenuExperiment: ABExperiment = new ABExperiment(newMenuExperimentData);
	     */
	    function ABExperiment(experimentData) {
	        // set the _experimentData
	        // if segementPopulation is not specified set it to half, 0.5
	        // if targetType is not specified set it to user type
	        this._experimentData = {
	            name: experimentData.name,
	            startDate: experimentData.startDate,
	            segmentPopulation: (experimentData.segmentPopulation === undefined) ? 0.5 : experimentData.segmentPopulation,
	            targetType: (experimentData.targetType === undefined) ? TargetType.user : experimentData.targetType
	        };
	        // set isOn to false, by default
	        this._isOn = false;
	        if (ABExperiment._hostSettings === null || ABExperiment._hostSettings === undefined) {
	            // log that the App that wasnts to do experiments
	            // does not have host settings and quit doing the experiment checks
	            Engagement_event_1.Engagement.logData({ name: this._experimentData.name + ".Experiment.HostSettingsMissing" });
	        }
	        else {
	            // set the isOn flag based on the target type
	            // if it ever reaches the default then return false
	            switch (this._experimentData.targetType) {
	                case TargetType.user:
	                    this._isOn = this._isUserExperimentOn();
	                    break;
	                case TargetType.tenant:
	                    this._isOn = this._isTenantExperimentOn();
	                    break;
	                case TargetType.farm:
	                    this._isOn = this._isFarmExperimentOn();
	                    break;
	            }
	        }
	    }
	    /**
	     * Initializes ABExperiment with the hostSettings.
	     * @param {IABContext} hostSettings The host settings of the app where is experiment is running.
	     */
	    ABExperiment.Init = function (hostSettings) {
	        ABExperiment._hostSettings = hostSettings;
	        ABExperiment._hostSettings = {
	            userLoginName: hostSettings.userLoginName || 'missing_user',
	            siteSubscriptionId: hostSettings.siteSubscriptionId || 'missing_tenant',
	            farmLabel: hostSettings.farmLabel || 'missing_farm'
	        };
	    };
	    /**
	     * Returns the experiment data to be used for logging purposes.
	     * @return {IABExperimentData}.
	     */
	    ABExperiment.prototype.GetExperimentData = function () {
	        return this._experimentData;
	    };
	    /**
	     * Checks if the current specified target is being selected to be part of the experiment.
	     * @param {string} targetType is the type of target that the experiment will run on. It can be user, tenant, or farm.
	     * @return {boolean}.
	     */
	    ABExperiment.prototype.IsExperimentOn = function () {
	        return this._isOn;
	    };
	    /**
	     * Checks if the current user is being selected to be part of the experiment.
	     * @return {boolean}.
	     */
	    ABExperiment.prototype._isUserExperimentOn = function () {
	        // in case there are no host settings default to no experiments
	        if (ABExperiment._hostSettings === null) {
	            return false;
	        }
	        // build an uber token
	        var targetToken = this._experimentData.name + '_' +
	            ABExperiment._hostSettings.userLoginName + '_' +
	            ABExperiment._hostSettings.siteSubscriptionId + '_' +
	            ABExperiment._hostSettings.farmLabel;
	        return this._isExperimentOn(targetToken);
	    };
	    /**
	     * Checks if the current tenant is being selected to be part of the experiment.
	     * @return {boolean}.
	     */
	    ABExperiment.prototype._isTenantExperimentOn = function () {
	        // in case there are no settings default to no experiment path 
	        if (ABExperiment._hostSettings === null) {
	            return false;
	        }
	        // build an uber token 
	        var targetToken = this._experimentData.name + '_' +
	            ABExperiment._hostSettings.siteSubscriptionId + '_' +
	            ABExperiment._hostSettings.farmLabel;
	        return this._isExperimentOn(targetToken);
	    };
	    /**
	     * Checks if the current farm is being selected to be part of the experiment.
	     * @return {boolean}.
	     */
	    ABExperiment.prototype._isFarmExperimentOn = function () {
	        // in case there are no settings default to no experiment path 
	        if (ABExperiment._hostSettings === null) {
	            return false;
	        }
	        // build the token 
	        var targetToken = this._experimentData.name + '_' +
	            ABExperiment._hostSettings.farmLabel;
	        return this._isExperimentOn(targetToken);
	    };
	    /**
	     * Returns true if the curent target type is being selected to be part of the experiment.
	     * @param {string} targetToken this is the unique identfier for target.
	     * @returns {boolean} true if the targetToken is in the segementPopulation defined for the experiment.
	     */
	    ABExperiment.prototype._isExperimentOn = function (targetToken) {
	        if (targetToken === null) {
	            return false;
	        }
	        // get the hash number for the specified targetToken
	        var varHash = this._getHashNumber(targetToken);
	        // it returns true if varHash is less than segementPopulation
	        // same time, it logs experiment info
	        if (varHash <= this._experimentData.segmentPopulation) {
	            this._logData();
	            return true;
	        }
	        else {
	            this._logData();
	            return false;
	        }
	    };
	    /**
	     * Returns an unique number based on the string provided.
	     * @param {string} inputString this is the unique uber identfier for target.
	     * @returns {number}.
	     */
	    ABExperiment.prototype._getHashNumber = function (inputString) {
	        // in case there will be empty strings returns 1
	        // this will take it to the experiment off path
	        if (inputString.length === 0) {
	            return 1;
	        }
	        var hash = 5381;
	        for (var i = 0; i < inputString.length; ++i) {
	            hash = ((hash << 5) + hash) + inputString.charCodeAt(i);
	            hash = hash & hash;
	        }
	        hash = hash & 0xFFFF;
	        return hash / 0xFFFF;
	    };
	    ;
	    /**
	     * Log the experiment data for teting purposes.
	     */
	    ABExperiment.prototype._logData = function () {
	        // prepare the extraData
	        var extraData = { isOn: this._isOn,
	            startDate: this._experimentData.startDate,
	            isExternalGuestUser: ABExperiment._hostSettings.isExternalGuestUser,
	            isAnonymousGuestUser: ABExperiment._hostSettings.isAnonymousGuestUser,
	            farmLabel: ABExperiment._hostSettings.farmLabel,
	            targetType: this._experimentData.targetType
	        };
	        // the tag will look like this <ScenarioName>.<experimentName>.Experiment
	        Engagement_event_1.Engagement.logData({ name: this._experimentData.name + ".Experiment", extraData: extraData });
	    };
	    return ABExperiment;
	}());
	exports.ABExperiment = ABExperiment;


/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Scope_1 = __webpack_require__(97);
	var Resources_1 = __webpack_require__(99);
	/**
	 * Base class for lifetime-managed, scoped components.
	 *
	 * Many web components ultimately need to set up subscriptions to events,
	 * manage HTML elements, wait on asychronous activities, and clean up
	 * loaded state. The `Component` base class provides a way to create a hierarchy
	 * of objects with lifetime management and automatic resource scoping.
	 *
	 * `Component` combines the benefits of `ResourceScope` and `Scope` into a single
	 *  package for convenience.
	 *
	 * If a component-like class needs the benefits of lifetime management but cannot
	 * extend `Component`, consider wrapping a `Scope` and a `ResourceScope` in order
	 * to create child components.
	 *
	 * @export
	 * @class Component
	 * @implements {IDisposable}
	 *
	 * @example
	 *  export interface ISearchServiceParams extends IComponentParams {
	 *      searchMode: SearchMode;
	 *  }
	 *
	 *  export interface ISearchDependencies extends IComponentDependencies {
	 *      context: IContext
	 *      DataRequestor?: typeof DataRequestor;
	 *  }
	 *
	 *  export default class SearchService extends Component {
	 *      public static readonly dependencies = ObjectUtil.extend({
	 *          context: contextKey
	 *      }, Component.dependencies);
	 *
	 *      private _dataRequestor: DataRequestor;
	 *      private _context: IContext;
	 *      private _searchMode: SearchMode;
	 *
	 *      constructor(params: ISearchServiceParams, dependencies: ISearchServiceDependencies) {
	 *          super(params, dependencies);
	 *
	 *          const {
	 *              searchMode
	 *          } = params;
	 *
	 *          const {
	 *              context
	 *              DataRequestor: dataRequestorType // This parameter is only used in unit tests
	 *          } = dependencies;
	 *
	 *          this._searchMode = searchMode;
	 *
	 *          this._context = context;
	 *
	 *          this._dataRequestor = new (this.child(dataRequestorType))();
	 *      }
	 *
	 *      public search(options: ISearchOptions): Promise<ISearchResult> {
	 *          return this._dataRequestor.getData(...).then((data: ISearchResponse) => {
	 *              return this._processResponse(data);
	 *          });
	 *      }
	 *  }
	 */
	var Component = (function () {
	    /**
	     * Creates an instance of Component.
	     * In general, derived classes should invoke `super(params, dependencies)`, supplying both
	     * `params` and `dependencies` to the `Component` class.
	     * When creating a new instance of a derived component, use either
	     * `new (resources.injected(MyComponent))()`
	     * when outside a `Component` or
	     * `new (this.child(MyComponent))()`
	     * when inside a `Component`. This will ensure that resources are properly passed and lifetimes
	     * are properly managed.
	     *
	     * @param {IComponentParams} [params={}] Optional params to control behaviors of this class.
	     * In general, classes which extend components
	     * @param {IComponentDependencies} [dependencies={}] Optional dependencies to override types consumed by this class.
	     * `dependencies` is intended for use during unit testing, to override types consumed outside of resourcing.
	     * Most dependency injection should be done using `ResourceScope`.
	     */
	    function Component(params, dependencies) {
	        if (params === void 0) { params = {}; }
	        if (dependencies === void 0) { dependencies = {}; }
	        var _a = this.resources, resources = _a === void 0 ? (dependencies.resources || params.resources) : _a;
	        this.resources = resources;
	        this._Component_scope = new Scope_1.default();
	    }
	    Object.defineProperty(Component.prototype, "scope", {
	        /**
	         * Gets the lifetime scope manager for this component.
	         * In general, use `new (this.child(Type))()` to create child components
	         * with proper lifetime management.
	         * However, `this.scope` can be used to
	         *
	         * @protected
	         * @type {Scope}
	         */
	        get: function () {
	            return this._Component_scope;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Component.prototype, "isDisposed", {
	        /**
	         * Determines whether or not this component has been disposed.
	         *
	         * @readonly
	         * @protected
	         * @type {boolean}
	         */
	        get: function () {
	            return this.scope.isDisposed;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Component.prototype.dispose = function () {
	        this._Component_scope.dispose();
	    };
	    /**
	     * Produces a constructor for a type which injects instances
	     * with this component's current resources and binds them
	     * to this component's lifetime. New code should prefer `this.child`.
	     *
	     * @protected
	     * @template T
	     * @param {T} type
	     * @returns {T}
	     */
	    Component.prototype.managed = function (type) {
	        if (this.resources) {
	            type = this.resources.injected(type);
	        }
	        return this.scope.attached(type);
	    };
	    Component.prototype.child = function (keyOrType) {
	        var type;
	        if (keyOrType instanceof Resources_1.ResourceKey) {
	            type = this.resources.consume(keyOrType);
	        }
	        else if (this.resources) {
	            type = this.resources.injected(keyOrType, {
	                injectChildResourceScope: true
	            });
	        }
	        else {
	            type = keyOrType;
	        }
	        return this.scope.attached(type);
	    };
	    return Component;
	}());
	Component.dependencies = {
	    resources: Resources_1.resourceScopeKey
	};
	exports.Component = Component;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Component;


/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Disposable_1 = __webpack_require__(98);
	/**
	 * Lifetime manager for scoping components.
	 *
	 * @export
	 * @class Scope
	 * @implements {IDisposable}
	 *
	 * @example
	 *  const scope = new Scope();
	 *
	 *  let instance = new (scope.attached(MyComponent))();
	 *
	 *  scope.dispose();
	 */
	var Scope = (function () {
	    /**
	     * Creates an instance of Scope.
	     */
	    function Scope() {
	        this._disposables = {};
	        this._lastDisposableId = 0;
	    }
	    /**
	     * Produces a constructor for instances of a type which will be bound to the lifetime
	     * of this scope.
	     *
	     * @template T the type of object to be created.
	     * @param {T} the original constructor for the type.
	     * @returns {T} a new constructor to invoke to create the object.
	     */
	    Scope.prototype.attached = function (type) {
	        var scope = this;
	        var Attached = function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            return scope.attach(type.apply(this, args) || this);
	        };
	        if (true) {
	            // This pattern results in the correct type being displayed in the debugger
	            var wrappedConstructor_1 = Attached;
	            Attached = function () {
	                var args = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    args[_i] = arguments[_i];
	                }
	                return wrappedConstructor_1.apply(Object.create(type.prototype), args);
	            };
	        }
	        Attached.prototype = type.prototype;
	        return Attached;
	    };
	    Scope.prototype.attach = function (instance) {
	        var _this = this;
	        var id = "" + ++this._lastDisposableId;
	        var disposable = Disposable_1.hook(instance, function () {
	            delete _this._disposables[id];
	        });
	        this._disposables[id] = disposable;
	        return disposable;
	    };
	    /**
	     * Disposes this scope and any attached objects.
	     */
	    Scope.prototype.dispose = function () {
	        if (!this.isDisposed) {
	            this.isDisposed = true;
	        }
	        var disposables = this._disposables;
	        for (var _i = 0, _a = Object.keys(disposables); _i < _a.length; _i++) {
	            var id = _a[_i];
	            var disposable = disposables[id];
	            if (disposable && Disposable_1.isDisposable(disposable)) {
	                disposable.dispose();
	            }
	            delete disposables[id];
	        }
	    };
	    return Scope;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Scope;


/***/ },
/* 98 */
/***/ function(module, exports) {

	"use strict";
	var DisposalChain = (function () {
	    function DisposalChain(owner) {
	        this._callbacks = [];
	        this._owner = owner;
	    }
	    DisposalChain.prototype.addCallback = function (callback) {
	        this._callbacks.push(callback);
	    };
	    DisposalChain.prototype.dispose = function () {
	        // Handle dispose callbacks is the reverse order from when they were attached.
	        while (this._callbacks.length) {
	            var callback = this._callbacks.pop();
	            callback.call(this._owner);
	        }
	    };
	    return DisposalChain;
	}());
	/**
	 * Determines whether not an object requires is disposable.
	 *
	 * @export
	 * @template T
	 * @param {(T | IDisposable)} object
	 * @returns {object is IDisposable}
	 */
	function isDisposable(object) {
	    return typeof object.dispose === 'function';
	}
	exports.isDisposable = isDisposable;
	function hook(instance, onDispose) {
	    var disposable = instance;
	    var dispose = disposable.dispose;
	    var disposalChain = typeof dispose === 'function' && dispose.disposalChain;
	    if (!disposalChain) {
	        disposalChain = new DisposalChain(disposable);
	        var disposeHook = (function () {
	            disposalChain.dispose();
	            if (dispose) {
	                // Restore the old dispose method and clean up modifications.
	                disposable.dispose = dispose;
	                disposable.dispose();
	            }
	        });
	        disposable.dispose = disposeHook;
	        disposeHook.disposalChain = disposalChain;
	    }
	    disposalChain.addCallback(onDispose);
	    return disposable;
	}
	exports.hook = hook;


/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	var ResourceScope_1 = __webpack_require__(100);
	var Disposable_1 = __webpack_require__(98);
	/**
	 * An implementation of IResourceLoader that constructs a {ResolvedResourceFactory} from the type that the load function resolves to.
	 */
	var ResolvedResourceLoader = (function () {
	    function ResolvedResourceLoader(load, dependencies) {
	        this._load = load;
	        this._dependencies = dependencies;
	    }
	    ResolvedResourceLoader.prototype.load = function () {
	        var _this = this;
	        var promise = this._load().then(function (type) {
	            return new ResolvedResourceFactory(type, _this._dependencies);
	        });
	        this.load = function () { return promise; };
	        return promise;
	    };
	    return ResolvedResourceLoader;
	}());
	exports.ResolvedResourceLoader = ResolvedResourceLoader;
	/**
	 * An implementation of IResourceFactory that instantiates the passed type, resolving any dependencies from resources.
	 */
	var ResolvedResourceFactory = (function () {
	    function ResolvedResourceFactory(type, dependencies) {
	        this._type = type;
	        this.dependencies = dependencies || type.dependencies;
	    }
	    ResolvedResourceFactory.prototype.create = function (dependencies) {
	        var instance = new this._type({}, dependencies);
	        return {
	            instance: instance,
	            disposable: instance
	        };
	    };
	    return ResolvedResourceFactory;
	}());
	exports.ResolvedResourceFactory = ResolvedResourceFactory;
	/**
	 * An implementation of IResourceFactory that provides a constructor for the passed type with dependencies resolved from resources.
	 */
	var ResolvedResourceTypeFactory = (function () {
	    function ResolvedResourceTypeFactory(type, dependencies) {
	        this._type = type;
	        this.dependencies = dependencies || type.dependencies;
	    }
	    ResolvedResourceTypeFactory.prototype.create = function (dependencies) {
	        return {
	            instance: ResourceScope_1.getResolvedConstructor(this._type, dependencies)
	        };
	    };
	    return ResolvedResourceTypeFactory;
	}());
	exports.ResolvedResourceTypeFactory = ResolvedResourceTypeFactory;
	/**
	 * An implementation of IResourceFactory for classes that have no dependencies and take no parameters.
	 */
	var SimpleResourceFactory = (function () {
	    function SimpleResourceFactory(type) {
	        this._type = type;
	    }
	    Object.defineProperty(SimpleResourceFactory.prototype, "dependencies", {
	        get: function () {
	            return {};
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SimpleResourceFactory.prototype.create = function () {
	        var instance = new this._type();
	        return {
	            instance: instance,
	            disposable: Disposable_1.isDisposable(instance) && instance
	        };
	    };
	    return SimpleResourceFactory;
	}());
	exports.SimpleResourceFactory = SimpleResourceFactory;
	/**
	 * An implementation of IResourceFactory which wraps an existing resource key.
	 */
	var AliasResourceFactory = (function () {
	    function AliasResourceFactory(key) {
	        this.dependencies = {
	            value: key
	        };
	    }
	    AliasResourceFactory.prototype.create = function (dependencies) {
	        return {
	            instance: dependencies.value
	        };
	    };
	    return AliasResourceFactory;
	}());
	exports.AliasResourceFactory = AliasResourceFactory;
	function createDefaultResourceKey(require, type, dependencies) {
	    return new ResourceScope_1.ResourceKey({
	        name: require('module').id,
	        factory: new ResolvedResourceFactory(type, dependencies)
	    });
	}
	exports.createDefaultResourceKey = createDefaultResourceKey;
	function createDefaultTypeResourceKey(require, type, dependencies) {
	    return new ResourceScope_1.ResourceKey({
	        name: require('module').id,
	        factory: new ResolvedResourceTypeFactory(type, dependencies)
	    });
	}
	exports.createDefaultTypeResourceKey = createDefaultTypeResourceKey;
	__export(__webpack_require__(100));


/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var Promise_1 = __webpack_require__(92);
	var Scope_1 = __webpack_require__(97);
	var Disposable_1 = __webpack_require__(98);
	var lastId = 0;
	var ResourceKey = (function () {
	    function ResourceKey(nameOrOptions) {
	        this.id = ++lastId;
	        if (typeof nameOrOptions === 'string') {
	            this.name = nameOrOptions;
	        }
	        else {
	            this.name = nameOrOptions.name;
	            this.factory = nameOrOptions.factory;
	            this.loader = nameOrOptions.loader;
	            this.useNarrowestScope = nameOrOptions.useNarrowestScope;
	        }
	    }
	    /**
	     * Provides information about this resource key
	     */
	    ResourceKey.prototype.toString = function () {
	        return "Resource #" + this.id + " \"" + this.name + "\"";
	    };
	    return ResourceKey;
	}());
	exports.ResourceKey = ResourceKey;
	var ConstantResourceFactory = (function () {
	    function ConstantResourceFactory(value) {
	        this._value = value;
	    }
	    Object.defineProperty(ConstantResourceFactory.prototype, "dependencies", {
	        get: function () {
	            return {};
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ConstantResourceFactory.prototype.create = function () {
	        return { instance: this._value };
	    };
	    return ConstantResourceFactory;
	}());
	exports.ConstantResourceFactory = ConstantResourceFactory;
	exports.resourceScopeKey = new ResourceKey({
	    name: 'resources'
	});
	var Handle = (function () {
	    function Handle(factory, instanceManager) {
	        this.factory = factory;
	        this.manager = instanceManager;
	    }
	    Handle.prototype.getInstance = function (key, resourceScopeOptions) {
	        var factory = this.factory.value;
	        var resource = factory.create(this.manager.getConsumer().resolve(factory.dependencies, resourceScopeOptions));
	        var instance = resource.instance;
	        if (resource.disposable) {
	            this.manager.scope.attach(resource.disposable);
	        }
	        this.getInstance = function () { return instance; };
	        return instance;
	    };
	    Handle.prototype.promote = function (targetHandleManager) {
	        return new Handle({
	            manager: targetHandleManager,
	            loader: this.factory.loader,
	            value: this.factory.value
	        });
	    };
	    return Handle;
	}());
	var logBeginConstruction;
	var logEndConstruction;
	var logConsume;
	var logExpose;
	var log;
	function getResolvedConstructor(resolvableConstructor, resolvedDependencies) {
	    var Resolved = function (params) {
	        var instance = resolvableConstructor.call(this, params, resolvedDependencies) || this;
	        return instance;
	    };
	    if (true) {
	        // This pattern results in the correct type being displayed in the debugger
	        var wrappedConstructor_1 = Resolved;
	        Resolved = function (params) {
	            logBeginConstruction(resolvableConstructor, 'Resources.resolved');
	            var instance = wrappedConstructor_1.call(Object.create(resolvableConstructor.prototype), params);
	            logEndConstruction(resolvableConstructor, 'Resources.resolved');
	            return instance;
	        };
	    }
	    Resolved.prototype = resolvableConstructor.prototype;
	    return Resolved;
	}
	exports.getResolvedConstructor = getResolvedConstructor;
	var HandleManager = (function () {
	    function HandleManager(parentOrOptions) {
	        this.handles = {};
	        var options;
	        if (parentOrOptions instanceof HandleManager) {
	            if (parentOrOptions.isDisposed) {
	                throw new Error('Parent ResourceScope has already been disposed!');
	            }
	            options = parentOrOptions.options;
	            this._parent = parentOrOptions;
	            this._level = parentOrOptions._level + 1;
	        }
	        else {
	            options = parentOrOptions || {};
	            this._level = 0;
	            if (true) {
	                // Check for setting and enable tracing if set
	                if (!('__ResourceTraceState' in window) && localStorage['EnableResourceTracing']) {
	                    window['__ResourceTraceState'] = {
	                        log: [],
	                        stack: [],
	                        types: {},
	                        exposed: {}
	                    };
	                }
	                log('Created new root level Resource Scope');
	            }
	        }
	        this.scope = new Scope_1.default();
	        this.options = options;
	    }
	    Object.defineProperty(HandleManager.prototype, "isDisposed", {
	        get: function () {
	            return this.scope.isDisposed;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    HandleManager.prototype.block = function (key) {
	        return this._expose(key);
	    };
	    HandleManager.prototype.isDescendantOf = function (manager) {
	        return this._level > manager._level;
	    };
	    HandleManager.prototype.getResourceScope = function (options) {
	        // Bypass type check in order to pass non-exported class to public constructor
	        return this.scope.attach(new ResourceScope(this, options));
	    };
	    HandleManager.prototype.getHandle = function (key) {
	        var manager = this;
	        var keyId = key.id;
	        // Starting with this scope, attempt to find the first scope with an entry (may be undefined)
	        // for the given key. Stop when there are no more ancestor scopes.
	        while (!(keyId in manager.handles) && manager._parent) {
	            manager = manager._parent;
	        }
	        return manager.handles[keyId] || this.options.useFactoriesOnKeys &&
	            (key.factory && (manager.handles[keyId] = new Handle({
	                value: key.factory,
	                manager: manager
	            })) || (key.loader && (manager.handles[keyId] = new Handle({
	                loader: key.loader,
	                manager: manager
	            }))));
	    };
	    HandleManager.prototype.getLocalInstanceHandle = function (keyId) {
	        var handle = this.handles[keyId];
	        // If we have a handle with a manager, return it.
	        return handle && handle.manager && handle;
	    };
	    HandleManager.prototype.expose = function (key, factory, instance) {
	        return this._expose(key, function (handleManager) { return new Handle({
	            value: factory.value,
	            loader: factory.loader,
	            manager: handleManager
	        }, instance && handleManager); });
	    };
	    HandleManager.prototype.getConsumer = function () {
	        this.lock();
	        var consumer = new ResourceConsumer(this);
	        this.getConsumer = function () { return consumer; };
	        return consumer;
	    };
	    HandleManager.prototype.getLoader = function () {
	        this.lock();
	        var loader = new ResourceLoader(this);
	        this.getLoader = function () { return loader; };
	        return loader;
	    };
	    HandleManager.prototype.dispose = function () {
	        this.scope.dispose();
	        this.handles = {};
	        this.getConsumer = onConsumeAfterDispose;
	        this.getLoader = onLoadAfterDispose;
	    };
	    HandleManager.prototype.bind = function (key) {
	        var handle = this.getHandle(key);
	        if (handle) {
	            return this._expose(key, function (handleManager) { return handle.promote(handleManager); });
	        }
	        return this;
	    };
	    HandleManager.prototype.getWritableHandleManager = function () {
	        return this;
	    };
	    HandleManager.prototype.lock = function () {
	        this.getWritableHandleManager = this._fork;
	    };
	    HandleManager.prototype._fork = function () {
	        if (this.options.lockResourcesForChildren) {
	            return this.scope.attach(new HandleManager(this));
	        }
	        else if (true) {
	            log("Expose after consume/child at " + this._level);
	        }
	        return this;
	    };
	    HandleManager.prototype._expose = function (key, createHandle) {
	        if (this.isDisposed) {
	            throw new Error('Cannot expose a resource on a ResourceScope that has been disposed.');
	        }
	        if (key === exports.resourceScopeKey) {
	            throw new Error('It is illegal to expose the ResourceScope key');
	        }
	        var keyId = key.id;
	        var handleManager = this.getWritableHandleManager();
	        var handles = handleManager.handles;
	        if (handles[keyId]) {
	            if (this.options.noDoubleExpose) {
	                throw new Error(key.toString() + " has already been exposed/consumed at this scope.");
	            }
	            else if (true) {
	                log("Duplicate exposure of " + key.toString() + ".");
	            }
	        }
	        handles[keyId] = createHandle ? createHandle(handleManager) : void 0;
	        return handleManager;
	    };
	    return HandleManager;
	}());
	function onConsumeAfterDispose() {
	    throw new Error('Cannot consume a resource from a ResourceScope that has been disposed.');
	}
	function onLoadAfterDispose() {
	    throw new Error('Cannot load a resource from a ResourceScope that has been disposed.');
	}
	function voidify() {
	    // Do nothing
	}
	function getFirstError(errors) {
	    for (var key in errors) {
	        if (errors[key]) {
	            return Promise_1.default.wrapError(errors[key]);
	        }
	    }
	    return Promise_1.default.wrapError(new Error('A dependency could not be loaded.'));
	}
	var ResourceLoader = (function () {
	    function ResourceLoader(handleManager) {
	        this._handleManager = handleManager;
	        this._loadState = {};
	    }
	    /**
	     * Performs an async load of the specified resource. Should return a successful result if the value is optional or loads.
	     * Should return an error result if the value is non-optional and fails to load.
	     * Should return the same promise for multiple requests to the same key.
	     */
	    ResourceLoader.prototype.loadAsync = function (dependency) {
	        // Loading the ResourceScope key is always successful.
	        var key = dependency.key || dependency;
	        if (key === exports.resourceScopeKey) {
	            return Promise_1.default.as();
	        }
	        var promise = this._loadAsync(key);
	        return dependency.isOptional ? promise.then(null, voidify) : promise;
	    };
	    ResourceLoader.prototype.loadAllAsync = function (dependencies) {
	        if (dependencies) {
	            var dependencyNames = Object.keys(dependencies);
	            var length_1 = dependencyNames.length;
	            if (length_1 > 0) {
	                var promises = {};
	                while (length_1--) {
	                    var name_1 = dependencyNames[length_1];
	                    promises[name_1] = this.loadAsync(dependencies[name_1]);
	                }
	                return Promise_1.default.all(promises).then(voidify, getFirstError);
	            }
	        }
	        return Promise_1.default.as();
	    };
	    ResourceLoader.prototype._loadAsync = function (key) {
	        var _this = this;
	        // Check the cache
	        var keyId = key.id;
	        var loadStateMap = this._loadState;
	        var cached = loadStateMap[keyId];
	        if (cached) {
	            return cached;
	        }
	        // Validate that there is a valid handle for the key
	        var handleManager = this._handleManager;
	        var handle = handleManager.getHandle(key);
	        if (!handle) {
	            return loadStateMap[keyId] = Promise_1.default.wrapError(new Error(key.toString() + " is being loaded, but has no factory/loader."));
	        }
	        // Mark possible circular reference
	        loadStateMap[keyId] = Promise_1.default.as();
	        // If we have a synchronously available factory, load its dependencies
	        var factoryEntry = handle.factory;
	        var factory = factoryEntry.value;
	        if (factory) {
	            return loadStateMap[keyId] = this.loadAllAsync(factory.dependencies);
	        }
	        // Finally, fall back to the loader
	        var loader = factoryEntry.loader;
	        if (!loader) {
	            return loadStateMap[keyId] = Promise_1.default.wrapError(new Error(key.toString() + " is being loaded, but no loader was defined."));
	        }
	        var rawPromise = loader.load();
	        factoryEntry.loader = {
	            load: function () { return rawPromise; }
	        };
	        return loadStateMap[keyId] = rawPromise.then(function (value) {
	            if (true) {
	                log("Loaded Resource #" + keyId);
	            }
	            factoryEntry.value = value;
	            var factoryDependencies = value.dependencies;
	            if (factoryDependencies) {
	                return _this.loadAllAsync(factoryDependencies);
	            }
	        });
	    };
	    return ResourceLoader;
	}());
	var ResourceConsumer = (function () {
	    function ResourceConsumer(handleManager) {
	        this._handleManager = handleManager;
	    }
	    ResourceConsumer.prototype.consume = function (key, isOptional, scopeOptions) {
	        var result = this._getValidHandle(key, []);
	        if (!(result instanceof Error)) {
	            return result.getInstance(key, scopeOptions);
	        }
	        else if (!isOptional) {
	            throw result;
	        }
	    };
	    ResourceConsumer.prototype.resolve = function (dependencies, scopeOptions) {
	        var result = {};
	        for (var id in dependencies) {
	            var dependency = dependencies[id];
	            if ((dependency.key || dependency) === exports.resourceScopeKey) {
	                result[id] = this._handleManager.getResourceScope(scopeOptions);
	                continue;
	            }
	            var handle = this._getValidHandle(dependency, []);
	            if (!(handle instanceof Error)) {
	                result[id] = handle.getInstance(dependency.key || dependency, scopeOptions);
	            }
	            else if (!dependency.isOptional) {
	                throw handle;
	            }
	        }
	        return result;
	    };
	    ResourceConsumer.prototype.isExposed = function (key) {
	        return !(this._getValidHandle(key, []) instanceof Error);
	    };
	    ResourceConsumer.prototype._getValidHandle = function (resourceDependency, stack) {
	        var key = resourceDependency.key || resourceDependency;
	        var keyId = key.id;
	        if (stack.indexOf(key) >= 0) {
	            // Circular reference will *always* throw, even on isExposed.
	            throw new Error(key.toString() + " has a circular dependency.");
	        }
	        // Check the cache first
	        var handleManager = this._handleManager;
	        var localHandle = handleManager.getLocalInstanceHandle(keyId);
	        if (localHandle) {
	            return localHandle;
	        }
	        var handle = localHandle || handleManager.getHandle(key);
	        if (!handle) {
	            return new Error(key.toString() + " is being consumed, but has not been exposed by a parent scope.");
	        }
	        var factoryEntry = handle.factory;
	        var factory = factoryEntry.value;
	        if (!factory) {
	            return new Error(key.toString() + " is being consumed synchronously, but was exposed asynchronously and has not been loaded.");
	        }
	        // Find the highest possible scope at which an instance of T can be stored.
	        stack.push(key);
	        var instanceManager = handle.manager;
	        var targetManager = key.useNarrowestScope ? handleManager : instanceManager || factoryEntry.manager;
	        var dependencies = factory.dependencies || {};
	        for (var id in dependencies) {
	            var dependency = dependencies[id];
	            if ((dependency.key || dependency) === exports.resourceScopeKey) {
	                continue;
	            }
	            // Recurse on dependencies.
	            var dependencyHandle = this._getValidHandle(dependency, stack);
	            if (dependencyHandle instanceof Error) {
	                if (!dependency.isOptional) {
	                    stack.pop();
	                    return dependencyHandle;
	                }
	            }
	            else if (dependencyHandle.manager.isDescendantOf(targetManager)) {
	                targetManager = dependencyHandle.manager;
	            }
	        }
	        stack.pop();
	        if (!instanceManager || instanceManager !== targetManager) {
	            // Need a new handle.
	            handle = new Handle(factoryEntry, targetManager);
	            // Place on targetManager, so that other levels can reuse
	            targetManager.handles[keyId] = handle;
	        }
	        return handleManager.handles[keyId] = handle;
	    };
	    return ResourceConsumer;
	}());
	var ResourceScope = (function () {
	    function ResourceScope(parentOrOptions, options) {
	        var parentOwner;
	        var handleManager;
	        if (parentOrOptions instanceof ResourceScope) {
	            handleManager = parentOrOptions._handleManager;
	            parentOwner = parentOrOptions._owner;
	        }
	        else if (parentOrOptions instanceof HandleManager) {
	            handleManager = parentOrOptions;
	        }
	        else {
	            options = parentOrOptions || options;
	        }
	        var scope = new Scope_1.default();
	        if (handleManager) {
	            if (handleManager.scope.isDisposed) {
	                throw new Error('Parent ResourceScope has already been disposed.');
	            }
	            handleManager.lock();
	            if (!handleManager.options.lockResourcesForChildren) {
	                this._getWritableHandleManager = this._fork;
	            }
	        }
	        this._handleManager = handleManager || (handleManager = scope.attach(new HandleManager(options)));
	        this._scope = scope;
	        var owner = options ? options.owner : '';
	        this._owner = parentOwner ? parentOwner + " > " + owner : owner;
	        if (true) {
	            log("new ResourceScope: '" + owner + "'");
	        }
	    }
	    /**
	     * Obtains an instance of a resource with the given key exposed by either this scope
	     * or a parent. Throws if the resource is not found and isOptional is not set.
	     * @param key {ResourceKey} - a shared resource key corresponding to a specific named resource.
	     * @param isOptional {boolean} - if true, consuming an unexposed resource will return undefined
	     * @returns an instance of the resource, if available in this scope or a parent.
	     */
	    ResourceScope.prototype.consume = function (key, isOptional) {
	        if (true) {
	            logConsume(key, isOptional);
	        }
	        return this._handleManager.getConsumer().consume(key, isOptional, { owner: key.toString() });
	    };
	    /**
	     * Obtains an instance of a resource with the given key exposed by either this scope
	     * or a parent. Throws if the resource is not found and isOptional is not set.
	     * @param key {ResourceKey} - a shared resource key corresponding to a specific named resource.
	     * @param isOptional {boolean} - if true, consuming an unexposed resource will return undefined
	     * @returns a promise for an instance of the resource, if available in this scope or a parent.
	     */
	    ResourceScope.prototype.consumeAsync = function (key, isOptional) {
	        if (true) {
	            logConsume(key, isOptional);
	        }
	        var handleManager = this._handleManager;
	        return handleManager.getLoader().loadAsync({
	            key: key,
	            isOptional: isOptional
	        }).then(function () {
	            return handleManager.getConsumer().consume(key, isOptional, { owner: key.toString() });
	        });
	    };
	    /**
	     * Ensures that the specified dependencies have been loaded for synchronous consumption.
	     * @param dependencies {IResourceDependencies} - the dependencies to load.
	     * @returns a promise that will complete when the specified resources are available.
	     */
	    ResourceScope.prototype.load = function (dependencies) {
	        return this._handleManager.getLoader().loadAllAsync(dependencies);
	    };
	    /**
	     * Exposes an asynchronous loader for a resource with the given type-safe key.
	     * @param key {ResourceKey} - a shared resource key corresponding to a specific named resource.
	     * @param loader - the object that can asynchronously load a factory of the desired type
	     */
	    ResourceScope.prototype.exposeAsync = function (key, loader) {
	        this._expose(key, {
	            loader: loader
	        });
	    };
	    /**
	     * Exposes a factory for a resource with the given type-safe key.
	     * @param key {ResourceKey} - a shared resource key corresponding to a specific named resource.
	     * @param factory - the factory that will construct instances when required by this or any child scope.
	     */
	    ResourceScope.prototype.exposeFactory = function (key, factory) {
	        this._expose(key, {
	            value: factory
	        });
	    };
	    /**
	     * Exposes a resource with the given type-safe key.
	     * @param key {ResourceKey} - a shared resource key corresponding to a specific named resource.
	     * @param instance - the instance of the resource to use within this scope.
	     */
	    ResourceScope.prototype.expose = function (key, instance) {
	        if (true) {
	            logExpose(key, this._owner, instance);
	        }
	        this._expose(key, {
	            value: new ConstantResourceFactory(instance)
	        }, instance);
	        return instance;
	    };
	    /**
	     * Hides any resources exposed by parent scopes for the specified key.
	     * @param key {ResourceKey} - a shared resource key corresponding to a specific named resource.
	     */
	    ResourceScope.prototype.block = function (key) {
	        this._handleManager = this._getWritableHandleManager().block(key);
	    };
	    /**
	     * Re-exposes the currently exposed resource at the specified key at the current resource scope.
	     * The effect of this is that the lifetime of instances created by the resource system that depend on the
	     * specific key will not exceed the lifetime of this resource scope.
	     * @param key {ResourceKey} - a shared resource key corresponding to a specific named resource.
	     */
	    ResourceScope.prototype.bind = function (key) {
	        this._handleManager = this._getWritableHandleManager().bind(key);
	    };
	    /**
	     * Checks if a given resource key is defined and known to the system.
	     */
	    ResourceScope.prototype.isDefined = function (key) {
	        var handleManager = this._handleManager;
	        return !handleManager.isDisposed && !!handleManager.getHandle(key);
	    };
	    /**
	     * Checks if a given resource key is exposed in the resource scope (including in parent scopes).
	     * @param key {ResourceKey} - a shared resource key corresponding to a specific named resource.
	     * @return {boolean}
	     */
	    ResourceScope.prototype.isExposed = function (key) {
	        if (true) {
	            logConsume(key, true);
	        }
	        var handleManager = this._handleManager;
	        return !handleManager.isDisposed && handleManager.getConsumer().isExposed(key);
	    };
	    /**
	     * Produces an alternate constructor for the given type which pre-injects the instance with resources
	     * before invoking the real constructor.
	     * This function preserves the original argument types for the constructor, allowing validation
	     * of arguments.
	     * @param type - the type of object for which to create an injected constructor.
	     * @returns an injected version of the original constructor for the type.
	     */
	    ResourceScope.prototype.injected = function (type, options) {
	        if (options === void 0) { options = {}; }
	        var injectChildResourceScope = options.injectChildResourceScope;
	        var childOptions = {
	            owner: options.owner || type.name
	        };
	        var resources = injectChildResourceScope ? this._scope.attach(new ResourceScope(this, childOptions)) : this;
	        var Injected = function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            this.resources = resources;
	            var instance = type.apply(this, args) || this;
	            if (injectChildResourceScope) {
	                Disposable_1.hook(instance, disposeInstanceResources);
	            }
	            return instance;
	        };
	        if (true) {
	            // This pattern results in the correct type being displayed in the debugger
	            var wrappedConstructor_2 = Injected;
	            Injected = function () {
	                var args = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    args[_i] = arguments[_i];
	                }
	                logBeginConstruction(type, 'Resources.injected');
	                var instance = wrappedConstructor_2.apply(Object.create(type.prototype), args);
	                logEndConstruction(type, 'Resources.injected');
	                return instance;
	            };
	        }
	        Injected.prototype = type.prototype;
	        return Injected;
	    };
	    /**
	     * Resolves a set of resource keys
	     *
	     * @param dependencies - an object that maps names to {ResourceKey} instances.
	     * @returns an object mapping the original names to the resolved resources.
	     */
	    ResourceScope.prototype.resolve = function (dependencies) {
	        return this._handleManager.getConsumer().resolve(dependencies);
	    };
	    /**
	     * Resolves a set of resource keys
	     *
	     * @param dependencies - an object that maps names to {ResourceKey} instances.
	     * @returns an object mapping the original names to the resolved resources.
	     */
	    ResourceScope.prototype.resolveAsync = function (dependencies) {
	        var _this = this;
	        return this.load(dependencies).then(function () { return _this.resolve(dependencies); });
	    };
	    ResourceScope.prototype.resolved = function (type, dependencies) {
	        var finalDependencies = __assign({}, (type.dependencies || {}), (dependencies || {}));
	        var resolvedDependencies = this.resolve(finalDependencies);
	        return getResolvedConstructor(type, resolvedDependencies);
	    };
	    ResourceScope.prototype.resolvedAsync = function (type, dependencies) {
	        var _this = this;
	        dependencies = type.dependencies || dependencies;
	        return this.load(dependencies).then(function () { return _this.resolved(type, dependencies); });
	    };
	    /**
	     * Disposes this resource scope and any resources bound to this scope's lifetime.
	     */
	    ResourceScope.prototype.dispose = function () {
	        this._scope.dispose();
	    };
	    ResourceScope.prototype._expose = function (key, factoryInfo, instance) {
	        this._handleManager = this._getWritableHandleManager().expose(key, factoryInfo, instance);
	    };
	    // These methods are to support legacy call patterns by imitating old behavior
	    ResourceScope.prototype._getWritableHandleManager = function () {
	        return this._handleManager;
	    };
	    ResourceScope.prototype._fork = function () {
	        delete this._getWritableHandleManager;
	        if (true) {
	            log("Fork: '" + this._owner + "'");
	        }
	        return this._scope.attach(new HandleManager(this._handleManager));
	    };
	    return ResourceScope;
	}());
	exports.ResourceScope = ResourceScope;
	function disposeInstanceResources() {
	    this.resources.dispose();
	}
	if (true) {
	    var getTraceState_1 = function () {
	        return window['__ResourceTraceState'];
	    };
	    logBeginConstruction = function (type, wrapperType) {
	        var traceState = getTraceState_1();
	        if (traceState) {
	            var typeName = type['name'];
	            var stack = traceState.stack, types = traceState.types;
	            var parent_1 = stack[stack.length - 1] || '_root';
	            (types[parent_1] || (types[parent_1] = {}))[typeName] = wrapperType;
	            if (!(typeName in types)) {
	                types[typeName] = {};
	            }
	        }
	    };
	    logEndConstruction = function (type, wrapperType) {
	        var traceState = getTraceState_1();
	        if (traceState) {
	            traceState.stack.pop();
	        }
	    };
	    logConsume = function (key, isOptional) {
	        var traceState = getTraceState_1();
	        if (traceState) {
	            var stack = traceState.stack, types = traceState.types;
	            var parent_2 = stack[stack.length - 1] || '_root';
	            (types[parent_2] || (types[parent_2] = {}))[isOptional ? key.id + "?" : key.id] = key.name;
	        }
	    };
	    logExpose = function (key, owner, instance) {
	        var traceState = getTraceState_1();
	        if (traceState) {
	            var typeName = instance && instance.constructor['name'];
	            var exposed = traceState.exposed;
	            (exposed[owner] || (exposed[owner] = [])).push({
	                id: key.id,
	                name: key.name,
	                type: typeName
	            });
	        }
	    };
	    log = function (message) {
	        var traceState = getTraceState_1();
	        if (traceState) {
	            traceState.log.push(message);
	        }
	    };
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ResourceScope;


/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var HslColor_1 = __webpack_require__(102);
	var RgbaColor_1 = __webpack_require__(103);
	var Shades_1 = __webpack_require__(104);
	/**
	 * Utility class with static methods to work with Fabric-style themes.
	 */
	var FabricTheming = (function () {
	    function FabricTheming() {
	    }
	    /**
	     * Generates a palette of Fabric colors from a primary RGB color value.
	     * @param {RgbaColor} primaryRgb Primary RGB color used to generate a palette.
	     * @param {boolean} inverted Whether the theme is inverted, with a dark background and light foreground.
	     */
	    FabricTheming.generateFabricColors = function (primaryRgb, inverted) {
	        if (inverted === void 0) { inverted = false; }
	        var generatedShades = {
	            "themeDarker": Shades_1.Shades.Darkest,
	            "themeDark": Shades_1.Shades.Darker,
	            "themeDarkAlt": Shades_1.Shades.Darker,
	            "themeLight": Shades_1.Shades.Lighter,
	            "themeLightAlt": Shades_1.Shades.Lighter,
	            "themeLighter": Shades_1.Shades.Lightest,
	            "themeLighterAlt": Shades_1.Shades.Lightest,
	            "themePrimary": Shades_1.Shades.Unshaded,
	            "themeAccent": Shades_1.Shades.Unshaded,
	            "themeSecondary": Shades_1.Shades.Medium,
	            "themeTertiary": Shades_1.Shades.Lighter,
	            "themeTertiaryAlt": Shades_1.Shades.Lighter
	        };
	        // Expected color slots. Start each defaulting to null to avoid warnings about missing slots.
	        var colors = FabricTheming._getDefaultThemeTokenMap();
	        // Starting points for the generated palette.
	        var primaryColor = RgbaColor_1.default.fromRgba(primaryRgb.R, primaryRgb.G, primaryRgb.B);
	        for (var shadeName in generatedShades) {
	            var shade = generatedShades[shadeName];
	            if (inverted && shade !== Shades_1.Shades.Unshaded) {
	                shade = Shades_1.Shades.Darkest + Shades_1.Shades.Lightest - shade;
	            }
	            colors[shadeName] = Shades_1.getShade(primaryColor, shade);
	        }
	        var accent = colors["themeAccent"];
	        colors["themeAccentTranslucent10"] = accent ?
	            RgbaColor_1.default.fromRgba(accent.R, accent.G, accent.B, 0.1 * RgbaColor_1.default.maxComponent) : null;
	        // Handle neutral slots for inverted themes
	        if (inverted) {
	            var invertedText = '#f8f8f8'; // neutralLighterAlt
	            var invertedNeutralQuaternary = '#6b6b6b';
	            var invertedNeutralQuaternaryAlt = '#707070';
	            var invertedNeutralColors = {
	                'black': '#fff',
	                'blackTranslucent40': '#66ffffff',
	                'neutralDark': '#fff',
	                'neutralPrimary': invertedText,
	                'neutralPrimaryTranslucent50': '#7ff8f8f8',
	                'neutralPrimaryAlt': '#f4f4f4',
	                'neutralSecondary': '#eaeaea',
	                'neutralSecondaryAlt': '#c8c8c8',
	                'neutralTertiary': '#a6a6a6',
	                'neutralTertiaryAlt': '#767676',
	                'neutralQuaternary': invertedNeutralQuaternary,
	                'neutralQuaternaryAlt': invertedNeutralQuaternaryAlt,
	                'cmdbarSelected': invertedNeutralQuaternary,
	                'cmdbarSelectedHover': invertedNeutralQuaternaryAlt,
	                'neutralLight': '#666666',
	                'neutralLighter': '#333',
	                'neutralLighterAlt': '#212121',
	                'primaryText': invertedText,
	                'primaryBackground': '#000',
	                'white': '#000',
	                'whiteTranslucent40': '#66000000',
	                'error': '#f00',
	                'errorBackground': '#7e3333'
	            };
	            for (var neutralSlot in invertedNeutralColors) {
	                if (invertedNeutralColors.hasOwnProperty(neutralSlot)) {
	                    colors[neutralSlot] =
	                        RgbaColor_1.default.fromHtmlColor(invertedNeutralColors[neutralSlot]);
	                }
	            }
	        }
	        return colors;
	    };
	    /**
	     * Applies an Hsl delta to an HslColor to produce a new HslColor.
	     * @param {HslColor} primaryHsl Starting HSL color value.
	     * @param {number} hDelta Delta to apply to the hue.
	     * @param {number} sDelta Delta to apply to the saturation.
	     * @param {number} lDelta Delta to apply to the luminance.
	     */
	    FabricTheming.applyHslDelta = function (primaryHsl, hDelta, sDelta, lDelta) {
	        var hue = primaryHsl.hue - hDelta;
	        if (hue > 1 || hue < 0) {
	            hue = hue - Math.floor(hue);
	        }
	        var sat = primaryHsl.sat - sDelta;
	        if (sat > 1) {
	            sat = 1;
	        }
	        else if (sat < 0) {
	            sat = 0;
	        }
	        var lum = primaryHsl.lum - lDelta;
	        if (lum > 1) {
	            lum = 1;
	        }
	        else if (lum < 0) {
	            lum = 0;
	        }
	        var hslValue = new HslColor_1.default(hue, sat, lum);
	        return hslValue;
	    };
	    FabricTheming._getDefaultThemeTokenMap = function () {
	        return {
	            backgroundOverlay: null,
	            primaryBackground: null,
	            primaryText: null,
	            themeDarker: null,
	            themeDark: null,
	            themeDarkAlt: null,
	            themePrimary: null,
	            themeSecondary: null,
	            themeTertiary: null,
	            themeLight: null,
	            themeLighter: null,
	            themeLighterAlt: null,
	            black: null,
	            cmdbarSelected: null,
	            cmdbarSelectedHover: null,
	            neutralDark: null,
	            neutralPrimary: null,
	            neutralPrimaryAlt: null,
	            neutralPrimaryTranslucent50: null,
	            neutralSecondary: null,
	            neutralSecondaryAlt: null,
	            neutralTertiary: null,
	            neutralTertiaryAlt: null,
	            neutralQuaternary: null,
	            neutralQuaternaryAlt: null,
	            neutralLight: null,
	            neutralLighter: null,
	            neutralLighterAlt: null,
	            white: null,
	            blackTranslucent40: null,
	            whiteTranslucent40: null,
	            yellow: null,
	            yellowLight: null,
	            orange: null,
	            orangeLight: null,
	            redDark: null,
	            red: null,
	            magentaDark: null,
	            magenta: null,
	            magentaLight: null,
	            purpleDark: null,
	            purple: null,
	            purpleLight: null,
	            blueDark: null,
	            blueMid: null,
	            blue: null,
	            blueLight: null,
	            tealDark: null,
	            teal: null,
	            tealLight: null,
	            greenDark: null,
	            green: null,
	            greenLight: null,
	            error: null,
	            errorBackground: null,
	            success: null,
	            successBackground: null,
	            alert: null,
	            alertBackground: null,
	            infoBackground: null,
	            info: null,
	            orangeLighter: null
	        };
	    };
	    return FabricTheming;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = FabricTheming;


/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var RgbaColor_1 = __webpack_require__(103);
	/**
	 * A color represented by hue, saturation, luminance, and alpha (opacity) components.
	 */
	var HslColor = (function () {
	    /**
	     * Constructs a new HSL color object.
	     * @param {number} h The hue (between 0 and 1) of the color.
	     * @param {number} s The saturation (between 0 and 1) of the color.
	     * @param {number} l The luminance (between 0 and 1) of the color.
	     * @param {number} a The opacity (between 0 and 255) of the color.
	     */
	    function HslColor(h, s, l, a) {
	        function LimitNumberToUnitInterval(value) {
	            return Math.min(1.0, Math.max(0.0, value));
	        }
	        this.hue = LimitNumberToUnitInterval(h);
	        this.sat = LimitNumberToUnitInterval(s);
	        this.lum = LimitNumberToUnitInterval(l);
	        this.alpha = a == null ? RgbaColor_1.default.maxComponent : a;
	    }
	    /**
	     * Constructs an HslColor from an RgbaColor.
	     * @param {RgbaColor} color The color to convert to HSL.
	     */
	    HslColor.fromRgba = function (color) {
	        // Using integer values as much as possible to make comparisons easier.
	        // I will indicate non-integer values with a  "_float" suffix.
	        // These integer values are each some integer multiple of the true value.
	        var scaleFactor = RgbaColor_1.default.maxComponent;
	        var h_float = 0.0;
	        var s_float = 0.0;
	        var l_float = 0.0;
	        var r = color.R;
	        var g = color.G;
	        var b = color.B;
	        var cMax = Math.max(Math.max(r, g), b);
	        var cMin = Math.min(Math.min(r, g), b);
	        var twiceL = cMax + cMin;
	        l_float = twiceL / (2 * scaleFactor);
	        if (cMax === cMin) {
	            s_float = 0.0;
	            h_float = -1.0;
	        }
	        else {
	            var dmax = cMax - cMin;
	            var pmax = cMax + cMin;
	            // The scale factor cancels when we divide scaled values, so divisions can ignore it.
	            if (twiceL <= 1 * scaleFactor) {
	                s_float = dmax / pmax;
	            }
	            else {
	                s_float = dmax / (2 * scaleFactor - pmax); // Safe, since cMax != cMin
	            }
	            var dr_float = (cMax - r) * (1 / 6) / dmax;
	            var dg_float = (cMax - g) * (1 / 6) / dmax;
	            var db_float = (cMax - b) * (1 / 6) / dmax;
	            if (r === cMax) {
	                h_float = db_float - dg_float;
	            }
	            else if (g === cMax) {
	                h_float = (1 / 3) + dr_float - db_float;
	            }
	            else {
	                h_float = (2 / 3) + dg_float - dr_float;
	            }
	            if (h_float < 0) {
	                h_float += 1.0;
	            }
	            if (h_float > 1.0) {
	                h_float -= 1.0;
	            }
	        }
	        return new HslColor(h_float, s_float, l_float, color.A);
	    };
	    /**
	     * Converts a hue, saturation, or luminance value between 0 and 1 into
	     * an integer between 0 and 255.
	     */
	    HslColor._hslComponentToByte = function (value) {
	        var c_rgbaMax = RgbaColor_1.default.maxComponent;
	        var result = Math.round(c_rgbaMax * value);
	        return Math.min(c_rgbaMax, Math.max(0, result));
	    };
	    /**
	     * Internal method which given the calculated magic numbers and the hue,
	     * will calculate the appropriate RGB number.
	     * This algorithm is intended to stay in-sync with the equivalent code in
	     * mso\officespace\fscolorgallery.cpp.
	     * @param {number} m1 The first magic number.
	     * @param {number} m2 The second magic number.
	     * @param {number} hue The hue to be converted using the magic numbers.
	     */
	    HslColor._hueToRgbComponent = function (m1, m2, hue) {
	        var result;
	        if (hue < 0) {
	            hue += 1;
	        }
	        if (hue > 1) {
	            hue -= 1;
	        }
	        if (hue < 1 / 6) {
	            result = m1 + (m2 - m1) * hue * 6;
	        }
	        else if (hue < 1 / 2) {
	            result = m2;
	        }
	        else if (hue < 2 / 3) {
	            result = m1 + (m2 - m1) * (2 / 3 - hue) * 6;
	        }
	        else {
	            result = m1;
	        }
	        return HslColor._hslComponentToByte(result);
	    };
	    /**
	     * Darkens the color by the provided factor.
	     * @param {number} factor The factor (between 0 and 1) by which to scale the luminance.
	     */
	    HslColor.prototype.darken = function (factor) {
	        // TODO: Validate input.
	        this.lum *= factor;
	    };
	    /**
	     * Lightens the color by the provided factor.
	     * @param {number} factor The factor (between 0 and 1) by which to scale the luminance.
	     */
	    HslColor.prototype.lighten = function (factor) {
	        // TODO: Validate input.
	        this.lum = this.lum * factor + (1 - factor);
	    };
	    /**
	     * Returns an RgbaColor representation of this HslColor.
	     */
	    HslColor.prototype.toRgbaColor = function () {
	        var r;
	        var g;
	        var b;
	        var hue = this.hue;
	        var saturation = this.sat;
	        var luminance = this.lum;
	        if (Math.round(saturation * RgbaColor_1.default.maxComponent) === 0) {
	            r = g = b = HslColor._hslComponentToByte(luminance);
	        }
	        else {
	            var m1;
	            var m2;
	            if (luminance <= 0.5) {
	                m2 = luminance * (1 + saturation);
	            }
	            else {
	                m2 = luminance + saturation - (luminance * saturation);
	            }
	            m1 = 2 * luminance - m2;
	            r = HslColor._hueToRgbComponent(m1, m2, hue + (1 / 3));
	            g = HslColor._hueToRgbComponent(m1, m2, hue);
	            b = HslColor._hueToRgbComponent(m1, m2, hue - (1 / 3));
	        }
	        return RgbaColor_1.default.fromRgba(r, g, b, this.alpha);
	    };
	    return HslColor;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = HslColor;


/***/ },
/* 103 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * A color represented by red, green, blue, and alpha (opacity) components.
	 */
	var RgbaColor = (function () {
	    /** Constructs a default RgbaColor. Use RgbaColor.fromRgba to specify components. */
	    function RgbaColor() {
	        this.R = 0;
	        this.G = 0;
	        this.B = 0;
	        this.A = RgbaColor.maxComponent; // Default to fully opaque.
	    }
	    /**
	     * Creates a copy of the given color.
	     * @param {RgbaColor} c The color to clone.
	     */
	    RgbaColor.clone = function (c) {
	        return RgbaColor.fromRgba(c.R, c.G, c.B, c.A);
	    };
	    /**
	     * Returns true if the colors have identical component values of R, G, B, and A.
	     * @param {RgbaColor} c1 The first color to compare.
	     * @param {RgbaColor} c2 The second color to compare.
	     */
	    RgbaColor.equals = function (c1, c2) {
	        var c1IsNull = !c1;
	        var c2IsNull = !c2;
	        if (c1IsNull || c2IsNull) {
	            return c1IsNull && c2IsNull;
	        }
	        else {
	            return c1.R === c2.R && c1.G === c2.G && c1.B === c2.B && c1.A === c2.A;
	        }
	    };
	    /**
	     * Creates an RgbaColor from red, green, blue, and alpha component values.
	     * @param {number} r The red component value (between 0 and 255).
	     * @param {number} g The green component value (between 0 and 255).
	     * @param {number} b The blue component value (between 0 and 255).
	     * @param {number} a The alpha component value (between 0 and 255).
	     */
	    RgbaColor.fromRgba = function (r, g, b, a) {
	        var colorObj = new RgbaColor;
	        colorObj.R = Math.round(r);
	        colorObj.G = Math.round(g);
	        colorObj.B = Math.round(b);
	        colorObj.A = a != null ? Math.round(a) : RgbaColor.maxComponent;
	        return colorObj;
	    };
	    /**
	     * Parses an HTML color string in the formats #AARRGGBB, #RRGGBB, or #RGB.
	     * @param {string} htmlColor The HTML color string to parse.
	     */
	    RgbaColor.fromHtmlColor = function (htmlColor) {
	        function TwoHexCharsToNumber(str, index1, index2) {
	            return parseInt(str.charAt(index1) + str.charAt(index2), 16);
	        }
	        var resultColor = new RgbaColor;
	        if (typeof htmlColor === "string" && htmlColor.charAt(0) === "#") {
	            switch (htmlColor.length) {
	                case 9:
	                    resultColor.A = TwoHexCharsToNumber(htmlColor, 1, 2);
	                    resultColor.R = TwoHexCharsToNumber(htmlColor, 3, 4);
	                    resultColor.G = TwoHexCharsToNumber(htmlColor, 5, 6);
	                    resultColor.B = TwoHexCharsToNumber(htmlColor, 7, 8);
	                    break;
	                case 7:
	                    resultColor.R = TwoHexCharsToNumber(htmlColor, 1, 2);
	                    resultColor.G = TwoHexCharsToNumber(htmlColor, 3, 4);
	                    resultColor.B = TwoHexCharsToNumber(htmlColor, 5, 6);
	                    break;
	                case 4:
	                    resultColor.R = TwoHexCharsToNumber(htmlColor, 1, 1);
	                    resultColor.G = TwoHexCharsToNumber(htmlColor, 2, 2);
	                    resultColor.B = TwoHexCharsToNumber(htmlColor, 3, 3);
	                    break;
	            }
	        }
	        return resultColor;
	    };
	    /**
	     * Converts an RgbaColor into an HTML string suitable for use as a CSS color value.
	     * @param {RgbaColor} c The color to convert.
	     * @param {boolean} bFilterValue If true, this produces a string to in the #AARRGGBB format.
	     */
	    RgbaColor.toHtmlString = function (c, bFilterValue) {
	        function ByteToHexString(b) {
	            var byte = Number(b);
	            if (!(byte >= 0 && byte <= RgbaColor.maxComponent)) {
	                throw new Error("Argument must be a Number in [0, 255]");
	            }
	            var hex = byte.toString(16);
	            if (byte < 16) {
	                hex = "0" + hex;
	            }
	            return hex;
	        }
	        if (c.A < RgbaColor.maxComponent && !bFilterValue) {
	            return "rgba(" +
	                c.R.toString(10) + ", " +
	                c.G.toString(10) + ", " +
	                c.B.toString(10) + ", " +
	                (c.A / RgbaColor.maxComponent).toFixed(2) + ")";
	        }
	        else {
	            return "#" +
	                (bFilterValue ? ByteToHexString(c.A) : "") +
	                ByteToHexString(c.R) +
	                ByteToHexString(c.G) +
	                ByteToHexString(c.B);
	        }
	    };
	    return RgbaColor;
	}());
	/**
	 * The maximum value of an R, G, B, or A component in an RgbaColor.
	 */
	RgbaColor.maxComponent = 255;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = RgbaColor;


/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var HslColor_1 = __webpack_require__(102);
	var RgbaColor_1 = __webpack_require__(103);
	// Various constants used for generated shades of a color.
	var WhiteShadeTable = [0.95, 0.85, 0.75, 0.65, 0.50];
	var BlackTintTable = [0.50, 0.65, 0.75, 0.85, 0.95];
	var ColorTintTable = [0.20, 0.40, 0.60];
	var ColorShadeTable = [0.75, 0.50];
	var LumTintTable = [0.10, 0.25, 0.50, 0.75, 0.90];
	var LumShadeTable = [0.90, 0.75, 0.50, 0.25, 0.10];
	var c_LuminanceLow = 0.2;
	var c_LuminanceHigh = 0.8;
	var rgbaMax = RgbaColor_1.default.maxComponent;
	var rgbaWhite = RgbaColor_1.default.fromRgba(rgbaMax, rgbaMax, rgbaMax);
	var rgbaBlack = RgbaColor_1.default.fromRgba(0, 0, 0);
	/** Shades of a given color, from Lightest to Darkest. */
	var Shades;
	(function (Shades) {
	    Shades[Shades["Unshaded"] = 0] = "Unshaded";
	    Shades[Shades["Lightest"] = 1] = "Lightest";
	    Shades[Shades["Lighter"] = 2] = "Lighter";
	    Shades[Shades["Medium"] = 3] = "Medium";
	    Shades[Shades["Darker"] = 4] = "Darker";
	    Shades[Shades["Darkest"] = 5] = "Darkest";
	})(Shades = exports.Shades || (exports.Shades = {}));
	/**
	 * Returns true if the argument is a valid Shades value
	 * @param {Shades} shade The Shades value to validate.
	 */
	function _isValidShade(shade) {
	    'use strict';
	    return (shade >= Shades.Unshaded) && (shade <= Shades.Darkest);
	}
	/**
	 * Given an RgbaColor and a shade specification, generates the requested shade of the color.
	 * @param {RgbaColor} color The base color whose shades are to be computed
	 * @param {Shades} shade The shade of the base color to compute.
	 */
	function getShade(color, shade) {
	    'use strict';
	    if (!color) {
	        return null;
	    }
	    if (shade === Shades.Unshaded || !_isValidShade(shade)) {
	        return RgbaColor_1.default.fromRgba(color.R, color.G, color.B, color.A);
	    }
	    var hsl = HslColor_1.default.fromRgba(color);
	    var lum = hsl.lum;
	    var tableIndex = shade - 1;
	    if (RgbaColor_1.default.equals(color, rgbaWhite)) {
	        hsl.darken(WhiteShadeTable[tableIndex]);
	    }
	    else if (RgbaColor_1.default.equals(color, rgbaBlack)) {
	        hsl.lighten(BlackTintTable[tableIndex]);
	    }
	    else if (lum < c_LuminanceLow) {
	        hsl.lighten(LumTintTable[tableIndex]);
	    }
	    else if (lum > c_LuminanceHigh) {
	        hsl.darken(LumShadeTable[tableIndex]);
	    }
	    else {
	        if (tableIndex < ColorTintTable.length) {
	            hsl.lighten(ColorTintTable[tableIndex]);
	        }
	        else {
	            hsl.darken(ColorShadeTable[tableIndex - ColorTintTable.length]);
	        }
	    }
	    color = hsl.toRgbaColor();
	    return color;
	}
	exports.getShade = getShade;


/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var StringHelper_1 = __webpack_require__(82);
	var MembersList_1 = __webpack_require__(106);
	/**
	 * This datasource makes server call to get group related information.
	 */
	var GroupDataSource = (function () {
	    /**
	     * @constructor
	     */
	    function GroupDataSource(hostSettings) {
	        this._hostSettings = hostSettings;
	    }
	    /**
	     * Get REST Url to get group properties
	     * @param {string} Id (Guid) of the group
	     * @returns the REST url that can be used to get group basic properties
	     */
	    GroupDataSource.prototype.getGroupBasicPropertiesRESTUrl = function (groupId, withMembership) {
	        return this._getRESTUrl(StringHelper_1.format(withMembership ? GroupDataSource.groupBasicPropertiesWithMembershipUrlTemplate : GroupDataSource.groupBasicPropertiesUrlTemplate, groupId), 'SP.Directory.DirectorySession');
	    };
	    GroupDataSource.prototype.getGroupBasicProperties = function (responseText) {
	        var group = {};
	        try {
	            var response = JSON.parse(responseText);
	            if (response.d) {
	                group = this._copyGroup(response.d);
	                this._calculateMissingGroupProperties(group, group.id);
	            }
	        }
	        catch (e) {
	            group = {};
	        }
	        return group;
	    };
	    GroupDataSource.prototype._getRESTUrl = function (op, ns) {
	        return this._hostSettings.webServerRelativeUrl + '/_api/' + ns + '/' + op;
	    };
	    /**
	     * Given response from the server convert it into a group
	     */
	    GroupDataSource.prototype._copyGroup = function (src) {
	        var groupInfo = {};
	        if (src.description) {
	            groupInfo.description = src.description;
	        }
	        if (src.alias) {
	            groupInfo.alias = src.alias;
	        }
	        if (src.displayName) {
	            groupInfo.name = src.displayName;
	        }
	        if (src.principalName) {
	            groupInfo.principalName = src.principalName;
	        }
	        if (src.creationTime) {
	            groupInfo.creationTime = src.creationTime;
	        }
	        if (src.pictureUrl) {
	            groupInfo.pictureUrl = src.pictureUrl;
	        }
	        if (src.inboxUrl) {
	            groupInfo.inboxUrl = src.inboxUrl;
	        }
	        if (src.calendarUrl) {
	            groupInfo.calendarUrl = src.calendarUrl;
	        }
	        if (src.documentsUrl) {
	            groupInfo.filesUrl = src.documentsUrl;
	        }
	        if (src.siteUrl) {
	            groupInfo.sharePointUrl = src.siteUrl;
	        }
	        if (src.editGroupUrl) {
	            groupInfo.editUrl = src.editGroupUrl;
	        }
	        if (src.peopleUrl) {
	            groupInfo.membersUrl = src.peopleUrl;
	        }
	        if (src.notebookUrl) {
	            groupInfo.notebookUrl = src.notebookUrl;
	        }
	        if (src.isPublic) {
	            groupInfo.isPublic = src.isPublic;
	        }
	        if (src.mail) {
	            groupInfo.mail = src.mail;
	        }
	        // TODO: remove this once all branches get lowerCamelCase changelist
	        if (src.Description) {
	            groupInfo.description = src.Description;
	        }
	        if (src.Alias) {
	            groupInfo.alias = src.Alias;
	        }
	        if (src.DisplayName) {
	            groupInfo.name = src.DisplayName;
	        }
	        if (src.PrincipalName) {
	            groupInfo.principalName = src.PrincipalName;
	        }
	        if (src.CreationTime) {
	            groupInfo.creationTime = src.CreationTime;
	        }
	        if (src.PictureUrl) {
	            groupInfo.pictureUrl = src.PictureUrl;
	        }
	        if (src.InboxUrl) {
	            groupInfo.inboxUrl = src.InboxUrl;
	        }
	        if (src.CalendarUrl) {
	            groupInfo.calendarUrl = src.CalendarUrl;
	        }
	        if (src.DocumentsUrl) {
	            groupInfo.filesUrl = src.DocumentsUrl;
	        }
	        if (src.SiteUrl) {
	            groupInfo.sharePointUrl = src.SiteUrl;
	        }
	        if (src.EditGroupUrl) {
	            groupInfo.editUrl = src.EditGroupUrl;
	        }
	        if (src.PeopleUrl) {
	            groupInfo.membersUrl = src.PeopleUrl;
	        }
	        if (src.NotebookUrl) {
	            groupInfo.notebookUrl = src.NotebookUrl;
	        }
	        if (src.IsPublic) {
	            groupInfo.isPublic = src.IsPublic;
	        }
	        if (src.Mail) {
	            groupInfo.mail = src.Mail;
	        }
	        if (src.members || src.owners) {
	            this._copyMembership(src);
	        }
	        return groupInfo;
	    };
	    /**
	     *  Remove once federated directory makes appropriate fixes
	     */
	    GroupDataSource.prototype._calculateMissingGroupProperties = function (group, groupId) {
	        if (!group.creationTime) {
	            group.creationTime = Date.now();
	        }
	        if (!group.pictureUrl) {
	            group.pictureUrl = group.pictureUrl.replace("EWS/Exchange.asmx/s/GetUserPhoto", "OWA/service.svc/s/GetPersonaPhoto");
	        }
	        if (!group.profileUrl) {
	            group.profileUrl = this._getProfileUrl(groupId);
	        }
	        if (!group.notebookUrl && groupId) {
	            group.notebookUrl = this._getGroupStatusNotebookUrl(groupId);
	        }
	    };
	    GroupDataSource.prototype._getProfileUrl = function (id) {
	        return this._hostSettings.siteAbsoluteUrl + StringHelper_1.format(GroupDataSource.groupStatusPageTemplate, id, 'profile');
	    };
	    GroupDataSource.prototype._getGroupStatusNotebookUrl = function (id) {
	        return this._hostSettings.siteAbsoluteUrl + StringHelper_1.format(GroupDataSource.groupStatusPageTemplate, id, 'notebook');
	    };
	    GroupDataSource.prototype._copyMembership = function (src) {
	        var membershipInfo = {};
	        if (src.members && src.members.results) {
	            var membersList = this._copyMembers(src.members.results);
	            membershipInfo.membersList = membersList;
	        }
	        if (src.owners && src.owners.results) {
	            var ownersList = this._copyMembers(src.owners.results);
	            membershipInfo.ownersList = ownersList;
	        }
	        return membershipInfo;
	    };
	    /**
	     * Copy from member list json to memberList object
	     */
	    GroupDataSource.prototype._copyMembers = function (src) {
	        var membersList = new MembersList_1.default();
	        var members = new Array();
	        for (var i = 0; i < src.length; i++) {
	            var member = this._copyMember(src[i]);
	            members.push(member);
	        }
	        membersList.members = members;
	        membersList.totalCount = members.length;
	        return membersList;
	    };
	    /**
	     * Copy from json to IPerson object
	     */
	    GroupDataSource.prototype._copyMember = function (src) {
	        var user = {};
	        if (src.alias) {
	            user.sip = src.alias;
	        }
	        if (src.id) {
	            user.userId = src.id;
	        }
	        if (src.principalName) {
	            user.email = src.principalName;
	        }
	        if (src.displayName) {
	            user.name = src.displayName;
	        }
	        if (src.title) {
	            user.job = src.title;
	        }
	        if (src.pictureUrl) {
	            user.image = src.pictureUrl;
	        }
	        if (src.profilePage) {
	            user.profilePage = src.profilePage;
	        }
	        return user;
	    };
	    return GroupDataSource;
	}());
	/**
	 * Static members
	 */
	// Url templates
	GroupDataSource.groupBasicPropertiesUrlTemplate = 'Group(\'{0}\')?$select=PrincipalName,DisplayName,Alias,Description,InboxUrl,CalendarUrl,DocumentsUrl,SiteUrl,EditGroupUrl,PictureUrl,PeopleUrl,NotebookUrl,Mail,IsPublic,CreationTime';
	GroupDataSource.groupBasicPropertiesWithMembershipUrlTemplate = 'Group(\'{0}\')?$expand=Members,Owners&$select=PrincipalName,DisplayName,Alias,Description,InboxUrl,CalendarUrl,DocumentsUrl,SiteUrl,EditGroupUrl,PictureUrl,PeopleUrl,NotebookUrl,Mail,IsPublic,CreationTime,Members/PrincipalName,Members/Id,Members/DisplayName,Members/PictureUrl,Owners/PrincipalName,Owners/Id,Owners/DisplayName,Owners/PictureUrl';
	GroupDataSource.groupStatusPageTemplate = '_layouts/15/groupstatus?id={0}&target={1}';
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = GroupDataSource;


/***/ },
/* 106 */
/***/ function(module, exports) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	;
	var MembersList = (function () {
	    function MembersList() {
	        this.totalCount = 0;
	        this.members = new Array();
	    }
	    /**
	     * Add given user to the members list of the group
	     */
	    MembersList.prototype.addUserToList = function (user) {
	        this.members.unshift(user);
	        this.totalCount++;
	    };
	    /**
	     * Remove user from members list of a group
	     */
	    MembersList.prototype.removeUserFromList = function (user) {
	        var indexToRemove = -1; // not found by default
	        for (var i = 0; i < this.members.length; i++) {
	            if (this.members[i].userId === user.userId) {
	                indexToRemove = i; // find the index
	            }
	        }
	        // If user exists in members list then remove it
	        if (indexToRemove >= 0) {
	            this.members.splice(indexToRemove, 1);
	            this.totalCount--;
	        }
	    };
	    return MembersList;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = MembersList;


/***/ },
/* 107 */
/***/ function(module, exports) {

	"use strict";
	// encode <>&'"
	var ENCODE_HTML_TEXT_REGEX = /[<>&'"\\]/g;
	var CODES = {
	    '<': '&lt;',
	    '>': '&gt;',
	    '&': '&amp;',
	    '"': '&quot;',
	    '\'': '&#39;',
	    '\\': '&#92;'
	};
	function replacer(match) {
	    return CODES[match];
	}
	var HtmlEncoding = (function () {
	    function HtmlEncoding() {
	    }
	    /**
	     * Encodes a string for use in HTML text. Not recommended for attribute values
	     * or anything that might be used in a URL.
	     */
	    HtmlEncoding.encodeText = function (inputString) {
	        if (!inputString) {
	            return "";
	        }
	        return inputString.replace(ENCODE_HTML_TEXT_REGEX, replacer);
	    };
	    return HtmlEncoding;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = HtmlEncoding;


/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var PLT_event_1 = __webpack_require__(73);
	var PLTHttpRequest_event_1 = __webpack_require__(46);
	var Api_event_1 = __webpack_require__(94);
	var EventBase_1 = __webpack_require__(36);
	var ErrorHelper_1 = __webpack_require__(50);
	var Manager_1 = __webpack_require__(37);
	exports.AppStartMarkerName = "EUPL.AppStart";
	exports.DataFetchStartMarkerName = "EUPL.DataManager.FirstDataFetch.GetItem.Start";
	exports.DataFetchEndMarkerName = "EUPL.DataManager.FirstDataFetch.GetItem.End";
	//For reference see http://www.w3.org/TR/navigation-timing/
	//also, got tips at http://www.stevesouders.com/blog/2014/08/21/resource-timing-practical-tips/
	var PerformanceCollection = (function () {
	    function PerformanceCollection() {
	    }
	    /**
	     * When list data is returned from server as deferred control, browser w3c timing responseEnd may not reflect correct timing of the manifest response end.
	     * To workaround this, we write "var g_responseEnd = new Date().getTime();" in server duration script tag.
	     * In most of the scenarios, we will still use performance.timing.responseEnd.
	     * If g_responseEnd is less than performance.timing.responseEnd or performance.timing.responseEnd is not available yet (this is will happen for deferred SPListRender sends splist data back to html), we will use g_responseEnd.
	     */
	    PerformanceCollection.getResponseEnd = function () {
	        if (window.performance && performance.timing) {
	            if (window["g_responseEnd"] &&
	                (!!performance.timing.responseEnd && (Number(window["g_responseEnd"]) < performance.timing.responseEnd) || !performance.timing.responseEnd)) {
	                return Number(window["g_responseEnd"]);
	            }
	            else {
	                return performance.timing.responseEnd;
	            }
	        }
	        else {
	            return NaN;
	        }
	    };
	    ;
	    PerformanceCollection.appStart = function () {
	        try {
	            if (window.performance && performance.timing) {
	                PerformanceCollection.mark(exports.AppStartMarkerName);
	                Manager_1.Manager.addLogHandler(this.eventLogHandler);
	                this.summary.w3cResponseEnd = (PerformanceCollection.getResponseEnd() - performance.timing.fetchStart); //Time to get the aspx from the server
	                this._times["appStart"] = new Date().getTime(); //Time it takes for our app to *start* running
	                this.summary.appStart = this._times["appStart"] - PerformanceCollection.getResponseEnd(); //Time it takes for our app to *start* running
	                this.summary.prefetchStart = -1;
	                this.summary.deferredListDataRender = -1;
	            }
	        }
	        catch (e) {
	            ErrorHelper_1.default.log(e);
	        }
	    };
	    //called when the view is fully loaded
	    PerformanceCollection.plt = function (name) {
	        try {
	            if (window.performance && performance.timing && PerformanceCollection._times["plt"] === undefined) {
	                var now = new Date().getTime();
	                Manager_1.Manager.removeLogHandler(this.eventLogHandler);
	                this._times["plt"] = (now - performance.timing.fetchStart);
	                this.summary.preRender = PerformanceCollection.getMarkerTime(exports.DataFetchStartMarkerName) - PerformanceCollection.getMarkerTime(exports.AppStartMarkerName); //Time it takes for our app to make the relevant data fetch for this view
	                this.summary.dataFetch = PerformanceCollection.getMarkerTime(exports.DataFetchEndMarkerName) - PerformanceCollection.getMarkerTime(exports.DataFetchStartMarkerName); //Time it takes for our app to get data back from the server
	                this.summary.postRender = PerformanceCollection.now() - PerformanceCollection.getMarkerTime(exports.DataFetchEndMarkerName);
	                this.summary.render = this.summary["preRender"] + this.summary["postRender"];
	                this.summary.plt = now - performance.timing.fetchStart; //unbiased end to end PLT from fetchStart that excludes unload of previous page.
	                this.summary.pltWithUnload = now - performance.timing.navigationStart; //unbiased end to end PLT from navigationStart that includes the unload of the previous page
	                this.summary.name = name;
	                //we consider an appcache hit if the w3cResponseEnd time is less than 40ms
	                this.summary.appCacheHit = this.summary.w3cResponseEnd <= 40 &&
	                    Boolean(window.applicationCache) &&
	                    Boolean(window.applicationCache.status !== window.applicationCache.UNCACHED);
	                // ASSERT(this.summary.appStart +
	                //     this.summary.dataFetch +
	                //     this.summary.postRender +
	                //     this.summary.preRender +
	                //     this.summary.w3cResponseEnd ===
	                //     this.summary.plt,
	                //     "PLT summary times do not add up");
	                // Get the count of events so we have it in the plt event logs
	                // This must be logged before log data otherwise the count is not passed
	                this.getHttpRequests();
	                var event_1 = PLT_event_1.PLT.logData(this.summary);
	                if (this.httpRequestCollection) {
	                    for (var _i = 0, _a = this.httpRequestCollection; _i < _a.length; _i++) {
	                        var eventData = _a[_i];
	                        PLTHttpRequest_event_1.PLTHttpRequest.logData(eventData, event_1);
	                    }
	                }
	                PerformanceCollection.mark('EUPL.glass');
	            }
	        }
	        catch (e) {
	            ErrorHelper_1.default.log(e);
	        }
	    };
	    PerformanceCollection.mark = function (name, limit) {
	        if (limit === null || limit === undefined || PerformanceCollection._markCount < limit) {
	            if (window.performance && window.performance.mark) {
	                window.performance.mark(name);
	            }
	            else {
	                if (window["_perfMarks"] === undefined) {
	                    window["_perfMarks"] = PerformanceCollection._marks; // make it exposed to TAB tests
	                }
	                PerformanceCollection._marks.push({
	                    name: name,
	                    startTime: new Date().getTime()
	                });
	            }
	            PerformanceCollection._markCount++;
	        }
	    };
	    PerformanceCollection.pageLoaded = function () {
	        return this._times["plt"] !== undefined;
	    };
	    PerformanceCollection.getMarkerTime = function (name) {
	        if (window.performance && window.performance.mark) {
	            var mark = window.performance.getEntriesByName(name);
	            return mark && mark.length > 0 ? Math.round(mark[0].startTime) : NaN;
	        }
	        else {
	            return NaN;
	        }
	    };
	    PerformanceCollection.now = function () {
	        return window.performance && window.performance.now ? Math.round(performance.now()) : NaN;
	    };
	    PerformanceCollection.eventLogHandler = function (event) {
	        // Look at all api events
	        if (Api_event_1.Api.isTypeOf(event)) {
	            if (PerformanceCollection._times["appDataFetchStart"] === undefined) {
	                // Calculate the start time from the first api event
	                PerformanceCollection._times["appDataFetchStart"] = event.startTime;
	            }
	            else if (event.eventType === EventBase_1.ClonedEventType.End || event.eventType === EventBase_1.ClonedEventType.Single) {
	                // Calculate the end time from the api events
	                PerformanceCollection._times["appDataFetchEnd"] = PerformanceCollection._times["appDataFetchEnd"] ? Math.max(PerformanceCollection._times["appDataFetchEnd"], event.endTime) : event.endTime;
	            }
	        }
	    };
	    PerformanceCollection.getHttpRequests = function () {
	        if (window.performance && window.performance.getEntriesByType) {
	            var httpRequestCollection = [];
	            var perfEntries = performance.getEntriesByType("resource");
	            var httpRequests = perfEntries.length;
	            for (var j = 0; j < httpRequests; j++) {
	                var data = {
	                    startTime: Math.round(perfEntries[j].startTime),
	                    url: perfEntries[j].name,
	                    duration: Math.round(perfEntries[j].duration)
	                };
	                httpRequestCollection.push(data);
	            }
	            //Make sure we get all the http requests from iframes as well
	            var iFrames = document.getElementsByTagName("iframe");
	            httpRequests += iFrames.length;
	            for (var i = 0; i < iFrames.length; i++) {
	                try {
	                    perfEntries = iFrames[i].contentWindow.performance.getEntriesByType("resource");
	                }
	                catch (e) {
	                    // If the iframe in question isn't domain lowered, we can't access it.
	                    perfEntries = null;
	                }
	                if (perfEntries) {
	                    var requests = perfEntries.length;
	                    httpRequests += requests;
	                    for (var j = 0; j < requests; j++) {
	                        var iframeData = {
	                            startTime: Math.round(perfEntries[j].startTime),
	                            url: perfEntries[j].name,
	                            duration: Math.round(perfEntries[j].duration)
	                        };
	                        httpRequestCollection.push(iframeData);
	                    }
	                }
	            }
	            this.summary.httpRequests = httpRequests;
	            this.httpRequestCollection = httpRequestCollection;
	        }
	    };
	    return PerformanceCollection;
	}());
	PerformanceCollection.summary = {};
	PerformanceCollection._times = {};
	PerformanceCollection._marks = []; // this is to support perf marks for enviorment like phantomJS that does not have performance.mark
	PerformanceCollection._markCount = 0; // limit of how many perf marks to be collected
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = PerformanceCollection;


/***/ },
/* 109 */
/***/ function(module, exports) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	/**
	 * This datasource makes a call to the Acronyms and Colors service and returns an IAcronymColor object.
	 */
	var SiteHeaderLogoAcronym = (function () {
	    /**
	     * @constructor
	     */
	    function SiteHeaderLogoAcronym(hostSettings) {
	        this._hostSettings = hostSettings;
	    }
	    /**
	     * Given a site name, return an URL to a REST endpoint where the site logo acronym and color information can be retrieved from.
	     * The REST endpoint is through the GetAcronymsAndColors API.
	     * Note: API takes in additional optional arguments like lcid, which as of this writing this method doesn't support.
	     *       Please extend as appropriate.
	     *
	     * @param {string} siteName Name of the site.
	     * @returns { string} the REST endpoint relative URL.
	     */
	    SiteHeaderLogoAcronym.prototype.getAcronymRESTUrl = function (siteName) {
	        return this._hostSettings.webServerRelativeUrl + ("/_api/sphome/GetAcronymsAndColors?labels=[{Text:" + encodeURIComponent('"' + siteName + '"') + "}]");
	    };
	    SiteHeaderLogoAcronym.prototype.getAcronymColor = function (responseText) {
	        //parse the responseText
	        var rtnObj = { acronym: undefined, color: undefined };
	        try {
	            var response = JSON.parse(responseText);
	            var responseResult = response.d.GetAcronymsAndColors.results[0];
	            rtnObj.acronym = responseResult.Acronym;
	            rtnObj.color = responseResult.Color;
	        }
	        catch (e) {
	            // try xml parsing
	            var parser = this._parseFn();
	            var elements = void 0;
	            var xmlDoc = parser(responseText);
	            if (elements = xmlDoc.getElementsByTagName("element")) {
	                var element = elements[0];
	                for (var i = 0; i < element.childNodes.length; i++) {
	                    switch (element.childNodes[i].nodeName) {
	                        case 'Acronym':
	                            rtnObj.acronym = element.childNodes[i].nodeValue;
	                            break;
	                        case 'Color':
	                            rtnObj.color = element.childNodes[i].nodeValue;
	                            break;
	                    }
	                }
	            }
	        }
	        return rtnObj;
	    };
	    /**
	     * Returns an XML parser.
	     */
	    SiteHeaderLogoAcronym.prototype._parseFn = function () {
	        var parseXml;
	        if (DOMParser) {
	            parseXml = function (xmlStr) {
	                return (new DOMParser()).parseFromString(xmlStr, "text/xml");
	            };
	        }
	        else if (ActiveXObject &&
	            new ActiveXObject("Microsoft.XMLDOM")) {
	            parseXml = function (xmlStr) {
	                var xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
	                xmlDoc.async = "false";
	                xmlDoc.loadXML(xmlStr);
	                return xmlDoc;
	            };
	        }
	        else {
	            throw new Error("No XML parser found");
	        }
	        return parseXml;
	    };
	    return SiteHeaderLogoAcronym;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SiteHeaderLogoAcronym;


/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var RgbaColor_1 = __webpack_require__(103);
	var ThemeCache_1 = __webpack_require__(111);
	var Promise_1 = __webpack_require__(92);
	var Engagement_event_1 = __webpack_require__(43);
	var Qos_event_1 = __webpack_require__(47);
	/**
	 * Provides theme data, either from the local cache or from the server.
	 */
	var ThemeProvider = (function () {
	    /**
	     * Constructs a ThemeProvider which acts like the provided loadData function but with caching.
	     * @param {() => Promise<IThemeData>} loadData Used to load data on a cache miss.
	     */
	    function ThemeProvider(loadData) {
	        this._loadData = loadData;
	    }
	    /**
	     * Given a URL, returns a string value which can be safely used as a
	     * background-image value in a CSS rule. If the url is falsey, this
	     * returns "none" to specify no background-image.
	     * @param {string} url The URL of a background image.
	     */
	    ThemeProvider._makeCssUrl = function (url) {
	        var cssUrlValue = "none";
	        if (url) {
	            cssUrlValue = 'url("' +
	                ThemeProvider._escapeQuotesAndParentheses(url) +
	                '")';
	        }
	        return cssUrlValue;
	    };
	    /**
	     * Escapes single- and double-quotes along with parentheses so that the
	     * resulting string is safe to use in a CSS background-image: url()
	     * @param {string} str The string to escape.
	     */
	    ThemeProvider._escapeQuotesAndParentheses = function (str) {
	        var replacements = { "'": "%27", '"': "%22", "(": "%28", ")": "%29" };
	        var result = null;
	        if (str != null) {
	            result = str.replace(/(['"\(\)])/gm, function (match, capture) {
	                return replacements[capture];
	            });
	        }
	        return result;
	    };
	    /**
	     * Loads the theme data and returns a map from theme tokens to replacement values.
	     * Suitable for use with loadTheme in load-themed-styles.
	     * @param {string} cacheToken Cache token used to validate cached data.
	     * @param {boolean} forceUpdate Whether to force fresh data to be loaded and cached.
	     */
	    ThemeProvider.prototype.loadThemeTokenMap = function (cacheToken, forceUpdate) {
	        return this.loadThemeData(cacheToken, forceUpdate).then(function (themeData) {
	            var themeValues;
	            if (themeData && themeData.palette) {
	                themeValues = {};
	                var palette = themeData.palette;
	                for (var colorSlot in palette) {
	                    var rgbaValue = palette[colorSlot];
	                    themeValues[colorSlot] = rgbaValue ? RgbaColor_1.default.toHtmlString(rgbaValue) : null;
	                }
	                themeValues["backgroundImageUri"] =
	                    ThemeProvider._makeCssUrl(themeData.backgroundImageUri);
	            }
	            return themeValues;
	        }, function (error) { return null; }); // on error, return null
	    };
	    /**
	     * Loads the theme data from the cache or via the a loadData method.
	     * @param {string} cacheToken Cache token used to validate cached data.
	     * @param {boolean} forceUpdate Whether to force fresh data to be loaded and cached.
	     */
	    ThemeProvider.prototype.loadThemeData = function (cacheToken, forceUpdate) {
	        if (!forceUpdate && this._dataPromise) {
	            return this._dataPromise;
	        }
	        var _this = this;
	        var failureResultCode = null;
	        var failureResultType = Qos_event_1.ResultTypeEnum.Failure;
	        this._dataPromise = Qos_event_1.Qos.instrumentPromise(
	        /*startSchema*/ { name: "ThemeProvider.LoadData" }, 
	        /*createPromise*/ function () { return new Promise_1.default(function loadDataOnExecute(complete, error) {
	            var previousData = null;
	            if (!forceUpdate) {
	                // Checks if we have valid cached data before returning it.
	                previousData = ThemeCache_1.default.getCachedTheme(cacheToken);
	            }
	            // If we have previous data and an update is not forced, use that data.
	            if (previousData) {
	                Engagement_event_1.Engagement.logData({ name: "ThemeProvider.DataFromCache" });
	                complete(previousData);
	            }
	            else {
	                if (forceUpdate) {
	                    Engagement_event_1.Engagement.logData({ name: "ThemeProvider.ForceUpdateData" });
	                }
	                Engagement_event_1.Engagement.logData({ name: "ThemeProvider.DataFromServer" });
	                // Get updated data. Might result in a server call.
	                _this._loadData(forceUpdate).done(function onComplete(themeData) {
	                    if (themeData) {
	                        if (themeData.cacheToken) {
	                            ThemeCache_1.default.updateThemeCache(themeData, cacheToken);
	                            complete(themeData);
	                        }
	                        else {
	                            //TODO what happens if error() is undefined?
	                            failureResultCode = "NoCacheToken";
	                            if (error) {
	                                error("Theme data with no CacheToken returned");
	                            }
	                        }
	                    }
	                    else {
	                        failureResultCode = "NoData";
	                        if (error) {
	                            error("No model returned");
	                        }
	                    }
	                }, function onError(err) {
	                    if (Promise_1.default.isCanceled(error)) {
	                        failureResultCode = "Canceled";
	                        failureResultType = Qos_event_1.ResultTypeEnum.ExpectedFailure;
	                    }
	                    else {
	                        failureResultCode = "ServerLoadFailure";
	                    }
	                    if (error) {
	                        error(err);
	                    }
	                });
	            }
	        }); }, 
	        /*getCompleteSchema*/ null, 
	        /*getErrorSchema*/ function getErrorSchema(error) {
	            if (Promise_1.default.isCanceled(error)) {
	                failureResultType = Qos_event_1.ResultTypeEnum.ExpectedFailure;
	                failureResultCode = "Canceled";
	            }
	            return {
	                resultType: failureResultType,
	                resultCode: failureResultCode || "Other",
	                error: error
	            };
	        });
	        return this._dataPromise;
	    };
	    return ThemeProvider;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ThemeProvider;


/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var BaseDataStore_1 = __webpack_require__(70);
	var DataStoreCachingType_1 = __webpack_require__(71);
	var THEME_CACHE_VERSION = '1.7';
	var THEME_CACHE_PREFIX = 'odTheme';
	var DATA_KEY = 'Data';
	var TOKEN_KEY = 'CacheToken';
	var VERSION_KEY = 'CacheVersion';
	/**
	 * Utility methods for caching theme data.
	 */
	var ThemeCache = (function () {
	    function ThemeCache() {
	    }
	    /**
	     * Clears the theme cache.
	     */
	    ThemeCache.clearThemeCache = function () {
	        "use strict";
	        var ds = ThemeCache.getThemeDataStore();
	        ds.remove(DATA_KEY);
	        ds.remove(TOKEN_KEY);
	        ds.remove(VERSION_KEY);
	    };
	    /**
	     * Reads the cached theme, if the cacheToken is compatible.
	     * @param {string} cacheToken The cached value will only be returned if it has the same cache token.
	     */
	    ThemeCache.getCachedTheme = function (cacheToken) {
	        "use strict";
	        var cachedTheme;
	        var ds = ThemeCache.getThemeDataStore();
	        try {
	            // Make sure the data was cached with the expected version and
	            // the current theme cache token. Otherwise, return undefined.
	            if (cacheToken === ds.getValue(TOKEN_KEY) &&
	                THEME_CACHE_VERSION === ds.getValue(VERSION_KEY)) {
	                cachedTheme = ds.getValue(DATA_KEY);
	            }
	        }
	        catch (exReadCache) {
	        }
	        return cachedTheme;
	    };
	    /**
	     * Updates the theme data in the cache.
	     * @param {IThemeData} themeData The new theme data to cache.
	     */
	    ThemeCache.updateThemeCache = function (themeData, cacheToken) {
	        "use strict";
	        var ds = ThemeCache.getThemeDataStore();
	        ds.setValue(DATA_KEY, themeData);
	        ds.setValue(TOKEN_KEY, cacheToken || themeData.cacheToken);
	        ds.setValue(VERSION_KEY, THEME_CACHE_VERSION);
	    };
	    /**
	     * Returns an instance of the supporting data store for this cache.
	     */
	    ThemeCache.getThemeDataStore = function () {
	        "use strict";
	        return new BaseDataStore_1.default(THEME_CACHE_PREFIX, DataStoreCachingType_1.default.local);
	    };
	    return ThemeCache;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ThemeCache;


/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var ObjectUtil_1 = __webpack_require__(38);
	var StringHelper_1 = __webpack_require__(82);
	var UriPartial;
	(function (UriPartial) {
	    /** The scheme segment of the URI */
	    UriPartial[UriPartial["scheme"] = 0] = "scheme";
	    /** The scheme and authority segments of the URI */
	    UriPartial[UriPartial["authority"] = 1] = "authority";
	    /** The scheme, authority, and path segments of the URI */
	    UriPartial[UriPartial["path"] = 2] = "path";
	    /** The scheme, authority, path, and query segments of the URI */
	    UriPartial[UriPartial["query"] = 3] = "query";
	})(UriPartial = exports.UriPartial || (exports.UriPartial = {}));
	var DELIMITERS = /[;\/?:@&=$,]/;
	var AUTHORITY_TERMINATORS = /[\/?]/;
	function queryToLower(queryObj) {
	    var newQuery = {};
	    for (var key in queryObj) {
	        if (queryObj.hasOwnProperty(key)) {
	            newQuery[key.toLowerCase()] = queryObj[key].toLowerCase();
	        }
	    }
	    return newQuery;
	}
	/**
	 * Partial port of groove\Misc\URI.cpp, which was based on RFC2396 and RFC3986 (http://www.ietf.org/rfc/rfc2396.txt).
	 * There are a few differences between this implementation and the RFC:
	 *  - Implementation does not support parameters (we don't use them, and partial implementation was incorrect)
	 *  - Implementation supports some relative URIs at a glance but more investigation required
	 *
	 *   foo://example.com:8042/over/there?name=ferret#nose
	 *   \_/   \______________/\_________/ \_________/ \__/
	 *    |           |            |            |        |
	 * scheme     authority       path        query   fragment
	 *
	 * Possible improvements:
	 *  - Support path parameters
	 *  - Fully support and test relative URLs based on RFC
	 *  - Allow changing/removing remaining URI components (i.e. user, host, port, parameters)
	 *  - URI.equals could allow ?foo=1&bar=2 equals ?bar=2&foo=1
	 *  - URI.parseURI should have better error handling rather than just setting it as path
	 *  - URI.getQueryAsObject should have better error handling for query of "a=1&a=2"
	 */
	var Uri = (function () {
	    function Uri(uriString, options) {
	        // All of these are decoded (if relevant) unless specified as encoded.
	        this._scheme = "";
	        this._user = "";
	        this._host = "";
	        this._port = "";
	        this._path = "";
	        this._pathSegments = [];
	        this._pathEncoded = "";
	        this._query = {};
	        this._fragment = "";
	        if (options) {
	            this._queryCaseInsensitive = !!options.queryCaseInsensitive;
	            this._pathCaseInsensitive = !!options.pathCaseInsensitive;
	        }
	        this._parseURI(uriString);
	    }
	    Uri.concatenate = function () {
	        var uriParts = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            uriParts[_i] = arguments[_i];
	        }
	        var result = '';
	        for (var i = 0; i < uriParts.length; i++) {
	            var part = uriParts[i];
	            if (i > 0) {
	                part = Uri.ensureNoPrecedingSlash(part);
	            }
	            if (i < uriParts.length - 1) {
	                part = Uri.ensureTrailingSlash(part);
	            }
	            result += part;
	        }
	        return result;
	    };
	    Uri.ensureNoPrecedingSlash = function (part) {
	        return part[0] === "/" ? part.substr(1) : part;
	    };
	    Uri.ensureTrailingSlash = function (part) {
	        return part[part.length - 1] !== "/" ? (part + "/") : part;
	    };
	    Uri.prototype.getScheme = function () {
	        return this._scheme;
	    };
	    Uri.prototype.setScheme = function (scheme) {
	        this._scheme = scheme;
	    };
	    Uri.prototype.getAuthority = function () {
	        return this._getAuthority(false);
	    };
	    Uri.prototype.setAuthority = function (authority) {
	        this._parseAuthority(authority);
	    };
	    Uri.prototype.getUser = function () {
	        return this._user;
	    };
	    Uri.prototype.getHost = function () {
	        return this._host;
	    };
	    Uri.prototype.getPort = function () {
	        return this._port;
	    };
	    Uri.prototype.getPath = function (trimTrailingSlash) {
	        var retPath = this._path;
	        if (Boolean(trimTrailingSlash)) {
	            // If the last character is a slash
	            if (retPath !== null && retPath.lastIndexOf("/") === (retPath.length - 1)) {
	                retPath = retPath.slice(0, -1); //trim last character
	            }
	        }
	        return retPath;
	    };
	    /**
	     * Returns a string containing the leftmost portion of the URI string, ending with the portion specified by part
	     */
	    Uri.prototype.getLeftPart = function (part) {
	        var ret = this._scheme + "://"; // default value is UriPartial.scheme
	        if (part === UriPartial.authority) {
	            ret += this.getAuthority();
	        }
	        if (part === UriPartial.path) {
	            ret += this.getPath();
	        }
	        if (part === UriPartial.query) {
	            ret += this.getQuery();
	        }
	        return ret;
	    };
	    Uri.prototype.setPath = function (path) {
	        if (path && path[0] !== "/") {
	            path = "/" + path;
	        }
	        this._parsePath(path);
	    };
	    Uri.prototype.getPathSegments = function () {
	        return this._pathSegments;
	    };
	    Uri.prototype.getLastPathSegment = function () {
	        var pathSegments = this._pathSegments;
	        return pathSegments[pathSegments.length - 1] || "";
	    };
	    Uri.prototype.getQuery = function (encoded) {
	        return this._serializeQuery(encoded);
	    };
	    /**
	     * Query is not well-defined but is commonly formatted as key=value and delimited with & or ;
	     * (http://www.w3.org/TR/REC-html40/appendix/notes.html#h-B.2.2)
	     *  - URI with query "a=1&b=2" or "a=1;b=2" will return {a: "1", b: "2"}
	     *  - Mixed-mode will also work: "a=1&b=2;c=3" will return {a: "1", b: "2", c: "3"}
	     *  - Assumes that parameters will be unique (i.e. "a=1&a=2" is not allowed and will produce unexpected results)
	     */
	    Uri.prototype.setQuery = function (query) {
	        this.setQueryFromObject(this._deserializeQuery(query));
	    };
	    Uri.prototype.getQueryAsObject = function () {
	        return this._query;
	    };
	    Uri.prototype.setQueryFromObject = function (queryObj) {
	        this._query = {};
	        for (var queryKey in queryObj) {
	            if (queryObj.hasOwnProperty(queryKey)) {
	                this.setQueryParameter(queryKey, queryObj[queryKey]);
	            }
	        }
	    };
	    Uri.prototype.getQueryParameter = function (queryKey) {
	        var ret = null;
	        var query = this._query;
	        if (this._queryCaseInsensitive) {
	            queryKey = queryKey.toLowerCase();
	            for (var key in query) {
	                if (query.hasOwnProperty(key) && key.toLowerCase() === queryKey) {
	                    ret = query[key];
	                }
	            }
	        }
	        else {
	            ret = query[queryKey];
	        }
	        return ret || null;
	    };
	    /**
	     * Adds query parameter to the end if queryKey does not exist, or
	     * overwrites existing query value if queryKey already exists.
	     */
	    Uri.prototype.setQueryParameter = function (queryKey, queryValue, ignoreEmptyValues) {
	        if (ignoreEmptyValues === void 0) { ignoreEmptyValues = true; }
	        var queryValueDecoded = this._decodeQueryString(queryValue);
	        // there is no point adding undefined or modifying existing values to undefined or null.
	        if (!!queryValueDecoded || ignoreEmptyValues) {
	            this._query[this._decodeQueryString(queryKey)] = queryValueDecoded;
	        }
	    };
	    Uri.prototype.removeQueryParameter = function (queryKey) {
	        delete this._query[this._decodeQueryString(queryKey)];
	    };
	    Uri.prototype.getFragment = function () {
	        return this._fragment;
	    };
	    Uri.prototype.setFragment = function (fragment) {
	        if (fragment[0] === "#") {
	            fragment = fragment.substring(1);
	        }
	        // Treat the fragment as a query string (decode + as space) because we pass in
	        // query parameters using the fragment on page load.
	        this._fragment = this._decodeQueryString(fragment);
	    };
	    /**
	     * Does a strict equality check of URIs (including same query parameters
	     * in the same order, and most comparisons case-sensitive).
	     * According to RFC3986: scheme and host should be case-insensitive.
	     * Note: This does not follow RFC2616's URI Comparison since it is not HTTP-specific.
	     *
	     * KNOWN ISSUE: Depending on your definition of "incorrect," this could return
	     * incorrect results for URI parts that get decoded.
	     * For example: http://somewhere/my%2fpath and http://somewhere/my/path
	     * will compare as equal because the comparisons are done to decoded versions.
	     */
	    Uri.prototype.equals = function (uri) {
	        return StringHelper_1.equalsCaseInsensitive(this._scheme, uri.getScheme()) &&
	            this._user === uri.getUser() &&
	            StringHelper_1.equalsCaseInsensitive(this._host, uri.getHost()) &&
	            this._port === uri.getPort() &&
	            this._fragment === uri.getFragment() &&
	            this._equalsCaseAppropriate(this.getPath(/*trimTrailingSlash*/ true), uri.getPath(true), this._pathCaseInsensitive) &&
	            this._equalsCaseAppropriate(this.getQuery(), uri.getQuery(), this._queryCaseInsensitive);
	    };
	    /**
	     * Does an equivalence check of two URIs. Checks to see if the URIs are
	     * equivalent, but they may not be exact! Strings are compared case
	     * insensitive and query parameters can be in any order.
	     *
	     * KNOWN ISSUE: Depending on your definition of "incorrect," this could return
	     * incorrect results for URI parts that get decoded.
	     * For example: http://somewhere/my%2fpath and http://somewhere/my/path
	     * will compare as equal because the comparisons are done to decoded versions.
	     */
	    Uri.prototype.equivalent = function (uri) {
	        return StringHelper_1.equalsCaseInsensitive(this._scheme, uri.getScheme()) &&
	            StringHelper_1.equalsCaseInsensitive(this._user, uri.getUser()) &&
	            StringHelper_1.equalsCaseInsensitive(this._host, uri.getHost()) &&
	            StringHelper_1.equalsCaseInsensitive(this._port, uri.getPort()) &&
	            StringHelper_1.equalsCaseInsensitive(this.getPath(/*trimTrailingSlash*/ true), uri.getPath(true)) &&
	            ObjectUtil_1.default.deepCompare(queryToLower(this.getQueryAsObject()), queryToLower(uri.getQueryAsObject())) &&
	            StringHelper_1.equalsCaseInsensitive(this._fragment, uri.getFragment());
	    };
	    /**
	     * Note that this returns the URL encoded/escaped while the getXXX() methods
	     * for the individual components return the unescaped strings. Returning a
	     * concatenation of the decoded components would change the semantics of the
	     * URL. See section 2.4.2 of RFC 2396 (http://www.ietf.org/rfc/rfc2396.txt).
	     *
	     * Use doNotPercentEncodeHost to indicate that the output should not have a
	     * percent-encoded host, such as when passing to the url parameter of
	     * XmlHttpRequest.open(). Section 3.2.2 of RFC 2396 only allows alphanumeric
	     * characters and hyphen in the host of a URL, so percent-encoded hosts are
	     * not allowed. While section 3.2.2 of RFC 3986 does not restrict the host
	     * character set anymore, not all browsers can handle a percent-encoded host
	     * - DNS lookup fails.  But, they will convert the unencoded Unicode to the
	     * IDNA encoding (punycode), so leaving the host as-is in this case is preferred.
	     */
	    Uri.prototype.toString = function (outputOptions) {
	        return this._getStringInternal(/*encoded*/ true, outputOptions);
	    };
	    /**
	     * This method should be used to obtain a string for display purposes only,
	     * because as mentioned above, a decoded URL may have different semantics than
	     * the encoded version.
	     */
	    Uri.prototype.getDecodedStringForDisplay = function () {
	        return this._getStringInternal(/*encoded*/ false);
	    };
	    /*
	     * Input URI of "foo://user:pass@host.com/alpha/beta/gamma/delta;p;a;r;a;m;s?q=1&u=2&e=3&r=4&y=5#fragment"
	     * would return "foo://user:pass@host.com/alpha/beta/gamma/delta;p;a;r;a;m;s";
	     */
	    Uri.prototype.getStringWithoutQueryAndFragment = function () {
	        return this._getStringWithoutQueryAndFragmentInternal(/*encoded=*/ true);
	    };
	    Uri.prototype._equalsCaseAppropriate = function (a, b, isCaseInsensitive) {
	        if (isCaseInsensitive) {
	            return StringHelper_1.equalsCaseInsensitive(a, b);
	        }
	        return a === b;
	    };
	    Uri.prototype._getStringInternal = function (encoded, outputOptions) {
	        var ret = this._getStringWithoutQueryAndFragmentInternal(encoded, outputOptions);
	        var query = this.getQuery(encoded);
	        if (query) {
	            ret += "?" + query;
	        }
	        if (this._fragment) {
	            ret += "#" + (encoded ? encodeURIComponent(this._fragment) : this._fragment);
	        }
	        return ret;
	    };
	    Uri.prototype._getStringWithoutQueryAndFragmentInternal = function (encoded, outputOptions) {
	        var ret = "";
	        if (this._scheme) {
	            ret += (encoded ? encodeURIComponent(this._scheme) : this._scheme) + ":";
	        }
	        // Authority includes user, host, and port
	        var authority = this._getAuthority(/*encoded=*/ encoded, outputOptions);
	        if (authority) {
	            ret += "//" + authority;
	        }
	        if (this._pathEncoded) {
	            ret += (encoded ? this._pathEncoded : this._path);
	        }
	        return ret;
	    };
	    Uri.prototype._deserializeQuery = function (queryStr) {
	        var queryObj = {};
	        if (queryStr.indexOf("?") === 0) {
	            queryStr = queryStr.substring(1);
	        }
	        for (var _i = 0, _a = queryStr.split(/[;&]+/); _i < _a.length; _i++) {
	            var queryPart = _a[_i];
	            var keyEndIndex = queryPart.indexOf('=');
	            // "foo" is a legal query string equivalent to "foo="
	            if (keyEndIndex < 0) {
	                keyEndIndex = queryPart.length;
	            }
	            if (keyEndIndex > 0) {
	                queryObj[queryPart.substr(0, keyEndIndex)] = queryPart.substr(keyEndIndex + 1);
	            }
	        }
	        return queryObj;
	    };
	    Uri.prototype._serializeQuery = function (encoded) {
	        var queryStr = "";
	        for (var queryKey in this._query) {
	            if (this._query.hasOwnProperty(queryKey)) {
	                var key = queryKey;
	                var value = this._query[queryKey];
	                if (encoded) {
	                    key = encodeURIComponent(key);
	                    value = encodeURIComponent(value);
	                }
	                if (value === null || value === "") {
	                    queryStr += key + "=&";
	                }
	                else {
	                    queryStr += key + "=" + value + "&";
	                }
	            }
	        }
	        if (queryStr !== "") {
	            queryStr = queryStr.slice(0, -1); //trim extra & at the end
	        }
	        return queryStr;
	    };
	    Uri.prototype._parseURI = function (uriString) {
	        var remainingString = uriString;
	        // Find fragment
	        var fragmentBeginPos = remainingString.indexOf("#");
	        if (fragmentBeginPos >= 0) {
	            var fragment = remainingString.substring(fragmentBeginPos + 1);
	            this.setFragment(fragment);
	            remainingString = remainingString.substring(0, fragmentBeginPos); //remove fragment
	        }
	        // Find scheme
	        var schemeEndPos = remainingString.search(DELIMITERS);
	        if (schemeEndPos >= 0) {
	            if (remainingString[schemeEndPos] === ":") {
	                this.setScheme(remainingString.substring(0, schemeEndPos));
	                remainingString = remainingString.substring(schemeEndPos + 1); //remove scheme
	            }
	        }
	        else {
	            this.setPath(remainingString);
	            return;
	        }
	        // Find authority
	        var authority = "";
	        var doubleSlashPos = remainingString.indexOf("//");
	        if (doubleSlashPos === 0) {
	            remainingString = remainingString.substring(2); //skip the //
	            var authorityEndPos = remainingString.search(AUTHORITY_TERMINATORS);
	            if (authorityEndPos >= 0) {
	                authority = remainingString.substring(0, authorityEndPos);
	                remainingString = remainingString.substring(authorityEndPos); //remove authority
	            }
	            else {
	                authority = remainingString;
	                remainingString = "";
	            }
	            this.setAuthority(authority);
	            if (!remainingString) {
	                this.setPath("");
	                return;
	            }
	        }
	        // Find query
	        var queryBeginPos = remainingString.indexOf("?");
	        if (queryBeginPos >= 0) {
	            this.setQuery(remainingString.substring(queryBeginPos + 1));
	            remainingString = remainingString.substring(0, queryBeginPos);
	        }
	        this.setPath(remainingString);
	    };
	    Uri.prototype._parseAuthority = function (authority) {
	        this._host = authority;
	        var userNameEndPos = authority.lastIndexOf("@");
	        if (userNameEndPos >= 0) {
	            this._host = this._host.substring(userNameEndPos + 1);
	        }
	        var hostPortSeparatorPos = this._host.indexOf(":");
	        if (userNameEndPos < 0 && hostPortSeparatorPos < 0) {
	            return;
	        }
	        var authorityComponents = authority;
	        if (userNameEndPos < 0) {
	            this._host = authorityComponents;
	        }
	        else {
	            this._user = authorityComponents.substring(0, userNameEndPos);
	            this._host = authorityComponents.substring(userNameEndPos + 1);
	        }
	        if (hostPortSeparatorPos >= 0) {
	            this._port = this._host.substring(hostPortSeparatorPos + 1);
	            this._host = this._host.substring(0, hostPortSeparatorPos);
	        }
	        this._user = decodeURIComponent(this._user);
	        this._host = decodeURIComponent(this._host);
	    };
	    Uri.prototype._parsePath = function (remainingString) {
	        this._path = decodeURIComponent(remainingString);
	        var pathSegments = this._pathSegments = [];
	        this._pathEncoded = remainingString;
	        // We have to split the path BEFORE decoding so that encoded / characters
	        // don't get interpreted as path separators.
	        var encodedPathSegments = remainingString.split("/");
	        for (var i = 0; i < encodedPathSegments.length; ++i) {
	            pathSegments[i] = decodeURIComponent(encodedPathSegments[i]);
	        }
	        // Trims first/last element if empty
	        if (pathSegments[0] === "") {
	            pathSegments.shift(); // remove first element
	        }
	        if (pathSegments[pathSegments.length - 1] === "") {
	            pathSegments.pop(); // remove last element
	        }
	    };
	    Uri.prototype._getAuthority = function (encoded, outputOptions) {
	        if (outputOptions === void 0) { outputOptions = {}; }
	        // Note that if encoded is false, doNotPercentEncodeHost doesn't matter - the whole URI (including host) will not be encoded.
	        var doNotPercentEncodeHost = outputOptions && outputOptions.doNotPercentEncodeHost;
	        var authority = "";
	        var user;
	        var host;
	        var port;
	        if (encoded) {
	            // While technically a reserved character, ':' is commonly used in the
	            // username to denote username:password, so we special case not encoding
	            // the first occurence of this character.
	            user = encodeURIComponent(this._user).replace("%3A", ":");
	            if (doNotPercentEncodeHost) {
	                host = this._host;
	            }
	            else {
	                host = encodeURIComponent(this._host);
	            }
	            port = encodeURIComponent(this._port);
	        }
	        else {
	            user = this._user;
	            host = this._host;
	            port = this._port;
	        }
	        if (user !== "") {
	            authority = user + "@";
	        }
	        if (this._host !== "") {
	            authority += host;
	        }
	        if (this._port !== "") {
	            authority += ":" + port;
	        }
	        return authority;
	    };
	    Uri.prototype._decodeQueryString = function (component) {
	        // For query strings only, "+" is a valid substitute for a space, but decodeURIComponent
	        // doesn't take this into account. (Note that replace("+", " ") only replaces one +.)
	        var result = component;
	        try {
	            result = decodeURIComponent(component.replace(/\+/g, " "));
	        }
	        catch (e) {
	        }
	        return result;
	    };
	    return Uri;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Uri;


/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var FabricTheming_1 = __webpack_require__(101);
	var RgbaColor_1 = __webpack_require__(103);
	var UriEncoding_1 = __webpack_require__(39);
	/**
	 * Utility methods which can be used to load the theme of a SharePoint site.
	 */
	var WebTheme = (function () {
	    function WebTheme() {
	    }
	    /**
	     * Constructs the URL of a REST endpoint which will return the web theme.
	     * @param {IWebContextInfo} webContextInfo Context information about the web.
	     * @param {string} cultureName Current UI culture.
	     * @param {string} themeOverride URL to a temporary override theme (e.g. preview).
	     */
	    WebTheme.makeWebThemeRestUrl = function (webServerRelativeUrl, cultureName, themeOverride) {
	        "use strict";
	        var webUrl = webServerRelativeUrl;
	        if (webUrl && webUrl[webUrl.length - 1] === '/') {
	            // Trim trailing slash.
	            webUrl = webUrl.substring(0, webUrl.length - 1);
	        }
	        webUrl = UriEncoding_1.default.escapeUrlForCallback(webUrl);
	        var webThemeRestEndpoint = UriEncoding_1.default.escapeUrlForCallback(webUrl) +
	            '/_api/SP.Web.GetContextWebThemeData?noImages=true&lcid=' +
	            UriEncoding_1.default.encodeURIComponent(cultureName);
	        if (themeOverride) {
	            webThemeRestEndpoint += "&ThemeOverride=" + UriEncoding_1.default.encodeURIComponent(themeOverride);
	        }
	        return webThemeRestEndpoint;
	    };
	    /**
	     * Constructs the URL of a REST endpoint which will return the web theme.
	     * @param {IWebContextInfo} webContextInfo Context information about the web.
	     */
	    WebTheme.processWebThemeRestResponse = function (responseText) {
	        // This could throw if the handler returns an HTML error page or invalis JSON.
	        // DataSource will count that as an error and call the error callback.
	        "use strict";
	        var response = JSON.parse(responseText);
	        var rawThemeData;
	        if (response && response.d && response.d.GetContextWebThemeData) {
	            rawThemeData = JSON.parse(response.d.GetContextWebThemeData);
	        }
	        var themeData = WebTheme.processRawThemeData(rawThemeData);
	        return themeData;
	    };
	    /**
	     * Converts an IThemeDataRaw into an IThemeData.
	     * @param {IThemeDataRaw} themeData Raw theme data to process.
	     */
	    WebTheme.processRawThemeData = function (themeData) {
	        "use strict";
	        if (themeData) {
	            var coerceToColor = WebTheme.coerceToColor;
	            var colors = {};
	            var inputColors = themeData.Palette ? themeData.Palette.Colors : {};
	            for (var colorKey in inputColors) {
	                if (inputColors.hasOwnProperty(colorKey)) {
	                    var colorValue = coerceToColor(inputColors[colorKey]);
	                    // TODO: console.warn if colorValue is undefined?
	                    if (colorValue) {
	                        colors[colorKey] = colorValue;
	                    }
	                }
	            }
	            var fabricColors = FabricTheming_1.default.generateFabricColors(colors['ContentAccent1'], themeData.IsInverted);
	            var pageBG = coerceToColor(colors['PageBackground']) || null;
	            var bgOverlay = coerceToColor(colors['BackgroundOverlay']) || null;
	            var alpha40 = Math.round(0.4 * RgbaColor_1.default.maxComponent);
	            fabricColors['white'] = pageBG;
	            // RgbaColor.fromRgba and RgbaColor.clone both return new objects.
	            // This is important for avoiding duplicate filtering logic in the caching layer.
	            fabricColors['primaryBackground'] = RgbaColor_1.default.clone(pageBG);
	            fabricColors['primaryText'] = fabricColors['primaryText'] || coerceToColor('#333');
	            fabricColors['whiteTranslucent40'] = pageBG && RgbaColor_1.default.fromRgba(pageBG.R, pageBG.G, pageBG.B, alpha40);
	            fabricColors['backgroundOverlay'] = bgOverlay;
	            fabricColors['suiteBarBackground'] = coerceToColor(colors['SuiteBarBackground']) || null;
	            fabricColors['suiteBarText'] = coerceToColor(colors['SuiteBarText']) || null;
	            fabricColors['suiteBarDisabledText'] = coerceToColor(colors['SuiteBarDisabledText']) || null;
	            fabricColors['topBarBackground'] = coerceToColor(colors['TopBarBackground']) || null;
	            fabricColors['topBarText'] = coerceToColor(colors['TopBarText']) || null;
	            fabricColors['topBarHoverText'] = coerceToColor(colors['TopBarHoverText']) || null;
	            fabricColors['dialogBorder'] = coerceToColor(colors['DialogBorder']) || null;
	            return {
	                backgroundImageUri: themeData.BackgroundImageUri,
	                cacheToken: themeData.ThemeCacheToken,
	                isDefault: themeData.IsDefault,
	                isInverted: themeData.IsInverted,
	                palette: fabricColors,
	                version: themeData.Version
	            };
	        }
	        return {
	            backgroundImageUri: "",
	            cacheToken: "",
	            isDefault: true,
	            isInverted: false,
	            palette: {},
	            version: ""
	        };
	    };
	    /**
	     * Coerces an HTML color string or a color object in raw web theme data into an RgbaColor.
	     * @param {any} toColor Object to be converted into an RgbaColor.
	     */
	    WebTheme.coerceToColor = function (toColor) {
	        "use strict";
	        var resultColor;
	        // Use duck typing to extract a color
	        if (!toColor) {
	            resultColor = null;
	        }
	        else if (typeof toColor === "string" || toColor instanceof String) {
	            resultColor = RgbaColor_1.default.fromHtmlColor(String(toColor));
	        }
	        else if ("DefaultColor" in toColor) {
	            resultColor = WebTheme.coerceToColor(toColor["DefaultColor"]);
	        }
	        else if ("R" in toColor && "G" in toColor && "B" in toColor) {
	            resultColor = RgbaColor_1.default.fromRgba(toColor.R, toColor.G, toColor.B, toColor.A);
	        }
	        return resultColor;
	    };
	    return WebTheme;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = WebTheme;


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var StringHelper = __webpack_require__(82);
	var StringUtilities_resx_1 = __webpack_require__(83);
	var oneKiloByte = 1024;
	var oneMegaByte = 1048576;
	var oneGigaByte = 1073741824;
	var oneTeraByte = 1099511627776;
	var DriveSpaceHelper = (function () {
	    function DriveSpaceHelper() {
	    }
	    /**
	     * Creates a display string for the given number in bytes.
	     * This function produces a string value meant to mimic that displyed by file explorer.
	     */
	    DriveSpaceHelper.getDisplayString = function (value, options) {
	        if (options === void 0) { options = {}; }
	        if (typeof value !== 'number' || (options.ignoreZero && value === 0)) {
	            return '';
	        }
	        if (value === 1) {
	            return StringHelper.format(StringUtilities_resx_1.strings.fileSizeBytesSingular);
	        }
	        var info = this._getInfo(value);
	        var numberString = this._trimNumber(info.value, options.trimDecimal);
	        return StringHelper.format(info.template, numberString);
	    };
	    DriveSpaceHelper._getInfo = function (value) {
	        // 1 byte is already handled
	        // 0 bytes, 2 bytes - 1023 bytes
	        if (value < oneKiloByte) {
	            return { template: StringUtilities_resx_1.strings.fileSizeBytesPlural, value: value };
	        }
	        // 1KB - 999 KB
	        if (value < 1000 * oneKiloByte) {
	            return { template: StringUtilities_resx_1.strings.fileSizeKB, value: value / oneKiloByte };
	        }
	        // 0.97 MB - 999 MB
	        if (value < 1000 * oneMegaByte) {
	            return { template: StringUtilities_resx_1.strings.fileSizeMB, value: value / oneMegaByte };
	        }
	        // 0.97 GB - 999 GB
	        if (value < 1000 * oneGigaByte) {
	            return { template: StringUtilities_resx_1.strings.fileSizeGB, value: value / oneGigaByte };
	        }
	        // 0.97 TB ->
	        return { template: StringUtilities_resx_1.strings.fileSizeTB, value: value / oneTeraByte };
	    };
	    DriveSpaceHelper._trimZeroes = function (value, decimalPlaces) {
	        var str = value.toFixed(decimalPlaces);
	        for (var i = 0; i < decimalPlaces; i++) {
	            if (str[str.length - 1] === '0') {
	                str = str.substring(0, str.length - 1);
	            }
	            else {
	                break;
	            }
	        }
	        if (str[str.length - 1] === '.') {
	            str = str.substring(0, str.length - 1);
	        }
	        return str;
	    };
	    DriveSpaceHelper._trimNumber = function (value, trimDecimal) {
	        // 12.00 -> 12
	        if (value === Math.floor(value)) {
	            return value.toFixed(0);
	        }
	        // Removes the mantissa from the value (ex: 456.789 -> 457)
	        if (value >= 100) {
	            return value.toFixed(0);
	        }
	        // 45.678 -> 45.7
	        if (value >= 10) {
	            return trimDecimal ? this._trimZeroes(value, 1) : value.toFixed(1);
	        }
	        // 4.5678 -> 4.57
	        return trimDecimal ? this._trimZeroes(value, 2) : value.toFixed(2);
	    };
	    return DriveSpaceHelper;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = DriveSpaceHelper;


/***/ },
/* 115 */
/***/ function(module, exports) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var AddressParser = (function () {
	    function AddressParser() {
	    }
	    AddressParser.deserializeQuery = function (paramsString) {
	        var viewParams = {};
	        if (paramsString) {
	            var paramParts = paramsString.split("&");
	            for (var i = 0; i < paramParts.length; i++) {
	                var param = paramParts[i].split("=");
	                // For query strings only, "+" is a valid substitute for a space, but decodeURIComponent
	                // doesn't take this into account.
	                if (typeof param[1] !== 'undefined') {
	                    param[1] = param[1].replace(/\+/g, " ");
	                }
	                viewParams[param[0]] = decodeURIComponent(param[1]);
	            }
	        }
	        return viewParams;
	    };
	    AddressParser.GetQueryStringFromUrl = function (url) {
	        return url.substring(url.indexOf('?') + 1);
	    };
	    AddressParser.GetUrlWithoutQueryString = function (url) {
	        return url.substring(0, url.indexOf('?'));
	    };
	    return AddressParser;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = AddressParser;


/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Features_1 = __webpack_require__(42);
	var ShortcutLink = { ODB: 563, ODC: null, Fallback: false };
	var ShortcutUtilities;
	(function (ShortcutUtilities) {
	    'use strict';
	    /**
	     * Returns true if item is a Shortcut item, and false otherwise.
	     * Checks the file extension for .url and .website
	     */
	    function isShortcutItem(item) {
	        if (!item || !item.extension) {
	            return false;
	        }
	        var fileType;
	        if (item.extension[0] !== '.') {
	            // Technically, extension should always start with a '.' but that's not actually the case
	            fileType = item.extension;
	        }
	        else {
	            fileType = item.extension.slice(1);
	        }
	        return isShortcutFileType(fileType);
	    }
	    ShortcutUtilities.isShortcutItem = isShortcutItem;
	    /**
	     * Identifies whether or not a given file type should be treated as a shortcut item.
	     * Note that while a file extension has a preceding '.' character, a file type does not.
	     */
	    function isShortcutFileType(fileType) {
	        // note: lnk files are not supported in odb's SP shortcuts API, we should not treat .lnk files as shortcut files.
	        return fileType === 'url' || fileType === 'website';
	    }
	    ShortcutUtilities.isShortcutFileType = isShortcutFileType;
	    function isShortcutEnabled() {
	        return Features_1.default.isFeatureEnabled(ShortcutLink);
	    }
	    ShortcutUtilities.isShortcutEnabled = isShortcutEnabled;
	    var ShortcutErrors;
	    (function (ShortcutErrors) {
	        /** Generic unknown error */
	        ShortcutErrors[ShortcutErrors["UnknownError"] = 0] = "UnknownError";
	        /** File already exists (error during new file creation). */
	        ShortcutErrors[ShortcutErrors["NewFileCreationFileAlreadyExistsError"] = 1] = "NewFileCreationFileAlreadyExistsError";
	        /** Filename contains an invalid character, such as # % * : < > ? / | */
	        ShortcutErrors[ShortcutErrors["InvalidCharacterError"] = 2] = "InvalidCharacterError";
	    })(ShortcutErrors = ShortcutUtilities.ShortcutErrors || (ShortcutUtilities.ShortcutErrors = {}));
	})(ShortcutUtilities || (ShortcutUtilities = {}));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ShortcutUtilities;


/***/ },
/* 117 */
/***/ function(module, exports) {

	"use strict";
	var TAG_BODY = '(?:[^"\'>]|"[^"]*"|\'[^\']*\')*';
	/** Regex that matches all non-text in an HTML string. */
	var NONTEXT_PATTERN = new RegExp('<(?:'
	    + '!--(?:(?:-*[^->])*--+|-?)'
	    + '|script\\b' + TAG_BODY + '>[\\s\\S]*?</script\\s*'
	    + '|style\\b' + TAG_BODY + '>[\\s\\S]*?</style\\s*'
	    + '|/?[a-z]' + TAG_BODY
	    + ')>', 'gi');
	/**
	 * Contains utility functions to sanitize user input.
	 * This should only be used for DISPLAYING user input, not for sending it to the server. The server itself should
	 * also needs to sanitize user input to avoid security risks.
	 */
	var Sanitize = (function () {
	    function Sanitize() {
	    }
	    /**
	     * Takes a string with HTML elements and returns only the text contents that the user would read.
	     * This differs from .innerText in that it also removes the contents of script tags, and other similar differences.
	     */
	    Sanitize.getTextFromHtml = function (html) {
	        var oldHtml = '';
	        do {
	            oldHtml = html;
	            html = oldHtml.replace(NONTEXT_PATTERN, '');
	        } while (oldHtml !== html);
	        return html;
	    };
	    return Sanitize;
	}());
	exports.Sanitize = Sanitize;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Sanitize;


/***/ },
/* 118 */,
/* 119 */,
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(121);


/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	var content = __webpack_require__(122);
	var loader = __webpack_require__(124);
	
	if(typeof content === "string") content = [[module.id, content]];
	
	// add the styles to the DOM
	for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
	
	if(content.locals) module.exports = content.locals;

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(123)();
	// imports
	
	
	// module
	exports.push([module.id, ".cke_editable{overflow:hidden}[dir=ltr] .cke_editable{text-align:left}[dir=rtl] .cke_editable{text-align:right}[dir=ltr] .cke_editable ol,[dir=ltr] .cke_editable ul{padding-left:50px}[dir=rtl] .cke_editable ol,[dir=rtl] .cke_editable ul{padding-right:50px}[dir=ltr] .cke_editable li::before{margin-left:-19px}[dir=rtl] .cke_editable li::before{margin-right:-19px}[dir=ltr] .cke_editable li::before{margin-right:4px}[dir=rtl] .cke_editable li::before{margin-left:4px}[dir=ltr] .cke_editable li::before{text-align:right}[dir=rtl] .cke_editable li::before{text-align:left}.cke_editable ol{counter-reset:item}.cke_editable ol>li{counter-increment:item}.cke_editable ol ol>li{display:block}.cke_editable ol ol>li:before{content:counter(item,lower-alpha) \". \"}.cke_editable table,.cke_editable td,.cke_editable th,.cke_editable tr{border:1px solid \"[theme:neutralTertiary, default: #a6a6a6]\"!important;border-collapse:collapse}.cke_editable table{margin-top:10px;margin-bottom:10px;max-width:820px!important}.cke_editable td,.cke_editable td p,.cke_editable th,.cke_editable th p{font-family:\"Segoe UI WestEuropean\",\"Segoe UI\",-apple-system,BlinkMacSystemFont,Roboto,\"Helvetica Neue\",sans-serif;-webkit-font-smoothing:antialiased;font-size:14px;font-weight:400;color:\"[theme:neutralPrimary, default: #333333]\";word-wrap:break-word;font-family:\"Segoe UI Regular WestEuropean\",\"Segoe UI\",\"Segoe WP\",Tahoma,Arial,sans-serif}.cke_editable th{font-weight:600;text-align:center}[dir=ltr] .cke_editable th{padding-left:20px}[dir=rtl] .cke_editable th{padding-right:20px}[dir=ltr] .cke_editable th{padding-right:20px}[dir=rtl] .cke_editable th{padding-left:20px}[dir=ltr] .cke_editable td{padding-left:8px}[dir=rtl] .cke_editable td{padding-right:8px}[dir=ltr] .cke_editable td{padding-right:20px}[dir=rtl] .cke_editable td{padding-left:20px}[dir=ltr] .cke_editable td p[style*=\"text-align: center\"]{padding-left:20px}[dir=rtl] .cke_editable td p[style*=\"text-align: center\"]{padding-right:20px}[dir=ltr] .cke_editable td p[style*=\"text-align: center\"]{padding-right:20px}[dir=rtl] .cke_editable td p[style*=\"text-align: center\"]{padding-left:20px}[dir=ltr] .cke_editable td p[style*=\"text-align: left\"]{padding-left:8px}[dir=rtl] .cke_editable td p[style*=\"text-align: left\"]{padding-right:8px}[dir=ltr] .cke_editable td p[style*=\"text-align: left\"]{padding-right:20px}[dir=rtl] .cke_editable td p[style*=\"text-align: left\"]{padding-left:20px}[dir=ltr] .cke_editable td p[style*=\"text-align: right\"]{padding-left:20px}[dir=rtl] .cke_editable td p[style*=\"text-align: right\"]{padding-right:20px}[dir=ltr] .cke_editable td p[style*=\"text-align: right\"]{padding-right:8px}[dir=rtl] .cke_editable td p[style*=\"text-align: right\"]{padding-left:8px}.cke_editable tr td:nth-last-child(n+20):first-child,.cke_editable tr td:nth-last-child(n+20):first-child~*{padding:0 4px 0 4px!important;font-size:14px!important}[dir=ltr] .cke_editable .ql-indent-1{padding-left:40px}[dir=rtl] .cke_editable .ql-indent-1{padding-right:40px}[dir=ltr] .cke_editable li.ql-indent-1{padding-left:59px}[dir=rtl] .cke_editable li.ql-indent-1{padding-right:59px}[dir=ltr] .cke_editable .ql-indent-2{padding-left:80px}[dir=rtl] .cke_editable .ql-indent-2{padding-right:80px}[dir=ltr] .cke_editable li.ql-indent-2{padding-left:99px}[dir=rtl] .cke_editable li.ql-indent-2{padding-right:99px}[dir=ltr] .cke_editable .ql-indent-3{padding-left:120px}[dir=rtl] .cke_editable .ql-indent-3{padding-right:120px}[dir=ltr] .cke_editable li.ql-indent-3{padding-left:139px}[dir=rtl] .cke_editable li.ql-indent-3{padding-right:139px}[dir=ltr] .cke_editable .ql-indent-4{padding-left:160px}[dir=rtl] .cke_editable .ql-indent-4{padding-right:160px}[dir=ltr] .cke_editable li.ql-indent-4{padding-left:179px}[dir=rtl] .cke_editable li.ql-indent-4{padding-right:179px}[dir=ltr] .cke_editable .ql-indent-5{padding-left:200px}[dir=rtl] .cke_editable .ql-indent-5{padding-right:200px}[dir=ltr] .cke_editable li.ql-indent-5{padding-left:219px}[dir=rtl] .cke_editable li.ql-indent-5{padding-right:219px}[dir=ltr] .cke_editable .ql-indent-6{padding-left:240px}[dir=rtl] .cke_editable .ql-indent-6{padding-right:240px}[dir=ltr] .cke_editable li.ql-indent-6{padding-left:259px}[dir=rtl] .cke_editable li.ql-indent-6{padding-right:259px}[dir=ltr] .cke_editable .ql-indent-7{padding-left:280px}[dir=rtl] .cke_editable .ql-indent-7{padding-right:280px}[dir=ltr] .cke_editable li.ql-indent-7{padding-left:299px}[dir=rtl] .cke_editable li.ql-indent-7{padding-right:299px}[dir=ltr] .cke_editable .ql-indent-8{padding-left:320px}[dir=rtl] .cke_editable .ql-indent-8{padding-right:320px}[dir=ltr] .cke_editable li.ql-indent-8{padding-left:339px}[dir=rtl] .cke_editable li.ql-indent-8{padding-right:339px}[dir=ltr] .cke_editable .ql-align-right{text-align:right}[dir=rtl] .cke_editable .ql-align-right{text-align:left}.cke_editable .ql-align-center{text-align:center}@media only screen and (max-width:640px){.cke_editable table,.cke_editable td,.cke_editable th{padding:0 8px 0 8px!important;word-break:break-all}.cke_editable table{max-width:600px!important}.cke_editable td p,.cke_editable td p span,.cke_editable th p,.cke_editable th p span{font-size:14px!important}}", ""]);
	
	// exports


/***/ },
/* 123 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];
	
		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};
	
		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 124 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * An IThemingInstruction can specify a rawString to be preserved or a theme slot and a default value
	 * to use if that slot is not specified by the theme.
	 */
	"use strict";
	// IE needs to inject styles using cssText. However, we need to evaluate this lazily, so this
	// value will initialize as undefined, and later will be set once on first loadStyles injection.
	var _injectStylesWithCssText;
	// Store the theming state in __themeState__ global scope for reuse in the case of duplicate
	// load-themed-styles hosted on the page.
	var _root = (typeof window === 'undefined') ? global : window; // tslint:disable-line:no-any
	var _themeState = _root.__themeState__ = _root.__themeState__ || {
	    theme: undefined,
	    lastStyleElement: undefined,
	    registeredStyles: []
	};
	/**
	 * Matches theming tokens. For example, "[theme: themeSlotName, default: #FFF]" (including the quotes).
	 */
	/* tslint:disable: max-line-length */
	var _themeTokenRegex = /[\'\"]\[theme:\s*(\w+)\s*(?:\,\s*default:\s*([\\"\']?[\.\,\(\)\#\-\s\w]*[\.\,\(\)\#\-\w][\"\']?))?\s*\][\'\"]/g;
	/* tslint:enable: max-line-length */
	/** Maximum style text length, for supporting IE style restrictions. */
	var MAX_STYLE_CONTENT_SIZE = 10000;
	/**
	 * Loads a set of style text. If it is registered too early, we will register it when the window.load
	 * event is fired.
	 * @param {string | ThemableArray} styles Themable style text to register.
	 */
	function loadStyles(styles) {
	    var styleParts = Array.isArray(styles) ? styles : splitStyles(styles);
	    if (_injectStylesWithCssText === undefined) {
	        _injectStylesWithCssText = shouldUseCssText();
	    }
	    applyThemableStyles(styleParts);
	}
	exports.loadStyles = loadStyles;
	/**
	 * Allows for customizable loadStyles logic. e.g. for server side rendering application
	 * @param {(styles: string) => void} a loadStyles callback that gets called when styles are loaded or reloaded
	 */
	function configureLoadStyles(callback) {
	    _themeState.loadStyles = callback;
	}
	exports.configureLoadStyles = configureLoadStyles;
	/**
	 * Loads a set of style text. If it is registered too early, we will register it when the window.load event
	 * is fired.
	 * @param {string} styleText Style to register.
	 * @param {IStyleRecord} styleRecord Existing style record to re-apply.
	 */
	function applyThemableStyles(stylesArray, styleRecord) {
	    if (_themeState.loadStyles) {
	        var styles = resolveThemableArray(stylesArray);
	        _themeState.loadStyles(styles);
	    }
	    else {
	        _injectStylesWithCssText ?
	            registerStylesIE(stylesArray, styleRecord) :
	            registerStyles(stylesArray, styleRecord);
	    }
	}
	/**
	 * Registers a set theme tokens to find and replace. If styles were already registered, they will be
	 * replaced.
	 * @param {theme} theme JSON object of theme tokens to values.
	 */
	function loadTheme(theme) {
	    _themeState.theme = theme;
	    // reload styles.
	    reloadStyles();
	}
	exports.loadTheme = loadTheme;
	/**
	 * Reloads styles.
	 */
	function reloadStyles() {
	    if (_themeState.theme) {
	        for (var _i = 0, _a = _themeState.registeredStyles; _i < _a.length; _i++) {
	            var styleRecord = _a[_i];
	            applyThemableStyles(styleRecord.themableStyle, styleRecord);
	        }
	    }
	}
	/**
	 * Find theme tokens and replaces them with provided theme values.
	 * @param {string} styles Tokenized styles to fix.
	 */
	function detokenize(styles) {
	    if (styles) {
	        styles = resolveThemableArray(splitStyles(styles));
	    }
	    return styles;
	}
	exports.detokenize = detokenize;
	/**
	 * Resolves ThemingInstruction objects in an array and joins the result into a string.
	 * @param {ThemableArray} splitStyleArray ThemableArray to resolve and join.
	 */
	function resolveThemableArray(splitStyleArray) {
	    var theme = _themeState.theme;
	    var resolvedCss;
	    if (splitStyleArray) {
	        // Resolve the array of theming instructions to an array of strings.
	        // Then join the array to produce the final CSS string.
	        var resolvedArray = splitStyleArray.map(function (currentValue) {
	            var themeSlot = currentValue.theme;
	            if (themeSlot) {
	                // A theming annotation. Resolve it.
	                var themedValue = theme ? theme[themeSlot] : undefined;
	                var defaultValue = currentValue.defaultValue;
	                // Warn to console if we hit an unthemed value even when themes are provided.
	                // Allow the themedValue to be undefined to explicitly request the default value.
	                if (theme && !themedValue && console && !(themeSlot in theme)) {
	                    /* tslint:disable: max-line-length */
	                    console.warn("Theming value not provided for \"" + themeSlot + "\". Falling back to \"" + (defaultValue || 'inherit') + "\".");
	                }
	                return themedValue || defaultValue || 'inherit';
	            }
	            else {
	                // A non-themable string. Preserve it.
	                return currentValue.rawString;
	            }
	        });
	        resolvedCss = resolvedArray.join('');
	    }
	    return resolvedCss;
	}
	/**
	 * Split tokenized CSS into an array of strings and theme specification objects
	 * @param {string} styles Tokenized styles to split.
	 */
	function splitStyles(styles) {
	    var result = [];
	    if (styles) {
	        var pos = 0; // Current position in styles.
	        var tokenMatch = void 0;
	        while (tokenMatch = _themeTokenRegex.exec(styles)) {
	            var matchIndex = tokenMatch.index;
	            if (matchIndex > pos) {
	                result.push({
	                    rawString: styles.substring(pos, matchIndex)
	                });
	            }
	            result.push({
	                theme: tokenMatch[1],
	                defaultValue: tokenMatch[2] // May be undefined
	            });
	            // index of the first character after the current match
	            pos = _themeTokenRegex.lastIndex;
	        }
	        // Push the rest of the string after the last match.
	        result.push({
	            rawString: styles.substring(pos)
	        });
	    }
	    return result;
	}
	exports.splitStyles = splitStyles;
	/**
	 * Registers a set of style text. If it is registered too early, we will register it when the
	 * window.load event is fired.
	 * @param {ThemableArray} styleArray Array of IThemingInstruction objects to register.
	 * @param {IStyleRecord} styleRecord May specify a style Element to update.
	 */
	function registerStyles(styleArray, styleRecord) {
	    var head = document.getElementsByTagName('head')[0];
	    var styleElement = document.createElement('style');
	    styleElement.type = 'text/css';
	    styleElement.appendChild(document.createTextNode(resolveThemableArray(styleArray)));
	    if (styleRecord) {
	        head.replaceChild(styleElement, styleRecord.styleElement);
	        styleRecord.styleElement = styleElement;
	    }
	    else {
	        head.appendChild(styleElement);
	    }
	    if (!styleRecord) {
	        _themeState.registeredStyles.push({
	            styleElement: styleElement,
	            themableStyle: styleArray
	        });
	    }
	}
	/**
	 * Registers a set of style text, for IE 9 and below, which has a ~30 style element limit so we need
	 * to register slightly differently.
	 * @param {ThemableArray} styleArray Array of IThemingInstruction objects to register.
	 * @param {IStyleRecord} styleRecord May specify a style Element to update.
	 */
	function registerStylesIE(styleArray, styleRecord) {
	    var head = document.getElementsByTagName('head')[0];
	    var lastStyleElement = _themeState.lastStyleElement, registeredStyles = _themeState.registeredStyles;
	    var stylesheet = lastStyleElement ? lastStyleElement.styleSheet : undefined;
	    var lastStyleContent = stylesheet ? stylesheet.cssText : '';
	    var lastRegisteredStyle = registeredStyles[registeredStyles.length - 1];
	    var resolvedStyleText = resolveThemableArray(styleArray);
	    if (!lastStyleElement || (lastStyleContent.length + resolvedStyleText.length) > MAX_STYLE_CONTENT_SIZE) {
	        lastStyleElement = document.createElement('style');
	        lastStyleElement.type = 'text/css';
	        if (styleRecord) {
	            head.replaceChild(lastStyleElement, styleRecord.styleElement);
	            styleRecord.styleElement = lastStyleElement;
	        }
	        else {
	            head.appendChild(lastStyleElement);
	        }
	        if (!styleRecord) {
	            lastRegisteredStyle = {
	                styleElement: lastStyleElement,
	                themableStyle: styleArray
	            };
	            registeredStyles.push(lastRegisteredStyle);
	        }
	    }
	    lastStyleElement.styleSheet.cssText += detokenize(resolvedStyleText);
	    Array.prototype.push.apply(lastRegisteredStyle.themableStyle, styleArray); // concat in-place
	    // Preserve the theme state.
	    _themeState.lastStyleElement = lastStyleElement;
	}
	/**
	 * Checks to see if styleSheet exists as a property off of a style element.
	 * This will determine if style registration should be done via cssText (<= IE9) or not
	 */
	function shouldUseCssText() {
	    var useCSSText = false;
	    if (typeof document !== 'undefined') {
	        var emptyStyle = document.createElement('style');
	        emptyStyle.type = 'text/css';
	        useCSSText = !!emptyStyle.styleSheet;
	    }
	    return useCSSText;
	}
	
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 125 */
/***/ function(module, exports) {

	"use strict";
	exports.CKEDITOR_FLIGHT_ID = 955;
	exports.CKEDITOR_TABLEPASTE_FLIGHT_ID = 958;
	exports.CKEDITOR_IMAGEPASTE_FLIGHT_ID = 975;


/***/ },
/* 126 */
/***/ function(module, exports) {

	"use strict";
	function Base64MimeType(encoded) {
	    var result = undefined;
	    var mime = encoded.match(/data:([a-zA-Z0-9]+\/[a-zA-Z0-9-.+]+).*,.*/);
	    if (mime && mime.length) {
	        result = mime[1];
	    }
	    return result;
	}
	exports.Base64MimeType = Base64MimeType;
	function Base64toBlob(b64Data, contentType) {
	    if (contentType === void 0) { contentType = ''; }
	    var sliceSize = 512;
	    var byteCharacters = atob(b64Data);
	    var byteArrays = [];
	    var length = byteCharacters.length;
	    var byteNumbers;
	    for (var offset = 0; offset < length; offset += sliceSize) {
	        var slice = byteCharacters.slice(offset, offset + sliceSize);
	        byteNumbers = [];
	        for (var i = 0; i < slice.length; i++) {
	            byteNumbers[i] = slice.charCodeAt(i);
	        }
	        var byteArray = new Uint8Array(byteNumbers);
	        byteArrays.push(byteArray);
	        byteNumbers.length = 0;
	    }
	    var blob = new Blob(byteArrays, { type: contentType });
	    return blob;
	}
	exports.Base64toBlob = Base64toBlob;


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var office_ui_fabric_react_1 = __webpack_require__(27);
	var sp_telemetry_1 = __webpack_require__(7);
	var sp_core_library_1 = __webpack_require__(12);
	var QuillLoader_1 = __webpack_require__(128);
	__webpack_require__(134);
	var RteStrings_resx_1 = __webpack_require__(137);
	var odsp_utilities_bundle_1 = __webpack_require__(33);
	var HTMLCleanupUtils_1 = __webpack_require__(139);
	var QuillEditor = (function () {
	    function QuillEditor(config, currentHTML, editorElement, selectionChangeCallback, textChangeCallback) {
	        this._platform = new odsp_utilities_bundle_1.PlatformDetection();
	        this._config = config;
	        this._editorElement = editorElement;
	        this._handleSelectionChange = selectionChangeCallback;
	        this._handleTextChange = textChangeCallback;
	        this._initialize(currentHTML);
	    }
	    QuillEditor.createNewEditor = function (config, currentHTML, editorElement, selectionChangeCallback, textChangeCallback, startupFocus) {
	        return new Promise(function (resolve) {
	            QuillEditor.moduleLoader.loadModule().then(function () {
	                var editor = new QuillEditor(config, currentHTML, editorElement, selectionChangeCallback, textChangeCallback);
	                resolve(editor);
	            });
	        });
	    };
	    QuillEditor._createQosScope = function (scenario) {
	        return new sp_telemetry_1._QosMonitor("Quill" + scenario);
	    };
	    QuillEditor._handleMonitoredException = function (qos, err) {
	        qos.writeUnexpectedFailure('Exception', err);
	    };
	    QuillEditor.prototype.clearFormatting = function (start, end) {
	        var formats = {};
	        for (var _i = 0, _a = this._config.supportedFormatsArray; _i < _a.length; _i++) {
	            var format = _a[_i];
	            formats[format.editorKey] = false;
	        }
	        this.format(start, end, formats);
	    };
	    QuillEditor.prototype.destroy = function () {
	        if (this._quill) {
	            var previousHTML = this.getHTML();
	            this._quill = undefined;
	            return previousHTML;
	        }
	        return undefined;
	    };
	    QuillEditor.prototype.focus = function () {
	        if (this._editorElement && this._editorElement.setActive) {
	            this._quillEditorElement.setActive();
	        }
	        else {
	            this._quill.focus();
	        }
	    };
	    QuillEditor.prototype.formatTable = function (format, target) {
	    };
	    QuillEditor.prototype.format = function (start, end, formats, applyAllFormatsToLine) {
	        var lineFormats = applyAllFormatsToLine ? formats : {};
	        var nonLineFormats = {};
	        if (!applyAllFormatsToLine) {
	            var _loop_1 = function (formateditorKey) {
	                var format = this_1._config.supportedFormatsArray
	                    .filter(function (format) { return format.editorKey === formateditorKey; })[0];
	                if (format && format.isLine) {
	                    lineFormats[format.editorKey] = formats[format.editorKey];
	                }
	                else {
	                    nonLineFormats[format.editorKey] = formats[format.editorKey];
	                }
	            };
	            var this_1 = this;
	            for (var formateditorKey in formats) {
	                _loop_1(formateditorKey);
	            }
	        }
	        this._quill.formatLine(start, end - start, lineFormats);
	        if (!applyAllFormatsToLine) {
	            if (nonLineFormats.hasOwnProperty('link') &&
	                this.isFormatAppliedToRange(start, end, this._config.formats.get('link'))) {
	                if (start === end) {
	                    var linkElement = this._findWrappingElementByTagName(start, 'A');
	                    if (linkElement) {
	                        if (nonLineFormats['link']) {
	                            linkElement.setAttribute('href', nonLineFormats['link']);
	                            linkElement.setAttribute('target', '_blank');
	                        }
	                        else {
	                            var container = linkElement.parentElement;
	                            if (container) {
	                                var textNode = document.createTextNode(linkElement.textContent);
	                                container.insertBefore(textNode, linkElement);
	                                container.removeChild(linkElement);
	                            }
	                        }
	                        nonLineFormats['link'] = undefined;
	                    }
	                }
	                else if (nonLineFormats['link']) {
	                    var linkElement = void 0;
	                    var linkAtEnd = this._findWrappingElementByTagName(end, 'A');
	                    if (end - start > 1) {
	                        var linkAtStart = this._findWrappingElementByTagName(start + 1, 'A');
	                        linkElement = linkAtStart && linkAtEnd && linkAtStart.isEqualNode(linkAtEnd) ? linkAtEnd : undefined;
	                    }
	                    else {
	                        linkElement = linkAtEnd;
	                    }
	                    if (linkElement) {
	                        linkElement.setAttribute('href', nonLineFormats['link']);
	                        linkElement.setAttribute('target', '_blank');
	                        nonLineFormats['link'] = undefined;
	                    }
	                }
	            }
	            if (start === end) {
	                for (var format in nonLineFormats) {
	                    this._quill.format(format, nonLineFormats[format]);
	                }
	            }
	            else {
	                this._quill.formatText(start, end - start, nonLineFormats);
	            }
	        }
	    };
	    QuillEditor.prototype.getBounds = function (position) {
	        return this._quill.getBounds(position);
	    };
	    QuillEditor.prototype.getFormatValue = function (start, end, format) {
	        if (format.key === 'link') {
	            var linkElement = void 0;
	            var linkAtEnd = this._findWrappingElementByTagName(end, 'A');
	            if (end - start > 1) {
	                var linkAtStart = this._findWrappingElementByTagName(start + 1, 'A');
	                linkElement = linkAtStart && linkAtEnd && linkAtStart.isEqualNode(linkAtEnd) ? linkAtEnd : undefined;
	            }
	            else {
	                linkElement = linkAtEnd;
	            }
	            return linkElement ? linkAtEnd.getAttribute('href') : undefined;
	        }
	        else {
	            var activeFormats = this._quill.getFormat(start, end);
	            return activeFormats[format.editorKey];
	        }
	    };
	    QuillEditor.prototype.getSelection = function () {
	        var range = this._quill.getSelection();
	        return range ? {
	            start: range.index,
	            end: range.index + range.length
	        } : undefined;
	    };
	    QuillEditor.prototype.getText = function (range) {
	        return range ?
	            this._quill.getText(range.start, range.end - range.start) :
	            this._quill.getText();
	    };
	    QuillEditor.prototype.getHTML = function () {
	        return this._quillEditorElement ? this._quillEditorElement.innerHTML : '';
	    };
	    QuillEditor.prototype.getEditorType = function () {
	        return 'Quill';
	    };
	    QuillEditor.prototype.isFormatAppliedToRange = function (start, end, format) {
	        var activeFormats = this._quill.getFormat(start, end - start);
	        return format.editorValue !== undefined ?
	            activeFormats[format.editorKey] === format.editorValue :
	            activeFormats.hasOwnProperty(format.editorKey);
	    };
	    QuillEditor.prototype.setSelection = function (range) {
	        this._quill.setSelection(range.start, range.end - range.start);
	    };
	    QuillEditor.prototype._findWrappingElementByTagName = function (position, tagName) {
	        if (this._quillModule && tagName === 'A') {
	            var _linkFormat = this._quillModule.import('formats/link');
	            var link = this._quill.scroll.descendants(_linkFormat, Math.max(0, position - 1))[0];
	            return link ? link.domNode : undefined;
	        }
	        return undefined;
	    };
	    QuillEditor.prototype._handleSelectionChangeConvert = function (range) {
	        var newRange = range ? {
	            start: range.index,
	            end: range.index + range.length
	        } : undefined;
	        this._handleSelectionChange(newRange);
	    };
	    QuillEditor.prototype._addMatcher = function (quill, tagName, formatName, quillModule) {
	        quill.clipboard.addMatcher(tagName, function (node, delta) {
	            try {
	                sp_telemetry_1._EngagementLogger.logEvent(formatName + '.Paste');
	                return delta.compose(new quillModule.imports.delta().retain(delta.length(), { formatName: true }));
	            }
	            catch (e) {
	                return delta;
	            }
	        });
	    };
	    QuillEditor.prototype._initialize = function (currentHTML) {
	        var _this = this;
	        QuillEditor.moduleLoader.loadModule().then(function (quillModule) {
	            var quillFormatKeys = _this._config.supportedFormatsArray
	                .filter(function (format) { return format.isEditorNative; })
	                .map(function (format) { return format.editorKey; })
	                .filter(function (formatKey, index, self) { return self.indexOf(formatKey) === index; }); 
	            _this._quillModule = quillModule;
	            var quill = new quillModule(_this._editorElement, {
	                formats: quillFormatKeys,
	                readOnly: false,
	                styles: false,
	                placeholder: RteStrings_resx_1.default.TextWebPartPlaceholder
	            });
	            var container = document.createElement('DIV');
	            container.innerHTML = currentHTML;
	            var divs = container.querySelectorAll('div');
	            for (var i = 0; i < divs.length; i++) {
	                var div = divs[i];
	                var newElement = div.classList.contains('quote-true') ?
	                    document.createElement('BLOCKQUOTE') :
	                    document.createElement('P');
	                div.classList.remove('quote-true');
	                for (var j = 0; j < div.classList.length; j++) {
	                    newElement.classList.add(div.classList[j]);
	                }
	                if (div.hasAttribute('style')) {
	                    newElement.setAttribute('style', div.getAttribute('style'));
	                }
	                newElement.innerHTML = div.innerHTML;
	                div.parentElement.insertBefore(newElement, div);
	                div.parentElement.removeChild(div);
	            }
	            var newTags = { 'b': 'strong', 'i': 'em' };
	            for (var tag in newTags) {
	                var elements = container.querySelectorAll(tag);
	                for (var i = 0; i < elements.length; i++) {
	                    var element = elements[i];
	                    var newElement = document.createElement(newTags[tag]);
	                    newElement.innerHTML = element.innerHTML;
	                    element.parentElement.insertBefore(newElement, element);
	                    element.parentElement.removeChild(element);
	                }
	            }
	            currentHTML = HTMLCleanupUtils_1.StripOutNewLinesAndSpacesFromInnerHTML(container.innerHTML);
	            _this._quillEditorElement = _this._editorElement.querySelector('.ql-editor');
	            _this._quillEditorElement.innerHTML = currentHTML;
	            quill.on('text-change', _this._handleTextChange);
	            quill.on('selection-change', _this._handleSelectionChangeConvert);
	            _this._quill = quill;
	            if (!sp_core_library_1._SPKillSwitch.isActivated(sp_core_library_1.Guid.tryParse('b5f407f5-9f8c-4def-850a-32438487ca2d'), '10/16/2016', 'QuillPasteMatchers')) {
	                quill.clipboard.addMatcher('h1', function (node, delta) {
	                    try {
	                        sp_telemetry_1._EngagementLogger.logEvent('h1.Paste');
	                        return delta.compose(new quillModule.imports.delta().retain(delta.length(), { header: 2 }));
	                    }
	                    catch (e) {
	                        return delta;
	                    }
	                });
	                _this._addMatcher(quill, 'p[class*="MsoQuote"]', 'blockquote', quillModule);
	                _this._addMatcher(quill, 'a', 'link', quillModule);
	                _this._addMatcher(quill, 'table', 'Table', quillModule);
	                _this._addMatcher(quill, 'img', 'Image', quillModule);
	                quill.clipboard.addMatcher('p[class*="MsoList"]', function (node, delta) {
	                    var qos = QuillEditor._createQosScope('PasteMsoList');
	                    try {
	                        var style = node.getAttribute('style');
	                        var x = 1;
	                        var maxLevel = 10; 
	                        if (style && style.indexOf('level') !== -1) {
	                            while (style.indexOf('level' + x) === -1 && x <= maxLevel) {
	                                ++x;
	                            }
	                        }
	                        else {
	                            qos.writeExpectedFailure('NonLevelListFormat',  undefined, { 'style': style });
	                        }
	                        if (node.firstChild.nodeType === Node.COMMENT_NODE) {
	                            node.removeChild(node.firstChild);
	                        }
	                        var type = 'ordered';
	                        var firstChild = node.firstChild;
	                        if (/mso-list\s*:\s*Ignore/i.test(style) ||
	                            firstChild.nodeType !== Node.TEXT_NODE &&
	                                !/^(:?\s|&nbsp;)+$/.test(firstChild.textContent) &&
	                                firstChild.nextSibling.nodeType !== Node.TEXT_NODE) {
	                            type = 'bullet';
	                        }
	                        sp_telemetry_1._EngagementLogger.logEvent(type + 'ListItem.Paste');
	                        var attr = { list: type };
	                        if (x > 1) {
	                            attr.indent = x - 1;
	                        }
	                        var textContent = node.textContent;
	                        var deltaLength = delta.length();
	                        var length_1 = deltaLength - textContent.length;
	                        var res = textContent.match(/^\s*\S+\s*/);
	                        if (res && res[0]) {
	                            length_1 += res[0].length;
	                        }
	                        var tempDelta = delta.compose(new quillModule.imports.delta().delete(length_1 - 1));
	                        delta = tempDelta.compose(new quillModule.imports.delta().retain(tempDelta.length(), attr));
	                        qos.writeSuccess();
	                    }
	                    catch (e) {
	                        QuillEditor._handleMonitoredException(qos, e);
	                    }
	                    return delta;
	                });
	            }
	        });
	    };
	    return QuillEditor;
	}());
	QuillEditor.moduleLoader = new QuillLoader_1.default();
	__decorate([
	    office_ui_fabric_react_1.autobind
	], QuillEditor.prototype, "focus", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], QuillEditor.prototype, "format", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], QuillEditor.prototype, "getSelection", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], QuillEditor.prototype, "_findWrappingElementByTagName", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], QuillEditor.prototype, "_handleSelectionChangeConvert", null);
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = QuillEditor;


/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var sp_telemetry_1 = __webpack_require__(7);
	var QuillLoader = (function () {
	    function QuillLoader() {
	    }
	    QuillLoader.prototype.loadModule = function () {
	        if (!QuillLoader._quillPromise) {
	            QuillLoader._quillPromise = new Promise(function (complete) {
	                __webpack_require__.e/* nsure */(2, function (require) {
	                    var quill = __webpack_require__(129);
	                    QuillLoader._quillModule = quill;
	                    complete(quill);
	                });
	            });
	            QuillLoader._quillPromise.catch(function (error) {
	                sp_telemetry_1._TraceLogger.logError(QuillLoader.logSource, error);
	            });
	        }
	        return QuillLoader._quillPromise;
	    };
	    return QuillLoader;
	}());
	QuillLoader.logSource = sp_telemetry_1._LogSource.create('SPRteQuillLoader');
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = QuillLoader;


/***/ },
/* 129 */,
/* 130 */,
/* 131 */,
/* 132 */,
/* 133 */,
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(135);


/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	var content = __webpack_require__(136);
	var loader = __webpack_require__(124);
	
	if(typeof content === "string") content = [[module.id, content]];
	
	// add the styles to the DOM
	for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
	
	if(content.locals) module.exports = content.locals;

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(123)();
	// imports
	
	
	// module
	exports.push([module.id, "/*!\n * Quill Editor v1.1.0\n * https://quilljs.com/\n * Copyright (c) 2014, Jason Chen\n * Copyright (c) 2013, salesforce.com\n */.ql-container{box-sizing:border-box;font-family:Helvetica,Arial,sans-serif;font-size:13px;height:100%;margin:0;position:relative}.ql-container.ql-disabled .ql-tooltip{visibility:hidden}.ql-clipboard{left:-100000px;height:1px;overflow-y:hidden;position:absolute;top:50%}.ql-clipboard p{margin:0;padding:0}.ql-editor{box-sizing:border-box;cursor:text;line-height:1.42;height:100%;outline:0;overflow-y:auto;padding:12px 15px;tab-size:4;-moz-tab-size:4;text-align:left;white-space:pre-wrap;word-wrap:break-word}.ql-editor blockquote,.ql-editor h1,.ql-editor h2,.ql-editor h3,.ql-editor h4,.ql-editor h5,.ql-editor h6,.ql-editor ol,.ql-editor p,.ql-editor pre,.ql-editor ul{margin:0;padding:0;counter-reset:list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9}.ql-editor ol,.ql-editor ul{padding-left:1.5em}.ql-editor ol>li,.ql-editor ul>li{list-style-type:none}.ql-editor ul>li::before{content:'\\25CF'}.ql-editor li::before{display:inline-block;margin-right:.3em;text-align:right;white-space:nowrap;width:1.2em}.ql-editor li:not(.ql-direction-rtl)::before{margin-left:-1.5em}.ql-editor ol li,.ql-editor ul li{padding-left:1.5em}.ql-editor ol li{counter-reset:list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;counter-increment:list-num}.ql-editor ol li:before{content:counter(list-num,decimal) '. '}.ql-editor ol li.ql-indent-1{counter-increment:list-1}.ql-editor ol li.ql-indent-1:before{content:counter(list-1,lower-alpha) '. '}.ql-editor ol li.ql-indent-1{counter-reset:list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9}.ql-editor ol li.ql-indent-2{counter-increment:list-2}.ql-editor ol li.ql-indent-2:before{content:counter(list-2,lower-roman) '. '}.ql-editor ol li.ql-indent-2{counter-reset:list-3 list-4 list-5 list-6 list-7 list-8 list-9}.ql-editor ol li.ql-indent-3{counter-increment:list-3}.ql-editor ol li.ql-indent-3:before{content:counter(list-3,decimal) '. '}.ql-editor ol li.ql-indent-3{counter-reset:list-4 list-5 list-6 list-7 list-8 list-9}.ql-editor ol li.ql-indent-4{counter-increment:list-4}.ql-editor ol li.ql-indent-4:before{content:counter(list-4,lower-alpha) '. '}.ql-editor ol li.ql-indent-4{counter-reset:list-5 list-6 list-7 list-8 list-9}.ql-editor ol li.ql-indent-5{counter-increment:list-5}.ql-editor ol li.ql-indent-5:before{content:counter(list-5,lower-roman) '. '}.ql-editor ol li.ql-indent-5{counter-reset:list-6 list-7 list-8 list-9}.ql-editor ol li.ql-indent-6{counter-increment:list-6}.ql-editor ol li.ql-indent-6:before{content:counter(list-6,decimal) '. '}.ql-editor ol li.ql-indent-6{counter-reset:list-7 list-8 list-9}.ql-editor ol li.ql-indent-7{counter-increment:list-7}.ql-editor ol li.ql-indent-7:before{content:counter(list-7,lower-alpha) '. '}.ql-editor ol li.ql-indent-7{counter-reset:list-8 list-9}.ql-editor ol li.ql-indent-8{counter-increment:list-8}.ql-editor ol li.ql-indent-8:before{content:counter(list-8,lower-roman) '. '}.ql-editor ol li.ql-indent-8{counter-reset:list-9}.ql-editor ol li.ql-indent-9{counter-increment:list-9}.ql-editor ol li.ql-indent-9:before{content:counter(list-9,decimal) '. '}.ql-editor .ql-indent-1:not(.ql-direction-rtl){padding-left:3em}.ql-editor li.ql-indent-1:not(.ql-direction-rtl){padding-left:4.5em}.ql-editor .ql-indent-1.ql-direction-rtl.ql-align-right{padding-right:3em}.ql-editor li.ql-indent-1.ql-direction-rtl.ql-align-right{padding-right:4.5em}.ql-editor .ql-indent-2:not(.ql-direction-rtl){padding-left:6em}.ql-editor li.ql-indent-2:not(.ql-direction-rtl){padding-left:7.5em}.ql-editor .ql-indent-2.ql-direction-rtl.ql-align-right{padding-right:6em}.ql-editor li.ql-indent-2.ql-direction-rtl.ql-align-right{padding-right:7.5em}.ql-editor .ql-indent-3:not(.ql-direction-rtl){padding-left:9em}.ql-editor li.ql-indent-3:not(.ql-direction-rtl){padding-left:10.5em}.ql-editor .ql-indent-3.ql-direction-rtl.ql-align-right{padding-right:9em}.ql-editor li.ql-indent-3.ql-direction-rtl.ql-align-right{padding-right:10.5em}.ql-editor .ql-indent-4:not(.ql-direction-rtl){padding-left:12em}.ql-editor li.ql-indent-4:not(.ql-direction-rtl){padding-left:13.5em}.ql-editor .ql-indent-4.ql-direction-rtl.ql-align-right{padding-right:12em}.ql-editor li.ql-indent-4.ql-direction-rtl.ql-align-right{padding-right:13.5em}.ql-editor .ql-indent-5:not(.ql-direction-rtl){padding-left:15em}.ql-editor li.ql-indent-5:not(.ql-direction-rtl){padding-left:16.5em}.ql-editor .ql-indent-5.ql-direction-rtl.ql-align-right{padding-right:15em}.ql-editor li.ql-indent-5.ql-direction-rtl.ql-align-right{padding-right:16.5em}.ql-editor .ql-indent-6:not(.ql-direction-rtl){padding-left:18em}.ql-editor li.ql-indent-6:not(.ql-direction-rtl){padding-left:19.5em}.ql-editor .ql-indent-6.ql-direction-rtl.ql-align-right{padding-right:18em}.ql-editor li.ql-indent-6.ql-direction-rtl.ql-align-right{padding-right:19.5em}.ql-editor .ql-indent-7:not(.ql-direction-rtl){padding-left:21em}.ql-editor li.ql-indent-7:not(.ql-direction-rtl){padding-left:22.5em}.ql-editor .ql-indent-7.ql-direction-rtl.ql-align-right{padding-right:21em}.ql-editor li.ql-indent-7.ql-direction-rtl.ql-align-right{padding-right:22.5em}.ql-editor .ql-indent-8:not(.ql-direction-rtl){padding-left:24em}.ql-editor li.ql-indent-8:not(.ql-direction-rtl){padding-left:25.5em}.ql-editor .ql-indent-8.ql-direction-rtl.ql-align-right{padding-right:24em}.ql-editor li.ql-indent-8.ql-direction-rtl.ql-align-right{padding-right:25.5em}.ql-editor .ql-indent-9:not(.ql-direction-rtl){padding-left:27em}.ql-editor li.ql-indent-9:not(.ql-direction-rtl){padding-left:28.5em}.ql-editor .ql-indent-9.ql-direction-rtl.ql-align-right{padding-right:27em}.ql-editor li.ql-indent-9.ql-direction-rtl.ql-align-right{padding-right:28.5em}.ql-editor .ql-video{display:block;max-width:100%}.ql-editor .ql-video.ql-align-center{margin:0 auto}.ql-editor .ql-video.ql-align-right{margin:0 0 0 auto}.ql-editor .ql-bg-black{background-color:#000}.ql-editor .ql-bg-red{background-color:#e60000}.ql-editor .ql-bg-orange{background-color:#f90}.ql-editor .ql-bg-yellow{background-color:#ff0}.ql-editor .ql-bg-green{background-color:#008a00}.ql-editor .ql-bg-blue{background-color:#06c}.ql-editor .ql-bg-purple{background-color:#93f}.ql-editor .ql-color-white{color:#fff}.ql-editor .ql-color-red{color:#e60000}.ql-editor .ql-color-orange{color:#f90}.ql-editor .ql-color-yellow{color:#ff0}.ql-editor .ql-color-green{color:#008a00}.ql-editor .ql-color-blue{color:#06c}.ql-editor .ql-color-purple{color:#93f}.ql-editor .ql-font-serif{font-family:Georgia,Times New Roman,serif}.ql-editor .ql-font-monospace{font-family:Monaco,Courier New,monospace}.ql-editor .ql-size-small{font-size:.75em}.ql-editor .ql-size-large{font-size:1.5em}.ql-editor .ql-size-huge{font-size:2.5em}.ql-editor .ql-direction-rtl{direction:rtl;text-align:inherit}.ql-editor .ql-align-center{text-align:center}.ql-editor .ql-align-justify{text-align:justify}.ql-editor .ql-align-right{text-align:right}.ql-editor.ql-blank::before{color:rgba(0,0,0,.6);content:attr(data-placeholder);font-style:italic;pointer-events:none;position:absolute}.ql-editor{overflow:hidden}[dir=ltr] .ql-editor{text-align:left}[dir=rtl] .ql-editor{text-align:right}.ql-editor ol,.ql-editor ul{list-style-position:inside}[dir=ltr] .ql-editor ol,[dir=ltr] .ql-editor ul{padding-left:20px}[dir=rtl] .ql-editor ol,[dir=rtl] .ql-editor ul{padding-right:20px}[dir=ltr] .ql-editor li::before{margin-left:-19px}[dir=rtl] .ql-editor li::before{margin-right:-19px}[dir=ltr] .ql-editor li::before{margin-right:4px}[dir=rtl] .ql-editor li::before{margin-left:4px}[dir=ltr] .ql-editor li::before{text-align:right}[dir=rtl] .ql-editor li::before{text-align:left}[dir=ltr] .ql-editor ol li,[dir=ltr] .ql-editor ul li{padding-left:19px}[dir=rtl] .ql-editor ol li,[dir=rtl] .ql-editor ul li{padding-right:19px}[dir=ltr] .ql-editor .ql-indent-1{padding-left:40px}[dir=rtl] .ql-editor .ql-indent-1{padding-right:40px}[dir=ltr] .ql-editor li.ql-indent-1{padding-left:59px}[dir=rtl] .ql-editor li.ql-indent-1{padding-right:59px}[dir=ltr] .ql-editor .ql-indent-2{padding-left:80px}[dir=rtl] .ql-editor .ql-indent-2{padding-right:80px}[dir=ltr] .ql-editor li.ql-indent-2{padding-left:99px}[dir=rtl] .ql-editor li.ql-indent-2{padding-right:99px}[dir=ltr] .ql-editor .ql-indent-3{padding-left:120px}[dir=rtl] .ql-editor .ql-indent-3{padding-right:120px}[dir=ltr] .ql-editor li.ql-indent-3{padding-left:139px}[dir=rtl] .ql-editor li.ql-indent-3{padding-right:139px}[dir=ltr] .ql-editor .ql-indent-4{padding-left:160px}[dir=rtl] .ql-editor .ql-indent-4{padding-right:160px}[dir=ltr] .ql-editor li.ql-indent-4{padding-left:179px}[dir=rtl] .ql-editor li.ql-indent-4{padding-right:179px}[dir=ltr] .ql-editor .ql-indent-5{padding-left:200px}[dir=rtl] .ql-editor .ql-indent-5{padding-right:200px}[dir=ltr] .ql-editor li.ql-indent-5{padding-left:219px}[dir=rtl] .ql-editor li.ql-indent-5{padding-right:219px}[dir=ltr] .ql-editor .ql-indent-6{padding-left:240px}[dir=rtl] .ql-editor .ql-indent-6{padding-right:240px}[dir=ltr] .ql-editor li.ql-indent-6{padding-left:259px}[dir=rtl] .ql-editor li.ql-indent-6{padding-right:259px}[dir=ltr] .ql-editor .ql-indent-7{padding-left:280px}[dir=rtl] .ql-editor .ql-indent-7{padding-right:280px}[dir=ltr] .ql-editor li.ql-indent-7{padding-left:299px}[dir=rtl] .ql-editor li.ql-indent-7{padding-right:299px}[dir=ltr] .ql-editor .ql-indent-8{padding-left:320px}[dir=rtl] .ql-editor .ql-indent-8{padding-right:320px}[dir=ltr] .ql-editor li.ql-indent-8{padding-left:339px}[dir=rtl] .ql-editor li.ql-indent-8{padding-right:339px}[dir=ltr] .ql-editor .ql-align-right{text-align:right}[dir=rtl] .ql-editor .ql-align-right{text-align:left}", ""]);
	
	// exports


/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var strings =  false
	    ? require('../../../../../resx-strings/en-us.json')
	    : __webpack_require__(138);
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = (strings['_HZH0fzNkDqTJ/5fF9kAU6A'] || {});


/***/ },
/* 138 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_138__;

/***/ },
/* 139 */
/***/ function(module, exports) {

	"use strict";
	function StripOutNewLinesAndSpacesFromInnerHTML(innerHTML) {
	    return innerHTML.replace(/>\s+</g, '><');
	}
	exports.StripOutNewLinesAndSpacesFromInnerHTML = StripOutNewLinesAndSpacesFromInnerHTML;


/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var sp_telemetry_1 = __webpack_require__(7);
	var sp_core_library_1 = __webpack_require__(12);
	var sp_webpart_base_1 = __webpack_require__(141);
	var sp_lodash_subset_1 = __webpack_require__(142);
	var CanvasRenderPerformance_1 = __webpack_require__(143);
	var CreateEmptyZoneLayout_1 = __webpack_require__(144);
	var CanvasControlType_1 = __webpack_require__(29);
	var CanvasSectionPart_1 = __webpack_require__(145);
	var CanvasWebPartHost_1 = __webpack_require__(150);
	var CanvasLayout_1 = __webpack_require__(146);
	var CanvasStrings_resx_1 = __webpack_require__(148);
	var HTMLCleanupUtils_1 = __webpack_require__(139);
	var CanvasStore = (function () {
	    function CanvasStore(serviceScope, render, mode, serializedCanvas, handleCanvasChanged, scrollThreshold, onRenderComplete, shouldCenterAlign) {
	        var _this = this;
	        sp_core_library_1.Validate.isNotNullOrUndefined(serviceScope, 'serviceScope');
	        sp_core_library_1.Validate.isNotNullOrUndefined(render, 'render');
	        sp_core_library_1.Validate.isNotNullOrUndefined(mode, 'mode');
	        this._addReference = this._addReference.bind(this);
	        this._notifyChanged = this._notifyChanged.bind(this);
	        this.handleToolboxItemClick = this.handleToolboxItemClick.bind(this);
	        this.closeToolbox = this.closeToolbox.bind(this);
	        this.createQosScope = this.createQosScope.bind(this);
	        this.deleteControl = this.deleteControl.bind(this);
	        this.handleConfigureButtonClicked = this.handleConfigureButtonClicked.bind(this);
	        this.handleConfigureZoneButtonClicked = this.handleConfigureZoneButtonClicked.bind(this);
	        this.handleDeleteControlButtonClicked = this.handleDeleteControlButtonClicked.bind(this);
	        this.handleDeleteControlDialogConfirmation = this.handleDeleteControlDialogConfirmation.bind(this);
	        this.handleDeleteControlDialogDismiss = this.handleDeleteControlDialogDismiss.bind(this);
	        this.handleDeleteZoneButtonClicked = this.handleDeleteZoneButtonClicked.bind(this);
	        this.handleDeleteZoneDialogConfirmation = this.handleDeleteZoneDialogConfirmation.bind(this);
	        this.handleDeleteZoneDialogDismiss = this.handleDeleteZoneDialogDismiss.bind(this);
	        this.handleWindowBlur = this.handleWindowBlur.bind(this);
	        this.reclaimFocus = this.reclaimFocus.bind(this);
	        this.scrollIntoView = this.scrollIntoView.bind(this);
	        this.openToolbox = this.openToolbox.bind(this);
	        this._handleRenderComplete = onRenderComplete;
	        this._render = render;
	        this._controlComponentMap = new Map();
	        this._controlsProps = [];
	        this._displayMode = mode;
	        this._shouldCenterAlign = shouldCenterAlign;
	        this._handleCanvasChanged = handleCanvasChanged;
	        this._pollActiveElement = this._pollActiveElement.bind(this);
	        this._scrollThreshold = scrollThreshold || 0;
	        this._webPartManager = new sp_webpart_base_1.ClientSideWebPartManager(new CanvasWebPartHost_1.default(serviceScope, this.scrollIntoView.bind(this, 'full'), handleCanvasChanged, this.reclaimFocus, function (id) {
	            _this._selectedControlIdInternal = id;
	        }));
	        this._canvasRenderPerformance = new CanvasRenderPerformance_1.default(this._handleRenderComplete);
	        var defaultLayout = undefined;
	        if (CanvasStore.isLayoutSupported) {
	            this._canvasLayout = new CanvasLayout_1.default(this._webPartManager, this._render);
	            defaultLayout = CanvasLayout_1.default.undefinedControlPosition;
	        }
	        this._dialogProps = {
	            isOpen: false,
	            message: undefined,
	            onConfirmation: undefined,
	            onDismiss: undefined,
	            title: undefined
	        };
	        this._toolboxProps = {
	            isLoading: true,
	            isOpen: false,
	            onItemClick: this.handleToolboxItemClick.bind(this, CanvasStore.isLayoutSupported ? defaultLayout : 0),
	            row: undefined,
	            toolboxItems: [],
	            verticalPosition: undefined,
	            controlPosition: defaultLayout
	        };
	        this._fetchWebParts();
	    }
	    Object.defineProperty(CanvasStore, "_isCanvasJsonFlightEnabled", {
	        get: function () {
	            return sp_core_library_1._SPFlight.isEnabled(957 );
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasStore, "_isWebPartSerializationV1Enabled", {
	        get: function () {
	            return sp_core_library_1._SPFlight.isEnabled(974 );
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasStore, "isLayoutSupported", {
	        get: function () {
	            return sp_core_library_1._SPFlight.isEnabled(963 );
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasStore.prototype, "addReference", {
	        get: function () {
	            return this._addReference;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasStore.prototype, "a11yManager", {
	        get: function () {
	            return this._a11yManager;
	        },
	        set: function (elem) {
	            this._a11yManager = elem;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasStore.prototype, "canvasElement", {
	        get: function () {
	            return this._canvasElement;
	        },
	        set: function (elem) {
	            this._canvasElement = elem;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasStore.prototype, "confirmationDialogProps", {
	        get: function () {
	            return this._dialogProps;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasStore.prototype, "controlsProps", {
	        get: function () {
	            return this._canvasControls;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasStore.prototype, "canvasLayout", {
	        get: function () {
	            return this._canvasLayout;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasStore.prototype, "deletedRow", {
	        get: function () {
	            return this._deletedRow;
	        },
	        set: function (row) {
	            this._deletedRow = row;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasStore.prototype, "deletedControlLayout", {
	        get: function () {
	            return CanvasStore.isLayoutSupported ?
	                this._canvasLayout.controlsState.deletedControlLayout :
	                undefined;
	        },
	        set: function (layout) {
	            if (CanvasStore.isLayoutSupported) {
	                this._canvasLayout.controlsState.deletedControlLayout = layout;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasStore.prototype, "displayMode", {
	        get: function () {
	            return this._displayMode;
	        },
	        set: function (newMode) {
	            if (this._displayMode !== newMode) {
	                this._displayMode = newMode;
	                for (var _i = 0, _a = this._canvasControls; _i < _a.length; _i++) {
	                    var control = _a[_i];
	                    var controlComponent = this._getControlComponentById(control.id);
	                    if (controlComponent) {
	                        controlComponent.setDisplayMode(newMode);
	                    }
	                }
	                if (this._displayMode === sp_core_library_1.DisplayMode.Read) {
	                    this._selectedControlIdInternal = undefined;
	                    this.webPartManager.setPropertyPaneState(undefined, sp_webpart_base_1.PropertyPaneState.Close);
	                    this._toolboxProps.isOpen = false;
	                }
	                this._fetchWebParts();
	                this._render();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasStore.prototype, "shouldCenterAlign", {
	        get: function () {
	            return this._shouldCenterAlign;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasStore.prototype, "notifyChanged", {
	        get: function () {
	            return this._notifyChanged;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasStore.prototype, "scrollableParent", {
	        get: function () {
	            return this._scrollableParentElement;
	        },
	        set: function (elem) {
	            this._scrollableParentElement = elem;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasStore.prototype, "scrollThreshold", {
	        get: function () {
	            return this._scrollThreshold;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasStore.prototype, "hoveredControlId", {
	        get: function () {
	            return CanvasStore.isLayoutSupported ?
	                this._canvasLayout.controlsState.hoveredControlId :
	                this._hoveredControlId;
	        },
	        set: function (id) {
	            if (CanvasStore.isLayoutSupported) {
	                this._canvasLayout.controlsState.hoveredControlId = id;
	            }
	            else {
	                this._hoveredControlId = id;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasStore.prototype, "selectedControlId", {
	        get: function () {
	            return this._selectedControlIdInternal;
	        },
	        set: function (id) {
	            if (this._selectedControlIdInternal !== id) {
	                this._selectedControlIdInternal = id;
	                var controlComponent = this._getControlComponentById(id);
	                if (controlComponent && controlComponent.props.controlType !== CanvasControlType_1.default.WebPartZone) {
	                    this._webPartManager.setPropertyPaneState(undefined);
	                }
	                else {
	                    this._webPartManager.setPropertyPaneState(id);
	                }
	                this._render();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasStore.prototype, "canvasRenderPerformance", {
	        get: function () {
	            return this._canvasRenderPerformance;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasStore.prototype, "toolboxProps", {
	        get: function () {
	            return this._toolboxProps;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasStore.prototype, "webPartManager", {
	        get: function () {
	            return this._webPartManager;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CanvasStore.prototype.handleToolboxItemClick = function (position, itemProps) {
	        var qos = this.createQosScope('ToolboxItemClicked');
	        if (this._displayMode === sp_core_library_1.DisplayMode.Edit) {
	            this._selectedControlIdInternal = itemProps.id = sp_core_library_1.Guid.newGuid().toString();
	            this.addControlToCanvas(position, itemProps);
	            if (itemProps.controlType === CanvasControlType_1.default.WebPartZone) {
	                var webPartZoneProps = itemProps;
	                if (webPartZoneProps.webPartManifest) {
	                    var logEntry = new sp_telemetry_1._LogEntry('CanvasStore', 'AddWebPart', sp_telemetry_1._LogType.Event, {
	                        'manifestId': webPartZoneProps.webPartManifest.id
	                    });
	                    sp_telemetry_1._EngagementLogger.logEventWithLogEntry(logEntry);
	                }
	            }
	            else if (itemProps.controlType === CanvasControlType_1.default.RTE) {
	                sp_telemetry_1._EngagementLogger.logEvent('AddRTE.Click');
	            }
	            this._render();
	            this._notifyChanged();
	            qos.writeSuccess();
	        }
	        else {
	            qos.writeUnexpectedFailure('ReadMode');
	        }
	    };
	    CanvasStore.prototype.deleteControl = function (row, layout) {
	        this.deletedRow = row;
	        this.deletedControlLayout = layout;
	        if (CanvasStore.isLayoutSupported) {
	            this._canvasLayout.removeControl(this.deletedControlLayout);
	        }
	        else {
	            this._controlsProps.splice(row, 1);
	        }
	        if (this._canvasControls.length === 0) {
	            this._webPartManager.setPropertyPaneState(undefined, sp_webpart_base_1.PropertyPaneState.Close);
	        }
	        this._render();
	        this._notifyChanged();
	    };
	    CanvasStore.prototype.getControl = function (id) {
	        return this._getControlComponentById(id);
	    };
	    CanvasStore.prototype.openToolbox = function (position, verticalPosition, horizontalPosition) {
	        if (this._toolboxProps.isOpen) {
	            this.closeToolbox();
	        }
	        this._fillToolboxItems();
	        this._toolboxProps.isOpen = true;
	        this._toolboxProps.onItemClick = this.handleToolboxItemClick.bind(this, position);
	        this._toolboxProps.verticalPosition = verticalPosition;
	        this._toolboxProps.horizontalPosition = horizontalPosition;
	        if (CanvasStore.isLayoutSupported) {
	            var pos = position;
	            this._toolboxProps.controlPosition = pos;
	            this._toolboxProps.row = pos.zoneIndex - 1;
	        }
	        else {
	            this._toolboxProps.row = position;
	        }
	        document.addEventListener('click', this.closeToolbox);
	        this._render();
	    };
	    CanvasStore.prototype.closeToolbox = function () {
	        this._toolboxProps.isOpen = false;
	        this._toolboxProps.row = undefined;
	        if (CanvasStore.isLayoutSupported) {
	            this._toolboxProps.controlPosition = CanvasLayout_1.default.undefinedControlPosition;
	        }
	        document.removeEventListener('click', this.closeToolbox);
	        this._render();
	    };
	    CanvasStore.prototype.createQosScope = function (scope) {
	        return new sp_telemetry_1._QosMonitor("Canvas" + scope);
	    };
	    CanvasStore.prototype.handleConfigureButtonClicked = function (id) {
	        var isCurrentlySelected = this._selectedControlIdInternal === id;
	        var controlComponent = this._getControlComponentById(id);
	        if (controlComponent) {
	            controlComponent.handleConfigureButtonClicked(isCurrentlySelected);
	            this._selectedControlIdInternal = id;
	            this._render();
	        }
	    };
	    CanvasStore.prototype.handleConfigureZoneButtonClicked = function (id) {
	        this._webPartManager.setPropertyPaneState(id, sp_webpart_base_1.PropertyPaneState.Open);
	    };
	    CanvasStore.prototype.handleDeleteControlButtonClicked = function (row, layout) {
	        this._rowToBeDeleted = row;
	        this._positionCandidateForDeletion = layout;
	        var selectedControl = CanvasStore.isLayoutSupported ?
	            this._canvasLayout.fetchControl(this._positionCandidateForDeletion) :
	            this._controlsProps[this._rowToBeDeleted];
	        this._selectedControlIdInternal = selectedControl.id;
	        this._webPartManager.setPropertyPaneState(selectedControl.controlType === CanvasControlType_1.default.WebPartZone ? this._selectedControlIdInternal : undefined);
	        this._openDialogMessage(CanvasStrings_resx_1.default.DeleteConfirmationDialogTitle, CanvasStrings_resx_1.default.DeleteConfirmationDialogMessage, this.handleDeleteControlDialogConfirmation, this.handleDeleteControlDialogDismiss, true);
	    };
	    CanvasStore.prototype.handleDeleteControlDialogConfirmation = function () {
	        var qos = this.createQosScope('DeleteWebPart');
	        var selectedControl;
	        try {
	            selectedControl = CanvasStore.isLayoutSupported ?
	                this._canvasLayout.fetchControl(this._positionCandidateForDeletion) :
	                this._controlsProps[this._rowToBeDeleted];
	            if (selectedControl.controlType === CanvasControlType_1.default.WebPartZone) {
	                var controlComponent = this._getControlComponentById(selectedControl.id);
	                controlComponent.handleDeleteButtonClicked();
	            }
	            this._closeDialogMessage();
	            this.deleteControl(this._rowToBeDeleted, this._positionCandidateForDeletion);
	            qos.writeSuccess();
	        }
	        catch (err) {
	            this._handleMonitoredException(qos, err, selectedControl);
	        }
	    };
	    CanvasStore.prototype.handleDeleteControlDialogDismiss = function () {
	        this._rowToBeDeleted = undefined;
	        this._positionCandidateForDeletion = CanvasLayout_1.default.undefinedControlPosition;
	        this._closeDialogMessage(true);
	    };
	    CanvasStore.prototype.handleDeleteZoneButtonClicked = function (row, layout) {
	        this._selectedControlIdInternal = undefined;
	        this._positionCandidateForDeletion = layout;
	        this._openDialogMessage(CanvasStrings_resx_1.default.DeleteConfirmationDialogTitle, CanvasStrings_resx_1.default.DeleteZoneConfirmationDialogMessage, this.handleDeleteZoneDialogConfirmation, this.handleDeleteZoneDialogDismiss, true);
	    };
	    CanvasStore.prototype.handleDeleteZoneDialogConfirmation = function () {
	        this._webPartManager.dispose(this._positionCandidateForDeletion.zoneIndex.toString());
	        this._canvasLayout.removeZone(this._positionCandidateForDeletion.zoneIndex);
	        this._closeDialogMessage(true);
	    };
	    CanvasStore.prototype.handleDeleteZoneDialogDismiss = function () {
	        this._positionCandidateForDeletion = CanvasLayout_1.default.undefinedControlPosition;
	        this._closeDialogMessage(true);
	    };
	    CanvasStore.prototype.handleWindowBlur = function (e) {
	        if (this._hoveredControlId && document.activeElement && document.activeElement.tagName === 'IFRAME') {
	            this.selectedControlId = this.hoveredControlId;
	            this._oldActiveElement = document.activeElement;
	            window.clearInterval(this._pollId);
	            this._pollId = window.setInterval(this._pollActiveElement, 250);
	        }
	    };
	    CanvasStore.prototype.deserialize = function (serializedCanvas) {
	        var qos = this.createQosScope('Deserialize');
	        var controlProps;
	        try {
	            this._controlsProps = [];
	            this._controlComponentMap = new Map();
	            if (CanvasStore.isLayoutSupported) {
	                this._canvasLayout.dispose();
	            }
	            if (serializedCanvas) {
	                var controlAttribute = 'data-sp-canvascontrol';
	                var tryJson = true;
	                if (serializedCanvas.indexOf(controlAttribute) !== -1) {
	                    var wrapper = document.createElement('div');
	                    wrapper.innerHTML = this._replaceImageTagsInHtmlString(serializedCanvas);
	                    if (!sp_core_library_1._SPKillSwitch.isActivated(sp_core_library_1.Guid.tryParse('6416768b-6758-49a1-9457-46b0265b8e55'), '1/23/2017', 'HTMLCleanup')) {
	                        wrapper.innerHTML = HTMLCleanupUtils_1.StripOutNewLinesAndSpacesFromInnerHTML(wrapper.innerHTML);
	                    }
	                    var rows = wrapper.querySelectorAll("[" + controlAttribute + "]");
	                    var rowLength = rows.length;
	                    if (rowLength > 0) {
	                        tryJson = false;
	                        for (var i = 0; i < rowLength; ++i) {
	                            var row = rows[i];
	                            var isLegacyHtml = !row.hasAttribute('data-sp-canvasdataversion');
	                            if (isLegacyHtml) {
	                                controlProps = this._deserializeLegacyCanvasControlHtml(row);
	                            }
	                            else {
	                                controlProps = this._deserializeCanvasControlHtml(row);
	                            }
	                            if (controlProps) {
	                                this.addControlToCanvas(CanvasStore.isLayoutSupported ? CreateEmptyZoneLayout_1.CreateEmptyZoneLayout(i + 1) : i, controlProps);
	                                if (controlProps.controlType === CanvasControlType_1.default.WebPartZone) {
	                                    this._canvasRenderPerformance.addWebpart(controlProps.id);
	                                }
	                            }
	                        }
	                        this._canvasRenderPerformance.doneAddingWebparts();
	                    }
	                }
	                if (tryJson && CanvasStore._isCanvasJsonFlightEnabled) {
	                    this._processCanvasContent(serializedCanvas);
	                }
	            }
	            qos.writeSuccess();
	        }
	        catch (err) {
	            this._handleMonitoredException(qos, err, controlProps);
	        }
	    };
	    CanvasStore.prototype.reclaimFocus = function () {
	        var controlComponent = this._getControlComponentById(this._selectedControlIdInternal);
	        if (controlComponent) {
	            controlComponent.focus();
	        }
	    };
	    CanvasStore.prototype.scrollIntoView = function (type, element, duration, margin) {
	        if (margin === void 0) { margin = 0; }
	        if (!this.scrollableParent || !element) {
	            return;
	        }
	        var viewportHeight = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
	        var frameBottom = Math.min(viewportHeight, this.scrollableParent.getBoundingClientRect().bottom);
	        var elementClientRect = element.getBoundingClientRect();
	        if ((type === 'partial' ? elementClientRect.bottom : elementClientRect.top) > frameBottom) {
	            this._scrollElementIntoView(frameBottom, element, duration, margin);
	        }
	    };
	    CanvasStore.prototype.serialize = function () {
	        return CanvasStore._isCanvasJsonFlightEnabled ?
	            this._serializeAsJson() :
	            this._serializeAsHtml();
	    };
	    CanvasStore.prototype.tryGeneratePreviewImageUrl = function () {
	        var qos = this.createQosScope('GeneratePreviewImageUrl');
	        try {
	            var webpartIds = [];
	            for (var _i = 0, _a = this._canvasControls; _i < _a.length; _i++) {
	                var control = _a[_i];
	                if (control.controlType === CanvasControlType_1.default.WebPartZone) {
	                    webpartIds.push(control.id);
	                }
	            }
	            var previewUrl = this.webPartManager.tryGeneratePreviewImageUrl(webpartIds);
	            qos.writeSuccess();
	            return previewUrl;
	        }
	        catch (err) {
	            this._handleMonitoredException(qos, err);
	        }
	    };
	    CanvasStore.prototype.addControlToCanvas = function (position, control, shouldRender) {
	        if (!control.id) {
	            control.id = sp_core_library_1.Guid.newGuid().toString();
	        }
	        if (control.controlType === CanvasControlType_1.default.WebPartZone &&
	            control.addedFromPersistedData) {
	            var webPartProps = control;
	            webPartProps.webPartManifest = this._getManifestMap().get(webPartProps.webPartId);
	        }
	        if (CanvasStore.isLayoutSupported) {
	            control.position = control.position || position;
	            this._canvasLayout.addControl(control);
	        }
	        else {
	            this.controlsProps.splice(position, 0, control);
	        }
	        if (shouldRender) {
	            this._render();
	            this._notifyChanged();
	        }
	    };
	    CanvasStore.prototype.getToolBoxItem = function (id) {
	        var toolboxItems = this._toolboxProps.toolboxItems;
	        var currentIndex = sp_lodash_subset_1.findIndex(toolboxItems, function (toolboxItem) {
	            return id === toolboxItem.itemProps.webPartId;
	        });
	        if (currentIndex !== -1) {
	            return sp_lodash_subset_1.clone(toolboxItems[currentIndex].itemProps);
	        }
	        return undefined;
	    };
	    CanvasStore.prototype._deserializeLegacyCanvasControlHtml = function (row) {
	        var controlProps = JSON.parse(decodeURI(row.getAttribute('data-sp-controldata')));
	        if (controlProps) {
	            controlProps.displayMode = this._displayMode;
	            controlProps.addedFromPersistedData = true;
	            if (controlProps.controlType === CanvasControlType_1.default.RTE) {
	                controlProps.innerHTML = row.innerHTML;
	            }
	            var webPartData = controlProps.webPartData;
	            if (webPartData) {
	                var htmlString = webPartData.htmlProperties; 
	                var htmlPropsDiv = row.querySelector('[data-sp-htmlproperties]');
	                if (htmlPropsDiv) {
	                    htmlString = htmlPropsDiv.innerHTML;
	                }
	                if (htmlString) {
	                    htmlString = this._replaceImageTagsInHtmlString(htmlString);
	                }
	                webPartData.serverProcessedContent = sp_webpart_base_1.WebPartDataConverter.convertServerProcessedHtmlToData(htmlString);
	            }
	        }
	        return controlProps || undefined;
	    };
	    CanvasStore.prototype._deserializeCanvasControlHtml = function (row) {
	        var controlProps = JSON.parse(row.getAttribute('data-sp-controldata'));
	        controlProps.displayMode = this._displayMode;
	        controlProps.addedFromPersistedData = true;
	        var webPartDiv = row.querySelector('[data-sp-webpart]');
	        if (webPartDiv) {
	            var webPartDivWrapper = document.createElement('div');
	            webPartDivWrapper.appendChild(webPartDiv);
	            controlProps.webPartData =
	                sp_webpart_base_1.WebPartDataConverter.convertHtmlToWebPartData(webPartDivWrapper.innerHTML);
	        }
	        else {
	            var rteDiv = row.querySelector('[data-sp-rte]');
	            if (rteDiv) {
	                controlProps.innerHTML = rteDiv.innerHTML;
	            }
	        }
	        return controlProps;
	    };
	    CanvasStore.prototype._initializeHtmlDivs = function () {
	        this._canvasControlDiv = document.createElement('div');
	        this._canvasControlLegacyDiv = document.createElement('div');
	        this._componentIdDiv = document.createElement('div');
	        this._htmlPropsDiv = document.createElement('div');
	        this._rteDiv = document.createElement('div');
	        this._canvasControlDiv.setAttribute('data-sp-canvascontrol', '');
	        this._canvasControlDiv.setAttribute('data-sp-canvasdataversion', '1.0');
	        this._canvasControlLegacyDiv.setAttribute('data-sp-canvascontrol', '');
	        this._componentIdDiv.setAttribute('data-sp-componentid', '');
	        this._htmlPropsDiv.setAttribute('data-sp-htmlproperties', '');
	        this._rteDiv.setAttribute('data-sp-rte', '');
	    };
	    CanvasStore.prototype._replaceImageTagsInHtmlString = function (htmlString) {
	        return htmlString.replace(/<img((\s+[^\t\n\f \/>"'=]+(\s*=\s*(?:".*?"|'.*?'|[\^'">\s]+))?)+\s*|\s*)\/?>/gi, '<spimg$1></spimg>');
	    };
	    CanvasStore.prototype._serializeControlAsLegacyHtml = function (controlType, controlData) {
	        if (!this._canvasControlLegacyDiv) {
	            this._initializeHtmlDivs();
	        }
	        var row = this._canvasControlLegacyDiv.cloneNode();
	        var componentIdElement = this._componentIdDiv.cloneNode();
	        var htmlPropertiesElement = this._htmlPropsDiv.cloneNode();
	        if (controlType === CanvasControlType_1.default.RTE) {
	            row.innerHTML = controlData.innerHTML;
	        }
	        else if (controlType === CanvasControlType_1.default.WebPartZone) {
	            var componentId = componentIdElement.cloneNode();
	            componentId.textContent = controlData.webPartId;
	            row.appendChild(componentId);
	            var webPartData = controlData.webPartData;
	            if (webPartData) {
	                var htmlProperties = htmlPropertiesElement.cloneNode();
	                htmlProperties.innerHTML =
	                    sp_webpart_base_1.WebPartDataConverter.convertServerProcessedDataToHtml(webPartData.serverProcessedContent);
	                row.appendChild(htmlProperties);
	            }
	        }
	        row.setAttribute('data-sp-controldata', encodeURI(JSON.stringify(controlData)));
	        return row;
	    };
	    CanvasStore.prototype._serializeControlAsHtml = function (controlType, controlData) {
	        if (!this._canvasControlDiv) {
	            this._initializeHtmlDivs();
	        }
	        var row = this._canvasControlDiv.cloneNode();
	        if (controlType === CanvasControlType_1.default.RTE) {
	            var rteHtmlDiv = this._rteDiv.cloneNode();
	            rteHtmlDiv.innerHTML = controlData.innerHTML;
	            controlData.innerHTML = undefined;
	            row.appendChild(rteHtmlDiv);
	        }
	        else if (controlType === CanvasControlType_1.default.WebPartZone) {
	            var wpdata = controlData.webPartData;
	            row.innerHTML = sp_webpart_base_1.WebPartDataConverter.convertWebPartDataToHtml(wpdata);
	            controlData.webPartData = undefined;
	        }
	        controlData.displayMode = undefined;
	        row.setAttribute('data-sp-controldata', JSON.stringify(controlData));
	        return row;
	    };
	    CanvasStore.prototype._getControlComponentById = function (id) {
	        return CanvasStore.isLayoutSupported ?
	            this._canvasLayout.fetchControlComponentById(id) :
	            this._controlComponentMap.get(id);
	    };
	    CanvasStore.prototype._setControlComponentById = function (id, component) {
	        if (CanvasStore.isLayoutSupported) {
	            this._canvasLayout.addControlComponent(id, component);
	        }
	        else {
	            this._controlComponentMap.set(id, component);
	        }
	    };
	    Object.defineProperty(CanvasStore.prototype, "_canvasControls", {
	        get: function () {
	            return CanvasStore.isLayoutSupported ?
	                this._canvasLayout.fetchAllControls() :
	                this._controlsProps;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasStore.prototype, "_selectedControlIdInternal", {
	        get: function () {
	            return CanvasStore.isLayoutSupported ?
	                this._canvasLayout.controlsState.selectedControlId :
	                this._selectedControlId;
	        },
	        set: function (id) {
	            if (CanvasStore.isLayoutSupported) {
	                this._canvasLayout.controlsState.selectedControlId = id;
	            }
	            else {
	                this._selectedControlId = id;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasStore.prototype, "_positionCandidateForDeletion", {
	        get: function () {
	            return CanvasStore.isLayoutSupported ?
	                this._canvasLayout.controlsState.deleteCandidateControlLayout :
	                undefined;
	        },
	        set: function (layout) {
	            if (CanvasStore.isLayoutSupported) {
	                this._canvasLayout.controlsState.deleteCandidateControlLayout = layout;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CanvasStore.prototype._serializeAsHtml = function () {
	        var qos = this.createQosScope('Serialize');
	        var controlData;
	        try {
	            var body = document.createElement('div');
	            for (var _i = 0, _a = this._canvasControls; _i < _a.length; _i++) {
	                var control = _a[_i];
	                if (control.id === CanvasSectionPart_1.default.emptySectionId) {
	                    control.id = undefined;
	                    controlData = control;
	                }
	                else {
	                    var controlComponent = this._getControlComponentById(control.id);
	                    controlData = controlComponent.serialize();
	                    controlData.webPartManifest = undefined;
	                    if (!CanvasStore.isLayoutSupported &&
	                        controlData.position) {
	                        controlData.position = undefined;
	                    }
	                }
	                var row = CanvasStore._isWebPartSerializationV1Enabled ?
	                    this._serializeControlAsHtml(control.controlType, controlData) :
	                    this._serializeControlAsLegacyHtml(control.controlType, controlData);
	                body.appendChild(row);
	            }
	            var wrapper = document.createElement('div');
	            wrapper.appendChild(body);
	            qos.writeSuccess();
	            return wrapper.innerHTML;
	        }
	        catch (err) {
	            this._handleMonitoredException(qos, err, controlData);
	            throw err;
	        }
	    };
	    CanvasStore.prototype._serializeAsJson = function () {
	        var qos = this.createQosScope('SerializeAsJson');
	        var controlDataCollection = [];
	        var controlData;
	        try {
	            for (var _i = 0, _a = this._canvasControls; _i < _a.length; _i++) {
	                var control = _a[_i];
	                if (control.id === CanvasSectionPart_1.default.emptySectionId) {
	                    control.id = undefined;
	                    controlData = control;
	                }
	                else {
	                    var controlComponent = this._getControlComponentById(control.id);
	                    controlData = controlComponent.serialize();
	                    controlData.webPartManifest = undefined;
	                    if (!CanvasStore.isLayoutSupported &&
	                        controlData.position) {
	                        controlData.position = undefined;
	                    }
	                }
	                controlDataCollection.push(controlData);
	            }
	            qos.writeSuccess();
	        }
	        catch (err) {
	            this._handleMonitoredException(qos, err, controlData);
	            throw err;
	        }
	        return encodeURI(JSON.stringify(controlDataCollection));
	    };
	    CanvasStore.prototype._processCanvasContent = function (serializedCanvas) {
	        var _this = this;
	        var canvasControls = JSON.parse(serializedCanvas);
	        if (canvasControls) {
	            canvasControls.forEach(function (control, index) {
	                var controlProp = control;
	                if (controlProp) {
	                    controlProp.displayMode = _this.displayMode;
	                    controlProp.addedFromPersistedData = true;
	                    _this.addControlToCanvas(CanvasStore._isCanvasJsonFlightEnabled ? CreateEmptyZoneLayout_1.CreateEmptyZoneLayout(index) : index, controlProp);
	                }
	            });
	        }
	    };
	    CanvasStore.prototype._addReference = function (ref) {
	        if (ref) {
	            this._setControlComponentById(ref.props.id, ref);
	        }
	    };
	    CanvasStore.prototype._calculateEasing = function (time, start, diff, duration) {
	        time /= duration / 2;
	        if (time < 1) {
	            return diff / 2 * time * time + start;
	        }
	        else {
	            --time;
	            return -diff / 2 * (time * (time - 2) - 1) + start;
	        }
	    };
	    CanvasStore.prototype._fetchWebParts = function () {
	        var _this = this;
	        if (!this._fetchedWebParts && sp_core_library_1.DisplayMode.Edit === this._displayMode) {
	            this._webPartManager.fetchWebPartManifests().then(function () {
	                _this._fetchedWebParts = true;
	                _this._toolboxProps.errorMessage = undefined;
	                _this._fillToolboxItems();
	            }, function (error) {
	                _this._toolboxProps.errorMessage = CanvasStrings_resx_1.default.ToolboxErrorMessage;
	                _this._fillToolboxItems();
	            });
	        }
	    };
	    CanvasStore.prototype._fillToolboxItems = function () {
	        var _this = this;
	        var qos = this.createQosScope('LoadWebPartsInToolbox');
	        this._toolboxProps.toolboxItems = [];
	        try {
	            this._getManifestMap().forEach(function (manifest, cid) {
	                var i = 0;
	                for (var _i = 0, _a = manifest.preconfiguredEntries; _i < _a.length; _i++) {
	                    var entry = _a[_i];
	                    var itemProps = {
	                        controlType: CanvasControlType_1.default.WebPartZone,
	                        displayMode: sp_core_library_1.DisplayMode.Edit,
	                        id: undefined,
	                        webPartId: cid,
	                        webPartData: _this._extractWebPartData(manifest, entry),
	                        webPartManifest: manifest
	                    };
	                    var toolboxItem = {
	                        itemProps: itemProps,
	                        description: entry.description.default,
	                        displayName: entry.title.default,
	                        msIconName: entry.officeFabricIconFontName,
	                        key: manifest.id + "_" + i++
	                    };
	                    _this._toolboxProps.toolboxItems.push(toolboxItem);
	                }
	            });
	            this._toolboxProps.isLoading = false;
	            qos.writeSuccess();
	        }
	        catch (err) {
	            this._handleMonitoredException(qos, err);
	        }
	        if (this._toolboxProps.isOpen) {
	            this._render();
	        }
	    };
	    CanvasStore.prototype._extractWebPartData = function (manifest, entry) {
	        var webPartData = {
	            id: manifest.id,
	            instanceId: undefined,
	            title: entry.title.default,
	            description: entry.description.default,
	            dataVersion: entry.dataVersion,
	            properties: entry.properties
	        };
	        return webPartData;
	    };
	    CanvasStore.prototype._getManifestMap = function () {
	        var tempMap = new Map();
	        var manifests = this._webPartManager.getWebPartManifests();
	        for (var _i = 0, manifests_1 = manifests; _i < manifests_1.length; _i++) {
	            var manifest = manifests_1[_i];
	            tempMap.set(manifest.id, manifest);
	        }
	        return tempMap;
	    };
	    CanvasStore.prototype._pollActiveElement = function () {
	        var activeElement = document.activeElement;
	        if (activeElement.tagName !== 'IFRAME') {
	            window.clearInterval(this._pollId);
	        }
	        else if (this._oldActiveElement !== activeElement && this.hoveredControlId) {
	            this._oldActiveElement = activeElement;
	            this._selectedControlIdInternal = this.hoveredControlId;
	        }
	    };
	    CanvasStore.prototype._scroll = function (start, end, duration, time) {
	        var _this = this;
	        if (time === void 0) { time = 0; }
	        var diff = end - start;
	        var deltaTime = 20;
	        if (time < duration) {
	            requestAnimationFrame(function () {
	                time += deltaTime;
	                _this.scrollableParent.scrollTop = _this._calculateEasing(time, start, diff, duration);
	                _this._scroll(start, end, duration, time);
	            });
	        }
	    };
	    CanvasStore.prototype._scrollElementIntoView = function (frameBottom, element, duration, margin) {
	        var elementClientRect = element.getBoundingClientRect();
	        var scrollPosition = elementClientRect.bottom - this.canvasElement.getBoundingClientRect().top;
	        var frameTop = Math.max(0, this.scrollableParent.getBoundingClientRect().top);
	        var offset = frameTop - frameBottom + this._scrollThreshold + margin;
	        var newScrollTop = scrollPosition + offset + this._scrollThreshold;
	        this._scroll(this.scrollableParent.scrollTop, newScrollTop, duration);
	    };
	    CanvasStore.prototype._notifyChanged = function () {
	        if (this._handleCanvasChanged) {
	            this._handleCanvasChanged();
	        }
	    };
	    CanvasStore.prototype._handleMonitoredException = function (qos, err, props) {
	        var extraData; 
	        if (props && props.controlType === CanvasControlType_1.default.WebPartZone) {
	            extraData = { 'id': props.webPartId };
	        }
	        qos.writeUnexpectedFailure('Exception', err, extraData);
	    };
	    CanvasStore.prototype._closeDialogMessage = function (shouldRender) {
	        this._dialogProps.isOpen = false;
	        if (shouldRender) {
	            this._render();
	        }
	    };
	    CanvasStore.prototype._openDialogMessage = function (title, message, onConfirmation, onDismiss, shouldRender) {
	        this._dialogProps = {
	            message: message,
	            onConfirmation: onConfirmation,
	            onDismiss: onDismiss,
	            title: title,
	            isOpen: true
	        };
	        if (shouldRender) {
	            this._render();
	        }
	    };
	    return CanvasStore;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = CanvasStore;


/***/ },
/* 141 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_141__;

/***/ },
/* 142 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_142__;

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var sp_telemetry_1 = __webpack_require__(7);
	var CanvasRenderPerformance = (function () {
	    function CanvasRenderPerformance(handleRenderingDone) {
	        this._renderedWebparts = [];
	        this._webPartsRenderedStatus = new Map();
	        this._handleRenderingDone = handleRenderingDone;
	        this._allWebPartsAdded = false;
	        this._constructionTime = Date.now();
	    }
	    CanvasRenderPerformance.getPerformanceTag = function (alias, instanceId) {
	        return "WebPart." + alias + "." + instanceId;
	    };
	    CanvasRenderPerformance.prototype.addWebpart = function (webpartId) {
	        this._webPartsRenderedStatus.set(webpartId, false);
	    };
	    CanvasRenderPerformance.prototype.doneAddingWebparts = function () {
	        this._allWebPartsAdded = true;
	        if (this._haveAllWebpartsRendered()) {
	            this._onAllWebpartsRendered();
	        }
	    };
	    CanvasRenderPerformance.prototype.webPartRendered = function (context) {
	        this._renderedWebparts.push(context);
	        this._webPartsRenderedStatus.set(context.instanceId, true);
	        if (this._haveAllWebpartsRendered() && this._allWebPartsAdded) {
	            this._onAllWebpartsRendered();
	        }
	    };
	    CanvasRenderPerformance.prototype._onAllWebpartsRendered = function () {
	        var lastEndTime = 0;
	        var viewportHeight = window.innerHeight;
	        this._renderedWebparts.forEach(function (webpart) {
	            var topOffset = webpart.domElement && webpart.domElement.getBoundingClientRect().top;
	            if (topOffset < viewportHeight && topOffset > 0) {
	                var tag = CanvasRenderPerformance.getPerformanceTag(webpart.manifest && webpart.manifest.alias || 'Unknown', webpart.instanceId);
	                sp_telemetry_1._PerformanceLogger.addComponent(tag);
	                var compEndTime = sp_telemetry_1._PerformanceLogger.getComponentEndTime(tag);
	                if (lastEndTime < compEndTime) {
	                    lastEndTime = compEndTime;
	                }
	            }
	        });
	        if (lastEndTime === 0) {
	            lastEndTime = this._constructionTime;
	        }
	        if (this._handleRenderingDone) {
	            this._handleRenderingDone(lastEndTime);
	        }
	    };
	    CanvasRenderPerformance.prototype._haveAllWebpartsRendered = function () {
	        var renderComplete = true;
	        this._webPartsRenderedStatus.forEach(function (status) {
	            if (status === false) {
	                renderComplete = false;
	            }
	        });
	        return renderComplete;
	    };
	    return CanvasRenderPerformance;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = CanvasRenderPerformance;


/***/ },
/* 144 */
/***/ function(module, exports) {

	"use strict";
	function CreateEmptyZoneLayout(zoneIndex) {
	    return {
	        zoneIndex: zoneIndex,
	        sectionIndex: undefined,
	        controlIndex: undefined
	    };
	}
	exports.CreateEmptyZoneLayout = CreateEmptyZoneLayout;


/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var sp_core_library_1 = __webpack_require__(12);
	var CanvasLayout_1 = __webpack_require__(146);
	var CanvasControlType_1 = __webpack_require__(29);
	var CanvasSectionPart = (function () {
	    function CanvasSectionPart(sectionIdx, factor) {
	        this._index = sectionIdx;
	        this._factor = factor;
	        this._controlsMap = new Map();
	    }
	    Object.defineProperty(CanvasSectionPart.prototype, "emptySectionControl", {
	        get: function () {
	            return {
	                controlType: undefined,
	                displayMode: sp_core_library_1.DisplayMode.Edit,
	                id: CanvasSectionPart.emptySectionId,
	                position: {
	                    zoneIndex: undefined,
	                    sectionIndex: this._index,
	                    controlIndex: undefined,
	                    sectionFactor: this._factor
	                }
	            };
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasSectionPart.prototype, "factor", {
	        get: function () {
	            return this._factor;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasSectionPart.prototype, "index", {
	        get: function () {
	            return this._index;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasSectionPart.prototype, "controls", {
	        get: function () {
	            var _this = this;
	            var canvasControls = [];
	            this._controlsMap.forEach(function (control) {
	                control.position.sectionFactor = _this._factor;
	                canvasControls.push(control);
	            });
	            return canvasControls.sort(function (ctrl1, ctrl2) {
	                return ctrl1.position.controlIndex - ctrl2.position.controlIndex;
	            });
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CanvasSectionPart.prototype.addControl = function (canvasControl) {
	        if (canvasControl.controlType === CanvasControlType_1.default.WebPartZone ||
	            canvasControl.controlType === CanvasControlType_1.default.RTE) {
	            if (!canvasControl || !canvasControl.position) {
	                return undefined;
	            }
	            var curControlIndex = canvasControl.position.controlIndex;
	            if (curControlIndex === undefined) {
	                return undefined;
	            }
	            var sectionControl = this._controlsMap.get(curControlIndex);
	            if (!sectionControl) {
	                this._controlsMap.set(curControlIndex, canvasControl);
	            }
	            else {
	                var layoutControlItems = this.controls.map(function (control) {
	                    return {
	                        index: control.position.controlIndex
	                    };
	                });
	                canvasControl.position.controlIndex = CanvasLayout_1.default._generateNewLayoutIndex(layoutControlItems, curControlIndex);
	                if (canvasControl.position.controlIndex === undefined) {
	                    return undefined;
	                }
	                this._controlsMap.set(canvasControl.position.controlIndex, canvasControl);
	            }
	        }
	        return canvasControl.id;
	    };
	    CanvasSectionPart.prototype.removeControl = function (controlPosition) {
	        if (!controlPosition) {
	            return undefined;
	        }
	        var control = this._controlsMap.get(controlPosition.controlIndex);
	        if (!control) {
	            return undefined;
	        }
	        this._controlsMap.delete(control.position.controlIndex);
	        return control.id;
	    };
	    CanvasSectionPart.prototype.fetchControl = function (controlPosition) {
	        if (!controlPosition) {
	            return undefined;
	        }
	        return this._controlsMap.get(controlPosition.controlIndex);
	    };
	    CanvasSectionPart.prototype.fetchAllControls = function () {
	        return this.controls;
	    };
	    CanvasSectionPart.prototype.isEmpty = function () {
	        return this.fetchAllControls().length === 0;
	    };
	    CanvasSectionPart.prototype.dispose = function () {
	        this._controlsMap.clear();
	    };
	    CanvasSectionPart.prototype.changeFactor = function (newFactor) {
	        this.controls.forEach(function (control) {
	            control.position.sectionFactor = newFactor;
	        });
	        this._factor = newFactor;
	    };
	    return CanvasSectionPart;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = CanvasSectionPart;


/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var CanvasZonePropertyPaneControl_1 = __webpack_require__(147);
	var sp_core_library_1 = __webpack_require__(12);
	var CanvasZonePart_1 = __webpack_require__(149);
	var CanvasLayout = (function () {
	    function CanvasLayout(webPartManager, renderCallBack) {
	        this._webPartManager = webPartManager;
	        this._render = renderCallBack;
	        this._initialize();
	    }
	    CanvasLayout._generateNewLayoutIndex = function (sortedChildren, currentIdx) {
	        if (!sortedChildren) {
	            return undefined;
	        }
	        var sortedIndexes = sortedChildren.map(function (child) {
	            return child.index;
	        }).filter(function (item) {
	            return item < currentIdx;
	        });
	        var newIdx = currentIdx;
	        if (sortedIndexes.length > 0) {
	            newIdx += sortedIndexes[sortedIndexes.length - 1];
	        }
	        return newIdx / 2;
	    };
	    Object.defineProperty(CanvasLayout.prototype, "zones", {
	        get: function () {
	            var canvasZones = [];
	            this._zonePartMap.forEach(function (zone) {
	                canvasZones.push(zone);
	            });
	            return canvasZones.sort(function (zone1, zone2) {
	                return zone1.index - zone2.index;
	            });
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasLayout.prototype, "controlsState", {
	        get: function () {
	            return this._activeControlsState;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CanvasLayout.prototype.fetchControlComponentById = function (controlId) {
	        var componentValue = this._controlComponentMap.get(controlId);
	        return componentValue && componentValue.component;
	    };
	    CanvasLayout.prototype.fetchControlPositionById = function (controlId) {
	        if (!controlId) {
	            return CanvasLayout.undefinedControlPosition;
	        }
	        var componentValue = this._controlComponentMap.get(controlId);
	        if (componentValue) {
	            return componentValue.position;
	        }
	        return CanvasLayout.undefinedControlPosition;
	    };
	    CanvasLayout.prototype.fetchZone = function (index) {
	        return this._zonePartMap.get(index);
	    };
	    CanvasLayout.prototype.addControlComponent = function (controlId, controlComponent) {
	        var componentValue = this._controlComponentMap.get(controlId);
	        sp_core_library_1.Validate.isNotNullOrUndefined(componentValue, 'componentValue');
	        componentValue.component = controlComponent;
	        this._controlComponentMap.set(controlId, componentValue);
	    };
	    CanvasLayout.prototype.addControl = function (canvasControl) {
	        if (!canvasControl ||
	            !canvasControl.position ||
	            canvasControl.position.zoneIndex === undefined) {
	            return undefined;
	        }
	        var curZoneIndex = canvasControl.position.zoneIndex;
	        var controlId;
	        var zone = this._zonePartMap.get(curZoneIndex);
	        if (!zone) {
	            var newCanvasZone = new CanvasZonePart_1.default(curZoneIndex, this._controlComponentMap, this._webPartManager);
	            if (canvasControl.position.sectionIndex === undefined) {
	                canvasControl.position.sectionIndex = CanvasLayout.firstLayoutIndex;
	            }
	            controlId = newCanvasZone.addControl(canvasControl);
	            if (controlId) {
	                this._zonePartMap.set(curZoneIndex, newCanvasZone);
	            }
	            this._webPartManager.setPropertyPaneControl(newCanvasZone.index.toString(), new CanvasZonePropertyPaneControl_1.default(newCanvasZone, this._render));
	        }
	        else {
	            if (canvasControl.position.sectionIndex !== undefined) {
	                controlId = zone.addControl(canvasControl);
	            }
	            else {
	                canvasControl.position.zoneIndex = CanvasLayout._generateNewLayoutIndex(this.zones, curZoneIndex);
	                if (canvasControl.position.zoneIndex === undefined) {
	                    return undefined;
	                }
	                var newSecondaryZone = new CanvasZonePart_1.default(canvasControl.position.zoneIndex, this._controlComponentMap, this._webPartManager);
	                canvasControl.position.sectionIndex = CanvasLayout.firstLayoutIndex;
	                controlId = newSecondaryZone.addControl(canvasControl);
	                if (controlId) {
	                    this._zonePartMap.set(canvasControl.position.zoneIndex, newSecondaryZone);
	                }
	                this._webPartManager.setPropertyPaneControl(newSecondaryZone.index.toString(), new CanvasZonePropertyPaneControl_1.default(newSecondaryZone, this._render));
	            }
	        }
	        if (controlId) {
	            var componentValue = {
	                component: undefined,
	                position: canvasControl.position
	            };
	            this._controlComponentMap.set(controlId, componentValue);
	        }
	        return controlId;
	    };
	    CanvasLayout.prototype.removeControl = function (controlPosition) {
	        if (!controlPosition) {
	            return undefined;
	        }
	        var zone = this._zonePartMap.get(controlPosition.zoneIndex);
	        if (!zone) {
	            return undefined;
	        }
	        var controlId = zone.removeControl(controlPosition);
	        if (controlId) {
	            if (zone.isEmpty()) {
	                zone.dispose();
	                this._zonePartMap.delete(controlPosition.zoneIndex);
	            }
	            this._controlComponentMap.delete(controlId);
	        }
	        return controlId;
	    };
	    CanvasLayout.prototype.removeZone = function (index) {
	        var zone = this._zonePartMap.get(index);
	        if (zone) {
	            var controls = zone.fetchAllControls();
	            var numControls = controls.length;
	            for (var i = 0; i < numControls; ++i) {
	                this._controlComponentMap.delete(controls[i].id);
	            }
	            zone.dispose();
	            this._zonePartMap.delete(index);
	        }
	    };
	    CanvasLayout.prototype.fetchControl = function (controlPosition) {
	        if (!controlPosition) {
	            return undefined;
	        }
	        var zone = this._zonePartMap.get(controlPosition.zoneIndex);
	        if (!zone) {
	            return undefined;
	        }
	        return zone.fetchControl(controlPosition);
	    };
	    CanvasLayout.prototype.fetchAllControls = function () {
	        var canvasControls = [];
	        this.zones.forEach(function (zone) {
	            var controls = zone.fetchAllControls();
	            canvasControls = canvasControls.concat(controls);
	        });
	        return canvasControls;
	    };
	    CanvasLayout.prototype.isEmpty = function () {
	        return this.fetchAllControls().length === 0;
	    };
	    CanvasLayout.prototype.dispose = function () {
	        this._zonePartMap.clear();
	        this._controlComponentMap.clear();
	        this._resetActiveControlState();
	    };
	    CanvasLayout.prototype._initialize = function () {
	        this._zonePartMap = new Map();
	        this._controlComponentMap = new Map();
	        this._resetActiveControlState();
	    };
	    CanvasLayout.prototype._resetActiveControlState = function () {
	        this._activeControlsState = {
	            hoveredControlId: undefined,
	            selectedControlId: undefined,
	            deletedControlLayout: CanvasLayout.undefinedControlPosition,
	            deleteCandidateControlLayout: CanvasLayout.undefinedControlPosition
	        };
	    };
	    return CanvasLayout;
	}());
	CanvasLayout.firstLayoutIndex = 1;
	CanvasLayout.undefinedControlPosition = {
	    zoneIndex: undefined,
	    sectionIndex: undefined,
	    controlIndex: undefined
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = CanvasLayout;


/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var sp_webpart_base_1 = __webpack_require__(141);
	var CanvasControlType_1 = __webpack_require__(29);
	var CanvasStrings_resx_1 = __webpack_require__(148);
	var CanvasZonePropertyPaneControl = (function (_super) {
	    __extends(CanvasZonePropertyPaneControl, _super);
	    function CanvasZonePropertyPaneControl(zone, render) {
	        var _this = _super.call(this) || this;
	        _this._zone = zone;
	        _this._render = render;
	        return _this;
	    }
	    CanvasZonePropertyPaneControl.prototype._internalGetPropertyPaneData = function () {
	        return {
	            webPartId: this._zone.index.toString(),
	            title: CanvasStrings_resx_1.default.SectionPropertyPaneTitle,
	            configuration: {
	                pages: this._getProperyPanePages()
	            },
	            onPropertyPaneFieldChanged: undefined,
	            onConfigurationEvent: undefined,
	            onRendered: undefined,
	            properties: {}
	        };
	    };
	    CanvasZonePropertyPaneControl.prototype._internalDispose = function () {
	        this._zone.dispose();
	    };
	    CanvasZonePropertyPaneControl.prototype._internalOnPropertyPaneFieldChanged = function (propertyPath, newValue) {
	        this._zone.changeZone(newValue);
	        this._render();
	    };
	    CanvasZonePropertyPaneControl.prototype._getCurrentColumnSize = function () {
	        var sections = this._zone.sections;
	        var sectionsLength = sections.length;
	        var firstSectionFactor = sections[0].factor;
	        var columnSize;
	        if (sectionsLength === 1) {
	            columnSize = firstSectionFactor === 0 ? CanvasControlType_1.default.FullWidth : CanvasControlType_1.default.OneColumn;
	        }
	        else if (sectionsLength === 2) {
	            if (firstSectionFactor === 4) {
	                columnSize = CanvasControlType_1.default.OneThirdColumnLeft;
	            }
	            else if (firstSectionFactor === 6) {
	                columnSize = CanvasControlType_1.default.TwoColumns;
	            }
	            else if (firstSectionFactor === 8) {
	                columnSize = CanvasControlType_1.default.OneThirdColumnRight;
	            }
	        }
	        else if (sectionsLength === 3) {
	            columnSize = CanvasControlType_1.default.ThreeColumns;
	        }
	        return columnSize;
	    };
	    CanvasZonePropertyPaneControl.prototype._getProperyPanePages = function () {
	        var currentColumnSize = this._getCurrentColumnSize();
	        return [{
	                groups: [
	                    {
	                        groupName: CanvasStrings_resx_1.default.SectionPropertyPaneColumnGroupName,
	                        groupFields: [
	                            sp_webpart_base_1.PropertyPaneChoiceGroup('selectedLayout', {
	                                options: [
	                                    {
	                                        key: CanvasControlType_1.default.OneColumn,
	                                        checked: CanvasControlType_1.default.OneColumn === currentColumnSize,
	                                        text: CanvasStrings_resx_1.default.ToolboxOneColumnPart
	                                    },
	                                    {
	                                        key: CanvasControlType_1.default.TwoColumns,
	                                        checked: CanvasControlType_1.default.TwoColumns === currentColumnSize,
	                                        text: CanvasStrings_resx_1.default.ToolboxTwoColumnPart
	                                    },
	                                    {
	                                        key: CanvasControlType_1.default.OneThirdColumnLeft,
	                                        checked: CanvasControlType_1.default.OneThirdColumnLeft === currentColumnSize,
	                                        text: CanvasStrings_resx_1.default.ToolboxOneThirdLeftColumnPart
	                                    },
	                                    {
	                                        key: CanvasControlType_1.default.OneThirdColumnRight,
	                                        checked: CanvasControlType_1.default.OneThirdColumnRight === currentColumnSize,
	                                        text: CanvasStrings_resx_1.default.ToolboxOneThirdRightColumnPart
	                                    },
	                                    {
	                                        key: CanvasControlType_1.default.ThreeColumns,
	                                        checked: CanvasControlType_1.default.ThreeColumns === currentColumnSize,
	                                        text: CanvasStrings_resx_1.default.ToolboxThreeColumnPart
	                                    },
	                                    {
	                                        key: CanvasControlType_1.default.FullWidth,
	                                        checked: CanvasControlType_1.default.FullWidth === currentColumnSize,
	                                        text: CanvasStrings_resx_1.default.ToolboxFullWidthColumnPart
	                                    }
	                                ]
	                            })
	                        ]
	                    }
	                ]
	            }];
	    };
	    return CanvasZonePropertyPaneControl;
	}(sp_webpart_base_1.BasePropertyPaneControl));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = CanvasZonePropertyPaneControl;


/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var strings =  false
	    ? require('../../../../../resx-strings/en-us.json')
	    : __webpack_require__(138);
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = (strings['_oflHTFVm9vC1S7l66uvnQQ'] || {});


/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var CanvasControlType_1 = __webpack_require__(29);
	var CanvasLayout_1 = __webpack_require__(146);
	var CanvasSectionPart_1 = __webpack_require__(145);
	var CanvasZonePart = (function () {
	    function CanvasZonePart(zoneIdx, map, webPartManager) {
	        this._index = zoneIdx;
	        this._sectionsMap = new Map();
	        this._controlComponentMap = map;
	        this._webPartManager = webPartManager;
	    }
	    Object.defineProperty(CanvasZonePart.prototype, "index", {
	        get: function () {
	            return this._index;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasZonePart.prototype, "sections", {
	        get: function () {
	            var sections = [];
	            this._sectionsMap.forEach(function (section) {
	                sections.push(section);
	            });
	            return sections.sort(function (section1, section2) {
	                return section1.index - section2.index;
	            });
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CanvasZonePart.prototype.addControl = function (canvasControl) {
	        if (!canvasControl || !canvasControl.position) {
	            return undefined;
	        }
	        var curSectionIndex = canvasControl.position.sectionIndex;
	        if (curSectionIndex === undefined) {
	            return undefined;
	        }
	        var controlId;
	        var sectionsToAdd = 1;
	        var colDef = CanvasZonePart.columnDefinitionMap.get(canvasControl.controlType);
	        if (colDef) {
	            sectionsToAdd = colDef.sections;
	        }
	        for (var i = 0; i < sectionsToAdd; ++i, ++curSectionIndex) {
	            var section = this._sectionsMap.get(curSectionIndex);
	            if (!section) {
	                var factor = colDef && colDef.factor[i];
	                if (isNaN(factor)) {
	                    factor = canvasControl.position.sectionFactor;
	                }
	                var newSection = new CanvasSectionPart_1.default(curSectionIndex, factor);
	                if (canvasControl.position.controlIndex === undefined) {
	                    canvasControl.position.controlIndex = CanvasLayout_1.default.firstLayoutIndex;
	                }
	                controlId = newSection.addControl(canvasControl);
	                if (controlId) {
	                    this._sectionsMap.set(curSectionIndex, newSection);
	                }
	            }
	            else {
	                if (canvasControl.position.controlIndex !== undefined) {
	                    controlId = section.addControl(canvasControl);
	                }
	                else {
	                    canvasControl.position.sectionIndex = CanvasLayout_1.default._generateNewLayoutIndex(this.sections, curSectionIndex);
	                    if (canvasControl.position.sectionIndex === undefined) {
	                        return undefined;
	                    }
	                    var newSecondarySection = new CanvasSectionPart_1.default(canvasControl.position.sectionIndex);
	                    canvasControl.position.controlIndex = CanvasLayout_1.default.firstLayoutIndex;
	                    controlId = newSecondarySection.addControl(canvasControl);
	                    if (controlId) {
	                        this._sectionsMap.set(canvasControl.position.sectionIndex, newSecondarySection);
	                    }
	                }
	            }
	        }
	        return controlId;
	    };
	    CanvasZonePart.prototype.removeControl = function (controlPosition) {
	        if (!controlPosition) {
	            return undefined;
	        }
	        var section = this._sectionsMap.get(controlPosition.sectionIndex);
	        if (!section) {
	            return undefined;
	        }
	        var controlId = section.removeControl(controlPosition);
	        return controlId;
	    };
	    CanvasZonePart.prototype.fetchControl = function (controlPosition) {
	        if (!controlPosition) {
	            return undefined;
	        }
	        var section = this._sectionsMap.get(controlPosition.sectionIndex);
	        if (!section) {
	            return undefined;
	        }
	        return section.fetchControl(controlPosition);
	    };
	    CanvasZonePart.prototype.fetchAllControls = function (includeEmptySections) {
	        var _this = this;
	        if (includeEmptySections === void 0) { includeEmptySections = true; }
	        var canvasControls = [];
	        var sections = this.sections;
	        sections.forEach(function (section) {
	            var controls = section.fetchAllControls();
	            if (includeEmptySections && controls.length === 0) {
	                var emptySection = section.emptySectionControl;
	                emptySection.position.zoneIndex = _this._index;
	                controls.push(emptySection);
	            }
	            canvasControls = canvasControls.concat(controls);
	        });
	        return canvasControls;
	    };
	    CanvasZonePart.prototype.changeZone = function (zoneType) {
	        var colDef = CanvasZonePart.columnDefinitionMap.get(zoneType);
	        var sections = this.sections;
	        var sectionsLength = sections.length;
	        if (colDef.sections > sectionsLength) {
	            this._increaseSections(sections, colDef);
	        }
	        else if (colDef.sections < sectionsLength) {
	            this._reduceSections(sections, colDef);
	        }
	        else if (colDef.factor[0] !== sections[0].factor) {
	            sections.forEach(function (sectionPart, index) {
	                sectionPart.changeFactor(colDef.factor[index]);
	            });
	        }
	    };
	    CanvasZonePart.prototype.isEmpty = function () {
	        return this.fetchAllControls(false).length === 0;
	    };
	    CanvasZonePart.prototype.dispose = function () {
	        this._sectionsMap.clear();
	    };
	    CanvasZonePart.prototype._increaseSections = function (currentSections, columnDefinition) {
	        var currentSectionsLength = currentSections.length;
	        currentSections.forEach(function (sectionPart, index) {
	            sectionPart.changeFactor(columnDefinition.factor[index]);
	        });
	        var newSectionsLength = columnDefinition.sections;
	        var currentSectionIndex = currentSections[currentSectionsLength - 1].index + 1;
	        for (var i = currentSectionsLength; i < newSectionsLength; ++i) {
	            var newSection = new CanvasSectionPart_1.default(currentSectionIndex, columnDefinition.factor[i]);
	            this._sectionsMap.set(currentSectionIndex++, newSection);
	        }
	    };
	    CanvasZonePart.prototype._reduceSections = function (currentSections, columnDefinition) {
	        var _this = this;
	        var currentSectionsLength = currentSections.length;
	        var lastSection = currentSections[columnDefinition.sections - 1];
	        var lastSectionLastControl = lastSection.controls[lastSection.controls.length - 1];
	        var newSectionsLength = columnDefinition.sections;
	        var controlIndex = 1;
	        if (lastSectionLastControl) {
	            controlIndex = lastSectionLastControl.position.controlIndex;
	        }
	        for (var i = 0; i < newSectionsLength; ++i) {
	            currentSections[i].changeFactor(columnDefinition.factor[i]);
	        }
	        for (var i = currentSectionsLength - 1; i >= newSectionsLength; --i) {
	            currentSections[i].controls.forEach(function (control) {
	                var newControl = _this._controlComponentMap.get(control.id).component.serialize();
	                newControl.position.sectionFactor = lastSection.factor;
	                newControl.position.sectionIndex = lastSection.index;
	                newControl.position.controlIndex = ++controlIndex;
	                newControl.addedFromPersistedData = true;
	                _this._webPartManager.dispose(control.id);
	                lastSection.addControl(newControl);
	            });
	            currentSections[i].dispose();
	            this._sectionsMap.delete(currentSections[i].index);
	        }
	    };
	    return CanvasZonePart;
	}());
	CanvasZonePart.columnDefinitionMap = new Map([
	    [CanvasControlType_1.default.OneColumn, { sections: 1, factor: [12] }],
	    [CanvasControlType_1.default.FullWidth, { sections: 1, factor: [0] }],
	    [CanvasControlType_1.default.TwoColumns, { sections: 2, factor: [6, 6] }],
	    [CanvasControlType_1.default.ThreeColumns, { sections: 3, factor: [4, 4, 4] }],
	    [CanvasControlType_1.default.OneThirdColumnRight, { sections: 2, factor: [8, 4] }],
	    [CanvasControlType_1.default.OneThirdColumnLeft, { sections: 2, factor: [4, 8] }]
	]);
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = CanvasZonePart;


/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var sp_webpart_base_1 = __webpack_require__(141);
	var CanvasWebPartHost = (function () {
	    function CanvasWebPartHost(serviceScope, handleResize, handleCanvasChanged, reclaimFocus, setSelectedWebPartId) {
	        this._handleCanvasChanged = handleCanvasChanged;
	        this._handleResize = handleResize;
	        this._reclaimFocus = reclaimFocus;
	        this._serviceScope = serviceScope;
	        this._setSelectedWebPartId = setSelectedWebPartId;
	        this.webPartConfigurationEventCallback = this.webPartConfigurationEventCallback.bind(this);
	    }
	    Object.defineProperty(CanvasWebPartHost.prototype, "serviceScope", {
	        get: function () {
	            return this._serviceScope;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CanvasWebPartHost.prototype.setDirty = function (wpInstanceId) {
	        if (this._handleCanvasChanged) {
	            this._handleCanvasChanged();
	        }
	    };
	    CanvasWebPartHost.prototype.webPartConfigurationEventCallback = function (event, data) {
	        if (event === sp_webpart_base_1.WebPartConfigurationEvent.PropertyPaneOpened) {
	            this._handleResize(document.querySelector('.ControlZone--selected'), 500, 44);
	        }
	        else if (event === sp_webpart_base_1.WebPartConfigurationEvent.PropertyPaneClosed ||
	            event === sp_webpart_base_1.WebPartConfigurationEvent.PropertyPaneLostFocus) {
	            this._reclaimFocus();
	        }
	        else if (event === sp_webpart_base_1.WebPartConfigurationEvent.PropertyPaneWebPartsSwitched &&
	            this._setSelectedWebPartId &&
	            data) {
	            this._setSelectedWebPartId(data.instanceId);
	        }
	    };
	    return CanvasWebPartHost;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = CanvasWebPartHost;


/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var React = __webpack_require__(24);
	var ReactDom = __webpack_require__(25);
	var sp_telemetry_1 = __webpack_require__(7);
	var odsp_utilities_bundle_1 = __webpack_require__(33);
	var sp_core_library_1 = __webpack_require__(12);
	var SPRteFormattingBar_1 = __webpack_require__(152);
	var SPRteLinkDialog_1 = __webpack_require__(156);
	var CKTextEditor_1 = __webpack_require__(31);
	var ToolbarButton_1 = __webpack_require__(158);
	var ToolbarSubmenu_1 = __webpack_require__(163);
	var RteA11y_1 = __webpack_require__(157);
	var office_ui_fabric_react_1 = __webpack_require__(27);
	__webpack_require__(168);
	var RteStrings_resx_1 = __webpack_require__(137);
	var CLICK_ACTION = '.Click';
	var BUTTON_NAME = 'Button';
	exports.CREATE_EDITOR_MONITOR = 'CreateNewEditor';
	exports.CREATE_EDITOR_MONITOR_FAILURE = 'EditorFailedToLoad';
	var CREATE_EDITOR_MONITOR_EXPECTED = 'CanvasUnmounted';
	var BaseRte = (function (_super) {
	    __extends(BaseRte, _super);
	    function BaseRte(props, rteOptions) {
	        var _this = _super.call(this, props) || this;
	        _this._initState();
	        _this._options = _this.props.options || rteOptions;
	        _this._config = _this._options.config;
	        _this._restoreSelectionOnNextFocus = false;
	        _this._buttonStates = new Map();
	        _this._selectionInitiated = false;
	        _this._selectionShouldEnd = false;
	        _this._isRtl = document.documentElement.getAttribute('dir').toLowerCase() === 'rtl';
	        if (_this.state.displayMode === sp_core_library_1.DisplayMode.Edit && !_this._editor) {
	            _this._options.loader.loadModule();
	        }
	        return _this;
	    }
	    BaseRte.prototype._initState = function () {
	        this.state = {
	            displayMode: this.props.displayMode,
	            formattingBarPosition: undefined,
	            isFormattingBarHidden: true,
	            isLinkDialogOpen: false
	        };
	    };
	    BaseRte.prototype.render = function () {
	        var _this = this;
	        var formattingBar;
	        var html;
	        var className;
	        if (this.state.displayMode === sp_core_library_1.DisplayMode.Read) {
	            className = this._config.editorElementClassName;
	            html = this._previousHTML || this.props.innerHTML;
	        }
	        var isEditMode = this.state.displayMode === sp_core_library_1.DisplayMode.Edit;
	        if (isEditMode && !this.state.isFormattingBarHidden) {
	            formattingBar = React.createElement(SPRteFormattingBar_1.default, { buttons: this._formattingBarButtons, position: this.state.formattingBarPosition, onKeyDown: this._handleFormattingBarKeyDown, ref: this._resolveRef('_formattingbar') });
	        }
	        return (React.createElement("div", null,
	            this.state.isContextMenuVisible &&
	                React.createElement(office_ui_fabric_react_1.ContextualMenu, { shouldFocusOnMount: true, target: this.state.contextMenuTarget, onDismiss: this._onContextualMenuDismiss, directionalHint: this._isRtl ? office_ui_fabric_react_1.DirectionalHint.bottomRightEdge : office_ui_fabric_react_1.DirectionalHint.bottomLeftEdge, items: [
	                        {
	                            key: RteStrings_resx_1.default.AddRowAboveText,
	                            name: RteStrings_resx_1.default.AddRowAboveText,
	                            title: odsp_utilities_bundle_1.StringHelper.format(RteStrings_resx_1.default.AddRowAboveShortcutText, RteStrings_resx_1.default.AddRowAboveText),
	                            iconProps: {
	                                iconName: 'Up'
	                            },
	                            onClick: function () {
	                                _this._editor.formatTable('rowInsertBefore', _this.state.contextMenuTarget);
	                            }
	                        },
	                        {
	                            key: RteStrings_resx_1.default.AddRowBelowText,
	                            name: RteStrings_resx_1.default.AddRowBelowText,
	                            title: odsp_utilities_bundle_1.StringHelper.format(RteStrings_resx_1.default.AddRowBelowShortcutText, RteStrings_resx_1.default.AddRowBelowText),
	                            iconProps: {
	                                iconName: 'Down'
	                            },
	                            onClick: function () {
	                                _this._editor.formatTable('rowInsertAfter', _this.state.contextMenuTarget);
	                            }
	                        },
	                        {
	                            key: RteStrings_resx_1.default.DeleteRowText,
	                            name: RteStrings_resx_1.default.DeleteRowText,
	                            title: odsp_utilities_bundle_1.StringHelper.format(RteStrings_resx_1.default.DeleteRowShortcutText, RteStrings_resx_1.default.DeleteRowText),
	                            iconProps: {
	                                iconName: 'Delete'
	                            },
	                            onClick: function () {
	                                _this._editor.formatTable('rowDelete', _this.state.contextMenuTarget);
	                            }
	                        }
	                    ] }),
	            this.state.isImageWrappedWithText &&
	                React.createElement(office_ui_fabric_react_1.MessageBar, { messageBarType: office_ui_fabric_react_1.MessageBarType.warning, ariaLabel: RteStrings_resx_1.default.ImagesWithTextNotSupported, dismissButtonAriaLabel: odsp_utilities_bundle_1.StringHelper.format(RteStrings_resx_1.default.CloseWarningText, RteStrings_resx_1.default.ImagesWithTextNotSupported), onDismiss: this._onMessageBarDismiss }, RteStrings_resx_1.default.ImagesWithTextNotSupported),
	            this.state.isPasteInProgress &&
	                React.createElement(office_ui_fabric_react_1.Spinner, { type: office_ui_fabric_react_1.SpinnerType.large, label: RteStrings_resx_1.default.LoadingText }),
	            React.createElement("div", { "data-automation-id": 'textBox', role: isEditMode ? 'textbox' : undefined, "aria-multiline": isEditMode || undefined, dangerouslySetInnerHTML: { __html: html }, className: className, onKeyUp: this._handleKeyUp, ref: this._resolveRef('_editorElement') }),
	            formattingBar,
	            React.createElement(SPRteLinkDialog_1.default, { editorElement: this._editableDiv, isOpen: this.state.isLinkDialogOpen, onCancelClicked: this._closeLinkDialog.bind(this), onDismiss: this._closeLinkDialog.bind(this), onSaveClicked: this._onLinkDialogSaved, ref: this._resolveRef('_linkDialog'), textFieldValue: this._linkAddress || '', validationRegex: BaseRte._URL_VALIDATION_REGEX })));
	    };
	    BaseRte.prototype.componentWillMount = function () {
	        window.addEventListener('load', this._onSPRteLoad);
	    };
	    BaseRte.prototype.componentDidMount = function () {
	        var _this = this;
	        if (this.state.displayMode === sp_core_library_1.DisplayMode.Edit) {
	            if (!this._createNewEditorMonitor) {
	                this._createNewEditorMonitor = new sp_telemetry_1._QosMonitor(exports.CREATE_EDITOR_MONITOR);
	            }
	            this._createNewEditor(this.props.innerHTML || '', true).then(function (editor) {
	                _this._afterEditorCreated(editor);
	                _this._createNewEditorMonitor.writeSuccess();
	            }, function (error) {
	                _this._createNewEditorMonitor.writeUnexpectedFailure(exports.CREATE_EDITOR_MONITOR_FAILURE, error, { 'innerHTML': _this.props.innerHTML });
	            });
	        }
	    };
	    BaseRte.prototype.componentDidUpdate = function (prevProps, prevState) {
	        if (this.state.displayMode === sp_core_library_1.DisplayMode.Edit) {
	            if (this._formattingbar) {
	                this._formattingbarElement = ReactDom.findDOMNode(this._formattingbar);
	                this._formattingbarWidth = this._formattingbarElement.offsetWidth || this._formattingbarWidth;
	            }
	            else {
	                this._formattingbarElement = undefined;
	            }
	        }
	    };
	    BaseRte.prototype.componentWillUnmount = function () {
	        if (this._editor) {
	            this._previousHTML = this._editor.destroy();
	            this._editor = undefined;
	            this._editorElement.removeEventListener('paste', this._onBeforePaste, true);
	            this._editorElement.removeEventListener('keydown', this._handleKeyDown);
	            document.removeEventListener('mouseup', this._checkSelectionChange);
	            if (this._editableDiv) {
	                this._editableDiv.removeAttribute('contenteditable');
	                this._editableDiv.removeEventListener('focus', this._handleEditorFocus);
	            }
	            if (this._createNewEditorMonitor) {
	                this._createNewEditorMonitor.writeExpectedFailure(CREATE_EDITOR_MONITOR_EXPECTED);
	            }
	        }
	        window.removeEventListener('load', this._onSPRteLoad);
	    };
	    BaseRte.prototype.componentWillUpdate = function (nextProps, nextState) {
	        var _this = this;
	        if (this.state.displayMode !== nextState.displayMode) {
	            if (nextState.displayMode === sp_core_library_1.DisplayMode.Edit) {
	                if (!this._createNewEditorMonitor) {
	                    this._createNewEditorMonitor = new sp_telemetry_1._QosMonitor(exports.CREATE_EDITOR_MONITOR);
	                }
	                this._createNewEditor(this._previousHTML || this.props.innerHTML || '', false).then(function (editor) {
	                    _this._afterEditorCreated(editor);
	                    _this._setButtonStates();
	                    _this._createNewEditorMonitor.writeSuccess();
	                }, function (error) {
	                    _this._createNewEditorMonitor.writeUnexpectedFailure(exports.CREATE_EDITOR_MONITOR_FAILURE, error, { 'innerHTML': _this.props.innerHTML });
	                });
	            }
	            else if (nextState.displayMode === sp_core_library_1.DisplayMode.Read) {
	                this.componentWillUnmount();
	            }
	        }
	        else if (nextState.displayMode === sp_core_library_1.DisplayMode.Edit && this._editor) {
	            this._setButtonStates();
	        }
	    };
	    BaseRte.prototype.focus = function () {
	        if (this._editor) {
	            this._editor.focus();
	        }
	    };
	    BaseRte.prototype.focusFormattingBar = function () {
	        if (this._formattingbarElement) {
	            RteA11y_1.navigateInside(this._formattingbarElement);
	        }
	    };
	    BaseRte.prototype.setDisplayMode = function (newMode) {
	        if (this.state.displayMode !== newMode) {
	            this.setState({
	                displayMode: newMode,
	                formattingBarPosition: undefined,
	                isFormattingBarHidden: true,
	                isLinkDialogOpen: false
	            });
	        }
	    };
	    BaseRte.prototype.serialize = function () {
	        var serialization = JSON.parse(JSON.stringify(this.props));
	        serialization.innerHTML = this._editor ? this._editor.getHTML() : this.props.innerHTML;
	        if (this._editor) {
	            serialization.editorType = this._editor.getEditorType();
	        }
	        return serialization;
	    };
	    BaseRte.prototype._createNewEditor = function (innerHTML, startupFocus) {
	        return this._options.editor.createNewEditor(this._config, innerHTML, this._editorElement, this._handleSelectionChange, this._handleTextChange.bind(this), startupFocus, this._onImagePaste.bind(this), this._onPaste.bind(this), this._onContextualMenu.bind(this));
	    };
	    BaseRte.prototype._afterEditorCreated = function (editor) {
	        this._editor = editor;
	        this._handleTextChange();
	        this._editorElement.addEventListener('paste', this._onBeforePaste, true);
	        this._editorElement.addEventListener('keydown', this._handleKeyDown);
	        document.addEventListener('mouseup', this._checkSelectionChange);
	        this._editableDiv = this._editor.getEditorType() === 'CKEditor' ? this._editorElement :
	            this._editorElement.querySelector('.ql-editor');
	        if (this._editableDiv) {
	            this._editableDiv.setAttribute('aria-label', RteStrings_resx_1.default.RichTextEditorAriaLabel);
	            this._editableDiv.setAttribute('title', RteStrings_resx_1.default.RichTextEditorTitle);
	            this._editableDiv.addEventListener('focus', this._handleEditorFocus);
	            this._editableDiv.addEventListener('blur', this._handleEditorBlur);
	        }
	    };
	    BaseRte.prototype._openLinkDialog = function (defaultAddress) {
	        if (defaultAddress === void 0) { defaultAddress = ''; }
	        this._linkAddress = defaultAddress;
	        this.setState({
	            isLinkDialogOpen: true
	        });
	    };
	    BaseRte.prototype._closeLinkDialog = function () {
	        this._restoreSelectionOnNextFocus = true;
	        this._linkAddress = '';
	        this.setState({
	            isLinkDialogOpen: false
	        });
	    };
	    BaseRte.prototype._handleTextChange = function () {
	        sp_telemetry_1._EngagementLogger.logEvent(this._engagementLoggerClickTagName('TextChange'), CLICK_ACTION);
	        if (this.state.displayMode === sp_core_library_1.DisplayMode.Edit) {
	            if (this._editor) {
	                this._currentSelection = this._editor.getSelection() || this._currentSelection;
	            }
	        }
	    };
	    BaseRte.prototype._finalizeAction = function (ariaActionName) {
	        if (ariaActionName) {
	            this._ariaConfirmAction(ariaActionName);
	        }
	        this._updateActiveButtons();
	    };
	    BaseRte.prototype._onImagePaste = function (isImageValid, imageBlob, innerHTML) {
	        if (!isImageValid) {
	            this.setState({ isImageWrappedWithText: true });
	        }
	        else {
	            this.setState({ isImageWrappedWithText: false });
	        }
	    };
	    BaseRte.prototype._onContextualMenu = function (isRightClicked, target) {
	        this.setState({
	            isContextMenuVisible: isRightClicked,
	            contextMenuTarget: target
	        });
	    };
	    BaseRte.prototype._onPaste = function (isPasteInProgress) {
	        this.setState({ isPasteInProgress: isPasteInProgress });
	    };
	    BaseRte.prototype._handleSelectionChange = function (range, forceUpdate) {
	        if (range) {
	            this.setState({ currentSubmenuOpen: undefined });
	            if (this._restoreOnFocus()) {
	                this._updateFormattingBar(false);
	                return;
	            }
	        }
	        if (!range) {
	            this._updateFormattingBar(true);
	        }
	        else {
	            this._updateSelection(range, forceUpdate);
	        }
	    };
	    BaseRte.prototype._updateSelection = function (range, forceUpdate) {
	        if (!this._currentSelection || this.state.isFormattingBarHidden) {
	            this._currentSelection = range;
	            this._updateFormattingBar(false);
	        }
	        else if (forceUpdate || this._currentSelection.start !== range.start ||
	            this._currentSelection.end !== range.end) {
	            this._selectionInitiated = true;
	            if (this._selectionShouldEnd) {
	                this._currentSelection = range;
	                this._updateFormattingBar(false);
	                this._selectionInitiated = false;
	            }
	            this._selectionShouldEnd = false;
	        }
	    };
	    BaseRte.prototype._restoreOnFocus = function () {
	        var restore = false;
	        if (this._restoreSelectionOnNextFocus && this._currentSelection) {
	            this._restoreSelectionOnNextFocus = false;
	            this._editor.setSelection(this._currentSelection);
	            restore = true;
	        }
	        return restore;
	    };
	    BaseRte.prototype._onBeforePaste = function () {
	    };
	    BaseRte.prototype._handleKeyDown = function (evt) {
	        if (RteA11y_1.isTab(evt) || RteA11y_1.isShiftTab(evt)) {
	            evt.stopPropagation();
	            evt.preventDefault();
	        }
	        else if (RteA11y_1.isKey(RteA11y_1.KeyCodes.F10, evt, true) && this._formattingbarElement) {
	            sp_telemetry_1._EngagementLogger.logEvent(this.TAG_NAME + 'ToolbarByKeyboardShortcut.Focus', evt.type);
	            RteA11y_1.navigateInside(this._formattingbarElement);
	            var screenReaderInstruction = odsp_utilities_bundle_1.StringHelper.format(RteStrings_resx_1.default.RichTextNavigationAltF10Keys, RteStrings_resx_1.default.ToolbarNavigationArrowKeys, RteStrings_resx_1.default.ToolbarNavigationTabKeys);
	            RteA11y_1.ariaAlert(screenReaderInstruction);
	            evt.stopPropagation();
	            evt.preventDefault();
	        }
	        else if (RteA11y_1.isKey('K'.charCodeAt(0), evt, false, true)) {
	            this._handleLink();
	            evt.stopPropagation();
	            evt.preventDefault();
	        }
	    };
	    BaseRte.prototype._handleLink = function () {
	        sp_telemetry_1._EngagementLogger.logEvent(this._engagementLoggerClickTagName('link'), CLICK_ACTION);
	        this._isSelectionChangeFromToolbar = true;
	        this._currentSelection = this._editor.getSelection();
	        if (this._currentSelection) {
	            if (this._buttonStates.get('link') === ToolbarButton_1.ButtonState.Active) {
	                this._handleUnlink();
	            }
	            else if (this._currentSelection.start !== this._currentSelection.end) {
	                this._openLinkDialog();
	            }
	            this._updateActiveButtons();
	        }
	    };
	    BaseRte.prototype._handleFormattingBarKeyDown = function (evt) {
	        if (RteA11y_1.isEscape(evt)) {
	            if (this._editableDiv && !this._editableDiv.isEqualNode(document.activeElement)) {
	                this.focus();
	                evt.stopPropagation();
	                evt.preventDefault();
	            }
	        }
	    };
	    BaseRte.prototype._updateFormattingBar = function (isHidden) {
	    };
	    ;
	    BaseRte.prototype._engagementLoggerClickTagName = function (key) {
	        return this.TAG_NAME + key + BUTTON_NAME + CLICK_ACTION;
	    };
	    BaseRte.prototype._onSPRteLoad = function (e) {
	        if (this._config.editorElementClassName === 'cke_editable' &&
	            !sp_core_library_1._SPKillSwitch.isActivated(sp_core_library_1.Guid.tryParse('f4d628e3-3a01-46e7-8508-96db5caa18e6'), '11/16/2016', 'PreloadCKEditor')) {
	            CKTextEditor_1.default.preloadEditor(this._config);
	        }
	    };
	    BaseRte.prototype._ariaConfirmAction = function (formatKeyOrName) {
	        var format = this._config.formats.get(formatKeyOrName);
	        var name = format ? format.button.title : formatKeyOrName;
	        var message = odsp_utilities_bundle_1.StringHelper.format(RteStrings_resx_1.default.FormattingBarConfirmAction, name);
	        if (this._currentSelection && this._currentSelection.start !== this._currentSelection.end &&
	            !(format && format.isLine)) {
	            var text = this._editor.getText(this._currentSelection);
	            message = odsp_utilities_bundle_1.StringHelper.format(RteStrings_resx_1.default.FormattingBarConfirmActionOnSelection, name, text);
	        }
	        RteA11y_1.ariaAlert(message);
	    };
	    BaseRte.prototype._checkSelectionChange = function () {
	        if (this._editor) {
	            this._selectionShouldEnd = true;
	            if (this._selectionInitiated) {
	                var range = this._editor.getSelection();
	                this._currentSelection = range;
	                this._updateFormattingBar(false);
	                this._selectionShouldEnd = false;
	            }
	            this._selectionInitiated = false;
	        }
	    };
	    BaseRte.prototype._getFormatButtonProps = function (formatKey, onClick) {
	        var format = this._config.formats.get(formatKey);
	        return {
	            key: format.key,
	            fabricIconKey: format.button.fabricIconKey,
	            iconClassName: format.button.iconClassName,
	            onClick: onClick,
	            canBeActive: format.button.canBeActive,
	            isActive: this._buttonStates.get(format.key) === ToolbarButton_1.ButtonState.Active,
	            disabled: this._buttonStates.get(format.key) === ToolbarButton_1.ButtonState.Disabled,
	            title: format.button.title + (format.button.shortcut ? " (" + format.button.shortcut + ")" : ''),
	            label: format.button.label,
	            className: format.button.className,
	            automationId: formatKey + '-button',
	            onBlur: this._handleFormattingBarBlur
	        };
	    };
	    BaseRte.prototype._handleCloseSubmenu = function (isDocumentClick) {
	        this.setState({ currentSubmenuOpen: undefined });
	        if (isDocumentClick) {
	            this._updateFormattingBar(true);
	        }
	    };
	    Object.defineProperty(BaseRte.prototype, "_formattingBarButtons", {
	        get: function () {
	            var _this = this;
	            var formatSubmenuButtons = [
	                {
	                    key: 'normalText',
	                    canBeActive: true,
	                    title: RteStrings_resx_1.default.FormattingBarNormalTextButtonTitle,
	                    label: RteStrings_resx_1.default.FormattingBarNormalTextButtonTitle,
	                    onClick: this._handlePlainText,
	                    automationId: 'normalText-button'
	                },
	                this._getFormatButtonProps('h2', this._handleHeading2),
	                this._getFormatButtonProps('h3', this._handleHeading3),
	                this._getFormatButtonProps('h4', this._handleHeading4),
	                this._getFormatButtonProps('blockquote', this._handleQuote)
	            ];
	            var buttons = [
	                React.createElement(ToolbarSubmenu_1.default, { key: 'format', buttons: formatSubmenuButtons, isOpen: this.state.currentSubmenuOpen === 'format', isWide: true, onOpen: function () { _this._isSelectionChangeFromToolbar = true; _this.setState({ currentSubmenuOpen: 'format' }); }, onClose: this._handleCloseSubmenu, onBlur: this._handleFormattingBarBlur }),
	                React.createElement(ToolbarButton_1.default, __assign({}, this._getFormatButtonProps('bold', this._handleBold))),
	                React.createElement(ToolbarButton_1.default, __assign({}, this._getFormatButtonProps('italic', this._handleItalic))),
	                React.createElement(ToolbarButton_1.default, __assign({}, this._getFormatButtonProps('underline', this._handleUnderline))),
	                React.createElement(ToolbarButton_1.default, __assign({}, this._getFormatButtonProps('bullet', this._handleListBullets))),
	                React.createElement(ToolbarButton_1.default, __assign({}, this._getFormatButtonProps('list', this._handleListNumbered))),
	                React.createElement(ToolbarButton_1.default, __assign({}, this._getFormatButtonProps('alignLeft', this._handleAlignLeft))),
	                React.createElement(ToolbarButton_1.default, __assign({}, this._getFormatButtonProps('alignCenter', this._handleAlignCenter))),
	                React.createElement(ToolbarButton_1.default, __assign({}, this._getFormatButtonProps('alignRight', this._handleAlignRight))),
	                React.createElement(ToolbarButton_1.default, __assign({}, this._getFormatButtonProps('link', this._handleLink))),
	                React.createElement(ToolbarButton_1.default, { key: 'clearFormatting', canBeActive: false, fabricIconKey: 'ClearFormatting', onClick: this._handleClearFormatting, title: RteStrings_resx_1.default.FormattingBarClearFormattingButtonTitle, automationId: 'clearFormatting-button', onBlur: this._handleFormattingBarBlur })
	            ];
	            return buttons;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BaseRte.prototype._formatOrPrepare = function (formatKey) {
	        this.focus();
	        sp_telemetry_1._EngagementLogger.logEvent(this._engagementLoggerClickTagName(formatKey), CLICK_ACTION);
	        var format = this._config.formats.get(formatKey);
	        if (format.maskedBy) {
	            for (var _i = 0, _a = format.maskedBy; _i < _a.length; _i++) {
	                var maskingFormat = _a[_i];
	                if (this._buttonStates.get(maskingFormat) === ToolbarButton_1.ButtonState.Active) {
	                    return;
	                }
	            }
	        }
	        var range = this._editor.getSelection();
	        var _b = [range.start, range.end], start = _b[0], end = _b[1];
	        var isApplied = this._editor.isFormatAppliedToRange(start, end, format);
	        if (!(this._cleanupBeforeFormatting(start, end, format) && isApplied)) {
	            var formats = {};
	            formats[format.editorKey] = isApplied ? false : (format.editorValue !== undefined ? format.editorValue : true);
	            this._editor.format(start, end, formats);
	            this._finalizeAction(formatKey);
	        }
	    };
	    BaseRte.prototype._handleAlignCenter = function () {
	        this._formatOrPrepare('alignCenter');
	    };
	    BaseRte.prototype._handleAlignLeft = function () {
	        this._formatOrPrepare(this._isRtl ? 'alignRight' : 'alignLeft');
	    };
	    BaseRte.prototype._handleAlignRight = function () {
	        this._formatOrPrepare(this._isRtl ? 'alignLeft' : 'alignRight');
	    };
	    BaseRte.prototype._handleBold = function () {
	        this._formatOrPrepare('bold');
	    };
	    BaseRte.prototype._handleHeading2 = function () {
	        this._formatOrPrepare('h2');
	    };
	    BaseRte.prototype._handleHeading3 = function () {
	        this._formatOrPrepare('h3');
	    };
	    BaseRte.prototype._handleHeading4 = function () {
	        this._formatOrPrepare('h4');
	    };
	    BaseRte.prototype._handleItalic = function () {
	        this._formatOrPrepare('italic');
	    };
	    BaseRte.prototype._handleListBullets = function () {
	        this._formatOrPrepare('bullet');
	    };
	    BaseRte.prototype._handleListNumbered = function () {
	        this._formatOrPrepare('list');
	    };
	    BaseRte.prototype._handlePlainText = function () {
	        this.focus();
	        if (this._currentSelection) {
	            var blockStyles = this._config.supportedFormatsArray.filter(function (format) { return format.isBlockStyle; });
	            this._cleanupBeforeFormatting(this._currentSelection.start, this._currentSelection.end, blockStyles[0]);
	            this._finalizeAction();
	        }
	        sp_telemetry_1._EngagementLogger.logEvent(this._engagementLoggerClickTagName('PlainText'), CLICK_ACTION);
	    };
	    BaseRte.prototype._handleQuote = function () {
	        this._formatOrPrepare('blockquote');
	    };
	    BaseRte.prototype._handleClearFormatting = function () {
	        sp_telemetry_1._EngagementLogger.logEvent(this._engagementLoggerClickTagName('ClearFormatting'), CLICK_ACTION);
	        this.focus();
	        var range = this._currentSelection;
	        var _a = [range.start, range.end], start = _a[0], end = _a[1];
	        this._editor.clearFormatting(start, end);
	        this._finalizeAction(RteStrings_resx_1.default.FormattingBarClearFormattingButtonTitle);
	    };
	    BaseRte.prototype._handleUnderline = function () {
	        this._formatOrPrepare('underline');
	    };
	    BaseRte.prototype._handleUnlink = function () {
	        this.focus();
	        sp_telemetry_1._EngagementLogger.logEvent(this._engagementLoggerClickTagName('Unlink'), CLICK_ACTION);
	        if (this._currentSelection) {
	            this._editor.format(this._currentSelection.start, this._currentSelection.end, { 'link': false });
	            this._finalizeAction(RteStrings_resx_1.default.FormattingBarUnlinkButtonTitle);
	        }
	    };
	    BaseRte.prototype._cleanupBeforeFormatting = function (start, end, newFormat) {
	        var formatsToClear = {};
	        if (newFormat.isBlockStyle) {
	            var blockStyles = this._config.supportedFormatsArray.filter(function (format) { return format.isBlockStyle; });
	            for (var _i = 0, blockStyles_1 = blockStyles; _i < blockStyles_1.length; _i++) {
	                var format = blockStyles_1[_i];
	                formatsToClear[format.editorKey] = false;
	            }
	        }
	        if (newFormat.masks) {
	            for (var _a = 0, _b = newFormat.masks; _a < _b.length; _a++) {
	                var maskedFormatKey = _b[_a];
	                formatsToClear[this._config.formats.get(maskedFormatKey).editorKey] = false;
	            }
	        }
	        this._editor.format(start, end, formatsToClear, true);
	        return formatsToClear.hasOwnProperty(newFormat.editorKey);
	    };
	    BaseRte.prototype._onMessageBarDismiss = function () {
	        this.setState({ isImageWrappedWithText: false });
	    };
	    BaseRte.prototype._onContextualMenuDismiss = function () {
	        this.setState({ isContextMenuVisible: false });
	    };
	    BaseRte.prototype._onLinkDialogSaved = function () {
	        if (this._linkDialog.textFieldValue) {
	            this._editor.format(this._currentSelection.start, this._currentSelection.end, { 'link': this._linkDialog.textFieldValue });
	        }
	        this._linkElement = undefined;
	        this._finalizeAction(RteStrings_resx_1.default.FormattingBarLinkButtonTitle);
	        this._closeLinkDialog();
	    };
	    BaseRte.prototype._handleEditorFocus = function (evt) {
	        this._restoreOnFocus();
	    };
	    BaseRte.prototype._handleFormattingBarBlur = function (evt) {
	        this._hideFormattingBarOnBlur(evt.relatedTarget);
	    };
	    BaseRte.prototype._handleEditorBlur = function (evt) {
	        this._hideFormattingBarOnBlur(evt.relatedTarget);
	    };
	    BaseRte.prototype._hideFormattingBarOnBlur = function (target) {
	        var elem = target;
	        if ((this._editorElement && this._editorElement.contains(elem)) ||
	            (this._formattingbarElement && this._formattingbarElement.contains(elem)) ||
	            elem && elem.className === 'ControlZone ControlZone--edit ControlZone--selected') {
	            return;
	        }
	        else {
	            this._updateFormattingBar(true);
	        }
	    };
	    BaseRte.prototype._handleKeyUp = function (evt) {
	        this._checkSelectionChange();
	        this._updateActiveButtons();
	    };
	    BaseRte.prototype._setButtonStates = function () {
	        var range = this._editor.getSelection();
	        if (range) {
	            var updatedFormats = new Map();
	            for (var _i = 0, _a = this._config.supportedFormatsArray; _i < _a.length; _i++) {
	                var format = _a[_i];
	                updatedFormats.set(format.key, false);
	            }
	            var maskingFormats = this._config.supportedFormatsArray.filter(function (format) { return !!format.masks; });
	            for (var _b = 0, maskingFormats_1 = maskingFormats; _b < maskingFormats_1.length; _b++) {
	                var maskingFormat = maskingFormats_1[_b];
	                if (!updatedFormats.get(maskingFormat.key)) {
	                    var isActive = this._editor.isFormatAppliedToRange(range.start, range.end, maskingFormat);
	                    this._buttonStates.set(maskingFormat.key, isActive ? ToolbarButton_1.ButtonState.Active : ToolbarButton_1.ButtonState.Normal);
	                    updatedFormats.set(maskingFormat.key, true);
	                    if (isActive) {
	                        for (var _c = 0, _d = maskingFormat.masks; _c < _d.length; _c++) {
	                            var maskedFormat = _d[_c];
	                            this._buttonStates.set(maskedFormat, ToolbarButton_1.ButtonState.Disabled);
	                            updatedFormats.set(maskedFormat, true);
	                        }
	                    }
	                }
	            }
	            for (var _e = 0, _f = this._config.supportedFormatsArray; _e < _f.length; _e++) {
	                var format = _f[_e];
	                if (!updatedFormats.get(format.key)) {
	                    var isActive = this._editor.isFormatAppliedToRange(range.start, range.end, format);
	                    this._buttonStates.set(format.key, isActive ? ToolbarButton_1.ButtonState.Active : ToolbarButton_1.ButtonState.Normal);
	                }
	            }
	        }
	        if (this._isRtl) {
	            var left = this._buttonStates.get('alignLeft');
	            this._buttonStates.set('alignLeft', this._buttonStates.get('alignRight'));
	            this._buttonStates.set('alignRight', left);
	        }
	    };
	    BaseRte.prototype._updateActiveButtons = function () {
	        this.forceUpdate();
	    };
	    return BaseRte;
	}(office_ui_fabric_react_1.BaseComponent));
	BaseRte._URL_VALIDATION_REGEX = new RegExp('((^https?:\/\/)|(^ftp:\/\/)|(^file:\/\/)|(^mailto:)|(^news:)|(^pnm:\/\/)|(^mms:\/\/)|(^\/)|(^#)|(^\\\\)).+', 'i');
	__decorate([
	    office_ui_fabric_react_1.autobind
	], BaseRte.prototype, "_onContextualMenu", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], BaseRte.prototype, "_handleSelectionChange", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], BaseRte.prototype, "_updateSelection", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], BaseRte.prototype, "_onBeforePaste", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], BaseRte.prototype, "_handleKeyDown", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], BaseRte.prototype, "_handleLink", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], BaseRte.prototype, "_handleFormattingBarKeyDown", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], BaseRte.prototype, "_onSPRteLoad", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], BaseRte.prototype, "_checkSelectionChange", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], BaseRte.prototype, "_getFormatButtonProps", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], BaseRte.prototype, "_handleCloseSubmenu", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], BaseRte.prototype, "_handleAlignCenter", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], BaseRte.prototype, "_handleAlignLeft", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], BaseRte.prototype, "_handleAlignRight", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], BaseRte.prototype, "_handleBold", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], BaseRte.prototype, "_handleHeading2", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], BaseRte.prototype, "_handleHeading3", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], BaseRte.prototype, "_handleHeading4", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], BaseRte.prototype, "_handleItalic", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], BaseRte.prototype, "_handleListBullets", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], BaseRte.prototype, "_handleListNumbered", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], BaseRte.prototype, "_handlePlainText", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], BaseRte.prototype, "_handleQuote", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], BaseRte.prototype, "_handleClearFormatting", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], BaseRte.prototype, "_handleUnderline", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], BaseRte.prototype, "_handleUnlink", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], BaseRte.prototype, "_onMessageBarDismiss", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], BaseRte.prototype, "_onContextualMenuDismiss", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], BaseRte.prototype, "_onLinkDialogSaved", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], BaseRte.prototype, "_handleEditorFocus", null);
	__decorate([
	    office_ui_fabric_react_1.autobind 
	], BaseRte.prototype, "_handleFormattingBarBlur", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], BaseRte.prototype, "_handleEditorBlur", null);
	__decorate([
	    office_ui_fabric_react_1.autobind
	], BaseRte.prototype, "_handleKeyUp", null);
	exports.BaseRte = BaseRte;


/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var office_ui_fabric_react_1 = __webpack_require__(27);
	var React = __webpack_require__(24);
	__webpack_require__(153);
	var office_ui_fabric_react_2 = __webpack_require__(27);
	var SPRteFormattingBar = (function (_super) {
	    __extends(SPRteFormattingBar, _super);
	    function SPRteFormattingBar(props) {
	        var _this = _super.call(this, props) || this;
	        _this.state = {
	            isFaded: false
	        };
	        return _this;
	    }
	    SPRteFormattingBar.prototype.componentDidMount = function () {
	        this._domNode.addEventListener('keydown', this.props.onKeyDown);
	    };
	    SPRteFormattingBar.prototype.componentWillReceiveProps = function (nextProps) {
	        if (this.props.position.top !== nextProps.position.top) {
	            this.setState({
	                isFaded: true
	            });
	        }
	    };
	    SPRteFormattingBar.prototype.componentDidUpdate = function () {
	        var _this = this;
	        if (this.state.isFaded) {
	            window.setTimeout(function () {
	                _this.setState({
	                    isFaded: false
	                });
	            }, 300);
	        }
	    };
	    SPRteFormattingBar.prototype.render = function () {
	        var style = this.props.position;
	        var className = office_ui_fabric_react_1.css('SPRteFormattingBar', 'rteFlyout-visible', 'stack-panel-class', 'ms-u-slideUpIn10', {
	            'faded': this.state.isFaded
	        });
	        return (React.createElement("div", { role: 'toolbar', "aria-label": 'Formatting', className: className, ref: this._resolveRef('_domNode'), style: style, "data-automation-id": 'toolbar' },
	            React.createElement(office_ui_fabric_react_1.FocusZone, { ref: this._resolveRef('_focusZone'), isCircularNavigation: true }, this.props.buttons)));
	    };
	    SPRteFormattingBar.prototype.focus = function () {
	        this._focusZone.focus();
	    };
	    return SPRteFormattingBar;
	}(office_ui_fabric_react_2.BaseComponent));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SPRteFormattingBar;


/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(154);


/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	var content = __webpack_require__(155);
	var loader = __webpack_require__(124);
	
	if(typeof content === "string") content = [[module.id, content]];
	
	// add the styles to the DOM
	for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
	
	if(content.locals) module.exports = content.locals;

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(123)();
	// imports
	
	
	// module
	exports.push([module.id, ".rteFlyout-visible{position:absolute;z-index:2;box-shadow:0 0 5px 0 #c8c8c8;top:-45px;font-family:\"Segoe UI Regular WestEuropean\",\"Segoe UI\",\"Segoe WP\",Tahoma,Arial,sans-serif}@media (max-width:720px){.rteFlyout-visible .rteFlyout-button{padding:10px;font-size:11px}}.rteFlyout-visible .rteFlyout-button:hover{background:#0078D7}.rteFlyout-visible .rteFlyout-button .ms-Icon{padding:13px;color:#767676;font-size:14px!important}.rteFlyout-visible .rteFlyout-button:hover .ms-Icon{color:#fff}.rteFlyout-visible .rteFlyout-button img{vertical-align:middle;display:inline-block}.rteFlyout-visible .stack-panel-class{background:\"[theme:neutralPrimary, default: #333333]\"}.rteFlyout-button{background-color:transparent;border-width:0;padding:0;cursor:pointer!important}.stack-panel-class{white-space:nowrap}.SPRteFormattingBar{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;background-color:\"[theme:neutralPrimary, default: #333333]\";-webkit-transition:all 367ms cubic-bezier(.1,.9,.2,1);transition:all 367ms cubic-bezier(.1,.9,.2,1);width:505px}[dir=ltr] .SPRteFormattingBar .ToolbarButton,[dir=ltr] .SPRteFormattingBar .ToolbarSubmenu{float:left}[dir=rtl] .SPRteFormattingBar .ToolbarButton,[dir=rtl] .SPRteFormattingBar .ToolbarSubmenu{float:right}.SPRteFormattingBar.faded{display:none}.SPRteFormattingBar-divider{float:left;height:16px;margin-top:8px;width:0;border-right:solid 1px \"[theme:neutralSecondary, default: #666666]\"}.msIcon_h2_temp::after{content:'H2';font-size:16px;font-style:normal;font-weight:600}.button_quote_temp .ms-Icon{font-size:28px!important;font-family:\"Segoe UI Light WestEuropean\",\"Segoe UI Light\",\"Segoe WP Light\",\"Segoe UI\",\"Segoe WP\",Tahoma,Arial,sans-serif;line-height:1.7!important}.button_linkRemove_temp .ms-Icon::after{content:'x';font-family:Arial;margin-left:-5px;margin-right:5px}", ""]);
	
	// exports


/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var React = __webpack_require__(24);
	var RteStrings_resx_1 = __webpack_require__(137);
	var office_ui_fabric_react_1 = __webpack_require__(27);
	var RteA11y_1 = __webpack_require__(157);
	var SPRteLinkDialog = (function (_super) {
	    __extends(SPRteLinkDialog, _super);
	    function SPRteLinkDialog(props) {
	        var _this = _super.call(this, props) || this;
	        _this._getErrorMessage = _this._getErrorMessage.bind(_this);
	        _this._handleKeyDown = _this._handleKeyDown.bind(_this);
	        _this._handleSaveClicked = _this._handleSaveClicked.bind(_this);
	        _this._handleTextFieldChange = _this._handleTextFieldChange.bind(_this);
	        _this._isURLValid = _this._isURLValid.bind(_this);
	        _this.state = {
	            isURLValid: true
	        };
	        return _this;
	    }
	    SPRteLinkDialog.prototype.render = function () {
	        var _this = this;
	        var _a = this.props, editorElement = _a.editorElement, isOpen = _a.isOpen, onDismiss = _a.onDismiss, onSaveClicked = _a.onSaveClicked, onCancelClicked = _a.onCancelClicked, textFieldValue = _a.textFieldValue;
	        return (React.createElement(office_ui_fabric_react_1.Dialog, { isOpen: isOpen, type: office_ui_fabric_react_1.DialogType.normal, onDismiss: onDismiss, title: RteStrings_resx_1.default.LinkDialogTitle, isBlocking: true, elementToFocusOnDismiss: editorElement },
	            React.createElement(office_ui_fabric_react_1.TextField, { label: RteStrings_resx_1.default.LinkDialogTextFieldLabel, ariaLabel: RteStrings_resx_1.default.LinkDialogTextFieldAriaLabel, onChanged: this._handleTextFieldChange, onGetErrorMessage: this._getErrorMessage, onKeyDown: this._handleKeyDown, placeholder: 'http://', defaultValue: textFieldValue, ref: function (c) { return _this._textField = c; }, "data-automation-id": 'linkDialogTextField' }),
	            React.createElement(office_ui_fabric_react_1.DialogFooter, null,
	                React.createElement(office_ui_fabric_react_1.Button, { buttonType: office_ui_fabric_react_1.ButtonType.primary, disabled: !this.state.isURLValid, onClick: this._handleSaveClicked, ariaLabel: RteStrings_resx_1.default.RichTextLinkDialogSaveButtonLabel, "data-automation-id": 'confirmButton' }, RteStrings_resx_1.default.RichTextLinkDialogSaveButtonLabel),
	                React.createElement(office_ui_fabric_react_1.Button, { onClick: onCancelClicked, ariaLabel: RteStrings_resx_1.default.RichTextLinkDialogCancelButtonLabel, "data-automation-id": 'cancelButton' }, RteStrings_resx_1.default.RichTextLinkDialogCancelButtonLabel))));
	    };
	    SPRteLinkDialog.prototype.componentDidUpdate = function (prevProps) {
	        if (this._textField && this.props.isOpen && !this._initCursorSet) {
	            this._initCursorSet = true;
	            this._textField.select();
	            var textValue = this._textField.value;
	            if (textValue) {
	                this._textField.setSelectionStart(textValue.length);
	                this._textField.setSelectionEnd(textValue.length);
	            }
	        }
	        else if (!this.props.isOpen) {
	            this._initCursorSet = false;
	        }
	    };
	    SPRteLinkDialog.prototype.componentWillReceiveProps = function (newProps) {
	        this.state = {
	            isURLValid: this._isURLValid(newProps.textFieldValue)
	        };
	    };
	    Object.defineProperty(SPRteLinkDialog.prototype, "textFieldValue", {
	        get: function () {
	            var url = '';
	            if (this._textField) {
	                url = this._textField.value;
	                if (!this._hasProtocol(url)) {
	                    url = 'http://' + url;
	                }
	            }
	            return url;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SPRteLinkDialog.prototype._getErrorMessage = function () {
	        return !this._isURLValid(this.textFieldValue) && this.textFieldValue !== '' ?
	            RteStrings_resx_1.default.LinkDialogErrorNotSupportedLink : '';
	    };
	    SPRteLinkDialog.prototype._handleKeyDown = function (evt) {
	        if (RteA11y_1.isEnter(evt) && this._isURLValid(this.textFieldValue)) {
	            this.props.onSaveClicked();
	            evt.stopPropagation();
	            evt.preventDefault();
	        }
	    };
	    SPRteLinkDialog.prototype._handleSaveClicked = function () {
	        if (this._isURLValid(this.textFieldValue)) {
	            this.props.onSaveClicked();
	        }
	    };
	    SPRteLinkDialog.prototype._handleTextFieldChange = function () {
	        this.setState({
	            isURLValid: this._isURLValid(this.textFieldValue)
	        });
	    };
	    SPRteLinkDialog.prototype._hasProtocol = function (url) {
	        var hasProtocolRegex = new RegExp('^([A-Za-z0-9]+:(\/\/)?|#|\/|\\\\).+', 'i');
	        return hasProtocolRegex.test(url);
	    };
	    SPRteLinkDialog.prototype._isURLValid = function (url) {
	        return this.props.validationRegex.test(url);
	    };
	    return SPRteLinkDialog;
	}(React.Component));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SPRteLinkDialog;


/***/ },
/* 157 */
/***/ function(module, exports) {

	"use strict";
	var KeyCodes;
	(function (KeyCodes) {
	    KeyCodes[KeyCodes["Enter"] = 13] = "Enter";
	    KeyCodes[KeyCodes["Escape"] = 27] = "Escape";
	    KeyCodes[KeyCodes["Tab"] = 9] = "Tab";
	    KeyCodes[KeyCodes["F10"] = 121] = "F10";
	    KeyCodes[KeyCodes["P"] = 80] = "P";
	})(KeyCodes = exports.KeyCodes || (exports.KeyCodes = {}));
	function isEscape(e) {
	    return isKey(KeyCodes.Escape, e);
	}
	exports.isEscape = isEscape;
	function isEnter(e) {
	    return isKey(KeyCodes.Enter, e);
	}
	exports.isEnter = isEnter;
	function isShiftTab(e) {
	    return isKey(KeyCodes.Tab, e, false, false, true);
	}
	exports.isShiftTab = isShiftTab;
	function isTab(e) {
	    return isKey(KeyCodes.Tab, e);
	}
	exports.isTab = isTab;
	function isKey(keyCode, e, allowAlt, allowCtrl, allowShift) {
	    if (allowAlt === void 0) { allowAlt = false; }
	    if (allowCtrl === void 0) { allowCtrl = false; }
	    if (allowShift === void 0) { allowShift = false; }
	    return e.keyCode === keyCode &&
	        ((allowAlt && e.altKey) || (!allowAlt && !e.altKey)) &&
	        ((allowCtrl && e.ctrlKey) || (!allowCtrl && !e.ctrlKey)) &&
	        ((allowShift && e.shiftKey) || (!allowShift && !e.shiftKey));
	}
	exports.isKey = isKey;
	function getFocusableChildren(elem, ignoreTabIndex) {
	    if (ignoreTabIndex === void 0) { ignoreTabIndex = false; }
	    var children = [];
	    for (var _i = 0, _a = getFocusableDescendants(elem, ignoreTabIndex); _i < _a.length; _i++) {
	        var descendant = _a[_i];
	        if (isElementFocusableChildOf(descendant, elem)) {
	            children.push(descendant);
	        }
	    }
	    return children;
	}
	exports.getFocusableChildren = getFocusableChildren;
	function isElementFocusable(elem, ignoreTabIndex) {
	    if (ignoreTabIndex === void 0) { ignoreTabIndex = false; }
	    var tagName = elem.tagName.toLowerCase();
	    if (elem
	        && !elem.hidden
	        && elem.offsetParent
	        && window.getComputedStyle(elem).display !== 'none'
	        && window.getComputedStyle(elem).visibility !== 'hidden') {
	        var hasTabIndex = elem.hasAttribute('tabindex');
	        var tabindex = parseInt(elem.getAttribute('tabindex'), 10);
	        if (!ignoreTabIndex && hasTabIndex && tabindex < 0) {
	            return false;
	        }
	        if (tagName === 'a' && !!elem.href ||
	            elem.isContentEditable) {
	            return true;
	        }
	        if ((tagName === 'button' ||
	            tagName === 'input' ||
	            tagName === 'select' ||
	            tagName === 'textarea') && !elem.disabled) {
	            return true;
	        }
	        if (ignoreTabIndex && elem.getAttribute('data-is-focusable') === 'true') {
	            return true;
	        }
	        if (!ignoreTabIndex && hasTabIndex && tabindex > -1) {
	            return true;
	        }
	    }
	    return false;
	}
	exports.isElementFocusable = isElementFocusable;
	function getFocusableParent(elem, topElement) {
	    if (topElement === void 0) { topElement = document.body; }
	    var parent = elem;
	    do {
	        parent = parent.parentElement;
	    } while (!isElementFocusable(parent) && parent !== topElement);
	    return parent;
	}
	exports.getFocusableParent = getFocusableParent;
	function queryFocusableSelector(elem) {
	    var selector = 'button,input,textarea,select,a[href]:not([href=\'\']),\
	      [tabindex],[contenteditable=\'true\'], [data-is-focusable=\'true\']';
	    return elem.querySelectorAll(selector);
	}
	function getFirstFocusableChild(elem, ignoreTabIndex) {
	    if (ignoreTabIndex === void 0) { ignoreTabIndex = false; }
	    var nodes = queryFocusableSelector(elem);
	    for (var i = 0; i < nodes.length; i++) {
	        var node = nodes[i];
	        if (isElementFocusable(node, ignoreTabIndex)) {
	            return node;
	        }
	    }
	    return undefined;
	}
	exports.getFirstFocusableChild = getFirstFocusableChild;
	function getFocusableDescendants(elem, ignoreTabIndex) {
	    if (ignoreTabIndex === void 0) { ignoreTabIndex = false; }
	    var descendants = [];
	    var nodes = queryFocusableSelector(elem);
	    for (var i = 0; i < nodes.length; i++) {
	        var node = nodes[i];
	        if (isElementFocusable(node, ignoreTabIndex)) {
	            descendants.push(node);
	        }
	    }
	    return descendants;
	}
	exports.getFocusableDescendants = getFocusableDescendants;
	function getFocusableSiblings(elem, topElement) {
	    if (topElement === void 0) { topElement = document.body; }
	    var children = getFocusableChildren(getFocusableParent(elem, topElement));
	    var siblings = [];
	    var insertPointer = 0;
	    for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {
	        var child = children_1[_i];
	        if (child !== elem) {
	            siblings.splice(insertPointer++, 0, child);
	        }
	        else {
	            insertPointer = 0;
	        }
	    }
	    return siblings;
	}
	exports.getFocusableSiblings = getFocusableSiblings;
	function getNextFocusableElement(elem, topElement) {
	    if (topElement === void 0) { topElement = document.body; }
	    var siblings = getFocusableSiblings(elem, topElement);
	    return siblings[0];
	}
	exports.getNextFocusableElement = getNextFocusableElement;
	function getPrevFocusableElement(elem, topElement) {
	    if (topElement === void 0) { topElement = document.body; }
	    var siblings = getFocusableSiblings(elem, topElement);
	    return siblings[siblings.length - 1];
	}
	exports.getPrevFocusableElement = getPrevFocusableElement;
	function isElementFocusableChildOf(elem, ancestor) {
	    var parent = elem.parentElement;
	    while (parent.tagName !== 'BODY') {
	        if (parent !== ancestor) {
	            return true;
	        }
	        if (isElementFocusable(parent)) {
	            break;
	        }
	        parent = parent.parentElement;
	    }
	    return false;
	}
	exports.isElementFocusableChildOf = isElementFocusableChildOf;
	function navigateInside(elem) {
	    var children = getFocusableChildren(elem);
	    if (children.length) {
	        children[0].focus();
	        return true;
	    }
	    else {
	        return false;
	    }
	}
	exports.navigateInside = navigateInside;
	function navigateTo(elem) {
	    if (isElementFocusable(elem)) {
	        elem.focus();
	        return true;
	    }
	    else {
	        return navigateInside(elem);
	    }
	}
	exports.navigateTo = navigateTo;
	function navigateOutOf(elem, topElement) {
	    if (topElement === void 0) { topElement = document.body; }
	    topElement = topElement || document.body;
	    getFocusableParent(elem, topElement).focus();
	}
	exports.navigateOutOf = navigateOutOf;
	function ariaAlert(message) {
	    var divId = 'aria_alert_' + this._randId;
	    var oldAlert = document.querySelector('#' + divId);
	    if (oldAlert) {
	        document.body.removeChild(oldAlert);
	    }
	    var alertNode = document.createElement('p');
	    alertNode.classList.add('Canvas-screenReaderOnly');
	    alertNode.setAttribute('role', 'alert');
	    alertNode.setAttribute('id', divId);
	    var alertText = document.createTextNode(message);
	    alertNode.appendChild(alertText);
	    document.body.appendChild(alertNode);
	}
	exports.ariaAlert = ariaAlert;


/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var office_ui_fabric_react_1 = __webpack_require__(27);
	var React = __webpack_require__(24);
	__webpack_require__(159);
	var Utilities_1 = __webpack_require__(162);
	var ButtonState;
	(function (ButtonState) {
	    ButtonState[ButtonState["Active"] = 0] = "Active";
	    ButtonState[ButtonState["Disabled"] = 1] = "Disabled";
	    ButtonState[ButtonState["Normal"] = 2] = "Normal";
	})(ButtonState = exports.ButtonState || (exports.ButtonState = {}));
	var ToolbarButton = (function (_super) {
	    __extends(ToolbarButton, _super);
	    function ToolbarButton(props) {
	        return _super.call(this, props) || this;
	    }
	    ToolbarButton.prototype.render = function () {
	        var buttonClassName = office_ui_fabric_react_1.css('ToolbarButton', this.props.className, {
	            'ToolbarButton--disabled': this.props.disabled,
	            'ToolbarButton--active': this.props.isActive
	        });
	        var iconCssClass = this.props.fabricIconKey ?
	            "ms-Icon ms-Icon--" + this.props.fabricIconKey : (this.props.iconClassName || '');
	        var isTouchDevice = Utilities_1.default.isTouchEnabled();
	        var onClick = isTouchDevice ? undefined : this.props.onClick;
	        var onMouseDown = isTouchDevice ? this.props.onClick : undefined;
	        return (React.createElement("button", { type: 'button', "aria-disabled": this.props.disabled ? true : undefined, "aria-pressed": this.props.canBeActive ? this.props.isActive : undefined, className: buttonClassName, onClick: onClick, onMouseDown: onMouseDown, title: this.props.title, tabIndex: this.props.tabIndex, "data-automation-id": this.props.automationId, onKeyDown: this.props.onKeyDown ? this.props.onKeyDown : undefined, onBlur: this.props.onBlur },
	            React.createElement("i", { className: iconCssClass }),
	            this.props.label));
	    };
	    return ToolbarButton;
	}(React.Component));
	ToolbarButton.defaultProps = {
	    key: undefined,
	    fabricIconKey: undefined,
	    onClick: undefined,
	    canBeActive: true,
	    className: 'CanvasControlToolbar-item',
	    disabled: false,
	    isActive: false
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ToolbarButton;


/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(160);


/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	var content = __webpack_require__(161);
	var loader = __webpack_require__(124);
	
	if(typeof content === "string") content = [[module.id, content]];
	
	// add the styles to the DOM
	for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
	
	if(content.locals) module.exports = content.locals;

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(123)();
	// imports
	
	
	// module
	exports.push([module.id, ".ToolbarButton{background-color:\"[theme:neutralPrimary, default: #333333]\";border:1px solid transparent;height:34px;overflow:hidden;padding:0 8px;position:relative;text-align:center;top:0;-webkit-transition:all .3s;transition:all .3s;-webkit-transition-property:background-color,color;transition-property:background-color,color;min-width:34px;color:\"[theme:neutralLighterAlt, default: #f8f8f8]\";font-family:\"Segoe UI Regular WestEuropean\",\"Segoe UI\",\"Segoe WP\",Tahoma,Arial,sans-serif;font-size:14px}.ToolbarButton .ms-Icon{font-size:16px;line-height:1.2}.ToolbarButton:hover{background-color:\"[theme:neutralSecondaryAlt, default: #767676]\";cursor:pointer}.ToolbarButton.ToolbarButton--active{background-color:\"[theme:themeSecondary, default:#2b88d8]\"}.ToolbarButton.ToolbarButton--active+.ToolbarButton--divider::after,.ToolbarButton.ToolbarButton--active.ToolbarButton--divider::after{border:\"[theme:themeSecondary, default:#2b88d8]\"}.ToolbarButton:active{background-color:\"[theme:themeDarkAlt, default:#106ebe]\"}.ToolbarButton.ToolbarButton--disabled,.ToolbarButton.ToolbarButton--disabled:hover{background-color:\"[theme:neutralPrimary, default: #333333]\";color:\"[theme:neutralSecondary, default: #666666]\"}.ToolbarButton.ToolbarButton--disabled .ms-Icon,.ToolbarButton.ToolbarButton--disabled:hover .ms-Icon{color:\"[theme:neutralSecondary, default: #666666]\"}.ToolbarButton:focus{border:1px solid \"[theme:neutralTertiary, default: #a6a6a6]\";outline:0}.ToolbarButton.ToolbarButton--divider::after{content:'';position:absolute;height:20px;left:0;top:6px;border-left:1px solid \"[theme:neutralSecondary, default: #666666]\"}.ToolbarButton--h2{font-size:21px;font-family:\"Segoe UI Light WestEuropean\",\"Segoe UI Light\",\"Segoe WP Light\",\"Segoe UI\",\"Segoe WP\",Tahoma,Arial,sans-serif}.ToolbarButton--blockquote{font-style:italic}", ""]);
	
	// exports


/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var odsp_utilities_bundle_1 = __webpack_require__(33);
	var Utilities = (function () {
	    function Utilities() {
	    }
	    Utilities.isTouchEnabled = function () {
	        var platform = new odsp_utilities_bundle_1.PlatformDetection();
	        return platform.isAndroid || platform.isIOS;
	    };
	    return Utilities;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Utilities;


/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var React = __webpack_require__(24);
	var office_ui_fabric_react_1 = __webpack_require__(27);
	var ToolbarButton_1 = __webpack_require__(158);
	var CanvasA11y_1 = __webpack_require__(164);
	var office_ui_fabric_react_2 = __webpack_require__(27);
	__webpack_require__(165);
	var DISPLAYBUTTON = 'displayButton';
	var ToolbarSubmenu = (function (_super) {
	    __extends(ToolbarSubmenu, _super);
	    function ToolbarSubmenu(props) {
	        var _this = _super.call(this, props) || this;
	        _this._hasExplicitActiveButton = false;
	        _this.state = {
	            isOpen: props.isOpen
	        };
	        return _this;
	    }
	    ToolbarSubmenu.prototype.componentDidMount = function () {
	        document.addEventListener('click', this._handleDocumentClick);
	    };
	    ToolbarSubmenu.prototype.componentDidUpdate = function (prevProps, prevState) {
	        if (this._isKeyboardNav && !this.state.isOpen && this._focusElement) {
	            this._focusElement.focus();
	            this._focusElement = undefined;
	            this._isKeyboardNav = false;
	        }
	        if (this._isKeyboardNav && this.state.isOpen && this._menuElement) {
	            CanvasA11y_1.navigateInside(this._menuElement);
	            this._isKeyboardNav = false;
	        }
	    };
	    ToolbarSubmenu.prototype.componentWillReceiveProps = function (nextProps) {
	        if (this.props.isOpen !== nextProps.isOpen) {
	            this.setState({ isOpen: nextProps.isOpen });
	        }
	    };
	    ToolbarSubmenu.prototype.componentWillUnmount = function () {
	        document.removeEventListener('click', this._handleDocumentClick);
	    };
	    ToolbarSubmenu.prototype.render = function () {
	        var openedCssClass = this.state.isOpen ? 'is-open' : '';
	        var wideCssClass = this.props.isWide ? 'ToolbarSubmenu--wide' : '';
	        var activeButton = this._getActiveButton();
	        this._bindButtonClickHandlers();
	        var buttonElements = [];
	        for (var _i = 0, _a = this.props.buttons; _i < _a.length; _i++) {
	            var buttonProps = _a[_i];
	            buttonProps.tabIndex = this.state.isOpen ? 0 : -1;
	            if (buttonProps === activeButton) {
	                buttonProps.isActive = true;
	            }
	            buttonElements.push(React.createElement(ToolbarButton_1.default, __assign({}, buttonProps)));
	        }
	        return (React.createElement("div", { className: "ToolbarSubmenu " + openedCssClass + " " + wideCssClass },
	            React.createElement(ToolbarButton_1.default, { className: 'ToolbarSubmenu-displayButton', fabricIconKey: activeButton.fabricIconKey, iconClassName: activeButton.iconClassName, key: 'displayButton', onClick: this._handleClickOnDisplayButton, label: activeButton.label, tabIndex: this.state.isOpen ? -1 : 0, title: activeButton.title, onKeyDown: this._handleSubmenuItemsKeyDown, automationId: DISPLAYBUTTON, onBlur: this.props.onBlur }),
	            React.createElement("i", { className: 'ms-Icon ms-Icon--CaretDownSolid8 ToolbarSubmenu-caret' }),
	            React.createElement(office_ui_fabric_react_1.FocusZone, { isCircularNavigation: true },
	                React.createElement("div", { role: 'presentation', className: 'ToolbarSubmenu-menuItems', ref: this._resolveRef('_menuElement'), onKeyDown: this._handleSubmenuKeyDown, "data-automation-id": 'subMenuContainer' }, buttonElements))));
	    };
	    ToolbarSubmenu.prototype._bindButtonClickHandlers = function () {
	        for (var _i = 0, _a = this.props.buttons; _i < _a.length; _i++) {
	            var buttonProps = _a[_i];
	            buttonProps.onClick = this._handleOnButtonClick.bind(this, buttonProps.onClick);
	        }
	    };
	    ToolbarSubmenu.prototype._getActiveButton = function () {
	        this._hasExplicitActiveButton = false;
	        for (var _i = 0, _a = this.props.buttons; _i < _a.length; _i++) {
	            var button = _a[_i];
	            if (button.isActive) {
	                this._hasExplicitActiveButton = true;
	                return button;
	            }
	        }
	        return this.props.buttons[0];
	    };
	    ToolbarSubmenu.prototype._handleSubmenuKeyDown = function (e) {
	        if (this.state.isOpen &&
	            (e.key === 'ArrowRight' || e.key === 'ArrowLeft')) {
	            this._isKeyboardNav = true;
	            this._handleCloseSubmenu();
	        }
	    };
	    ToolbarSubmenu.prototype._handleSubmenuItemsKeyDown = function (e) {
	        if (e.key === 'ArrowDown') {
	            this._isKeyboardNav = true;
	            this._handleOpenSubmenu();
	        }
	    };
	    ToolbarSubmenu.prototype._handleClickOnDisplayButton = function () {
	        if (this.state.isOpen) {
	            this._handleCloseSubmenu();
	        }
	        else {
	            this._handleOpenSubmenu();
	        }
	    };
	    ToolbarSubmenu.prototype._handleOpenSubmenu = function () {
	        this._focusElement = document.activeElement;
	        this.props.onOpen();
	        this.setState({ isOpen: true });
	    };
	    ToolbarSubmenu.prototype._handleCloseSubmenu = function (isDocumentClick) {
	        this.setState({ isOpen: false });
	        this.props.onClose(isDocumentClick);
	    };
	    ToolbarSubmenu.prototype._handleOnButtonClick = function (onClickCallback) {
	        onClickCallback();
	        this._handleCloseSubmenu();
	    };
	    ToolbarSubmenu.prototype._handleDocumentClick = function (evt) {
	        var currentTarget = evt.target;
	        if (this.state.isOpen &&
	            currentTarget.getAttribute('data-automation-id') !== DISPLAYBUTTON &&
	            currentTarget.parentElement &&
	            currentTarget.parentElement.getAttribute('data-automation-id') !== DISPLAYBUTTON) {
	            this._handleCloseSubmenu(true);
	        }
	    };
	    return ToolbarSubmenu;
	}(office_ui_fabric_react_2.BaseComponent));
	__decorate([
	    office_ui_fabric_react_2.autobind
	], ToolbarSubmenu.prototype, "_bindButtonClickHandlers", null);
	__decorate([
	    office_ui_fabric_react_2.autobind
	], ToolbarSubmenu.prototype, "_handleSubmenuKeyDown", null);
	__decorate([
	    office_ui_fabric_react_2.autobind
	], ToolbarSubmenu.prototype, "_handleSubmenuItemsKeyDown", null);
	__decorate([
	    office_ui_fabric_react_2.autobind
	], ToolbarSubmenu.prototype, "_handleClickOnDisplayButton", null);
	__decorate([
	    office_ui_fabric_react_2.autobind
	], ToolbarSubmenu.prototype, "_handleOpenSubmenu", null);
	__decorate([
	    office_ui_fabric_react_2.autobind
	], ToolbarSubmenu.prototype, "_handleCloseSubmenu", null);
	__decorate([
	    office_ui_fabric_react_2.autobind
	], ToolbarSubmenu.prototype, "_handleOnButtonClick", null);
	__decorate([
	    office_ui_fabric_react_2.autobind
	], ToolbarSubmenu.prototype, "_handleDocumentClick", null);
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ToolbarSubmenu;


/***/ },
/* 164 */
/***/ function(module, exports) {

	"use strict";
	var KeyCodes;
	(function (KeyCodes) {
	    KeyCodes[KeyCodes["Enter"] = 13] = "Enter";
	    KeyCodes[KeyCodes["Escape"] = 27] = "Escape";
	    KeyCodes[KeyCodes["Tab"] = 9] = "Tab";
	    KeyCodes[KeyCodes["F10"] = 121] = "F10";
	    KeyCodes[KeyCodes["P"] = 80] = "P";
	})(KeyCodes = exports.KeyCodes || (exports.KeyCodes = {}));
	function isEscape(e) {
	    return isKey(KeyCodes.Escape, e);
	}
	exports.isEscape = isEscape;
	function isEnter(e) {
	    return isKey(KeyCodes.Enter, e);
	}
	exports.isEnter = isEnter;
	function isShiftTab(e) {
	    return isKey(KeyCodes.Tab, e, false, false, true);
	}
	exports.isShiftTab = isShiftTab;
	function isTab(e) {
	    return isKey(KeyCodes.Tab, e);
	}
	exports.isTab = isTab;
	function isKey(keyCode, e, allowAlt, allowCtrl, allowShift) {
	    if (allowAlt === void 0) { allowAlt = false; }
	    if (allowCtrl === void 0) { allowCtrl = false; }
	    if (allowShift === void 0) { allowShift = false; }
	    return e.keyCode === keyCode &&
	        ((allowAlt && e.altKey) || (!allowAlt && !e.altKey)) &&
	        ((allowCtrl && e.ctrlKey) || (!allowCtrl && !e.ctrlKey)) &&
	        ((allowShift && e.shiftKey) || (!allowShift && !e.shiftKey));
	}
	exports.isKey = isKey;
	function getFocusableChildren(elem, ignoreTabIndex) {
	    if (ignoreTabIndex === void 0) { ignoreTabIndex = false; }
	    var children = [];
	    for (var _i = 0, _a = getFocusableDescendants(elem, ignoreTabIndex); _i < _a.length; _i++) {
	        var descendant = _a[_i];
	        if (isElementFocusableChildOf(descendant, elem)) {
	            children.push(descendant);
	        }
	    }
	    return children;
	}
	exports.getFocusableChildren = getFocusableChildren;
	function isElementFocusable(elem, ignoreTabIndex) {
	    if (ignoreTabIndex === void 0) { ignoreTabIndex = false; }
	    var tagName = elem.tagName.toLowerCase();
	    if (elem
	        && !elem.hidden
	        && elem.offsetParent
	        && window.getComputedStyle(elem).display !== 'none'
	        && window.getComputedStyle(elem).visibility !== 'hidden') {
	        var hasTabIndex = elem.hasAttribute('tabindex');
	        var tabindex = parseInt(elem.getAttribute('tabindex'), 10);
	        if (!ignoreTabIndex && hasTabIndex && tabindex < 0) {
	            return false;
	        }
	        if (tagName === 'a' && !!elem.href ||
	            elem.isContentEditable) {
	            return true;
	        }
	        if ((tagName === 'button' ||
	            tagName === 'input' ||
	            tagName === 'select' ||
	            tagName === 'textarea') && !elem.disabled) {
	            return true;
	        }
	        if (ignoreTabIndex && elem.getAttribute('data-is-focusable') === 'true') {
	            return true;
	        }
	        if (!ignoreTabIndex && hasTabIndex && tabindex > -1) {
	            return true;
	        }
	    }
	    return false;
	}
	exports.isElementFocusable = isElementFocusable;
	function getFocusableParent(elem, topElement) {
	    if (topElement === void 0) { topElement = document.body; }
	    var parent = elem;
	    do {
	        parent = parent.parentElement;
	    } while (!isElementFocusable(parent) && parent !== topElement);
	    return parent;
	}
	exports.getFocusableParent = getFocusableParent;
	function queryFocusableSelector(elem) {
	    var selector = 'button,input,textarea,select,a[href]:not([href=\'\']),\
	      [tabindex],[contenteditable=\'true\'], [data-is-focusable=\'true\']';
	    return elem.querySelectorAll(selector);
	}
	function getFirstFocusableChild(elem, ignoreTabIndex) {
	    if (ignoreTabIndex === void 0) { ignoreTabIndex = false; }
	    var nodes = queryFocusableSelector(elem);
	    for (var i = 0; i < nodes.length; i++) {
	        var node = nodes[i];
	        if (isElementFocusable(node, ignoreTabIndex)) {
	            return node;
	        }
	    }
	    return undefined;
	}
	exports.getFirstFocusableChild = getFirstFocusableChild;
	function getFocusableDescendants(elem, ignoreTabIndex) {
	    if (ignoreTabIndex === void 0) { ignoreTabIndex = false; }
	    var descendants = [];
	    var nodes = queryFocusableSelector(elem);
	    for (var i = 0; i < nodes.length; i++) {
	        var node = nodes[i];
	        if (isElementFocusable(node, ignoreTabIndex)) {
	            descendants.push(node);
	        }
	    }
	    return descendants;
	}
	exports.getFocusableDescendants = getFocusableDescendants;
	function getFocusableSiblings(elem, topElement) {
	    if (topElement === void 0) { topElement = document.body; }
	    var children = getFocusableChildren(getFocusableParent(elem, topElement));
	    var siblings = [];
	    var insertPointer = 0;
	    for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {
	        var child = children_1[_i];
	        if (child !== elem) {
	            siblings.splice(insertPointer++, 0, child);
	        }
	        else {
	            insertPointer = 0;
	        }
	    }
	    return siblings;
	}
	exports.getFocusableSiblings = getFocusableSiblings;
	function getNextFocusableElement(elem, topElement) {
	    if (topElement === void 0) { topElement = document.body; }
	    var siblings = getFocusableSiblings(elem, topElement);
	    return siblings[0];
	}
	exports.getNextFocusableElement = getNextFocusableElement;
	function getPrevFocusableElement(elem, topElement) {
	    if (topElement === void 0) { topElement = document.body; }
	    var siblings = getFocusableSiblings(elem, topElement);
	    return siblings[siblings.length - 1];
	}
	exports.getPrevFocusableElement = getPrevFocusableElement;
	function isElementFocusableChildOf(elem, ancestor) {
	    var parent = elem.parentElement;
	    while (parent.tagName !== 'BODY') {
	        if (parent === ancestor) {
	            return true;
	        }
	        if (isElementFocusable(parent)) {
	            break;
	        }
	        parent = parent.parentElement;
	    }
	    return false;
	}
	exports.isElementFocusableChildOf = isElementFocusableChildOf;
	function navigateInside(elem) {
	    var children = getFocusableChildren(elem);
	    if (children.length) {
	        children[0].focus();
	        return true;
	    }
	    else {
	        return false;
	    }
	}
	exports.navigateInside = navigateInside;
	function navigateTo(elem) {
	    if (isElementFocusable(elem)) {
	        elem.focus();
	        return true;
	    }
	    else {
	        return navigateInside(elem);
	    }
	}
	exports.navigateTo = navigateTo;
	function navigateOutOf(elem, topElement) {
	    if (topElement === void 0) { topElement = document.body; }
	    topElement = topElement || document.body;
	    getFocusableParent(elem, topElement).focus();
	}
	exports.navigateOutOf = navigateOutOf;
	var CanvasA11yManager = (function () {
	    function CanvasA11yManager(canvasElement, shouldHandleKeyDown) {
	        if (shouldHandleKeyDown === void 0) { shouldHandleKeyDown = true; }
	        this._canvasElement = canvasElement;
	        this._handleKeyDown = this._handleKeyDown.bind(this);
	        this._randId = Math.floor(Math.random() * 1000000);
	        if (shouldHandleKeyDown) {
	            this._canvasElement.addEventListener('keydown', this._handleKeyDown);
	        }
	    }
	    CanvasA11yManager.prototype.ariaAlert = function (message) {
	        var divId = 'aria_alert_' + this._randId;
	        var oldAlert = document.querySelector('#' + divId);
	        if (oldAlert) {
	            document.body.removeChild(oldAlert);
	        }
	        var alertNode = document.createElement('p');
	        alertNode.classList.add('Canvas-screenReaderOnly');
	        alertNode.setAttribute('role', 'alert');
	        alertNode.setAttribute('id', divId);
	        var alertText = document.createTextNode(message);
	        alertNode.appendChild(alertText);
	        document.body.appendChild(alertNode);
	    };
	    CanvasA11yManager.prototype.navigateInside = function (elem) {
	        return navigateInside(elem);
	    };
	    CanvasA11yManager.prototype.navigateTo = function (elem) {
	        return navigateTo(elem);
	    };
	    CanvasA11yManager.prototype.navigateOutOf = function (elem) {
	        navigateOutOf(elem);
	    };
	    CanvasA11yManager.prototype.clearState = function () {
	        this._savedFocusedElement = undefined;
	    };
	    CanvasA11yManager.prototype.restoreState = function () {
	        return this.navigateTo(this._savedFocusedElement);
	    };
	    CanvasA11yManager.prototype.saveState = function (elem) {
	        elem = elem || document.activeElement;
	        this._savedFocusedElement = elem;
	    };
	    CanvasA11yManager.prototype.skipEvent = function (e) {
	        e[CanvasA11yManager._SKIP_FLAG] = true;
	    };
	    CanvasA11yManager.prototype._shouldSkipEvent = function (e) {
	        return e[CanvasA11yManager._SKIP_FLAG];
	    };
	    CanvasA11yManager.prototype._handleKeyDown = function (e) {
	        if (this._shouldSkipEvent(e)) {
	            return;
	        }
	        var currentElement = isElementFocusable(e.target) ?
	            e.target : getFocusableParent(e.target, this._canvasElement);
	        var elementToGo;
	        if (isTab(e)) {
	            var children = getFocusableChildren(this._canvasElement);
	            if (children.length && currentElement !== children[children.length - 1]) {
	                elementToGo = getNextFocusableElement(currentElement, this._canvasElement);
	            }
	        }
	        else if (isShiftTab(e)) {
	            var children = getFocusableChildren(this._canvasElement);
	            if (children.length && currentElement !== children[0]) {
	                elementToGo = getPrevFocusableElement(currentElement, this._canvasElement);
	            }
	        }
	        else if (isEnter(e)) {
	            var children = getFocusableChildren(currentElement);
	            elementToGo = children.length ? children[0] : undefined;
	        }
	        else if (isEscape(e)) {
	            elementToGo = getFocusableParent(currentElement, this._canvasElement);
	        }
	        if (elementToGo) {
	            elementToGo.focus();
	            e.preventDefault();
	            e.stopPropagation();
	        }
	    };
	    return CanvasA11yManager;
	}());
	CanvasA11yManager._SKIP_FLAG = 'a11y-skip';
	exports.CanvasA11yManager = CanvasA11yManager;


/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(166);


/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	var content = __webpack_require__(167);
	var loader = __webpack_require__(124);
	
	if(typeof content === "string") content = [[module.id, content]];
	
	// add the styles to the DOM
	for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
	
	if(content.locals) module.exports = content.locals;

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(123)();
	// imports
	
	
	// module
	exports.push([module.id, ".ToolbarSubmenu{width:44px;position:relative}.ToolbarSubmenu .ToolbarButton{width:44px}.ToolbarSubmenu-displayButton{padding-right:20px}.ToolbarSubmenu-caret{color:\"[theme:neutralLighterAlt, default: #f8f8f8]\";font-size:8px;pointer-events:none;position:absolute;right:4px;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%);z-index:1}.ToolbarSubmenu-menuItems{display:none;position:absolute;top:34px}.ToolbarSubmenu-menuItems .ToolbarButton{padding-right:20px}.ToolbarSubmenu--wide{width:160px!important}.ToolbarSubmenu--wide .ToolbarButton{width:100%;text-align:left}.ToolbarSubmenu.is-open .ToolbarSubmenu-menuItems{display:block}", ""]);
	
	// exports


/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(169);


/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	var content = __webpack_require__(170);
	var loader = __webpack_require__(124);
	
	if(typeof content === "string") content = [[module.id, content]];
	
	// add the styles to the DOM
	for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
	
	if(content.locals) module.exports = content.locals;

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(123)();
	// imports
	
	
	// module
	exports.push([module.id, ".cke_editable,.ql-editor{cursor:text;margin:0;padding:0;min-height:100%;margin-bottom:-16px}.cke_editable:focus,.ql-editor:focus{outline:0}.cke_editable:focus,.ql-editor:focus{outline:0}.ql-paste-manager{position:absolute;text-indent:-9999px;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;border:0}.ql-editor.ql-ie-10 br,.ql-editor.ql-ie-9 br{display:none}.cke_editable blockquote,.cke_editable div,.cke_editable h2,.cke_editable h3,.cke_editable h4,.cke_editable ol,.cke_editable p,.cke_editable ul,.cke_editable.ql-blank::before,.ql-editor blockquote,.ql-editor div,.ql-editor h2,.ql-editor h3,.ql-editor h4,.ql-editor ol,.ql-editor p,.ql-editor ul,.ql-editor.ql-blank::before{-webkit-font-smoothing:antialiased;color:\"[theme:neutralPrimary, default: #333333]\";line-height:1.5;margin:0 0 16px 0;padding:0;word-wrap:break-word}.cke_editable.ql-blank::before,.ql-editor.ql-blank::before{color:\"[theme:neutralTertiary, default: #a6a6a6]\"!important;content:attr(data-placeholder);font-size:16px;font-family:\"Segoe UI Regular WestEuropean\",\"Segoe UI\",\"Segoe WP\",Tahoma,Arial,sans-serif;font-style:normal;position:absolute;pointer-events:none}.cke_editable div,.cke_editable p,.ql-editor div,.ql-editor p{font-size:16px;font-family:\"Segoe UI Regular WestEuropean\",\"Segoe UI\",\"Segoe WP\",Tahoma,Arial,sans-serif}.cke_editable h2,.cke_editable h3,.cke_editable h4,.ql-editor h2,.ql-editor h3,.ql-editor h4{font-weight:400;font-family:\"Segoe UI Light WestEuropean\",\"Segoe UI Light\",\"Segoe WP Light\",\"Segoe UI\",\"Segoe WP\",Tahoma,Arial,sans-serif!important}.cke_editable h2,.ql-editor h2{font-size:24px}.cke_editable h3,.ql-editor h3{font-size:20px}.cke_editable h4,.ql-editor h4{font-size:18px;font-family:\"Segoe UI Semilight WestEuropean\",\"Segoe UI Semilight\",\"Segoe WP Semilight\",\"Segoe UI\",\"Segoe WP\",Tahoma,Arial,sans-serif}.cke_editable ol,.cke_editable ul,.ql-editor ol,.ql-editor ul{font-size:16px;font-family:\"Segoe UI Regular WestEuropean\",\"Segoe UI\",\"Segoe WP\",Tahoma,Arial,sans-serif;padding:0}.cke_editable ol li,.cke_editable ul li,.ql-editor ol li,.ql-editor ul li{margin-bottom:8px}.cke_editable ol,.ql-editor ol{list-style-type:decimal}.cke_editable ul,.ql-editor ul{list-style-type:disc}.cke_editable blockquote,.cke_editable div.quote-true,.ql-editor blockquote,.ql-editor div.quote-true{border-bottom:1px solid \"[theme:neutralTertiaryAlt, default: #c8c8c8]\";border-top:1px solid \"[theme:neutralTertiaryAlt, default: #c8c8c8]\";border-bottom-color:\"[theme:neutralTertiaryAlt, default: #c8c8c8]\";border-top-color:\"[theme:neutralTertiaryAlt, default: #c8c8c8]\";border-left:none;border-right:none;font-family:\"Segoe UI Light WestEuropean\",\"Segoe UI Light\",\"Segoe WP Light\",\"Segoe UI\",\"Segoe WP\",Tahoma,Arial,sans-serif;font-size:20px;font-style:italic;margin:28px 0;padding:32px;text-align:center}.cke_editable a,.ql-editor a{text-decoration:underline}.cke_editable i,.ql-editor i{font-style:italic}.cke_editable u,.ql-editor u{text-decoration:underline}@media screen and (min-width:480px){.cke_editable h2,.ql-editor h2{font-size:28px}.cke_editable h3,.ql-editor h3{font-size:24px}.cke_editable h4,.ql-editor h4{font-size:20px}.cke_editable blockquote,.cke_editable div.quote-true,.ql-editor blockquote,.ql-editor div.quote-true{font-size:24px}}@media screen and (min-width:1024px){.cke_editable h2,.ql-editor h2{font-size:32px}.cke_editable h3,.ql-editor h3{font-size:30px}.cke_editable h4,.ql-editor h4{font-size:24px}.cke_editable div,.cke_editable p,.cke_editable.ql-blank::before,.ql-editor div,.ql-editor p,.ql-editor.ql-blank::before{font-size:18px;font-family:\"Segoe UI Semilight WestEuropean\",\"Segoe UI Semilight\",\"Segoe WP Semilight\",\"Segoe UI\",\"Segoe WP\",Tahoma,Arial,sans-serif;line-height:1.5}.cke_editable ol,.cke_editable ul,.ql-editor ol,.ql-editor ul{font-size:18px;font-family:\"Segoe UI Semilight WestEuropean\",\"Segoe UI Semilight\",\"Segoe WP Semilight\",\"Segoe UI\",\"Segoe WP\",Tahoma,Arial,sans-serif;line-height:1.5}.cke_editable td,.cke_editable td p,.cke_editable th,.cke_editable th p,.ql-editor td,.ql-editor td p,.ql-editor th,.ql-editor th p{font-size:14px;font-family:\"Segoe UI Regular WestEuropean\",\"Segoe UI\",\"Segoe WP\",Tahoma,Arial,sans-serif}}", ""]);
	
	// exports


/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var RteStrings_resx_1 = __webpack_require__(137);
	var SPRteQuillConfiguration = (function () {
	    function SPRteQuillConfiguration() {
	        this._supportedFormatsArray = [
	            {
	                key: 'bold',
	                editorKey: 'bold',
	                browserKey: 'bold',
	                isBlockStyle: false,
	                isLine: false,
	                isEditorNative: true,
	                button: {
	                    canBeActive: true,
	                    fabricIconKey: 'Bold',
	                    shortcut: 'Ctrl+B',
	                    title: RteStrings_resx_1.default.FormattingBarBoldButtonTitle
	                }
	            },
	            {
	                key: 'italic',
	                editorKey: 'italic',
	                browserKey: 'italic',
	                isBlockStyle: false,
	                isLine: false,
	                isEditorNative: true,
	                button: {
	                    canBeActive: true,
	                    fabricIconKey: 'Italic',
	                    shortcut: 'Ctrl+I',
	                    title: RteStrings_resx_1.default.FormattingBarItalicButtonTitle
	                }
	            },
	            {
	                key: 'underline',
	                editorKey: 'underline',
	                browserKey: 'underline',
	                isBlockStyle: false,
	                isLine: false,
	                isEditorNative: true,
	                button: {
	                    canBeActive: true,
	                    fabricIconKey: 'Underline',
	                    shortcut: 'Ctrl+U',
	                    title: RteStrings_resx_1.default.FormattingBarUnderlineButtonTitle
	                }
	            },
	            {
	                key: 'link',
	                editorKey: 'link',
	                isBlockStyle: false,
	                isLine: false,
	                isEditorNative: true,
	                masks: ['underline'],
	                button: {
	                    canBeActive: true,
	                    fabricIconKey: 'Link',
	                    shortcut: 'Ctrl+K',
	                    title: RteStrings_resx_1.default.FormattingBarLinkButtonTitle
	                }
	            },
	            {
	                key: 'alignLeft',
	                editorKey: 'align',
	                editorValue: false,
	                browserKey: 'justifyLeft',
	                isBlockStyle: false,
	                isLine: true,
	                isEditorNative: true,
	                button: {
	                    canBeActive: true,
	                    fabricIconKey: 'AlignLeft',
	                    title: RteStrings_resx_1.default.FormattingBarAlignLeftButtonTitle
	                }
	            },
	            {
	                browserKey: 'justifyCenter',
	                key: 'alignCenter',
	                editorKey: 'align',
	                editorValue: 'center',
	                isBlockStyle: false,
	                isLine: true,
	                isEditorNative: true,
	                button: {
	                    canBeActive: true,
	                    fabricIconKey: 'AlignCenter',
	                    title: RteStrings_resx_1.default.FormattingBarAlignCenterButtonTitle
	                }
	            },
	            {
	                key: 'alignRight',
	                editorKey: 'align',
	                editorValue: 'right',
	                browserKey: 'justifyRight',
	                isBlockStyle: false,
	                isLine: true,
	                isEditorNative: true,
	                button: {
	                    canBeActive: true,
	                    fabricIconKey: 'AlignRight',
	                    title: RteStrings_resx_1.default.FormattingBarAlignRightButtonTitle
	                }
	            },
	            {
	                key: 'bullet',
	                editorKey: 'list',
	                editorValue: 'bullet',
	                browserKey: 'insertUnorderedList',
	                isBlockStyle: true,
	                isLine: true,
	                isEditorNative: true,
	                button: {
	                    canBeActive: true,
	                    fabricIconKey: 'BulletedList',
	                    title: RteStrings_resx_1.default.FormattingBarBulletListButtonTitle
	                }
	            },
	            {
	                key: 'list',
	                editorKey: 'list',
	                editorValue: 'ordered',
	                browserKey: 'insertOrderedList',
	                isBlockStyle: true,
	                isLine: true,
	                isEditorNative: true,
	                button: {
	                    canBeActive: true,
	                    fabricIconKey: 'NumberedList',
	                    title: RteStrings_resx_1.default.FormattingBarNumberedListButtonTitle
	                }
	            },
	            {
	                key: 'h2',
	                editorKey: 'header',
	                editorValue: 2,
	                isBlockStyle: true,
	                isLine: true,
	                isEditorNative: true,
	                button: {
	                    canBeActive: true,
	                    title: RteStrings_resx_1.default.FormattingBarHeading2ButtonTitle,
	                    label: RteStrings_resx_1.default.FormattingBarHeading2ButtonTitle,
	                    className: 'ToolbarButton--h2'
	                }
	            },
	            {
	                key: 'h3',
	                editorKey: 'header',
	                editorValue: 3,
	                isBlockStyle: true,
	                isLine: true,
	                isEditorNative: false,
	                button: {
	                    canBeActive: true,
	                    title: RteStrings_resx_1.default.FormattingBarHeading3ButtonTitle,
	                    label: RteStrings_resx_1.default.FormattingBarHeading3ButtonTitle,
	                    className: 'ToolbarButton--h3'
	                }
	            },
	            {
	                key: 'h4',
	                editorKey: 'header',
	                editorValue: 4,
	                isBlockStyle: true,
	                isLine: true,
	                isEditorNative: false,
	                button: {
	                    canBeActive: true,
	                    title: RteStrings_resx_1.default.FormattingBarHeading4ButtonTitle,
	                    label: RteStrings_resx_1.default.FormattingBarHeading4ButtonTitle,
	                    className: 'ToolbarButton--h4'
	                }
	            },
	            {
	                key: 'blockquote',
	                editorKey: 'blockquote',
	                isBlockStyle: true,
	                isLine: true,
	                isEditorNative: true,
	                button: {
	                    canBeActive: true,
	                    title: RteStrings_resx_1.default.FormattingBarQuoteButtonTitle,
	                    label: RteStrings_resx_1.default.FormattingBarQuoteButtonTitle,
	                    className: 'ToolbarButton--blockquote'
	                }
	            },
	            {
	                key: 'indent',
	                editorKey: 'indent',
	                isBlockStyle: false,
	                isLine: true,
	                isEditorNative: true
	            }
	        ];
	        this._formats = new Map();
	        for (var _i = 0, _a = this._supportedFormatsArray; _i < _a.length; _i++) {
	            var format = _a[_i];
	            this._formats.set(format.key, format);
	        }
	        var maskingFormats = this._supportedFormatsArray.filter(function (format) { return !!format.masks; });
	        for (var _b = 0, maskingFormats_1 = maskingFormats; _b < maskingFormats_1.length; _b++) {
	            var maskingFormat = maskingFormats_1[_b];
	            for (var _c = 0, _d = maskingFormat.masks; _c < _d.length; _c++) {
	                var maskedFormatKey = _d[_c];
	                var maskedFormat = this._formats.get(maskedFormatKey);
	                if (!maskedFormat.maskedBy) {
	                    maskedFormat.maskedBy = [maskingFormat.key];
	                }
	                else {
	                    maskedFormat.maskedBy.push(maskingFormat.key);
	                }
	            }
	        }
	    }
	    Object.defineProperty(SPRteQuillConfiguration.prototype, "editorElementClassName", {
	        get: function () {
	            return 'ql-editor';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SPRteQuillConfiguration.prototype, "formats", {
	        get: function () {
	            return this._formats;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SPRteQuillConfiguration.prototype, "supportedFormatsArray", {
	        get: function () {
	            return this._supportedFormatsArray;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return SPRteQuillConfiguration;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SPRteQuillConfiguration;


/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var RteStrings_resx_1 = __webpack_require__(137);
	var SPRteCKEditorConfiguration = (function () {
	    function SPRteCKEditorConfiguration() {
	        this._supportedFormatsArray = [
	            {
	                key: 'bold',
	                editorKey: 'bold',
	                browserKey: 'bold',
	                isBlockStyle: false,
	                isLine: false,
	                isEditorNative: true,
	                button: {
	                    canBeActive: true,
	                    fabricIconKey: 'Bold',
	                    shortcut: 'Ctrl+B',
	                    title: RteStrings_resx_1.default.FormattingBarBoldButtonTitle
	                }
	            },
	            {
	                key: 'italic',
	                editorKey: 'italic',
	                browserKey: 'italic',
	                isBlockStyle: false,
	                isLine: false,
	                isEditorNative: true,
	                button: {
	                    canBeActive: true,
	                    fabricIconKey: 'Italic',
	                    shortcut: 'Ctrl+I',
	                    title: RteStrings_resx_1.default.FormattingBarItalicButtonTitle
	                }
	            },
	            {
	                key: 'underline',
	                editorKey: 'underline',
	                browserKey: 'underline',
	                isBlockStyle: false,
	                isLine: false,
	                isEditorNative: true,
	                button: {
	                    canBeActive: true,
	                    fabricIconKey: 'Underline',
	                    shortcut: 'Ctrl+U',
	                    title: RteStrings_resx_1.default.FormattingBarUnderlineButtonTitle
	                }
	            },
	            {
	                key: 'link',
	                editorKey: 'link',
	                isBlockStyle: false,
	                isLine: false,
	                isEditorNative: true,
	                masks: ['underline'],
	                button: {
	                    canBeActive: true,
	                    fabricIconKey: 'Link',
	                    shortcut: 'Ctrl+K',
	                    title: RteStrings_resx_1.default.FormattingBarLinkButtonTitle
	                }
	            },
	            {
	                key: 'alignLeft',
	                editorKey: 'justifyleft',
	                browserKey: 'justifyLeft',
	                isBlockStyle: false,
	                isLine: true,
	                isEditorNative: true,
	                button: {
	                    canBeActive: true,
	                    fabricIconKey: 'AlignLeft',
	                    title: RteStrings_resx_1.default.FormattingBarAlignLeftButtonTitle
	                }
	            },
	            {
	                key: 'alignCenter',
	                editorKey: 'justifycenter',
	                browserKey: 'justifyCenter',
	                isBlockStyle: false,
	                isLine: true,
	                isEditorNative: true,
	                button: {
	                    canBeActive: true,
	                    fabricIconKey: 'AlignCenter',
	                    title: RteStrings_resx_1.default.FormattingBarAlignCenterButtonTitle
	                }
	            },
	            {
	                key: 'alignRight',
	                editorKey: 'justifyright',
	                browserKey: 'justifyRight',
	                isBlockStyle: false,
	                isLine: true,
	                isEditorNative: true,
	                button: {
	                    canBeActive: true,
	                    fabricIconKey: 'AlignRight',
	                    title: RteStrings_resx_1.default.FormattingBarAlignRightButtonTitle
	                }
	            },
	            {
	                key: 'bullet',
	                editorKey: 'bulletedlist',
	                browserKey: 'insertUnorderedList',
	                isBlockStyle: true,
	                isLine: true,
	                isEditorNative: true,
	                button: {
	                    canBeActive: true,
	                    fabricIconKey: 'BulletedList',
	                    title: RteStrings_resx_1.default.FormattingBarBulletListButtonTitle
	                }
	            },
	            {
	                key: 'list',
	                editorKey: 'numberedlist',
	                browserKey: 'insertOrderedList',
	                isBlockStyle: true,
	                isLine: true,
	                isEditorNative: true,
	                button: {
	                    canBeActive: true,
	                    fabricIconKey: 'NumberedList',
	                    title: RteStrings_resx_1.default.FormattingBarNumberedListButtonTitle
	                }
	            },
	            {
	                key: 'h2',
	                editorKey: 'heading2',
	                isBlockStyle: true,
	                isLine: true,
	                isEditorNative: true,
	                button: {
	                    canBeActive: true,
	                    title: RteStrings_resx_1.default.FormattingBarHeading2ButtonTitle,
	                    label: RteStrings_resx_1.default.FormattingBarHeading2ButtonTitle,
	                    className: 'ToolbarButton--h2'
	                }
	            },
	            {
	                key: 'h3',
	                editorKey: 'heading3',
	                isBlockStyle: true,
	                isLine: true,
	                isEditorNative: false,
	                button: {
	                    canBeActive: true,
	                    title: RteStrings_resx_1.default.FormattingBarHeading3ButtonTitle,
	                    label: RteStrings_resx_1.default.FormattingBarHeading3ButtonTitle,
	                    className: 'ToolbarButton--h3'
	                }
	            },
	            {
	                key: 'h4',
	                editorKey: 'heading4',
	                isBlockStyle: true,
	                isLine: true,
	                isEditorNative: false,
	                button: {
	                    canBeActive: true,
	                    title: RteStrings_resx_1.default.FormattingBarHeading4ButtonTitle,
	                    label: RteStrings_resx_1.default.FormattingBarHeading4ButtonTitle,
	                    className: 'ToolbarButton--h4'
	                }
	            },
	            {
	                key: 'blockquote',
	                editorKey: 'blockquote',
	                isBlockStyle: true,
	                isLine: true,
	                isEditorNative: true,
	                button: {
	                    canBeActive: true,
	                    title: RteStrings_resx_1.default.FormattingBarQuoteButtonTitle,
	                    label: RteStrings_resx_1.default.FormattingBarQuoteButtonTitle,
	                    className: 'ToolbarButton--blockquote'
	                }
	            }
	        ];
	        this._formats = new Map();
	        for (var _i = 0, _a = this._supportedFormatsArray; _i < _a.length; _i++) {
	            var format = _a[_i];
	            this._formats.set(format.key, format);
	        }
	        var maskingFormats = this._supportedFormatsArray.filter(function (format) { return !!format.masks; });
	        for (var _b = 0, maskingFormats_1 = maskingFormats; _b < maskingFormats_1.length; _b++) {
	            var maskingFormat = maskingFormats_1[_b];
	            for (var _c = 0, _d = maskingFormat.masks; _c < _d.length; _c++) {
	                var maskedFormatKey = _d[_c];
	                var maskedFormat = this._formats.get(maskedFormatKey);
	                if (!maskedFormat.maskedBy) {
	                    maskedFormat.maskedBy = [maskingFormat.key];
	                }
	                else {
	                    maskedFormat.maskedBy.push(maskingFormat.key);
	                }
	            }
	        }
	    }
	    Object.defineProperty(SPRteCKEditorConfiguration.prototype, "editorElementClassName", {
	        get: function () {
	            return 'cke_editable';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SPRteCKEditorConfiguration.prototype, "formats", {
	        get: function () {
	            return this._formats;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SPRteCKEditorConfiguration.prototype, "supportedFormatsArray", {
	        get: function () {
	            return this._supportedFormatsArray;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return SPRteCKEditorConfiguration;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SPRteCKEditorConfiguration;


/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var SPRte_1 = __webpack_require__(30);
	var office_ui_fabric_react_1 = __webpack_require__(27);
	var SPRteTouchDevice = (function (_super) {
	    __extends(SPRteTouchDevice, _super);
	    function SPRteTouchDevice(props) {
	        return _super.call(this, props) || this;
	    }
	    SPRteTouchDevice._getFormattingBarDefaultPosition = function (isRtl) {
	        if (isRtl === void 0) { isRtl = false; }
	        var left = isRtl ? 254 : undefined;
	        var top = 198;
	        var position = 'fixed';
	        var right = undefined;
	        return { left: left, top: top, position: position, right: right };
	    };
	    SPRteTouchDevice.prototype.componentWillUnmount = function () {
	        _super.prototype.componentWillUnmount.call(this);
	    };
	    SPRteTouchDevice.prototype._afterEditorCreated = function (editor) {
	        _super.prototype._afterEditorCreated.call(this, editor);
	    };
	    SPRteTouchDevice.prototype._initState = function () {
	        this.state = {
	            displayMode: this.props.displayMode,
	            formattingBarPosition: SPRteTouchDevice._getFormattingBarDefaultPosition(this._isRtl),
	            isFormattingBarHidden: false,
	            isLinkDialogOpen: false
	        };
	    };
	    SPRteTouchDevice.prototype._getFormattingBarPosition = function () {
	        return SPRteTouchDevice._getFormattingBarDefaultPosition(this._isRtl);
	    };
	    SPRteTouchDevice.prototype._handleScroll = function () {
	    };
	    SPRteTouchDevice.prototype._handleSelectionChange = function (range, forceUpdate) {
	        if (range) {
	            this.setState({ currentSubmenuOpen: undefined });
	            if (this._restoreOnFocus()) {
	                this._updateFormattingBar(false);
	                return;
	            }
	        }
	        if (!range) {
	            return;
	        }
	        else {
	            this._updateSelection(range, forceUpdate);
	        }
	    };
	    return SPRteTouchDevice;
	}(SPRte_1.default));
	__decorate([
	    office_ui_fabric_react_1.autobind
	], SPRteTouchDevice.prototype, "_handleSelectionChange", null);
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SPRteTouchDevice;


/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var React = __webpack_require__(24);
	var sp_core_library_1 = __webpack_require__(12);
	var sp_webpart_base_1 = __webpack_require__(141);
	var CanvasA11y_1 = __webpack_require__(164);
	var WebPartZone = (function (_super) {
	    __extends(WebPartZone, _super);
	    function WebPartZone(props, context) {
	        var _this = _super.call(this, props, context) || this;
	        _this._webPartManager = _this.context.store.webPartManager;
	        _this.handleConfigureButtonClicked = _this.handleConfigureButtonClicked.bind(_this);
	        _this.state = {
	            displayMode: _this.props.displayMode
	        };
	        return _this;
	    }
	    WebPartZone.prototype.componentDidMount = function () {
	        var _this = this;
	        var context = {
	            domElement: this._webPartDiv,
	            instanceId: this.props.id,
	            manifest: this.props.webPartManifest,
	            displayMode: this.props.displayMode,
	            webPartData: this.props.webPartData,
	            addedFromPersistedData: this.props.addedFromPersistedData,
	            shouldAddWebpartsToEupl: false
	        };
	        var webPartTelemetryData = {
	            alias: context.manifest && context.manifest.alias,
	            manifestId: context.manifest && context.manifest.id
	        };
	        var store = this.context.store;
	        var qos = store.createQosScope('LoadWebPart');
	        this._loadWebPartPromise = this._webPartManager.loadWebPart(context).then(function () {
	            try {
	                if (_this.state.displayMode === sp_core_library_1.DisplayMode.Edit && _this.props.id === store.selectedControlId) {
	                    store.webPartManager.setPropertyPaneState(_this.props.id);
	                }
	                store.canvasRenderPerformance.webPartRendered(context);
	                _this._isLoaded = true;
	                qos.writeSuccess(webPartTelemetryData);
	            }
	            catch (err) {
	                qos.writeUnexpectedFailure('Exception', err, webPartTelemetryData);
	            }
	        }, function (error) {
	            if (window['_isTransitioning']) {
	                qos.writeExpectedFailure('Rejected', error, webPartTelemetryData);
	                location.reload(true);
	            }
	            else {
	                qos.writeUnexpectedFailure('Rejected', error, webPartTelemetryData);
	            }
	        });
	    };
	    WebPartZone.prototype.shouldComponentUpdate = function (newProps, newState) {
	        return false;
	    };
	    WebPartZone.prototype.render = function () {
	        var _this = this;
	        return (React.createElement("div", { ref: function (htmlElement) { return _this._webPartDiv = htmlElement; }, style: { width: '100%' } }));
	    };
	    Object.defineProperty(WebPartZone.prototype, "instanceId", {
	        get: function () {
	            return this.props.id;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(WebPartZone.prototype, "isFocusable", {
	        get: function () {
	            return !!CanvasA11y_1.getFirstFocusableChild(this._webPartDiv);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    WebPartZone.prototype.focus = function () {
	        if (!this.context.store.a11yManager.navigateInside(this._webPartDiv)) {
	            this.context.store.a11yManager.navigateOutOf(this._webPartDiv);
	        }
	    };
	    WebPartZone.prototype.handleConfigureButtonClicked = function (shouldToggle) {
	        if (this._isLoaded) {
	            this._webPartManager.setPropertyPaneState(this.props.id, shouldToggle ? sp_webpart_base_1.PropertyPaneState.Toggle : sp_webpart_base_1.PropertyPaneState.Open);
	        }
	    };
	    WebPartZone.prototype.handleDeleteButtonClicked = function () {
	        var _this = this;
	        this._loadWebPartPromise.then(function () { return _this._webPartManager.onWebPartDelete(_this.props.id); });
	    };
	    WebPartZone.prototype.serialize = function () {
	        var webPartData = this._isLoaded ? this._webPartManager.serialize(this.props.id).get(this.props.id) : this.props.webPartData;
	        var serialization = JSON.parse(JSON.stringify(this.props));
	        serialization.webPartData = webPartData;
	        return serialization;
	    };
	    WebPartZone.prototype.setDisplayMode = function (newDisplayMode) {
	        var _this = this;
	        this.setState({
	            displayMode: newDisplayMode
	        });
	        var qos = this.context.store.createQosScope("SetWebPartDisplayModeTo" + newDisplayMode);
	        this._loadWebPartPromise.then(function () {
	            _this._webPartManager.setDisplayMode(newDisplayMode, _this.props.id);
	            qos.writeSuccess();
	        }, function (error) { return qos.writeUnexpectedFailure('Rejected', error, { 'id': _this.props.webPartId }); });
	    };
	    return WebPartZone;
	}(React.Component));
	WebPartZone.contextTypes = {
	    store: React.PropTypes.object.isRequired
	};
	WebPartZone.webPartManagerInitialized = false;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = WebPartZone;


/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var React = __webpack_require__(24);
	var office_ui_fabric_react_1 = __webpack_require__(27);
	var sp_core_library_1 = __webpack_require__(12);
	var odsp_utilities_bundle_1 = __webpack_require__(33);
	var sp_webpart_base_1 = __webpack_require__(141);
	var sp_client_base_1 = __webpack_require__(176);
	var CanvasControlType_1 = __webpack_require__(29);
	var CanvasStore_1 = __webpack_require__(140);
	var CanvasA11y_1 = __webpack_require__(164);
	var CanvasStrings_resx_1 = __webpack_require__(148);
	var ControlZone = (function (_super) {
	    __extends(ControlZone, _super);
	    function ControlZone(props, context) {
	        var _this = _super.call(this, props, context) || this;
	        _this._handleClickCapture = _this._handleClickCapture.bind(_this);
	        _this._handleKeydownCapture = _this._handleKeydownCapture.bind(_this);
	        _this._handleMouseOut = _this._handleMouseOut.bind(_this);
	        _this._handleMouseOver = _this._handleMouseOver.bind(_this);
	        _this._handleToolbarKeydown = _this._handleToolbarKeydown.bind(_this);
	        _this._handleTrapFocus = _this._handleTrapFocus.bind(_this);
	        _this._handleControlFocus = _this._handleControlFocus.bind(_this);
	        _this._selectControl = _this._selectControl.bind(_this);
	        if (CanvasStore_1.default.isLayoutSupported) {
	            __webpack_require__(177);
	        }
	        else {
	            __webpack_require__(179);
	        }
	        return _this;
	    }
	    ControlZone.prototype.shouldComponentUpdate = function (nextProps) {
	        var _a = this.props, displayMode = _a.displayMode, isSelected = _a.isSelected, row = _a.row, position = _a.position;
	        return (displayMode !== nextProps.displayMode ||
	            isSelected !== nextProps.isSelected ||
	            row !== nextProps.row ||
	            !sp_client_base_1.Compare.shallowCompare(position, nextProps.position));
	    };
	    ControlZone.prototype.componentDidMount = function () {
	        if (this.context.store.selectedControlId === this.props.id) {
	            this.context.store.scrollIntoView('partial', this._domElement, 500, ControlZone._VERTICAL_MARGIN * 2);
	            this.context.store.a11yManager.navigateTo(this._domElement);
	        }
	        this._childControl = this.context.store.getControl(this.props.id);
	        if (this.props.displayMode === sp_core_library_1.DisplayMode.Edit) {
	            this._toolbarElement.addEventListener('keydown', this._handleToolbarKeydown);
	            this._childControlElement.addEventListener('keydown', this._handleKeydownCapture, true);
	        }
	    };
	    ControlZone.prototype.componentDidUpdate = function (prevProps) {
	        var displayMode = this.props.displayMode;
	        if (prevProps.displayMode !== displayMode) {
	            if (displayMode === sp_core_library_1.DisplayMode.Edit) {
	                this._toolbarElement.addEventListener('keydown', this._handleToolbarKeydown);
	                this._childControlElement.addEventListener('keydown', this._handleKeydownCapture, true);
	            }
	            else if (displayMode === sp_core_library_1.DisplayMode.Read) {
	                this._toolbarElement.removeEventListener('keydown', this._handleToolbarKeydown);
	                this._childControlElement.removeEventListener('keydown', this._handleKeydownCapture, true);
	            }
	        }
	    };
	    ControlZone.prototype.render = function () {
	        var _this = this;
	        var _a = this.props, children = _a.children, displayMode = _a.displayMode, isSelected = _a.isSelected, id = _a.id;
	        var controlType = children[0].props.controlType;
	        var isReadMode = displayMode === sp_core_library_1.DisplayMode.Read;
	        var accessibleLabel = '';
	        var ariaPrimaryLabelById = "cswpAccessibleLabel_" + id;
	        var ariaContextualLabelId = "cswpAccessibleLabelContextual_" + id;
	        var ariaLabelledBy;
	        if (controlType === CanvasControlType_1.default.WebPartZone) {
	            ariaLabelledBy = ariaContextualLabelId;
	        }
	        else if (controlType === CanvasControlType_1.default.RTE) {
	            accessibleLabel = odsp_utilities_bundle_1.StringHelper.format(CanvasStrings_resx_1.default.CanvasZoneAriaWebpartName || '', CanvasStrings_resx_1.default.TextWebPartDisplayName || '') || '';
	            ariaLabelledBy = ariaPrimaryLabelById;
	        }
	        if (displayMode === sp_core_library_1.DisplayMode.Edit) {
	            accessibleLabel = odsp_utilities_bundle_1.StringHelper.format(CanvasStrings_resx_1.default.AriaWebPartEnterTemplate || '', accessibleLabel) || '';
	            if (controlType === CanvasControlType_1.default.WebPartZone) {
	                ariaLabelledBy += " " + ariaPrimaryLabelById;
	            }
	        }
	        var zoneClassName = office_ui_fabric_react_1.css('ControlZone', {
	            'ControlZone--edit': !isReadMode,
	            'ControlZone--selected': isSelected
	        });
	        return (
	        React.createElement("div", { "aria-labelledby": ariaLabelledBy, className: zoneClassName, ref: function (ref) { return _this._domElement = ref; }, onMouseOut: this._handleMouseOut, onMouseOver: this._handleMouseOver, tabIndex: isReadMode ? -1 : 0, "data-automation-id": 'ControlZone' },
	            React.createElement("div", null,
	                React.createElement("div", { className: 'ControlZone-control', onClickCapture: isReadMode ? undefined : this._handleClickCapture, onFocus: isReadMode ? undefined : this._handleControlFocus, ref: function (ref) { return _this._childControlElement = ref; } }, children[0]),
	                React.createElement("div", { ref: function (ref) { return _this._toolbarElement = ref; } }, children[1]),
	                React.createElement("div", { id: ariaPrimaryLabelById, className: 'ControlZone-screenReaderOnly' }, accessibleLabel))));
	    };
	    ControlZone.prototype._handleControlFocus = function (e) {
	        this._selectControl();
	    };
	    ControlZone.prototype._handleClickCapture = function (e) {
	        this._selectControl();
	    };
	    ControlZone.prototype._handleKeydownCapture = function (evt) {
	        if (this._childControl && this._childControl.props.controlType === CanvasControlType_1.default.WebPartZone) {
	            if (CanvasA11y_1.isEscape(evt)) {
	                this.context.store.a11yManager.navigateTo(this._domElement);
	                evt.stopPropagation();
	                evt.preventDefault();
	            }
	            else if (CanvasA11y_1.isKey(CanvasA11y_1.KeyCodes.F10, evt, true)) {
	                this.context.store.a11yManager.navigateTo(this._toolbarElement);
	                this.context.store.a11yManager.ariaAlert(CanvasStrings_resx_1.default.ToolbarNavigationArrowKeys);
	                evt.stopPropagation();
	                evt.preventDefault();
	            }
	            else if (CanvasA11y_1.isKey(CanvasA11y_1.KeyCodes.P, evt, true)) {
	                this.context.store.webPartManager.setPropertyPaneState(this._childControl.props.id, sp_webpart_base_1.PropertyPaneState.Open);
	                evt.stopPropagation();
	                evt.preventDefault();
	            }
	            else if (!CanvasA11y_1.isShiftTab(evt) || evt.target !== CanvasA11y_1.getFirstFocusableChild(this._childControlElement)) {
	                this.context.store.a11yManager.skipEvent(evt);
	            }
	        }
	    };
	    ControlZone.prototype._handleToolbarKeydown = function (evt) {
	        if (this._childControl && this._childControl.props.controlType === CanvasControlType_1.default.RTE) {
	            if (CanvasA11y_1.isEscape(evt)) {
	                this._childControl.focus();
	                evt.stopPropagation();
	                evt.preventDefault();
	            }
	            else if (CanvasA11y_1.isTab(evt)) {
	                this._childControl.focusFormattingBar();
	                evt.stopPropagation();
	                evt.preventDefault();
	            }
	        }
	    };
	    ControlZone.prototype._handleMouseOut = function (e) {
	        this.context.store.hoveredControlId = undefined;
	    };
	    ControlZone.prototype._handleMouseOver = function (e) {
	        this.context.store.hoveredControlId = this.props.id;
	    };
	    ControlZone.prototype._handleTrapFocus = function (e) {
	        if (e.target === this._trapDiv) {
	            this._childControl.focus();
	        }
	    };
	    ControlZone.prototype._selectControl = function () {
	        if (this.context.store.selectedControlId !== this.props.id) {
	            this.context.store.selectedControlId = this.props.id;
	        }
	    };
	    return ControlZone;
	}(React.Component));
	ControlZone.contextTypes = {
	    store: React.PropTypes.object.isRequired
	};
	ControlZone._VERTICAL_MARGIN = 22;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ControlZone;


/***/ },
/* 176 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_176__;

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	var content = __webpack_require__(178);
	var loader = __webpack_require__(124);
	
	if(typeof content === "string") content = [[module.id, content]];
	
	// add the styles to the DOM
	for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
	
	if(content.locals) module.exports = content.locals;

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(123)();
	// imports
	
	
	// module
	exports.push([module.id, ".CanvasZone:not(.CanvasZone--fullWidth) .ControlZone{padding:8px}.ControlZone .ControlZone-target{bottom:0;cursor:pointer;left:0;position:absolute;right:0;top:0}.ControlZone .ControlZone-target:focus{outline:0}.ControlZone .ControlZone-target.ControlZone-target--hidden{z-index:-1}.ControlZone::after{border:1px solid \"[theme:neutralTertiary, default: #a6a6a6]\";color:\"[theme:neutralTertiary, default: #a6a6a6]\";bottom:0;content:\"\";left:0;pointer-events:none;position:absolute;right:0;top:0;-webkit-transition:all .3s ease;transition:all .3s ease}.ControlZone .CanvasControlToolbar,.ControlZone::after{opacity:0;-webkit-transition:all .3s ease;transition:all .3s ease}.ControlZone.ControlZone--edit{outline:0;position:relative}.ControlZone.ControlZone--edit.ControlZone--selected .CanvasControlToolbar,.ControlZone.ControlZone--edit.ControlZone--selected::after,.ControlZone.ControlZone--edit:focus .CanvasControlToolbar,.ControlZone.ControlZone--edit:focus::after,.ControlZone.ControlZone--edit:hover .CanvasControlToolbar,.ControlZone.ControlZone--edit:hover::after{opacity:1}.ControlZone.ControlZone--selected::after{border:1px solid \"[theme:themePrimary, default:#0078d7]\";color:\"[theme:themePrimary, default:#0078d7]\"}.ControlZone.ControlZone--selected+button.CanvasToolboxHint{opacity:1}.ControlZone .ControlZone-screenReaderOnly{position:absolute;text-indent:-9999px;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;border:0}", ""]);
	
	// exports


/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	var content = __webpack_require__(180);
	var loader = __webpack_require__(124);
	
	if(typeof content === "string") content = [[module.id, content]];
	
	// add the styles to the DOM
	for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
	
	if(content.locals) module.exports = content.locals;

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(123)();
	// imports
	
	
	// module
	exports.push([module.id, ".ControlZone{padding:8px;margin:16px 0 32px 0;outline:0;position:relative}.ControlZone .ControlZone-target{bottom:0;cursor:pointer;left:0;position:absolute;right:0;top:0}.ControlZone .ControlZone-target:focus{outline:0}.ControlZone .ControlZone-target.ControlZone-target--hidden{z-index:-1}.ControlZone::after{border:1px solid \"[theme:neutralTertiary, default: #a6a6a6]\";color:\"[theme:neutralTertiary, default: #a6a6a6]\";bottom:0;content:\"\";left:0;pointer-events:none;position:absolute;right:0;top:0;-webkit-transition:all .3s ease;transition:all .3s ease}.ControlZone .CanvasControlToolbar,.ControlZone::after{opacity:0;-webkit-transition:all .3s ease;transition:all .3s ease}.ControlZone.ControlZone--edit.ControlZone--selected .CanvasControlToolbar,.ControlZone.ControlZone--edit.ControlZone--selected::after,.ControlZone.ControlZone--edit:focus .CanvasControlToolbar,.ControlZone.ControlZone--edit:focus::after,.ControlZone.ControlZone--edit:hover .CanvasControlToolbar,.ControlZone.ControlZone--edit:hover::after{opacity:1}.ControlZone.ControlZone--selected::after{border:1px solid \"[theme:themePrimary, default:#0078d7]\";color:\"[theme:themePrimary, default:#0078d7]\"}.ControlZone.ControlZone--selected+button.CanvasToolboxHint{opacity:1}.ControlZone .ControlZone-screenReaderOnly{position:absolute;text-indent:-9999px;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;border:0}", ""]);
	
	// exports


/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var office_ui_fabric_react_1 = __webpack_require__(27);
	var sp_core_library_1 = __webpack_require__(12);
	var React = __webpack_require__(24);
	var ReactDOM = __webpack_require__(25);
	var CanvasStore_1 = __webpack_require__(140);
	var CanvasToolboxHint = (function (_super) {
	    __extends(CanvasToolboxHint, _super);
	    function CanvasToolboxHint(props, context) {
	        var _this = _super.call(this, props, context) || this;
	        _this._handleClick = _this._handleClick.bind(_this);
	        if (CanvasStore_1.default.isLayoutSupported) {
	            __webpack_require__(182);
	        }
	        else {
	            __webpack_require__(184);
	        }
	        return _this;
	    }
	    CanvasToolboxHint.prototype.componentDidMount = function () {
	        this._domNode = ReactDOM.findDOMNode(this);
	        if (this.props.shouldFocus) {
	            this.focus();
	        }
	    };
	    CanvasToolboxHint.prototype.componentDidUpdate = function () {
	        this.componentDidMount();
	    };
	    CanvasToolboxHint.prototype.render = function () {
	        var _this = this;
	        var _a = this.props, ariaLabel = _a.ariaLabel, isVisible = _a.isVisible, shouldCenterAlign = _a.shouldCenterAlign;
	        var hintClassName = office_ui_fabric_react_1.css('CanvasToolboxHint', {
	            'is-visible': isVisible
	        });
	        var hintButtonWrapperClassName = office_ui_fabric_react_1.css('CanvasToolboxHint-plusButtonWrapper', {
	            'centerAlign': shouldCenterAlign
	        });
	        return this.context.store.displayMode === sp_core_library_1.DisplayMode.Edit && (React.createElement("button", { "aria-haspopup": true, "aria-label": ariaLabel, className: hintClassName, onClick: this._handleClick, "data-automation-id": 'toolboxHintButton' },
	            React.createElement("div", { className: hintButtonWrapperClassName },
	                React.createElement("div", { className: 'CanvasToolboxHint-plusButton', ref: function (ref) { return _this._canvasToolPlusButton = ref; } },
	                    React.createElement("i", { className: 'ms-Icon ms-Icon--Add' })))));
	    };
	    CanvasToolboxHint.prototype.focus = function () {
	        var _this = this;
	        window.setTimeout(function () { return _this._domNode.focus(); }, 0);
	    };
	    CanvasToolboxHint.prototype._handleClick = function () {
	        this.context.store.selectedControlId = undefined;
	        var verticalPosition;
	        var horizontalPosition;
	        var plusButton = this._canvasToolPlusButton;
	        if (this._domNode) {
	            var _a = this._domNode, clientWidth = _a.clientWidth, offsetTop = _a.offsetTop, offsetLeft = _a.offsetLeft, parentElement = _a.parentElement;
	            if (this.props.layout && this.props.layout.sectionIndex) {
	                verticalPosition = parentElement.offsetTop + this._domNode.offsetTop;
	                horizontalPosition = offsetLeft + parentElement.offsetLeft + (clientWidth / 2) - 146;
	            }
	            else {
	                verticalPosition = offsetTop;
	                horizontalPosition = plusButton ? plusButton.offsetLeft : 0;
	            }
	        }
	        this.context.store.openToolbox(this.props.layout || this.props.row, verticalPosition, horizontalPosition);
	    };
	    return CanvasToolboxHint;
	}(React.Component));
	CanvasToolboxHint.contextTypes = {
	    store: React.PropTypes.object.isRequired
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = CanvasToolboxHint;


/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	var content = __webpack_require__(183);
	var loader = __webpack_require__(124);
	
	if(typeof content === "string") content = [[module.id, content]];
	
	// add the styles to the DOM
	for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
	
	if(content.locals) module.exports = content.locals;

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(123)();
	// imports
	
	
	// module
	exports.push([module.id, ".CanvasToolboxHint{background:0 0;border:none;cursor:pointer;height:24px;opacity:0;outline:0;padding:0;position:relative;-webkit-transition:all .3s ease;transition:all .3s ease;width:100%;color:\"[theme:neutralTertiary, default: #a6a6a6]\"}.CanvasToolboxHint .CanvasToolboxHint-plusButtonWrapper{margin:0 -8px;max-width:1200px}.CanvasToolboxHint .CanvasToolboxHint-plusButtonWrapper .CanvasToolboxHint-plusButton{background-color:\"[theme:neutralTertiary, default: #a6a6a6]\";border-radius:50%;color:\"[theme:white, default: #ffffff]\";font-size:15px;height:24px;left:calc(50% - 12px);line-height:24px;opacity:0;padding:0;position:relative;text-align:center;top:0;width:24px;z-index:1;-webkit-transition:all .3s ease;transition:all .3s ease}.CanvasToolboxHint .CanvasToolboxHint-plusButtonWrapper .CanvasToolboxHint-plusButton .ms-Icon{position:relative}.CanvasToolboxHint::after{border-top:1px dashed \"[theme:neutralTertiary, default: #a6a6a6]\";content:'';height:1px;left:0;position:absolute;top:12px;width:100%;-webkit-transition:all .3s ease;transition:all .3s ease}.CanvasToolboxHint.is-visible{opacity:1}.CanvasToolboxHint:focus,.CanvasToolboxHint:hover{opacity:1}.CanvasToolboxHint:focus .CanvasToolboxHint-plusButton,.CanvasToolboxHint:hover .CanvasToolboxHint-plusButton{background-color:\"[theme:themePrimary, default:#0078d7]\";opacity:1}.CanvasToolboxHint:focus::after,.CanvasToolboxHint:hover::after{border-color:\"[theme:themePrimary, default:#0078d7]\"}.Canvas>.CanvasToolboxHint:nth-of-type(1):nth-last-of-type(1){opacity:1}.Canvas>.CanvasToolboxHint:nth-of-type(1):nth-last-of-type(1) .CanvasToolboxHint-plusButton{opacity:1}.CanvasSection button.CanvasToolboxHint .CanvasToolboxHint-plusButton{opacity:1}.CanvasSection button.CanvasToolboxHint::after{border-top:1px solid \"[theme:neutralTertiary, default: #a6a6a6]\"}.CanvasSection button.CanvasToolboxHint:focus::after,.CanvasSection button.CanvasToolboxHint:hover::after{border-color:\"[theme:themePrimary, default:#0078d7]\"}.CanvasSection:hover button.CanvasToolboxHint:nth-of-type(1):nth-last-of-type(1),.CanvasZone--selected button.CanvasToolboxHint:nth-of-type(1):nth-last-of-type(1){opacity:1}@media screen and (-ms-high-contrast:active){.CanvasToolboxHint{color:#1AEBFF}}@media screen and (-ms-high-contrast:black-on-white){.CanvasToolboxHint{color:#37006E}}", ""]);
	
	// exports


/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	var content = __webpack_require__(185);
	var loader = __webpack_require__(124);
	
	if(typeof content === "string") content = [[module.id, content]];
	
	// add the styles to the DOM
	for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
	
	if(content.locals) module.exports = content.locals;

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(123)();
	// imports
	
	
	// module
	exports.push([module.id, ".CanvasToolboxHint{background:0 0;border:none;cursor:pointer;height:24px;left:48px;margin-top:-26px;opacity:0;outline:0;padding:0;position:absolute;right:48px;-webkit-transition:all .3s ease;transition:all .3s ease;width:calc(100% - 96px);color:\"[theme:neutralTertiary, default: #a6a6a6]\"}.CanvasToolboxHint .CanvasToolboxHint-plusButton{background-color:\"[theme:neutralTertiary, default: #a6a6a6]\";border-radius:50%;color:\"[theme:white, default: #ffffff]\";font-size:15px;height:24px;left:calc(50% - 12px);line-height:24px;padding:0;position:absolute;text-align:center;top:0;width:24px;z-index:1;-webkit-transition:all .3s ease;transition:all .3s ease}.CanvasToolboxHint .CanvasToolboxHint-plusButton .ms-Icon{position:relative}.CanvasToolboxHint::after{border-top:1px solid \"[theme:neutralTertiary, default: #a6a6a6]\";content:'';height:1px;left:0;position:absolute;top:12px;width:100%;-webkit-transition:all .3s ease;transition:all .3s ease}.CanvasToolboxHint.is-visible{opacity:1}.CanvasToolboxHint:nth-of-type(1):nth-last-of-type(1){margin-top:-13px;opacity:1}.CanvasToolboxHint:focus,.CanvasToolboxHint:hover{opacity:1}.CanvasToolboxHint:focus .CanvasToolboxHint-plusButton,.CanvasToolboxHint:hover .CanvasToolboxHint-plusButton{background-color:\"[theme:themePrimary, default:#0078d7]\"}.CanvasToolboxHint:focus::after,.CanvasToolboxHint:hover::after{border-color:\"[theme:themePrimary, default:#0078d7]\"}@media screen and (min-width:640px){.CanvasToolboxHint:first-of-type{margin-top:-13px}}@media screen and (-ms-high-contrast:active){.CanvasToolboxHint{color:#1AEBFF}}@media screen and (-ms-high-contrast:black-on-white){.CanvasToolboxHint{color:#37006E}}", ""]);
	
	// exports


/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var React = __webpack_require__(24);
	var office_ui_fabric_react_1 = __webpack_require__(27);
	var CanvasStrings_resx_1 = __webpack_require__(148);
	function ConfirmationDialog(props) {
	    var isOpen = props.isOpen, message = props.message, onConfirmation = props.onConfirmation, onDismiss = props.onDismiss, title = props.title;
	    return (React.createElement(office_ui_fabric_react_1.Dialog, { isOpen: isOpen, onDismiss: onDismiss, title: title, subText: message },
	        React.createElement(office_ui_fabric_react_1.DialogFooter, null,
	            React.createElement(office_ui_fabric_react_1.Button, { buttonType: office_ui_fabric_react_1.ButtonType.primary, onClick: onConfirmation, ariaLabel: CanvasStrings_resx_1.default.ConfirmationDialogYes, "data-automation-id": 'confirmButton' }, CanvasStrings_resx_1.default.ConfirmationDialogYes),
	            React.createElement(office_ui_fabric_react_1.Button, { onClick: onDismiss, ariaLabel: CanvasStrings_resx_1.default.ConfirmationDialogNo, "data-automation-id": 'cancelButton' }, CanvasStrings_resx_1.default.ConfirmationDialogNo))));
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ConfirmationDialog;
	ConfirmationDialog.contextTypes = {
	    store: React.PropTypes.object.isRequired
	};


/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var React = __webpack_require__(24);
	var office_ui_fabric_react_1 = __webpack_require__(27);
	var sp_core_library_1 = __webpack_require__(12);
	var CanvasSection_1 = __webpack_require__(188);
	var Toolbar_1 = __webpack_require__(189);
	__webpack_require__(196);
	var CanvasZone = (function (_super) {
	    __extends(CanvasZone, _super);
	    function CanvasZone(props, context) {
	        return _super.call(this, props, context) || this;
	    }
	    CanvasZone.prototype.render = function () {
	        var _this = this;
	        var store = this.context.store;
	        var displayMode = store.displayMode;
	        var _a = this.props, fullWidth = _a.fullWidth, zone = _a.zone, selectedPosition = _a.selectedPosition, shouldCenterAlign = _a.shouldCenterAlign;
	        var isCurZoneSelected = selectedPosition.zoneIndex === zone.index;
	        var isCurZoneEmpty = true;
	        var sectionComponents = [];
	        var sections = zone.sections;
	        sections.forEach(function (curSection, curIdx) {
	            sectionComponents.push(React.createElement(CanvasSection_1.default, { zoneIndex: zone.index, section: curSection, selectedPosition: selectedPosition, key: curSection.index }));
	            if (isCurZoneEmpty && !curSection.isEmpty()) {
	                isCurZoneEmpty = false;
	            }
	        });
	        var isReadMode = displayMode === sp_core_library_1.DisplayMode.Read;
	        var layoutZoneClassName = office_ui_fabric_react_1.css('CanvasZone', 'ms-Grid-row', {
	            'CanvasZone--edit': !isReadMode,
	            'CanvasZone--fullWidth': fullWidth,
	            'CanvasZone--read': isReadMode,
	            'CanvasZone--selected': isCurZoneSelected,
	            'CanvasZone--empty': isCurZoneEmpty,
	            'CanvasZone--centerAlign': shouldCenterAlign
	        });
	        return (React.createElement("div", { className: layoutZoneClassName, ref: function (ref) { return _this._domElement = ref; }, "data-automation-id": 'CanvasZone' },
	            sectionComponents,
	            React.createElement(Toolbar_1.default, { className: 'CanvasZoneToolbar', controlType: undefined, controlPosition: { zoneIndex: zone.index, sectionIndex: undefined, controlIndex: undefined }, displayMode: displayMode, id: zone.index.toString(), row: undefined, onConfigureButtonClick: store.handleConfigureZoneButtonClicked, onDeleteButtonClick: store.handleDeleteZoneButtonClicked })));
	    };
	    return CanvasZone;
	}(React.Component));
	CanvasZone.contextTypes = {
	    store: React.PropTypes.object.isRequired
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = CanvasZone;


/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var React = __webpack_require__(24);
	var office_ui_fabric_react_1 = __webpack_require__(27);
	var sp_core_library_1 = __webpack_require__(12);
	var CanvasControlFactory_1 = __webpack_require__(28);
	var CanvasLayout_1 = __webpack_require__(146);
	var CanvasToolboxHint_1 = __webpack_require__(181);
	var ControlZone_1 = __webpack_require__(175);
	var CanvasStrings_resx_1 = __webpack_require__(148);
	var Toolbar_1 = __webpack_require__(189);
	__webpack_require__(193);
	var CanvasSection = (function (_super) {
	    __extends(CanvasSection, _super);
	    function CanvasSection(props, context) {
	        return _super.call(this, props, context) || this;
	    }
	    CanvasSection._createEmptyControlLayout = function (zoneIndex, sectionIndex, controlIndex) {
	        return {
	            zoneIndex: zoneIndex,
	            sectionIndex: sectionIndex,
	            controlIndex: controlIndex
	        };
	    };
	    CanvasSection.prototype.render = function () {
	        var _this = this;
	        var store = this.context.store;
	        var displayMode = store.displayMode;
	        var _a = this.props, zoneIndex = _a.zoneIndex, section = _a.section, selectedPosition = _a.selectedPosition;
	        var isSectionSelected = selectedPosition.zoneIndex === zoneIndex &&
	            selectedPosition.sectionIndex === section.index;
	        var controlComponents = [];
	        var controls = section.controls;
	        var numControls = controls.length;
	        controls.forEach(function (curCtrl, curIdx) {
	            var isControlSelected = isSectionSelected &&
	                selectedPosition.controlIndex === curCtrl.position.controlIndex;
	            controlComponents.push(React.createElement(ControlZone_1.default, { displayMode: displayMode, id: curCtrl.id, isSelected: isControlSelected, key: curCtrl.id, row: undefined, position: curCtrl.position },
	                CanvasControlFactory_1.default.CreateCanvasControl(curCtrl, store),
	                React.createElement(Toolbar_1.default, { controlType: curCtrl.controlType, displayMode: displayMode, id: curCtrl.id, row: undefined, onConfigureButtonClick: store.handleConfigureButtonClicked, onDeleteButtonClick: store.handleDeleteControlButtonClicked, controlPosition: curCtrl.position })));
	            var nextControlIndex = (curIdx + 1 === numControls) ?
	                curCtrl.position.controlIndex + 1 :
	                controls[curIdx + 1].position.controlIndex;
	            var nextCtrlPosition = CanvasSection._createEmptyControlLayout(curCtrl.position.zoneIndex, curCtrl.position.sectionIndex, nextControlIndex);
	            controlComponents.push(React.createElement(CanvasToolboxHint_1.default, { ariaLabel: CanvasStrings_resx_1.default.ToolboxHintTitle, row: undefined, layout: nextCtrlPosition, key: "hint." + nextCtrlPosition.controlIndex }));
	        });
	        var firstControlIdx = controls.length > 0 ?
	            controls[0].position.controlIndex :
	            CanvasLayout_1.default.firstLayoutIndex;
	        var firstControlLayout = {
	            zoneIndex: zoneIndex,
	            sectionIndex: section.index,
	            controlIndex: firstControlIdx
	        };
	        var isReadMode = displayMode === sp_core_library_1.DisplayMode.Read;
	        var layoutSectionClassName = office_ui_fabric_react_1.css('CanvasSection', 'ms-Grid-col', 'ms-u-sm12', "ms-u-xl" + (this.props.section.factor || 12), {
	            'CanvasSection--edit': !isReadMode,
	            'CanvasSection--read': isReadMode,
	            'CanvasSection--selected': isSectionSelected
	        });
	        return (React.createElement("div", { className: layoutSectionClassName, ref: function (ref) { return _this._domElement = ref; }, "data-automation-id": 'CanvasSection' },
	            React.createElement(CanvasToolboxHint_1.default, { ariaLabel: CanvasStrings_resx_1.default.ToolboxHintTitle, row: undefined, layout: firstControlLayout }),
	            controlComponents));
	    };
	    return CanvasSection;
	}(React.Component));
	CanvasSection.contextTypes = {
	    store: React.PropTypes.object.isRequired
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = CanvasSection;


/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var sp_core_library_1 = __webpack_require__(12);
	var office_ui_fabric_react_1 = __webpack_require__(27);
	var React = __webpack_require__(24);
	var CanvasControlType_1 = __webpack_require__(29);
	var ToolbarButton_1 = __webpack_require__(158);
	__webpack_require__(190);
	var CanvasStrings_resx_1 = __webpack_require__(148);
	var Toolbar = (function (_super) {
	    __extends(Toolbar, _super);
	    function Toolbar(props) {
	        var _this = _super.call(this, props) || this;
	        _this._handleConfigureButtonClicked = _this._handleConfigureButtonClicked.bind(_this);
	        _this._handleDeleteButtonClicked = _this._handleDeleteButtonClicked.bind(_this);
	        return _this;
	    }
	    Toolbar.prototype.render = function () {
	        var _a = this.props, className = _a.className, controlType = _a.controlType, displayMode = _a.displayMode, key = _a.key;
	        var configureButton;
	        if (controlType !== CanvasControlType_1.default.RTE) {
	            configureButton = (React.createElement(ToolbarButton_1.default, { key: 'edit' + key, canBeActive: false, fabricIconKey: 'Edit', onClick: this._handleConfigureButtonClicked, title: CanvasStrings_resx_1.default.ToolbarConfigButtonTitle, automationId: 'configureButton' }));
	        }
	        return (sp_core_library_1.DisplayMode.Edit === displayMode &&
	            React.createElement(office_ui_fabric_react_1.FocusZone, { isCircularNavigation: true },
	                React.createElement("div", { className: className || 'CanvasControlToolbar', role: 'toolbar' },
	                    configureButton,
	                    React.createElement(ToolbarButton_1.default, { key: 'delete' + key, canBeActive: false, fabricIconKey: 'Delete', onClick: this._handleDeleteButtonClicked, title: CanvasStrings_resx_1.default.ToolbarDeleteButtonTitle, automationId: 'deleteButton' }))));
	    };
	    Toolbar.prototype._handleConfigureButtonClicked = function () {
	        this.props.onConfigureButtonClick(this.props.id);
	    };
	    Toolbar.prototype._handleDeleteButtonClicked = function () {
	        this.props.onDeleteButtonClick(this.props.row, this.props.controlPosition);
	    };
	    return Toolbar;
	}(React.Component));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Toolbar;


/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(191);


/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	var content = __webpack_require__(192);
	var loader = __webpack_require__(124);
	
	if(typeof content === "string") content = [[module.id, content]];
	
	// add the styles to the DOM
	for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
	
	if(content.locals) module.exports = content.locals;

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(123)();
	// imports
	
	
	// module
	exports.push([module.id, ".CanvasControlToolbar{position:absolute;top:0;width:32px;z-index:1}[dir=ltr] .CanvasControlToolbar{left:-40px}[dir=rtl] .CanvasControlToolbar{right:-40px}[dir=ltr] .CanvasControlToolbar{padding-right:10px}[dir=rtl] .CanvasControlToolbar{padding-left:10px}", ""]);
	
	// exports


/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(194);


/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	var content = __webpack_require__(195);
	var loader = __webpack_require__(124);
	
	if(typeof content === "string") content = [[module.id, content]];
	
	// add the styles to the DOM
	for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
	
	if(content.locals) module.exports = content.locals;

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(123)();
	// imports
	
	
	// module
	exports.push([module.id, "@media screen and (min-width:1024px){.CanvasSection--edit:nth-child(n+2):before{content:'';position:absolute;top:-8px;height:calc(100% + (2 * 8px));border-left:1px dashed #a6a6a6;left:-1px}}@media screen and (min-width:640px){.CanvasSection--read .ControlZone{margin-top:24px}.CanvasSection--read .ControlZone:last-of-type{margin-bottom:24px}}", ""]);
	
	// exports


/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(197);


/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	var content = __webpack_require__(198);
	var loader = __webpack_require__(124);
	
	if(typeof content === "string") content = [[module.id, content]];
	
	// add the styles to the DOM
	for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
	
	if(content.locals) module.exports = content.locals;

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(123)();
	// imports
	
	
	// module
	exports.push([module.id, ".CanvasZone{max-width:1280px;padding:0 12px}.CanvasZone.CanvasZone--read{margin-top:24px}.CanvasZone.CanvasZone--centerAlign{margin:auto}.CanvasZone.CanvasZone--selected+button.CanvasToolboxHint{opacity:1}.CanvasZone.CanvasZone--fullWidth{max-width:100%;padding:0;margin:0}.CanvasZone.CanvasZone--fullWidth .CanvasSection{padding-left:0;padding-right:0}[dir=ltr] .CanvasZone.CanvasZone--fullWidth .CanvasToolboxHint-plusButtonWrapper{padding-left:48px}[dir=rtl] .CanvasZone.CanvasZone--fullWidth .CanvasToolboxHint-plusButtonWrapper{padding-right:48px}[dir=ltr] .CanvasZone.CanvasZone--fullWidth .CanvasToolboxHint-plusButtonWrapper{padding-right:32px}[dir=rtl] .CanvasZone.CanvasZone--fullWidth .CanvasToolboxHint-plusButtonWrapper{padding-left:32px}.CanvasZone.CanvasZone--fullWidth .CanvasControlToolbar{top:4px}[dir=ltr] .CanvasZone.CanvasZone--fullWidth .CanvasControlToolbar{left:4px}[dir=rtl] .CanvasZone.CanvasZone--fullWidth .CanvasControlToolbar{right:4px}.CanvasZone .CanvasZoneToolbar{position:absolute;width:32px}[dir=ltr] .CanvasZone .CanvasZoneToolbar{left:-32px}[dir=rtl] .CanvasZone .CanvasZoneToolbar{right:-32px}.CanvasZone .CanvasZoneToolbar .CanvasControlToolbar-item{background-color:transparent;color:\"[theme:neutralTertiary, default: #a6a6a6]\";height:32px;min-width:32px;width:32px}.CanvasZone .CanvasZoneToolbar .CanvasControlToolbar-item:hover{background-color:\"[theme:themePrimary, default:#0078d7]\";color:\"[theme:white, default: #ffffff]\";cursor:pointer}@media screen and (min-width:1024px){.CanvasZone--edit{display:-webkit-box;display:-ms-flexbox;display:flex}.CanvasZone--edit.CanvasZone--empty{min-height:320px}}@media screen and (min-width:640px){.CanvasZone{padding:0 32px}[dir=ltr] .CanvasZone.CanvasZone--edit{padding-left:48px}[dir=rtl] .CanvasZone.CanvasZone--edit{padding-right:48px}[dir=ltr] .CanvasZone.CanvasZone--edit{padding-right:32px}[dir=rtl] .CanvasZone.CanvasZone--edit{padding-left:32px}.CanvasZone.CanvasZone--edit.CanvasZone--fullWidth{max-width:100%;padding:0;margin:0}}", ""]);
	
	// exports


/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var React = __webpack_require__(24);
	var office_ui_fabric_react_1 = __webpack_require__(27);
	var sp_core_library_1 = __webpack_require__(12);
	var odsp_utilities_bundle_1 = __webpack_require__(33);
	var CanvasControlType_1 = __webpack_require__(29);
	var ToolboxGroup_1 = __webpack_require__(200);
	var ToolboxItem_1 = __webpack_require__(204);
	var ToolBoxItemClassifier_1 = __webpack_require__(208);
	var CanvasA11y_1 = __webpack_require__(164);
	__webpack_require__(209);
	var CanvasStrings_resx_1 = __webpack_require__(148);
	var CLIENT_SIDE_TEAM_NEWS_FLIGHT = 953;
	var LINK_PREVIEW_FLIGHT = 904;
	var HERO_PEOPLE_FLIGHT = 905;
	var NEWSFEED_ID = 'a5df8fdf-b508-4b66-98a6-d83bc2597f63';
	var NEWSREEL_ID = '0ef418ba-5d19-4ade-9db0-b339873291d0';
	var LINK_PREVIEW_ID = '6410b3b6-d440-4663-8744-378976dc041e';
	var TITLE_REGION_ID = 'cbe7b0a9-3504-44dd-a3a3-0e5cacd07788';
	var HERO_ID = 'c4bd7b2f-7b6e-4599-8485-16504575f590';
	var PEOPLE_ID = '7f718435-ee4d-431c-bdbf-9c4ff326f46e';
	var Toolbox = (function (_super) {
	    __extends(Toolbox, _super);
	    function Toolbox(props, context) {
	        var _this = _super.call(this, props, context) || this;
	        _this._handleKeyDownCapture = _this._handleKeyDownCapture.bind(_this);
	        _this.state = {
	            horizontalPosition: props.horizontalPosition,
	            verticalPosition: props.verticalPosition
	        };
	        return _this;
	    }
	    Toolbox.prototype.componentDidMount = function () {
	        if (this._domNode) {
	            this._domNode.addEventListener('keydown', this._handleKeyDownCapture, true);
	        }
	    };
	    Toolbox.prototype.componentDidUpdate = function (prevProps) {
	        if (this.props.isOpen !== prevProps.isOpen) {
	            if (this.props.isOpen) {
	                if (this.props.isLoading) {
	                    this.context.store.a11yManager.ariaAlert(CanvasStrings_resx_1.default.ToolboxAriaLoadingAlert);
	                }
	                else {
	                    if (prevProps.isLoading) {
	                        this.context.store.a11yManager.ariaAlert(CanvasStrings_resx_1.default.ToolboxAriaLoadingFinishedAlert);
	                    }
	                    this.context.store.a11yManager.saveState();
	                    this.context.store.a11yManager.navigateTo(this._domNode);
	                    var localizedItemCount = odsp_utilities_bundle_1.StringHelper.formatWithLocalizedCountValue(CanvasStrings_resx_1.default.CanvasItems, CanvasStrings_resx_1.default.CanvasItemsInterval, this.props.toolboxItems.length + 1);
	                    var message = odsp_utilities_bundle_1.StringHelper.format(CanvasStrings_resx_1.default.ToolboxNavigationArrowKeys, localizedItemCount);
	                    this.context.store.a11yManager.ariaAlert(message);
	                }
	            }
	            else {
	                this.context.store.a11yManager.clearState();
	            }
	        }
	    };
	    Toolbox.prototype.componentWillReceiveProps = function (nextProps) {
	        if (nextProps.isOpen && this.context.store.scrollableParent) {
	            var _a = this.context.store.scrollableParent.getBoundingClientRect(), top_1 = _a.top, bottom = _a.bottom;
	            var toolboxHeight = 330;
	            var canvasTop = this.context.store.canvasElement.getBoundingClientRect().top;
	            var hintOffset = 28;
	            var verticalPosition = nextProps.verticalPosition;
	            if ((verticalPosition + toolboxHeight + hintOffset + canvasTop > bottom) &&
	                (verticalPosition - toolboxHeight - hintOffset > top_1)) {
	                verticalPosition -= toolboxHeight + hintOffset;
	            }
	            this.setState({ verticalPosition: verticalPosition, horizontalPosition: nextProps.horizontalPosition });
	        }
	    };
	    Toolbox.prototype.render = function () {
	        var _this = this;
	        var _a = this.props, errorMessage = _a.errorMessage, isLoading = _a.isLoading, isOpen = _a.isOpen, onItemClick = _a.onItemClick, toolboxItems = _a.toolboxItems;
	        var toolboxContent;
	        if (isLoading) {
	            toolboxContent = (React.createElement("div", { className: 'ms-Spinner-container' },
	                React.createElement(office_ui_fabric_react_1.Spinner, { type: office_ui_fabric_react_1.SpinnerType.large })));
	        }
	        else {
	            var errorLabel = void 0;
	            if (errorMessage) {
	                errorLabel = React.createElement("div", { className: 'CanvasToolbox-Error' },
	                    " ",
	                    errorMessage,
	                    " ");
	            }
	            var classifier = new ToolBoxItemClassifier_1.default();
	            for (var _i = 0, toolboxItems_1 = toolboxItems; _i < toolboxItems_1.length; _i++) {
	                var item = toolboxItems_1[_i];
	                var webPartManifest = item.itemProps.webPartManifest;
	                if (!sp_core_library_1._SPFlight.isEnabled(CLIENT_SIDE_TEAM_NEWS_FLIGHT) &&
	                    (webPartManifest.id === NEWSREEL_ID || webPartManifest.id === NEWSFEED_ID)) {
	                    continue;
	                }
	                if (sp_core_library_1.Environment.type !== sp_core_library_1.EnvironmentType.Local &&
	                    webPartManifest.id === LINK_PREVIEW_ID &&
	                    !sp_core_library_1._SPFlight.isEnabled(LINK_PREVIEW_FLIGHT)) {
	                    continue;
	                }
	                if (sp_core_library_1.Environment.type !== sp_core_library_1.EnvironmentType.Local &&
	                    (webPartManifest.id === HERO_ID || webPartManifest.id === PEOPLE_ID) &&
	                    !sp_core_library_1._SPFlight.isEnabled(HERO_PEOPLE_FLIGHT)) {
	                    continue;
	                }
	                if (webPartManifest.id === TITLE_REGION_ID) {
	                    continue; 
	                }
	                item.onClick = onItemClick;
	                classifier.registerItem(item.key, item);
	            }
	            var featuredItemViews_1 = [];
	            featuredItemViews_1.push(React.createElement(ToolboxItem_1.default, { description: CanvasStrings_resx_1.default.TextWebpartDescription, displayName: CanvasStrings_resx_1.default.TextWebPartDisplayName, itemProps: { controlType: CanvasControlType_1.default.RTE, displayMode: sp_core_library_1.DisplayMode.Edit, id: undefined }, key: 0, msIconName: 'Font', onClick: onItemClick, automationId: 'RTE' }));
	            var featuredItemProps = classifier.classify(true);
	            featuredItemProps.forEach(function (item) {
	                featuredItemViews_1.push(React.createElement(ToolboxItem_1.default, __assign({}, item)));
	            });
	            var featuredGroup = React.createElement(ToolboxGroup_1.default, { groupName: CanvasStrings_resx_1.default.ToolboxGroupNameFeatured, key: CanvasStrings_resx_1.default.ToolboxGroupNameFeatured, hasHeader: true }, featuredItemViews_1);
	            var nonFeaturedItemViews_1 = [];
	            var nonFeaturedItemProps = classifier.classify(false, function (item1, item2) {
	                return item1.displayName.localeCompare(item2.displayName);
	            });
	            nonFeaturedItemProps.forEach(function (item) {
	                nonFeaturedItemViews_1.push(React.createElement(ToolboxItem_1.default, __assign({}, item)));
	            });
	            var nonFeaturedGroup = React.createElement(ToolboxGroup_1.default, { groupName: CanvasStrings_resx_1.default.ToolboxGroupNameNonFeatured, key: CanvasStrings_resx_1.default.ToolboxGroupNameNonFeatured, hasHeader: false }, nonFeaturedItemViews_1);
	            var sectionGroup = this._generateSectionItems(onItemClick);
	            toolboxContent = (React.createElement(office_ui_fabric_react_1.FocusZone, { direction: office_ui_fabric_react_1.FocusZoneDirection.horizontal, isCircularNavigation: true },
	                errorLabel,
	                featuredGroup,
	                (!(this.props.controlPosition && !this.props.controlPosition.sectionIndex)) || sectionGroup,
	                nonFeaturedGroup));
	        }
	        return (React.createElement("div", { className: 'CanvasToolboxContainer' },
	            React.createElement("div", { role: 'toolbar', className: 'CanvasToolbox', ref: function (ref) { return _this._domNode = ref; }, style: {
	                    display: isOpen ? 'block' : 'none',
	                    top: this.state.verticalPosition,
	                    left: this.state.horizontalPosition,
	                    right: this.state.horizontalPosition === undefined ? 0 : undefined
	                } }, toolboxContent)));
	    };
	    Toolbox.prototype._createSectionItemProps = function (controlType) {
	        return {
	            controlType: controlType,
	            displayMode: sp_core_library_1.DisplayMode.Edit,
	            id: undefined
	        };
	    };
	    Toolbox.prototype._generateSectionItems = function (onItemClick) {
	        return (React.createElement(ToolboxGroup_1.default, { groupName: CanvasStrings_resx_1.default.ToolboxSectionHeader, key: 'Sections', hasHeader: true },
	            React.createElement(ToolboxItem_1.default, { description: CanvasStrings_resx_1.default.ToolboxFullWidthColumnPart, displayName: CanvasStrings_resx_1.default.ToolboxFullWidthColumnPart, itemProps: this._createSectionItemProps(CanvasControlType_1.default.FullWidth), msIconName: 'LargeGrid', onClick: onItemClick }),
	            React.createElement(ToolboxItem_1.default, { description: CanvasStrings_resx_1.default.ToolboxTwoColumnPart, displayName: CanvasStrings_resx_1.default.ToolboxTwoColumnPart, itemProps: this._createSectionItemProps(CanvasControlType_1.default.TwoColumns), msIconName: 'LargeGrid', onClick: onItemClick }),
	            React.createElement(ToolboxItem_1.default, { description: CanvasStrings_resx_1.default.ToolboxThreeColumnPart, displayName: CanvasStrings_resx_1.default.ToolboxThreeColumnPart, itemProps: this._createSectionItemProps(CanvasControlType_1.default.ThreeColumns), msIconName: 'LargeGrid', onClick: onItemClick }),
	            React.createElement(ToolboxItem_1.default, { description: CanvasStrings_resx_1.default.ToolboxOneThirdRightColumnPart, displayName: CanvasStrings_resx_1.default.ToolboxOneThirdRightColumnPart, itemProps: this._createSectionItemProps(CanvasControlType_1.default.OneThirdColumnRight), msIconName: 'LargeGrid', onClick: onItemClick }),
	            React.createElement(ToolboxItem_1.default, { description: CanvasStrings_resx_1.default.ToolboxOneThirdLeftColumnPart, displayName: CanvasStrings_resx_1.default.ToolboxOneThirdLeftColumnPart, itemProps: this._createSectionItemProps(CanvasControlType_1.default.OneThirdColumnLeft), msIconName: 'LargeGrid', onClick: onItemClick })));
	    };
	    Toolbox.prototype._handleKeyDownCapture = function (e) {
	        if (CanvasA11y_1.isEscape(e)) {
	            this.context.store.a11yManager.restoreState();
	            this.context.store.closeToolbox();
	            e.stopPropagation();
	            e.preventDefault();
	        }
	        else if (CanvasA11y_1.isTab(e)) {
	            e.stopPropagation();
	            e.preventDefault();
	        }
	    };
	    return Toolbox;
	}(React.Component));
	Toolbox.contextTypes = {
	    store: React.PropTypes.object.isRequired
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Toolbox;


/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var React = __webpack_require__(24);
	__webpack_require__(201);
	function ToolboxGroup(props) {
	    var banner = props.hasHeader ?
	        React.createElement("header", { className: 'CanvasToolboxItemsGroup-header' }, props.groupName) :
	        React.createElement("hr", { className: 'CanvasToolboxItemsGroup-divider' });
	    return (React.createElement("section", { "aria-label": props.groupName, role: 'group', className: 'CanvasToolboxItemsGroup' },
	        banner,
	        React.createElement("div", { className: 'CanvasToolboxItemsGroup-items' }, props.children)));
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ToolboxGroup;


/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(202);


/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	var content = __webpack_require__(203);
	var loader = __webpack_require__(124);
	
	if(typeof content === "string") content = [[module.id, content]];
	
	// add the styles to the DOM
	for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
	
	if(content.locals) module.exports = content.locals;

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(123)();
	// imports
	
	
	// module
	exports.push([module.id, ".CanvasToolboxItemsGroup{clear:both}.CanvasToolboxItemsGroup-header{background-color:\"[theme:neutralLighter, default: #f4f4f4]\";color:\"[theme:neutralPrimary, default: #333333]\";font-family:\"Segoe UI Semibold WestEuropean\",\"Segoe UI Semibold\",\"Segoe WP Semibold\",\"Segoe UI\",\"Segoe WP\",Tahoma,Arial,sans-serif;font-size:12px;height:32px;letter-spacing:1px;line-height:32px;padding:0 12px}.CanvasToolboxItemsGroup-divider{margin:0;border:0;border-top:1px solid \"[theme:neutralLight, default: #eaeaea]\";color:\"[theme:neutralLight, default: #eaeaea]\"}", ""]);
	
	// exports


/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var React = __webpack_require__(24);
	__webpack_require__(205);
	function ToolboxItem(props) {
	    return (React.createElement("button", { className: 'CanvasToolboxItem', title: props.description, onClick: function () { return props.onClick(JSON.parse(JSON.stringify(props.itemProps))); }, "data-automation-id": props.automationId },
	        React.createElement("span", { className: "CanvasToolboxItem-icon ms-Icon ms-Icon--" + props.msIconName }),
	        React.createElement("span", { className: 'CanvasToolboxItem-title' }, props.displayName)));
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ToolboxItem;


/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(206);


/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	var content = __webpack_require__(207);
	var loader = __webpack_require__(124);
	
	if(typeof content === "string") content = [[module.id, content]];
	
	// add the styles to the DOM
	for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
	
	if(content.locals) module.exports = content.locals;

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(123)();
	// imports
	
	
	// module
	exports.push([module.id, ".CanvasToolboxItem{background-color:transparent;border:1px solid transparent;float:left;height:88px;overflow:hidden;padding:0;width:33.333%}.CanvasToolboxItem:focus,.CanvasToolboxItem:hover{background-color:\"[theme:themeLighter, default:#deecf9]\";cursor:pointer}.CanvasToolboxItem:focus .CanvasToolboxItem-icon,.CanvasToolboxItem:focus .CanvasToolboxItem-title,.CanvasToolboxItem:hover .CanvasToolboxItem-icon,.CanvasToolboxItem:hover .CanvasToolboxItem-title{color:\"[theme:themeDarkAlt, default:#106ebe]\"}.CanvasToolboxItem-icon{color:\"[theme:neutralPrimary, default: #333333]\";display:block;font-size:28px;line-height:48px}.CanvasToolboxItem-title{color:\"[theme:neutralSecondary, default: #666666]\";display:block;font-family:\"Segoe UI Regular WestEuropean\",\"Segoe UI\",\"Segoe WP\",Tahoma,Arial,sans-serif;font-size:13px;padding:0 8px;text-align:center;overflow:hidden;text-overflow:ellipsis}@media screen and (-ms-high-contrast:active){.CanvasToolboxItem:focus,.CanvasToolboxItem:hover{color:#1AEBFF}}@media screen and (-ms-high-contrast:black-on-white){.CanvasToolboxItem:focus,.CanvasToolboxItem:hover{color:#37006E}}", ""]);
	
	// exports


/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var sp_core_library_1 = __webpack_require__(12);
	var GENERIC_ITEM_ID = '00000000-0000-0000-0000-000000000000';
	var LINK_PREVIEW_ITEM_ID = '6410b3b6-d440-4663-8744-378976dc041e_0';
	var VIDEO_ITEM_ID = '275c0095-a77e-4f6d-a2a0-6a7626911518_0';
	var FEATURED_ITEM_IDS = [
	    'd1d91016-032f-456d-98a4-721247c305e8_0',
	    'b7dd04e1-19ce-4b24-9132-b60a1c2b910d_0',
	    VIDEO_ITEM_ID,
	    '490d7c76-1824-45b2-9de3-676421c997fa_0',
	    'daf0b71c-6de8-4ef7-b511-faae7c388708_0' 
	];
	var LINK_PREVIEW_FLIGHT = 904;
	var ToolBoxItemClassifier = (function () {
	    function ToolBoxItemClassifier() {
	        var _this = this;
	        this._toolBoxItemIdToPropsMap = new Map();
	        FEATURED_ITEM_IDS.forEach(function (id) {
	            if (id === VIDEO_ITEM_ID && sp_core_library_1._SPFlight.isEnabled(LINK_PREVIEW_FLIGHT)) {
	                id = LINK_PREVIEW_ITEM_ID;
	            }
	            _this._toolBoxItemIdToPropsMap.set(id, []);
	        });
	        this._toolBoxItemIdToPropsMap.set(GENERIC_ITEM_ID, []);
	    }
	    ToolBoxItemClassifier.prototype.registerItem = function (itemId, itemProps) {
	        var registeredItemProps = this._toolBoxItemIdToPropsMap.get(itemId);
	        if (Array.isArray(registeredItemProps)) {
	            registeredItemProps.push(itemProps);
	        }
	        else {
	            this._toolBoxItemIdToPropsMap.get(GENERIC_ITEM_ID).push(itemProps);
	        }
	    };
	    ToolBoxItemClassifier.prototype.classify = function (isFeatured, sortPredicate) {
	        var toolBoxItemProps = [];
	        if (isFeatured) {
	            this._toolBoxItemIdToPropsMap.forEach(function (items, id) {
	                if (id !== GENERIC_ITEM_ID && items.length > 0) {
	                    toolBoxItemProps.push(items[0]);
	                }
	            });
	        }
	        else {
	            toolBoxItemProps = this._toolBoxItemIdToPropsMap.get(GENERIC_ITEM_ID);
	        }
	        if (Boolean(sortPredicate)) {
	            toolBoxItemProps = toolBoxItemProps.sort(sortPredicate);
	        }
	        return toolBoxItemProps;
	    };
	    return ToolBoxItemClassifier;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ToolBoxItemClassifier;


/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(210);


/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	var content = __webpack_require__(211);
	var loader = __webpack_require__(124);
	
	if(typeof content === "string") content = [[module.id, content]];
	
	// add the styles to the DOM
	for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
	
	if(content.locals) module.exports = content.locals;

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(123)();
	// imports
	
	
	// module
	exports.push([module.id, ".CanvasToolboxContainer{position:absolute;top:0;width:100%;max-width:1280px}[dir=ltr] .CanvasToolboxContainer{left:0}[dir=rtl] .CanvasToolboxContainer{right:0}.CanvasToolbox{background:\"[theme:white, default: #ffffff]\";border:1px solid #d6d6d6;box-shadow:0 0 8px 0 rgba(0,0,0,.2);box-sizing:border-box;height:330px;margin-top:26px;overflow-y:auto;position:absolute;width:292px;z-index:10;left:0;margin-left:auto;margin-right:auto}.CanvasToolbox .CanvasToolbox-Error{background-color:#fde7e9;font-family:\"Segoe UI Semibold WestEuropean\",\"Segoe UI Semibold\",\"Segoe WP Semibold\",\"Segoe UI\",\"Segoe WP\",Tahoma,Arial,sans-serif;font-size:12px;letter-spacing:1px;padding:0 12px}.CanvasToolbox .ms-Spinner-container{margin-left:132px;margin-top:151px}", ""]);
	
	// exports


/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	var content = __webpack_require__(213);
	var loader = __webpack_require__(124);
	
	if(typeof content === "string") content = [[module.id, content]];
	
	// add the styles to the DOM
	for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
	
	if(content.locals) module.exports = content.locals;

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(123)();
	// imports
	
	
	// module
	exports.push([module.id, ".CanvasComponent{position:relative}.CanvasSectionBarBg{position:absolute;top:0;height:100%;width:32px;background-color:#f4f4f4}[dir=ltr] .CanvasSectionBarBg{left:0}[dir=rtl] .CanvasSectionBarBg{right:0}.Canvas{position:relative;padding:0}.Canvas [tabindex=\"-1\"]{outline:0}.Canvas>.CanvasToolboxHint .CanvasToolboxHint-plusButtonWrapper{padding:0 12px}.Canvas>.CanvasToolboxHint .CanvasToolboxHint-plusButtonWrapper.centerAlign{margin:auto}@media screen and (min-width:640px){.Canvas--edit{padding-top:16px;padding-bottom:80px;min-height:100vh}[dir=ltr] .Canvas--edit{margin-left:32px}[dir=rtl] .Canvas--edit{margin-right:32px}[dir=ltr] .Canvas--edit{box-shadow:-4px 0 8px -5px #c8c8c8}[dir=rtl] .Canvas--edit{box-shadow:--4px 0 8px -5px #c8c8c8}[dir=ltr] .Canvas--edit>.CanvasToolboxHint .CanvasToolboxHint-plusButtonWrapper{padding-left:48px}[dir=rtl] .Canvas--edit>.CanvasToolboxHint .CanvasToolboxHint-plusButtonWrapper{padding-right:48px}[dir=ltr] .Canvas--edit>.CanvasToolboxHint .CanvasToolboxHint-plusButtonWrapper{padding-right:32px}[dir=rtl] .Canvas--edit>.CanvasToolboxHint .CanvasToolboxHint-plusButtonWrapper{padding-left:32px}}.Canvas-screenReaderOnly{position:absolute;text-indent:-9999px;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;border:0}", ""]);
	
	// exports


/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	var content = __webpack_require__(215);
	var loader = __webpack_require__(124);
	
	if(typeof content === "string") content = [[module.id, content]];
	
	// add the styles to the DOM
	for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
	
	if(content.locals) module.exports = content.locals;

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(123)();
	// imports
	
	
	// module
	exports.push([module.id, ".Canvas{max-width:1280px;padding:0 12px;position:relative}.Canvas [tabindex=\"-1\"]{outline:0}@media screen and (min-width:640px){.Canvas:not(.Canvas--edit){padding:8px 32px}.Canvas--edit{padding-top:16px;padding-bottom:16px}[dir=ltr] .Canvas--edit{padding-left:48px}[dir=rtl] .Canvas--edit{padding-right:48px}[dir=ltr] .Canvas--edit{padding-right:32px}[dir=rtl] .Canvas--edit{padding-left:32px}}.Canvas-screenReaderOnly{position:absolute;text-indent:-9999px;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;border:0}", ""]);
	
	// exports


/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Shell_1 = __webpack_require__(217);
	var _spShell = Shell_1.default.getInstance();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = _spShell;


/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var sp_telemetry_1 = __webpack_require__(7);
	var sp_core_library_1 = __webpack_require__(12);
	var sp_page_context_1 = __webpack_require__(22);
	var sp_http_1 = __webpack_require__(218);
	var SuiteNavManager_1 = __webpack_require__(219);
	var SPPageChrome_1 = __webpack_require__(227);
	var PreloadedDataReader_1 = __webpack_require__(6);
	var AppPageContext_1 = __webpack_require__(11);
	var Shell = (function () {
	    function Shell() {
	    }
	    Shell.getInstance = function () {
	        if (Shell._instance === undefined) {
	            Shell._instance = new Shell();
	        }
	        return Shell._instance;
	    };
	    Object.defineProperty(Shell.prototype, "serviceScope", {
	        get: function () {
	            return this._rootServiceScope;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Shell.prototype, "pageContext", {
	        get: function () {
	            return this._pageContext;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Shell.prototype, "appPageContext", {
	        get: function () {
	            return this._appPageContext;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Shell.prototype, "httpClient", {
	        get: function () {
	            return this._httpClient;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Shell.prototype, "spHttpClient", {
	        get: function () {
	            return this._spHttpClient;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Shell.prototype, "suiteNav", {
	        get: function () {
	            return this._suiteNav;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Shell.prototype, "environment", {
	        get: function () {
	            return this._environment;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Shell.prototype, "manifestPreloads", {
	        get: function () {
	            return this._manifestPreloads;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Shell.prototype, "pageManager", {
	        get: function () {
	            return this._pageManager;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Shell.prototype.start = function (module, preloadedData) {
	        var application = module.default ||
	            module;
	        this._initializePreload(preloadedData, application);
	        sp_telemetry_1._PerformanceLogger.markApplicationStart();
	        return this._startApplication(application, preloadedData);
	    };
	    Shell.prototype._startApplication = function (application, preloadedData) {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            if (application['__type'] !== 'ClientSideApplication') {
	                reject(new Error('The application is not a subclass of ClientSideApplication'));
	                return;
	            }
	            var qosMonitor = new sp_telemetry_1._QosMonitor('ClientApplication');
	            var qosApplicationData = {
	                alias: application.alias || preloadedData.manifests[0].alias,
	                isInternal: preloadedData.manifests[0].isInternal,
	                manifestId: preloadedData.manifests[0].id
	            };
	            try {
	                _this._application = application;
	                _this._application.load(_this);
	                if (sp_core_library_1.Environment.type !== sp_core_library_1.EnvironmentType.ClassicSharePoint) {
	                    _this._spPageChrome = SPPageChrome_1.default.getInstance(_this._rootServiceScope);
	                    _this._suiteNav = new SuiteNavManager_1.default(_this._application.suiteNavConfiguration(), _this._spPageChrome.suiteNavDiv, _this.serviceScope);
	                    _this._suiteNav.loadSuiteNav();
	                    _this._application.render(_this._spPageChrome.appDiv);
	                }
	                qosMonitor.writeSuccess(qosApplicationData);
	                resolve(_this._application);
	            }
	            catch (e) {
	                qosMonitor.writeUnexpectedFailure('GeneralError', e, qosApplicationData);
	                reject(e);
	            }
	        });
	    };
	    Shell.prototype._initializePreload = function (preloadedData, application) {
	        sp_telemetry_1._TraceLogger.logVerbose(Shell._logSource, 'Starting sp-client-preview');
	        this._rootServiceScope = sp_core_library_1.ServiceScope.startNewRoot();
	        this._rootServiceScope.provide(sp_telemetry_1._logSourceServiceKey, Shell._logSource);
	        this._pageManager = this._rootServiceScope
	            .createDefaultAndProvide(sp_page_context_1.PageManager.serviceKey);
	        this._pageContext = this._rootServiceScope
	            .createDefaultAndProvide(sp_page_context_1.PageContext.serviceKey);
	        this._appPageContext = this._rootServiceScope
	            .createDefaultAndProvide(AppPageContext_1.appPageContextServiceKey);
	        this._httpClient = this._rootServiceScope.createAndProvide(sp_http_1.HttpClient.serviceKey, sp_http_1.HttpClient);
	        this._spHttpClient = this._rootServiceScope.createAndProvide(sp_http_1.SPHttpClient.serviceKey, sp_http_1.SPHttpClient);
	        this._rootServiceScope.finish();
	        this._pageManager.navigateToPage(preloadedData.spPageContextInfo.webServerRelativeUrl, 
	        sp_page_context_1.SharePointPageContextDataProvider._createPageContextData(preloadedData.spPageContextInfo), 
	        preloadedData.spPageContextInfo);
	        this._preloadedDataReader = new PreloadedDataReader_1.default(preloadedData);
	        this._initializeDigestCache(this._rootServiceScope, preloadedData);
	        this._preloadedDataReader.initializePageContext(this._appPageContext);
	        this._spPageChrome = SPPageChrome_1.default.getInstance(this._rootServiceScope);
	        this._manifestPreloads = preloadedData;
	        this._manifestPreloads.spPageContextInfo = undefined;
	    };
	    Shell.prototype._initializeDigestCache = function (serviceScope, preloadedData) {
	        if (preloadedData.contextWebInfo && preloadedData.spPageContextInfo) {
	            serviceScope.whenFinished(function () {
	                var digestCache = serviceScope.consume(sp_http_1.DigestCache.serviceKey);
	                sp_telemetry_1._TraceLogger.logVerbose(Shell._logSource, 'Shell: Added preloaded FormDigestValue to cache');
	                var expirationTimestamp = performance.now()
	                    + 1000 * preloadedData.contextWebInfo.FormDigestTimeoutSeconds;
	                digestCache.addDigestToCache(preloadedData.spPageContextInfo.webServerRelativeUrl, preloadedData.contextWebInfo.FormDigestValue, expirationTimestamp);
	                digestCache.addDigestToCache(preloadedData.spPageContextInfo.webAbsoluteUrl, preloadedData.contextWebInfo.FormDigestValue, expirationTimestamp);
	            });
	        }
	    };
	    return Shell;
	}());
	Shell._logSource = sp_telemetry_1._LogSource.create('Shell');
	Shell._instance = undefined;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Shell;


/***/ },
/* 218 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_218__;

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var sp_telemetry_1 = __webpack_require__(7);
	var sp_http_1 = __webpack_require__(218);
	var sp_loader_1 = __webpack_require__(220);
	var odsp_utilities_bundle_1 = __webpack_require__(33);
	var ISuiteNavDataSource_1 = __webpack_require__(221);
	var SPOSuiteNavDataSource_1 = __webpack_require__(222);
	var OnPremSuiteNavDataSource_1 = __webpack_require__(223);
	var O365ShellWrapper_1 = __webpack_require__(224);
	var SPPageChrome_1 = __webpack_require__(227);
	var SuiteNavManager = (function () {
	    function SuiteNavManager(suiteNavManagerConfiguration, suiteNavDiv, serviceScope) {
	        var _this = this;
	        this._suiteNavManagerConfiguration = suiteNavManagerConfiguration;
	        this._suiteNavDataSource = undefined;
	        this._o365Shell = undefined;
	        this._suiteNavManagerConfiguration.o365ShellRenderSettings.top = suiteNavDiv.id;
	        this._suiteNavDiv = suiteNavDiv;
	        this._serviceScope = serviceScope;
	        serviceScope.whenFinished(function () {
	            _this._httpClient = serviceScope.consume(sp_http_1.SPHttpClient.serviceKey);
	        });
	        if (!suiteNavManagerConfiguration.isSuiteNavDisabled()) {
	            SPPageChrome_1.default.getInstance(this._serviceScope).changeSuiteNavHeight(SuiteNavManager._defaultSuiteNavHeight);
	        }
	    }
	    SuiteNavManager._updateCache = function (model, service) {
	        SuiteNavManager._cache.setValue(SuiteNavManager.DATA_KEY, model);
	        SuiteNavManager._cache.setValue(SuiteNavManager.DATE_KEY, new Date());
	        SuiteNavManager._cache.setValue(SuiteNavManager.VERSION_KEY, SuiteNavManager.CACHE_VERSION);
	        SuiteNavManager._cache.setValue(SuiteNavManager.SESSION_KEY, true, odsp_utilities_bundle_1.DataStoreCachingType.session);
	        SuiteNavManager._cache.setValue(SuiteNavManager.SERVICE_KEY, service);
	    };
	    SuiteNavManager._clearCache = function () {
	        SuiteNavManager._cache.remove(SuiteNavManager.DATA_KEY);
	        SuiteNavManager._cache.remove(SuiteNavManager.DATE_KEY);
	        SuiteNavManager._cache.remove(SuiteNavManager.VERSION_KEY);
	        SuiteNavManager._cache.remove(SuiteNavManager.SERVICE_KEY);
	    };
	    SuiteNavManager.prototype.setComponentVisibility = function (setVisible) {
	        var _this = this;
	        this._suiteNavDiv.hidden = !setVisible;
	        if (this._suiteNavModel) {
	            this._suiteNavModel.then(function (model) {
	                SPPageChrome_1.default.getInstance(_this._serviceScope).changeSuiteNavHeight(setVisible ?
	                    model.NavBarData.Dimensions.Top :
	                    '0px');
	            });
	        }
	    };
	    SuiteNavManager.prototype.loadSuiteNav = function () {
	        var _this = this;
	        if (!this._suiteNavManagerConfiguration.isSuiteNavDisabled()) {
	            this._suiteNavModel = this._getSuiteNavModel();
	            this._suiteNavModel
	                .then(function (suiteNavModel) { return _this._modifySuiteNavModel(suiteNavModel); })
	                .then(function (suiteNavModel) { return _this._getSuiteNavShell(suiteNavModel); })
	                .then(function (o365ShellWrapper) { return _this._renderSuiteNav(o365ShellWrapper); });
	        }
	    };
	    SuiteNavManager.prototype._getSuiteNavModel = function () {
	        if (this._isCacheValid() && !this._isCacheOutdated()) {
	            return this._loadSuiteNavFromCache();
	        }
	        else {
	            SuiteNavManager._clearCache();
	            return this._loadSuiteNavFromServer();
	        }
	    };
	    SuiteNavManager.prototype._loadSuiteNavFromCache = function () {
	        var _this = this;
	        return new Promise(function (complete) {
	            SuiteNavManager._cache.getValue(SuiteNavManager.SERVICE_KEY) ===
	                ISuiteNavDataSource_1.SuiteNavSource.SPO ?
	                _this._suiteNavDataSource = _this._createSPODataSource() :
	                _this._suiteNavDataSource = _this._createOnPremDataSource();
	            complete(SuiteNavManager._cache.getValue(SuiteNavManager.DATA_KEY));
	        });
	    };
	    SuiteNavManager.prototype._loadSuiteNavFromServer = function () {
	        var _this = this;
	        this._suiteNavDataSource = this._createSPODataSource();
	        var onPremDataSource = this._createOnPremDataSource();
	        var onPremSuiteNavResponse = onPremDataSource.loadData();
	        onPremSuiteNavResponse.catch(function () {
	            _this._createSuiteNavErrorLogEntry('loadData', 'Failed to retrieve Hybrid SuiteNavData');
	        });
	        return this._suiteNavDataSource.loadData().then(function (response) {
	            return response;
	        }).catch(function () {
	            _this._createSuiteNavErrorLogEntry('loadData', 'Failed to retrieve SPO SuiteNavData');
	            _this._suiteNavDataSource = onPremDataSource;
	            return onPremSuiteNavResponse;
	        });
	    };
	    SuiteNavManager.prototype._modifySuiteNavModel = function (suiteNavResponse) {
	        suiteNavResponse.NavBarData =
	            this._suiteNavManagerConfiguration.modifySuiteNavData(suiteNavResponse.NavBarData);
	        return suiteNavResponse;
	    };
	    SuiteNavManager.prototype._getSuiteNavShell = function (suiteNavModel) {
	        if (!suiteNavModel) {
	            this._createSuiteNavErrorLogEntry('getO365Shell', 'SuiteNavModel is undefined');
	        }
	        suiteNavModel.CacheToken = this._suiteNavManagerConfiguration.cacheToken;
	        suiteNavModel.UserIdentifier = this._suiteNavManagerConfiguration.systemUserKey;
	        SuiteNavManager._updateCache(suiteNavModel, this._suiteNavDataSource.suiteNavService);
	        SPPageChrome_1.default.getInstance(this._serviceScope).changeSuiteNavHeight(suiteNavModel.NavBarData.Dimensions.Top);
	        var element = document.createElement('link');
	        element.rel = 'stylesheet';
	        element.type = 'text/css';
	        element.href = suiteNavModel.CssUrl;
	        document.head.appendChild(element);
	        var promise = new Promise(function (complete) {
	            sp_loader_1.SPComponentLoader.loadScript(suiteNavModel.JsUrl, { globalExportsName: '_o365su' }).then(function () {
	                var o365Shell = new O365ShellWrapper_1.default();
	                o365Shell.SetData(suiteNavModel.NavBarData);
	                complete(o365Shell);
	            });
	        });
	        return promise;
	    };
	    SuiteNavManager.prototype._renderSuiteNav = function (o365Shell) {
	        var _this = this;
	        this._o365Shell = o365Shell;
	        this._o365Shell.RenderAsync(this._suiteNavManagerConfiguration.o365ShellRenderSettings, function () {
	            _this._onRender(o365Shell);
	        }, function () {
	            _this._onPostRender();
	        });
	        this._o365Shell.OnHasMember('LoadShellPlus', function () {
	            _this._loadShellPlus(_this._o365Shell);
	        });
	    };
	    SuiteNavManager.prototype._onRender = function (o365Shell) {
	        if (this._suiteNavManagerConfiguration.hamburgerCallback) {
	            if (o365Shell.Navigation.OnHamburgerButtonClick) {
	                o365Shell.Navigation.OnHamburgerButtonClick(this._suiteNavManagerConfiguration.hamburgerCallback);
	            }
	        }
	    };
	    SuiteNavManager.prototype._onPostRender = function () {
	        if (this._suiteNavManagerConfiguration.suiteNavPostRenderCallback) {
	            this._suiteNavManagerConfiguration.suiteNavPostRenderCallback();
	        }
	    };
	    SuiteNavManager.prototype._loadShellPlus = function (o365Shell) {
	        var _this = this;
	        return new Promise(function () {
	            o365Shell.LoadShellPlus();
	        }).catch(function (errorMessage) {
	            _this._createSuiteNavErrorLogEntry('loadShellPlus', errorMessage);
	        });
	    };
	    SuiteNavManager.prototype._isCacheValid = function () {
	        var model = SuiteNavManager._cache.getValue(SuiteNavManager.DATA_KEY);
	        var oldVersion = SuiteNavManager._cache.getValue(SuiteNavManager.VERSION_KEY);
	        return (model && model.NavBarData &&
	            ((model.JsUrl && model.CssUrl)) &&
	            oldVersion === SuiteNavManager.CACHE_VERSION &&
	            model.UserIdentifier &&
	            model.UserIdentifier === this._suiteNavManagerConfiguration.systemUserKey &&
	            model.CacheToken === this._suiteNavManagerConfiguration.cacheToken);
	    };
	    SuiteNavManager.prototype._isCacheOutdated = function () {
	        var cacheDate = Date.parse(SuiteNavManager._cache.getValue(SuiteNavManager.DATE_KEY));
	        var currentDate = new Date();
	        var cachedThisSession = SuiteNavManager._cache.getValue(SuiteNavManager.SESSION_KEY, odsp_utilities_bundle_1.DataStoreCachingType.session);
	        return (isNaN(cacheDate) ||
	            currentDate.getTime() - cacheDate > 24 * 60 * 60 * 1000 ||
	            (odsp_utilities_bundle_1.DataStore.hasStorageType(odsp_utilities_bundle_1.DataStoreCachingType.session) && !cachedThisSession));
	    };
	    SuiteNavManager.prototype._createSPODataSource = function () {
	        return new SPOSuiteNavDataSource_1.default(this._httpClient, this._suiteNavManagerConfiguration.currentUICultureName, this._suiteNavManagerConfiguration.webServerRelativeUrl);
	    };
	    SuiteNavManager.prototype._createOnPremDataSource = function () {
	        return new OnPremSuiteNavDataSource_1.default(this._httpClient, this._suiteNavManagerConfiguration.currentUICultureName, this._suiteNavManagerConfiguration.webServerRelativeUrl);
	    };
	    SuiteNavManager.prototype._createSuiteNavErrorLogEntry = function (moduleName, errorMessage) {
	        sp_telemetry_1._TraceLogger.logVerbose(SuiteNavManager._logSource, 'SuiteNavManager ' + moduleName + ' ' + errorMessage);
	    };
	    return SuiteNavManager;
	}());
	SuiteNavManager._defaultSuiteNavHeight = '50px';
	SuiteNavManager.CACHE_PREFIX = 'SPPPLATSuiteNav';
	SuiteNavManager.SERVICE_KEY = 'SuiteNavService';
	SuiteNavManager.DATA_KEY = 'Data';
	SuiteNavManager.DATE_KEY = 'CacheDate';
	SuiteNavManager.VERSION_KEY = 'CacheVersion';
	SuiteNavManager.SESSION_KEY = 'CachedThisSession';
	SuiteNavManager.CACHE_VERSION = 1;
	SuiteNavManager._cache = new odsp_utilities_bundle_1.DataStore(SuiteNavManager.CACHE_PREFIX, odsp_utilities_bundle_1.DataStoreCachingType.local);
	SuiteNavManager._logSource = sp_telemetry_1._LogSource.create('SuiteNavManager');
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SuiteNavManager;


/***/ },
/* 220 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_220__;

/***/ },
/* 221 */
/***/ function(module, exports) {

	"use strict";
	var SuiteNavSource;
	(function (SuiteNavSource) {
	    SuiteNavSource[SuiteNavSource["SPO"] = 0] = "SPO";
	    SuiteNavSource[SuiteNavSource["OnPrem"] = 1] = "OnPrem";
	})(SuiteNavSource = exports.SuiteNavSource || (exports.SuiteNavSource = {}));


/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var ISuiteNavDataSource_1 = __webpack_require__(221);
	var sp_telemetry_1 = __webpack_require__(7);
	var sp_http_1 = __webpack_require__(218);
	var SPOSuiteNavDataSource = (function () {
	    function SPOSuiteNavDataSource(httpClient, currentUICultureName, webServerRelativeUrl) {
	        this.suiteNavService = ISuiteNavDataSource_1.SuiteNavSource.SPO;
	        this._currentUICultureName = currentUICultureName;
	        this._spHttpClient = httpClient;
	        this._siteRelUrl = webServerRelativeUrl === '/' ? '' : webServerRelativeUrl;
	    }
	    SPOSuiteNavDataSource.prototype.loadData = function () {
	        var url = this._siteRelUrl
	            + '/_layouts/15/online/handlers/SpoSuiteLinks.ashx?Locale='
	            + this._currentUICultureName
	            + '&v=2&mobilereq=0&msajax=1';
	        return this._spHttpClient.post(url, sp_http_1.SPHttpClient.configurations.v1, {})
	            .then(function (response) {
	            if (response.status !== 200 || response.headers.get('SharePointError')) {
	                sp_telemetry_1._TraceLogger.logVerbose(SPOSuiteNavDataSource._logSource, 'Failed to retrieve SPO SuiteNavData');
	                return Promise.reject('Failed to retrieve SPO SuiteNavData');
	            }
	            return response.json().then(function (jsonResponse) {
	                return jsonResponse;
	            });
	        });
	    };
	    return SPOSuiteNavDataSource;
	}());
	SPOSuiteNavDataSource._logSource = sp_telemetry_1._LogSource.create('SPOSuiteNavDataSource');
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SPOSuiteNavDataSource;


/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var SuiteNavManager_1 = __webpack_require__(219);
	var ISuiteNavDataSource_1 = __webpack_require__(221);
	var sp_telemetry_1 = __webpack_require__(7);
	var sp_http_1 = __webpack_require__(218);
	var OnPremSuiteNavDataSource = (function () {
	    function OnPremSuiteNavDataSource(httpClient, currentUICultureName, webServerRelativeUrl) {
	        this.suiteNavService = ISuiteNavDataSource_1.SuiteNavSource.OnPrem;
	        this._currentUICultureName = currentUICultureName;
	        this._spHttpClient = httpClient;
	        this._siteRelUrl = webServerRelativeUrl === '/' ? '' : webServerRelativeUrl;
	    }
	    OnPremSuiteNavDataSource.prototype.loadData = function () {
	        var _this = this;
	        var url = this._siteRelUrl
	            + '/_api/Microsoft.SharePoint.Portal.SuiteNavData.GetSuiteNavData?v=2&Locale='
	            + this._currentUICultureName;
	        return this._spHttpClient.get(url, sp_http_1.SPHttpClient.configurations.v1)
	            .then(function (response) {
	            if (response.status !== 200) {
	                _this._logAndThrowSuiteNavLoadingError();
	            }
	            return response.json().then(function (jsonString) {
	                if (jsonString.value === '') {
	                    _this._logAndThrowSuiteNavLoadingError();
	                }
	                else {
	                    var suiteNavResponse = JSON.parse(jsonString.value);
	                    if (!suiteNavResponse.NavBarData.Dimensions) {
	                        suiteNavResponse.NavBarData.Dimensions = { Top: SuiteNavManager_1.default._defaultSuiteNavHeight };
	                    }
	                    return suiteNavResponse;
	                }
	            });
	        });
	    };
	    OnPremSuiteNavDataSource.prototype._logAndThrowSuiteNavLoadingError = function () {
	        sp_telemetry_1._TraceLogger.logVerbose(OnPremSuiteNavDataSource._logSource, 'Failed to retrieve Hybrid SuiteNavData');
	        throw new Error('Failed to retrieve Hybrid SuiteNavData');
	    };
	    return OnPremSuiteNavDataSource;
	}());
	OnPremSuiteNavDataSource._logSource = sp_telemetry_1._LogSource.create('OnPremSuiteNavDataSource');
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = OnPremSuiteNavDataSource;


/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var FlexPaneWrapper_1 = __webpack_require__(225);
	var NavigationWrapper_1 = __webpack_require__(226);
	var O365ShellWrapper = (function () {
	    function O365ShellWrapper() {
	        this._postRenderSignal = new Promise(function () {
	            return;
	        });
	        this.FlexPane = new FlexPaneWrapper_1.default();
	        this.Navigation = new NavigationWrapper_1.default();
	    }
	    O365ShellWrapper.prototype.SetData = function (shellData) {
	        O365Shell.SetData(shellData);
	    };
	    O365ShellWrapper.prototype.Render = function (renderSettings, postRendercallback) {
	        O365Shell.Render(renderSettings, postRendercallback);
	    };
	    O365ShellWrapper.prototype.RenderAsync = function (renderSettings, renderCallback, postRenderCallback) {
	        O365Shell.RenderAsync(renderSettings, renderCallback, postRenderCallback);
	    };
	    O365ShellWrapper.prototype.LoadShellPlus = function () {
	        O365Shell.LoadShellPlus();
	    };
	    O365ShellWrapper.prototype.DoesShellExist = function () {
	        return typeof O365Shell !== 'undefined';
	    };
	    O365ShellWrapper.prototype.OnHasMember = function (memberName, callback) {
	        var _this = this;
	        if (this._hasMember(memberName)) {
	            callback();
	        }
	        else {
	            this._postRenderSignal.then(function () { return _this.OnHasMember(memberName, callback); });
	        }
	    };
	    O365ShellWrapper.prototype._hasMember = function (memberName) {
	        return this.DoesShellExist() && Boolean(O365Shell[memberName]);
	    };
	    return O365ShellWrapper;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = O365ShellWrapper;


/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var sp_telemetry_1 = __webpack_require__(7);
	var FlexPaneWrapper = (function () {
	    function FlexPaneWrapper() {
	    }
	    FlexPaneWrapper.prototype.OnFlexPaneVisibilityChanged = function (callback) {
	        try {
	            return O365Shell.FlexPane.OnFlexPaneVisibilityChanged(callback);
	        }
	        catch (e) {
	            this._createFlexPaneWrapperErrorLogEntry('OnFlexPaneVisibilityChanged', e);
	        }
	    };
	    FlexPaneWrapper.prototype.OpenFlexPaneForProvider = function (provider) {
	        try {
	            O365Shell.FlexPane.OpenFlexPaneForProvider(provider);
	        }
	        catch (e) {
	            this._createFlexPaneWrapperErrorLogEntry('OpenFlexPaneForProvider', e);
	        }
	    };
	    FlexPaneWrapper.prototype._createFlexPaneWrapperErrorLogEntry = function (moduleName, errorMessage) {
	        sp_telemetry_1._TraceLogger.logVerbose(FlexPaneWrapper.logSource, 'FlexPaneWrapper ' + moduleName + ' ' + errorMessage);
	    };
	    return FlexPaneWrapper;
	}());
	FlexPaneWrapper.logSource = sp_telemetry_1._LogSource.create('FlexPaneWrapper');
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = FlexPaneWrapper;


/***/ },
/* 226 */
/***/ function(module, exports) {

	"use strict";
	var NavigationWrapper = (function () {
	    function NavigationWrapper() {
	    }
	    NavigationWrapper.prototype.OnLinkClick = function (callback) {
	        return O365Shell.Navigation.OnLinkClick(callback);
	    };
	    NavigationWrapper.prototype.OnHamburgerButtonClick = function (callback) {
	        return O365Shell.Navigation.OnHamburgerButtonClick(callback);
	    };
	    return NavigationWrapper;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = NavigationWrapper;


/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var SPThemeProvider_1 = __webpack_require__(228);
	var sp_core_library_1 = __webpack_require__(12);
	var SPGlobalErrorHandler_1 = __webpack_require__(230);
	__webpack_require__(231);
	var SPPageChrome = (function () {
	    function SPPageChrome(serviceScope) {
	        this._createPageChrome();
	        if (!sp_core_library_1._SPKillSwitch.isActivated(sp_core_library_1.Guid.tryParse('48CB5A9D-4E94-40F0-B51F-24480C28E565'), '7/13/2016', 'EnableTheming')) {
	            this._spThemeProvider = new SPThemeProvider_1.default(serviceScope);
	            this._spThemeProvider.loadThemedStyles();
	        }
	    }
	    SPPageChrome.getInstance = function (serviceScope) {
	        if (SPPageChrome._instance === undefined) {
	            SPPageChrome._instance = new SPPageChrome(serviceScope);
	        }
	        return SPPageChrome._instance;
	    };
	    SPPageChrome.prototype.changeSuiteNavHeight = function (pixels) {
	        var top = parseInt(pixels, 10) + 'px';
	        this.appDiv.style.top = top;
	        this.appDiv.style.height = "calc(100% - " + top + ")";
	        this.propertyPaneContainerDiv.style.top = top;
	        this.suiteNavDiv.style.height = top;
	    };
	    SPPageChrome.prototype._createPageChrome = function () {
	        document.body.className = 'ms-font-m';
	        var pageChromeDiv = document.createElement('div');
	        pageChromeDiv.setAttribute('class', 'SPPageChrome');
	        this.suiteNavDiv = document.createElement('div');
	        this.suiteNavDiv.setAttribute('id', 'SuiteNavPlaceHolder');
	        this.appDiv = document.createElement('div');
	        this.appDiv.setAttribute('class', 'SPPageChrome-app spPageContentTransition');
	        this.appDiv.setAttribute('id', 'spPageChromeAppDiv');
	        this.propertyPaneContainerDiv = document.createElement('div');
	        this.propertyPaneContainerDiv.setAttribute('class', 'spPropertyPaneContainer spPageContentTransition');
	        this.propertyPaneContainerDiv.setAttribute('id', 'spPropertyPaneContainer');
	        pageChromeDiv.appendChild(this.suiteNavDiv);
	        pageChromeDiv.appendChild(this.appDiv);
	        pageChromeDiv.appendChild(this.propertyPaneContainerDiv);
	        document.body.appendChild(pageChromeDiv);
	        if (this._shouldHandleGlobalErrors && !window.onerror) {
	            window.onerror = SPGlobalErrorHandler_1.default.basicTracingHandler;
	        }
	    };
	    Object.defineProperty(SPPageChrome.prototype, "_shouldHandleGlobalErrors", {
	        get: function () {
	            return !sp_core_library_1._SPKillSwitch.isActivated(sp_core_library_1.Guid.tryParse('BAC66CD5-F1C1-4BDD-9FFD-A8C6044EB285'), '10/13/2016', 'GlobalErrorHandler');
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return SPPageChrome;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SPPageChrome;


/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var odsp_utilities_bundle_1 = __webpack_require__(33);
	var odsp_utilities_bundle_2 = __webpack_require__(33);
	var odsp_utilities_bundle_3 = __webpack_require__(33);
	var sp_telemetry_1 = __webpack_require__(7);
	var sp_http_1 = __webpack_require__(218);
	var AppPageContext_1 = __webpack_require__(11);
	var SPWebTemplateIds_1 = __webpack_require__(229);
	var load_themed_styles_1 = __webpack_require__(124);
	var SPThemeProvider = (function () {
	    function SPThemeProvider(serviceScope) {
	        var _this = this;
	        serviceScope.whenFinished(function () {
	            _this._pageContext = serviceScope.consume(AppPageContext_1.appPageContextServiceKey);
	            _this._httpClient = serviceScope.consume(sp_http_1.SPHttpClient.serviceKey);
	            _this._themeProvider = new odsp_utilities_bundle_3.ThemeProvider(_this.loadData.bind(_this));
	            try {
	                var contextUri = new odsp_utilities_bundle_3.Uri(window.location.href);
	                _this._themeOverride = contextUri.getQueryParameter('ThemeOverride');
	            }
	            catch (ignoredUrlException) {
	            }
	        });
	    }
	    SPThemeProvider.prototype.loadThemedStyles = function () {
	        var cacheToken = this.getCacheToken();
	        this._themeProvider.loadThemeTokenMap(cacheToken)
	            .then(function (palette) {
	            load_themed_styles_1.loadTheme(palette);
	        });
	    };
	    SPThemeProvider.prototype.loadData = function () {
	        var _this = this;
	        var tagName = 'SPThemeProvider.loadData';
	        var qosMonitor = new sp_telemetry_1._QosMonitor(tagName);
	        if (this._pageContext.core.webTemplate) {
	            if (this._pageContext.core.webTemplate === SPWebTemplateIds_1.default.teamSite ||
	                this._pageContext.core.webTemplate === SPWebTemplateIds_1.default.groupSite) {
	                if (this._pageContext.core.themedCssFolderUrl) {
	                    var getThemeDataUrl_1 = odsp_utilities_bundle_3.WebTheme.makeWebThemeRestUrl(this._pageContext.core.siteServerRelativeUrl, this._pageContext.core.currentUICultureName, this._themeOverride);
	                    return new odsp_utilities_bundle_1.Promise(function (resolve, reject) {
	                        _this._httpClient.get(getThemeDataUrl_1, sp_http_1.SPHttpClient.configurations.v1)
	                            .then(function (response) {
	                            if (response.status === 200) {
	                                return response.json()
	                                    .then(function (json) {
	                                    var themeDataRaw = JSON.parse(json.value);
	                                    if (themeDataRaw) {
	                                        var themeData = odsp_utilities_bundle_3.WebTheme.processRawThemeData(themeDataRaw);
	                                        themeData.cacheToken = _this._pageContext.core.themedCssFolderUrl;
	                                        qosMonitor.writeSuccess();
	                                        resolve(themeData);
	                                    }
	                                    else {
	                                        qosMonitor.writeUnexpectedFailure();
	                                        resolve(undefined);
	                                    }
	                                });
	                            }
	                            else {
	                                qosMonitor.writeUnexpectedFailure(tagName, new Error(response.statusText));
	                                resolve(undefined);
	                            }
	                        });
	                    });
	                }
	                else if (this._pageContext.core.groupColor) {
	                    var htmlThemeColor = this._pageContext.core.groupColor;
	                    var rgbaThemeColor = odsp_utilities_bundle_2.RgbaColor.fromHtmlColor(htmlThemeColor);
	                    if (rgbaThemeColor) {
	                        var fabTheme = {
	                            backgroundImageUri: undefined,
	                            cacheToken: this.getCacheToken(),
	                            isDefault: false,
	                            isInverted: false,
	                            palette: odsp_utilities_bundle_2.FabricTheming.generateFabricColors(rgbaThemeColor),
	                            version: '1'
	                        };
	                        return odsp_utilities_bundle_1.Promise.wrap(fabTheme);
	                    }
	                    else {
	                        return odsp_utilities_bundle_1.Promise.wrap();
	                    }
	                }
	                else {
	                    qosMonitor.writeSuccess();
	                    return odsp_utilities_bundle_1.Promise.wrap(this.createDefaultTheme());
	                }
	            }
	            else {
	                qosMonitor.writeExpectedFailure("Unsuppted WebTemplate: " + this._pageContext.core.webTemplate);
	                return odsp_utilities_bundle_1.Promise.wrap(this.createDefaultTheme());
	            }
	        }
	        else {
	            qosMonitor.writeUnexpectedFailure("pageContext.core.webTemplate is undefined");
	            return odsp_utilities_bundle_1.Promise.wrap(this.createDefaultTheme());
	        }
	    };
	    SPThemeProvider.prototype.createDefaultTheme = function () {
	        var themeData = {
	            backgroundImageUri: undefined,
	            cacheToken: undefined,
	            isDefault: undefined,
	            isInverted: false,
	            palette: undefined,
	            version: '1.0'
	        };
	        return themeData;
	    };
	    SPThemeProvider.prototype.getCacheToken = function () {
	        var webTemplate = String(this._pageContext.core.webTemplate);
	        var groupColor = webTemplate === SPWebTemplateIds_1.default.teamSite ||
	            webTemplate === SPWebTemplateIds_1.default.groupSite ? this._pageContext.core.groupColor : undefined;
	        var groupColorToken = groupColor && (groupColor + ';web#' + webTemplate);
	        return this._themeOverride || this._pageContext.core.themedCssFolderUrl || groupColorToken;
	    };
	    return SPThemeProvider;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SPThemeProvider;


/***/ },
/* 229 */
/***/ function(module, exports) {

	"use strict";
	var SPWebTemplateIds = (function () {
	    function SPWebTemplateIds() {
	    }
	    return SPWebTemplateIds;
	}());
	SPWebTemplateIds.teamSite = '1';
	SPWebTemplateIds.groupSite = '64';
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SPWebTemplateIds;


/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var sp_telemetry_1 = __webpack_require__(7);
	var SPGlobalErrorHandler = (function () {
	    function SPGlobalErrorHandler() {
	    }
	    SPGlobalErrorHandler.basicTracingHandler = function (message, filename, lineno, colno, error) {
	        var eventName = 'window.onerror';
	        if (SPGlobalErrorHandler._isFromFile(filename, 'QUILL')) {
	            SPGlobalErrorHandler._logErrorFromFile(message, lineno, colno, error, eventName, SPGlobalErrorHandler._quillLogSource);
	        }
	        else if (SPGlobalErrorHandler._isFromFile(filename, 'CKEDITOR')) {
	            SPGlobalErrorHandler._logErrorFromFile(message, lineno, colno, error, eventName, SPGlobalErrorHandler._ckLogSource);
	        }
	        else {
	            var genericError = error ||
	                new Error("Error:" + message + ", file:" + filename + ", line:" + lineno + ", column:" + colno);
	            sp_telemetry_1._TraceLogger.logError(SPGlobalErrorHandler._genericLogSource, genericError, eventName);
	        }
	    };
	    SPGlobalErrorHandler._isFromFile = function (filename, match) {
	        return filename && filename.toUpperCase().indexOf(match) !== -1;
	    };
	    SPGlobalErrorHandler._logErrorFromFile = function (message, lineno, colno, error, eventName, logSource) {
	        var fileError = error ||
	            new Error("Error:" + message + ", line:" + lineno + ", column:" + colno);
	        sp_telemetry_1._TraceLogger.logError(logSource, fileError, eventName);
	    };
	    return SPGlobalErrorHandler;
	}());
	SPGlobalErrorHandler._quillLogSource = sp_telemetry_1._LogSource.create('QuillGlobalError');
	SPGlobalErrorHandler._ckLogSource = sp_telemetry_1._LogSource.create('CKGlobalError');
	SPGlobalErrorHandler._genericLogSource = sp_telemetry_1._LogSource.create('OtherGlobalError');
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SPGlobalErrorHandler;


/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(232);


/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	var content = __webpack_require__(233);
	var loader = __webpack_require__(124);
	
	if(typeof content === "string") content = [[module.id, content]];
	
	// add the styles to the DOM
	for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
	
	if(content.locals) module.exports = content.locals;

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(123)();
	// imports
	
	
	// module
	exports.push([module.id, "body{overflow:hidden}#SuiteNavPlaceHolder{background-color:#333;position:absolute;width:100%;z-index:5}.SPPageChrome-app{position:absolute;right:0;bottom:0;left:0;overflow:visible}.spPropertyPaneContainer{top:50px;position:fixed;right:-340px;bottom:0;z-index:999}.spPageContentTransition{transition:right 367ms cubic-bezier(.1,.9,.2,1);-webkit-transition:right 367ms cubic-bezier(.1,.9,.2,1)}", ""]);
	
	// exports


/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var odsp_utilities_bundle_1 = __webpack_require__(33);
	var sp_telemetry_1 = __webpack_require__(7);
	var UserPhotoSize;
	(function (UserPhotoSize) {
	    UserPhotoSize[UserPhotoSize["Small"] = 1] = "Small";
	    UserPhotoSize[UserPhotoSize["Medium"] = 2] = "Medium";
	    UserPhotoSize[UserPhotoSize["Large"] = 3] = "Large";
	})(UserPhotoSize = exports.UserPhotoSize || (exports.UserPhotoSize = {}));
	var AlternativeUrlMap = (function () {
	    function AlternativeUrlMap() {
	    }
	    AlternativeUrlMap.tryGetAlternativeUrl = function (primaryUrl) {
	        var qosMonitor = new sp_telemetry_1._QosMonitor('tryGetAlternativeUrl');
	        try {
	            if (AlternativeUrlMap._urlTable) {
	                var alternativeUrl = AlternativeUrlMap._urlTable.get(primaryUrl);
	                if (alternativeUrl) {
	                    var uri = new odsp_utilities_bundle_1.Uri(alternativeUrl);
	                    if (uri) {
	                        var authToken = uri.getQueryParameter('_eat_');
	                        if (authToken) {
	                            var split = authToken.split('_');
	                            if (split && split.length === 2 && split[0] && Number(split[0])) {
	                                var expirationTime = Number(split[0]);
	                                expirationTime -= 30;
	                                if (((new Date()).getTime() / 1000) > expirationTime) {
	                                    AlternativeUrlMap._urlTable.delete(primaryUrl);
	                                    qosMonitor.writeExpectedFailure('PrivateCdnUrlExpired');
	                                    return undefined;
	                                }
	                            }
	                            else {
	                                qosMonitor.writeUnexpectedFailure('EatParamUnexpectedFormat', undefined, [{ 'eatParam': authToken }]);
	                            }
	                        }
	                    }
	                    qosMonitor.writeSuccess([{ 'alternativeUrlFound': true }]);
	                    return alternativeUrl;
	                }
	            }
	        }
	        catch (error) {
	            qosMonitor.writeUnexpectedFailure('Unexpected', error);
	        }
	        qosMonitor.writeSuccess([{ 'alternativeUrlFound': false }]);
	        return undefined;
	    };
	    AlternativeUrlMap.updateMap = function (alternativeUrlTable) {
	        if (!alternativeUrlTable) {
	            return;
	        }
	        Object.keys(alternativeUrlTable).forEach(function (key) {
	            AlternativeUrlMap._urlTable.set(key, alternativeUrlTable[key]);
	        });
	    };
	    Object.defineProperty(AlternativeUrlMap, "UrlTable", {
	        get: function () {
	            return AlternativeUrlMap._urlTable;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    AlternativeUrlMap.getUserPhotoUrl = function (accountName, size) {
	        var userPhotoBaseUrl = AlternativeUrlMap.tryGetAlternativeUrl('UserPhotoAspx');
	        if (!userPhotoBaseUrl) {
	            userPhotoBaseUrl = '/_layouts/15/userphoto.aspx';
	        }
	        var userPhotoUri = new odsp_utilities_bundle_1.Uri(userPhotoBaseUrl);
	        if (!size) {
	            size = UserPhotoSize.Small;
	        }
	        if (!accountName) {
	            accountName = '';
	        }
	        var sizeLetter;
	        switch (size) {
	            case UserPhotoSize.Medium:
	                sizeLetter = 'M';
	                break;
	            case UserPhotoSize.Large:
	                sizeLetter = 'L';
	                break;
	            default:
	                sizeLetter = 'S';
	        }
	        userPhotoUri.setQueryParameter('size', sizeLetter);
	        userPhotoUri.setQueryParameter('accountname', accountName);
	        return userPhotoUri.toString();
	    };
	    return AlternativeUrlMap;
	}());
	AlternativeUrlMap._urlTable = new Map();
	exports.AlternativeUrlMap = AlternativeUrlMap;


/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var lodash = __webpack_require__(142);
	function getPathNameFromAbsoluteUrl(url) {
	    var anchorElement = document.createElement('a');
	    anchorElement.href = url;
	    var pathName = anchorElement.pathname;
	    if (pathName.charAt(0) !== '/') {
	        pathName = '/' + pathName;
	    }
	    return pathName;
	}
	exports.getPathNameFromAbsoluteUrl = getPathNameFromAbsoluteUrl;
	function combineURLPaths() {
	    var url = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        url[_i] = arguments[_i];
	    }
	    var fullURLPath = '';
	    for (var i = 0; i < url.length; i++) {
	        fullURLPath += lodash.trimEnd(url[i], '/');
	    }
	    return fullURLPath;
	}
	exports.combineURLPaths = combineURLPaths;


/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var ReactDom = __webpack_require__(25);
	var sp_telemetry_1 = __webpack_require__(7);
	var odsp_utilities_bundle_1 = __webpack_require__(33);
	var office_ui_fabric_react_1 = __webpack_require__(27);
	var sp_lodash_subset_1 = __webpack_require__(142);
	var BaseRte_1 = __webpack_require__(151);
	var CKEditorForWebPartRte_1 = __webpack_require__(237);
	var SPRteCKEditorConfiguration_1 = __webpack_require__(172);
	var RteA11y_1 = __webpack_require__(157);
	var RteStrings_resx_1 = __webpack_require__(137);
	var WebPartRte = (function (_super) {
	    __extends(WebPartRte, _super);
	    function WebPartRte(props) {
	        var _this = _super.call(this, props, WebPartRte.defaultOptions) || this;
	        _this.TAG_NAME = 'WebPartRte.';
	        return _this;
	    }
	    WebPartRte._getFormattingBarDefaultPosition = function (isRtl) {
	        if (isRtl === void 0) { isRtl = false; }
	        var left = isRtl ? undefined : 0;
	        var top = -202;
	        var position = 'relative';
	        var right = isRtl ? 0 : undefined;
	        return { left: left, top: top, position: position, right: right };
	    };
	    WebPartRte.prototype._initState = function () {
	        this.state = {
	            displayMode: this.props.displayMode,
	            formattingBarPosition: WebPartRte._getFormattingBarDefaultPosition(this._isRtl),
	            isFormattingBarHidden: false,
	            isLinkDialogOpen: false
	        };
	    };
	    WebPartRte.prototype._afterEditorCreated = function (editor) {
	        this._editor = editor;
	        this._handleTextChange();
	        var formattingbarElement = ReactDom.findDOMNode(this._formattingbar);
	        this._editorElement.style.position = 'relative';
	        this._editorElement.style.top = formattingbarElement.offsetHeight + "px";
	        formattingbarElement.style.top = "-" + this._editorElement.offsetHeight + "px";
	        this._editorElement.setAttribute('aria-label', odsp_utilities_bundle_1.StringHelper.format(RteStrings_resx_1.default.RichTextEditorIframeTitle, this.props.ariaLabel || '', RteStrings_resx_1.default.RichTextEditorAriaLabel));
	        var iframe = this._editorElement.querySelector('iframe');
	        if (iframe) {
	            iframe.contentDocument.addEventListener('paste', this._onBeforePaste, true);
	            iframe.contentDocument.addEventListener('keydown', this._handleKeyDown);
	        }
	    };
	    WebPartRte.prototype._finalizeAction = function (ariaActionName) {
	        _super.prototype._finalizeAction.call(this, ariaActionName);
	        if (this.props.onChanged) {
	            this.props.onChanged(this._editor ? this._editor.getHTML() : this.props.innerHTML);
	        }
	    };
	    WebPartRte.prototype._handleKeyDown = function (evt) {
	        if (RteA11y_1.isKey(RteA11y_1.KeyCodes.F10, evt, true) && this._formattingbarElement) {
	            sp_telemetry_1._EngagementLogger.logEvent(this.TAG_NAME + 'ToolbarByKeyboardShortcut.Focus', evt.type);
	            RteA11y_1.navigateInside(this._formattingbarElement);
	            var screenReaderInstruction = odsp_utilities_bundle_1.StringHelper.format(RteStrings_resx_1.default.RichTextNavigationAltF10Keys, RteStrings_resx_1.default.ToolbarNavigationArrowKeys, RteStrings_resx_1.default.ToolbarNavigationShiftTabKey);
	            RteA11y_1.ariaAlert(screenReaderInstruction);
	            evt.stopPropagation();
	            evt.preventDefault();
	        }
	        else if (RteA11y_1.isKey('K'.charCodeAt(0), evt, false, true)) {
	            this._handleLink();
	            evt.stopPropagation();
	            evt.preventDefault();
	        }
	        else {
	            this._redispatchKeyboardEvent(evt);
	        }
	    };
	    WebPartRte.prototype._redispatchKeyboardEvent = function (evt) {
	        var emptyEvent = document.createEvent('Event');
	        emptyEvent.initEvent(evt.type, true, true);
	        var clonedEvent = sp_lodash_subset_1.merge(emptyEvent, {
	            keyCode: evt.keyCode,
	            code: evt.code,
	            which: evt.which,
	            altKey: evt.altKey,
	            ctrlKey: evt.ctrlKey
	        });
	        if (this._editorElement) {
	            this._editorElement.dispatchEvent(clonedEvent);
	        }
	    };
	    return WebPartRte;
	}(BaseRte_1.BaseRte));
	WebPartRte.defaultOptions = {
	    editor: CKEditorForWebPartRte_1.default,
	    config: new SPRteCKEditorConfiguration_1.default(),
	    loader: CKEditorForWebPartRte_1.default.moduleLoader
	};
	__decorate([
	    office_ui_fabric_react_1.autobind
	], WebPartRte.prototype, "_handleKeyDown", null);
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = WebPartRte;


/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var sp_telemetry_1 = __webpack_require__(7);
	var CKTextEditor_1 = __webpack_require__(31);
	var CKEditorForWebPartRte = (function (_super) {
	    __extends(CKEditorForWebPartRte, _super);
	    function CKEditorForWebPartRte(config, currentHTML, editorElement, selectionChangeCallback, textChangeCallback, startUpFocus, onReadyCallback) {
	        var _this = _super.call(this, config, currentHTML, editorElement, selectionChangeCallback, textChangeCallback, startUpFocus, onReadyCallback) || this;
	        _this._ckEditorConfig = {
	            allowedContent: true,
	            disableNativeSpellChecker: false,
	            on: {
	                change: _this._handleTextChange,
	                selectionChange: _this._handleSelectionChangeConvert
	            },
	            removePlugins: 'toolbar,contextmenu,menubutton,scayt,liststyle,tabletools,magicline,link ,resize,autogrow,elementspath',
	            extraPlugins: 'justify',
	            removeButtons: '',
	            stylesSet: false,
	            toolbar: [],
	            startupFocus: _this._startupFocus,
	            fullPage: false,
	            resize_enabled: false,
	            width: '100%',
	            height: 200
	        };
	        _this._initialize(currentHTML);
	        return _this;
	    }
	    CKEditorForWebPartRte.createNewEditor = function (config, currentHTML, editorElement, selectionChangeCallback, textChangeCallback, startupFocus) {
	        return new Promise(function (resolve) {
	            CKEditorForWebPartRte.moduleLoader.loadModule(config.editorSource).then(function () {
	                var editor = new CKEditorForWebPartRte(config, currentHTML, editorElement, selectionChangeCallback, textChangeCallback, startupFocus, function () { resolve(editor); });
	            }).catch(function (error) {
	                sp_telemetry_1._TraceLogger.logError(CKEditorForWebPartRte.logSource, error);
	            });
	        });
	    };
	    CKEditorForWebPartRte.prototype._initialize = function (currentHTML) {
	        if (!this._ckEditorConfig) {
	            return;
	        }
	        var textPart = document.createElement('textarea');
	        this._editorElement.appendChild(textPart);
	        this._editor = CKEDITOR.replace(textPart, this._ckEditorConfig);
	        this._editor.setData(currentHTML);
	        this._addCustomToolbarCommands();
	    };
	    return CKEditorForWebPartRte;
	}(CKTextEditor_1.default));
	CKEditorForWebPartRte.logSource = sp_telemetry_1._LogSource.create('CKEditorForWebPartRte');
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = CKEditorForWebPartRte;


/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(239);
	var styles = {};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = styles;


/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	var content = __webpack_require__(240);
	var loader = __webpack_require__(124);
	
	if(typeof content === "string") content = [[module.id, content]];
	
	// add the styles to the DOM
	for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
	
	if(content.locals) module.exports = content.locals;

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(123)();
	// imports
	
	
	// module
	exports.push([module.id, ".ms-LayerHost-overlay{z-index:1000!important}", ""]);
	
	// exports


/***/ }
/******/ ])});;
//# sourceMappingURL=sp-client-preview.js.map