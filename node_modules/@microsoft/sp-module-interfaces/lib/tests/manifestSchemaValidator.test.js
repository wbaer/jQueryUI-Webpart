/// <reference types="mocha" />
"use strict";
var fs = require("fs");
var path = require("path");
var chai_1 = require("chai");
var manifestSchemaValidator_1 = require("./../manifestSchemaValidator");
var os_1 = require("os");
// Discover all example manifest files
var exampleSchemasPath = path.join(__dirname, '..', 'manifestSchemas', 'examples');
var exampleSchemaFileCandidates = fs.readdirSync(exampleSchemasPath);
var exampleManifestFiles = exampleSchemaFileCandidates.reduce(function (result, exampleSchemaFileCandidate) {
    var extname = path.extname(exampleSchemaFileCandidate);
    if (extname === '.js' || extname === '.json') {
        return result.concat(path.join(exampleSchemasPath, exampleSchemaFileCandidate));
    }
    else {
        return result;
    }
}, []);
var errorSeparator = os_1.EOL + "          - ";
function assertValidSchema(errors, filePath) {
    var errorMessages = errors.map(function (error) {
        return errorSeparator + "(" + error.path + ") " + error.message;
    });
    chai_1.assert(errors.length === 0, "Schema validation errors" + (filePath ? " (" + filePath + ")" : '') + ":" + errorMessages.join(''));
}
describe('Manifest schema validator', function () {
    // Test each of the examples
    exampleManifestFiles.forEach(function (manifestFile) {
        var schemaFileBasename = path.basename(manifestFile);
        /* tslint:disable:no-any */
        var manifestFileContents = require(manifestFile);
        var validationFn;
        /* tslint:enable:no-any */
        if (schemaFileBasename.match(/application/i)) {
            validationFn = manifestSchemaValidator_1.default.validateApplicationManifest;
        }
        else if (schemaFileBasename.match(/codepart/i)) {
            validationFn = manifestSchemaValidator_1.default.validateCodePartManifest;
        }
        else if (schemaFileBasename.match(/webpart/i)) {
            validationFn = manifestSchemaValidator_1.default.validateWebPartManifest;
        }
        else if (schemaFileBasename.match(/library/i)) {
            validationFn = manifestSchemaValidator_1.default.validateLibraryManifest;
        }
        else {
            throw "Unsupported component type in filename \"" + schemaFileBasename + "\".";
        }
        it("correctly validates \"" + schemaFileBasename + "\" example manifest (parsed, general manifest schema)", function () {
            var validationResult = manifestSchemaValidator_1.default.validateManifest(manifestFileContents);
            assertValidSchema(validationResult.errors, schemaFileBasename);
        });
        it("correctly validates \"" + schemaFileBasename + "\" example manifest (as string, general manifest schema)", function () {
            var validationResult = manifestSchemaValidator_1.default.validateManifest(JSON.stringify(manifestFileContents));
            assertValidSchema(validationResult.errors, schemaFileBasename);
        });
        it("correctly validates \"" + schemaFileBasename + "\" example manifest (parsed, specific manifest schema)", function () {
            var validationResult = validationFn(manifestFileContents);
            assertValidSchema(validationResult.errors, schemaFileBasename);
        });
        it("correctly validates \"" + schemaFileBasename + "\" example manifest (as string, specific manifest schema)", function () {
            var validationResult = validationFn(JSON.stringify(manifestFileContents));
            assertValidSchema(validationResult.errors, schemaFileBasename);
        });
    });
});

//# sourceMappingURL=manifestSchemaValidator.test.js.map
