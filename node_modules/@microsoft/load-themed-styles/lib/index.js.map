{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/**\n * An IThemingInstruction can specify a rawString to be preserved or a theme slot and a default value\n * to use if that slot is not specified by the theme.\n */\n\n// Declaring a global here in case that the execution environment is Node.js (without importing the\n// entire node.js d.ts for now)\ndeclare var global: any; // tslint:disable-line:no-any\n\nexport interface IThemingInstruction {\n  theme?: string;\n  defaultValue?: string;\n  rawString?: string;\n}\n\nexport type ThemableArray = Array<IThemingInstruction>;\n\nexport interface ITheme {\n  [key: string]: string;\n}\n\ninterface IStyleSheet {\n  cssText: string;\n}\n\ninterface IExtendedHtmlStyleElement extends HTMLStyleElement {\n  styleSheet: IStyleSheet;\n}\n\ninterface IThemeState {\n  theme: ITheme;\n  lastStyleElement: IExtendedHtmlStyleElement;\n  registeredStyles: IStyleRecord[];\n  loadStyles: (styles: string) => void;\n}\n\ninterface IStyleRecord {\n  styleElement: Element;\n  themableStyle: ThemableArray;\n}\n\n// IE needs to inject styles using cssText. However, we need to evaluate this lazily, so this\n// value will initialize as undefined, and later will be set once on first loadStyles injection.\nlet _injectStylesWithCssText: boolean;\n\n// Store the theming state in __themeState__ global scope for reuse in the case of duplicate\n// load-themed-styles hosted on the page.\nconst _root: any = (typeof window === 'undefined') ? global : window; // tslint:disable-line:no-any\n\nconst _themeState: IThemeState = _root.__themeState__ = _root.__themeState__ || {\n  theme: undefined,\n  lastStyleElement: undefined,\n  registeredStyles: []\n};\n\n/**\n * Matches theming tokens. For example, \"[theme: themeSlotName, default: #FFF]\" (including the quotes).\n */\n/* tslint:disable: max-line-length */\nconst _themeTokenRegex: RegExp = /[\\'\\\"]\\[theme:\\s*(\\w+)\\s*(?:\\,\\s*default:\\s*([\\\\\"\\']?[\\.\\,\\(\\)\\#\\-\\s\\w]*[\\.\\,\\(\\)\\#\\-\\w][\\\"\\']?))?\\s*\\][\\'\\\"]/g;\n/* tslint:enable: max-line-length */\n\n/** Maximum style text length, for supporting IE style restrictions. */\nconst MAX_STYLE_CONTENT_SIZE: number = 10000;\n\n/**\n * Loads a set of style text. If it is registered too early, we will register it when the window.load\n * event is fired.\n * @param {string | ThemableArray} styles Themable style text to register.\n */\nexport function loadStyles(styles: string | ThemableArray): void {\n  const styleParts: ThemableArray = Array.isArray(styles) ? styles : splitStyles(styles);\n\n  if (_injectStylesWithCssText === undefined) {\n    _injectStylesWithCssText = shouldUseCssText();\n  }\n\n  applyThemableStyles(styleParts);\n}\n\n/**\n * Allows for customizable loadStyles logic. e.g. for server side rendering application\n * @param {(styles: string) => void} a loadStyles callback that gets called when styles are loaded or reloaded\n */\nexport function configureLoadStyles(callback: (styles: string) => void): void {\n  _themeState.loadStyles = callback;\n}\n\n/**\n * Loads a set of style text. If it is registered too early, we will register it when the window.load event\n * is fired.\n * @param {string} styleText Style to register.\n * @param {IStyleRecord} styleRecord Existing style record to re-apply.\n */\nfunction applyThemableStyles(stylesArray: ThemableArray, styleRecord?: IStyleRecord): void {\n  if (_themeState.loadStyles) {\n    const styles: string = resolveThemableArray(stylesArray);\n    _themeState.loadStyles(styles);\n  } else {\n    _injectStylesWithCssText ?\n      registerStylesIE(stylesArray, styleRecord) :\n      registerStyles(stylesArray, styleRecord);\n  }\n}\n\n/**\n * Registers a set theme tokens to find and replace. If styles were already registered, they will be\n * replaced.\n * @param {theme} theme JSON object of theme tokens to values.\n */\nexport function loadTheme(theme: ITheme): void {\n  _themeState.theme = theme;\n\n  // reload styles.\n  reloadStyles();\n}\n\n/**\n * Reloads styles.\n */\nfunction reloadStyles(): void {\n  if (_themeState.theme) {\n    for (const styleRecord of _themeState.registeredStyles) {\n      applyThemableStyles(styleRecord.themableStyle, styleRecord);\n    }\n  }\n}\n\n/**\n * Find theme tokens and replaces them with provided theme values.\n * @param {string} styles Tokenized styles to fix.\n */\nexport function detokenize(styles: string): string {\n  if (styles) {\n    styles = resolveThemableArray(splitStyles(styles));\n  }\n\n  return styles;\n}\n\n/**\n * Resolves ThemingInstruction objects in an array and joins the result into a string.\n * @param {ThemableArray} splitStyleArray ThemableArray to resolve and join.\n */\nfunction resolveThemableArray(splitStyleArray: ThemableArray): string {\n  const { theme }: IThemeState = _themeState;\n  let resolvedCss: string;\n  if (splitStyleArray) {\n    // Resolve the array of theming instructions to an array of strings.\n    // Then join the array to produce the final CSS string.\n    const resolvedArray: string[] = splitStyleArray.map((currentValue: IThemingInstruction) => {\n      const themeSlot: string = currentValue.theme;\n      if (themeSlot) {\n        // A theming annotation. Resolve it.\n        const themedValue: string = theme ? theme[themeSlot] : undefined;\n        const defaultValue: string = currentValue.defaultValue;\n\n        // Warn to console if we hit an unthemed value even when themes are provided.\n        // Allow the themedValue to be undefined to explicitly request the default value.\n        if (theme && !themedValue && console && !(themeSlot in theme)) {\n          /* tslint:disable: max-line-length */\n          console.warn(`Theming value not provided for \"${themeSlot}\". Falling back to \"${defaultValue || 'inherit'}\".`);\n          /* tslint:enable: max-line-length */\n        }\n\n        return themedValue || defaultValue || 'inherit';\n      } else {\n        // A non-themable string. Preserve it.\n        return currentValue.rawString;\n      }\n    });\n\n    resolvedCss = resolvedArray.join('');\n  }\n\n  return resolvedCss;\n}\n\n/**\n * Split tokenized CSS into an array of strings and theme specification objects\n * @param {string} styles Tokenized styles to split.\n */\nexport function splitStyles(styles: string): ThemableArray {\n  const result: ThemableArray = [];\n  if (styles) {\n    let pos: number = 0; // Current position in styles.\n    let tokenMatch: RegExpExecArray;\n    while (tokenMatch = _themeTokenRegex.exec(styles)) {\n      const matchIndex: number = tokenMatch.index;\n      if (matchIndex > pos) {\n        result.push({\n          rawString: styles.substring(pos, matchIndex)\n        });\n      }\n\n      result.push({\n        theme: tokenMatch[1],\n        defaultValue: tokenMatch[2] // May be undefined\n      });\n\n      // index of the first character after the current match\n      pos = _themeTokenRegex.lastIndex;\n    }\n\n    // Push the rest of the string after the last match.\n    result.push({\n      rawString: styles.substring(pos)\n    });\n  }\n\n  return result;\n}\n\n/**\n * Registers a set of style text. If it is registered too early, we will register it when the\n * window.load event is fired.\n * @param {ThemableArray} styleArray Array of IThemingInstruction objects to register.\n * @param {IStyleRecord} styleRecord May specify a style Element to update.\n */\nfunction registerStyles(styleArray: ThemableArray, styleRecord?: IStyleRecord): void {\n  const head: HTMLHeadElement = document.getElementsByTagName('head')[0];\n  const styleElement: HTMLStyleElement = document.createElement('style');\n\n  styleElement.type = 'text/css';\n  styleElement.appendChild(document.createTextNode(resolveThemableArray(styleArray)));\n\n  if (styleRecord) {\n    head.replaceChild(styleElement, styleRecord.styleElement);\n    styleRecord.styleElement = styleElement;\n  } else {\n    head.appendChild(styleElement);\n  }\n\n  if (!styleRecord) {\n    _themeState.registeredStyles.push({\n      styleElement: styleElement,\n      themableStyle: styleArray\n    });\n  }\n}\n\n/**\n * Registers a set of style text, for IE 9 and below, which has a ~30 style element limit so we need\n * to register slightly differently.\n * @param {ThemableArray} styleArray Array of IThemingInstruction objects to register.\n * @param {IStyleRecord} styleRecord May specify a style Element to update.\n */\nfunction registerStylesIE(styleArray: ThemableArray, styleRecord?: IStyleRecord): void {\n  const head: HTMLHeadElement = document.getElementsByTagName('head')[0];\n  let { lastStyleElement, registeredStyles }: IThemeState = _themeState;\n\n  const stylesheet: IStyleSheet = lastStyleElement ? lastStyleElement.styleSheet : undefined;\n  const lastStyleContent: string = stylesheet ? stylesheet.cssText : '';\n  let lastRegisteredStyle: IStyleRecord = registeredStyles[registeredStyles.length - 1];\n  const resolvedStyleText: string = resolveThemableArray(styleArray);\n\n  if (!lastStyleElement || (lastStyleContent.length + resolvedStyleText.length) > MAX_STYLE_CONTENT_SIZE) {\n    lastStyleElement = document.createElement('style') as IExtendedHtmlStyleElement;\n    lastStyleElement.type = 'text/css';\n\n    if (styleRecord) {\n      head.replaceChild(lastStyleElement, styleRecord.styleElement);\n      styleRecord.styleElement = lastStyleElement;\n    } else {\n      head.appendChild(lastStyleElement);\n    }\n\n    if (!styleRecord) {\n      lastRegisteredStyle = {\n        styleElement: lastStyleElement,\n        themableStyle: styleArray\n      };\n      registeredStyles.push(lastRegisteredStyle);\n    }\n  }\n\n  lastStyleElement.styleSheet.cssText += detokenize(resolvedStyleText);\n  Array.prototype.push.apply(lastRegisteredStyle.themableStyle, styleArray); // concat in-place\n\n  // Preserve the theme state.\n  _themeState.lastStyleElement = lastStyleElement;\n}\n\n/**\n * Checks to see if styleSheet exists as a property off of a style element.\n * This will determine if style registration should be done via cssText (<= IE9) or not\n */\nfunction shouldUseCssText(): boolean {\n  let useCSSText: boolean = false;\n\n  if (typeof document !== 'undefined') {\n    const emptyStyle: IExtendedHtmlStyleElement = document.createElement('style') as IExtendedHtmlStyleElement;\n\n    emptyStyle.type = 'text/css';\n    useCSSText = !!emptyStyle.styleSheet;\n  }\n\n  return useCSSText;\n}\n"],"sourceRoot":"/src"}