"use strict";
var chai_1 = require("chai");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var MockFetchProvider_1 = require("../../test/MockFetchProvider");
var FetchProvider_1 = require("../../httpClient/FetchProvider");
var test_1 = require("@microsoft/sp-core-library/lib/test");
var OAuthTokenProvider_1 = require("../OAuthTokenProvider");
var sp_client_shared_1 = require("@ms/sp-client-shared");
describe('OAuthTokenProvider tests', function () {
    var testCase = 0;
    var rootScope = sp_core_library_1.ServiceScope.startNewRoot();
    var fetchProvider = new MockFetchProvider_1.default(rootScope);
    rootScope.provide(FetchProvider_1.fetchProviderServiceKey, fetchProvider);
    var randomNumberGenerator = new test_1.MockRandomNumberGenerator(rootScope);
    rootScope.provide(sp_core_library_1.RandomNumberGenerator.serviceKey, randomNumberGenerator);
    rootScope.finish();
    var tokenProvider = rootScope.consume(OAuthTokenProvider_1.default.serviceKey);
    beforeEach(function () {
        testCase++;
    });
    it('Should get the correct token in case of a successfull request', function () {
        fetchProvider.expect({
            expectedUrl: '/_api/contextinfo',
            responseObject: {
                'FormDigestValue': 'DIGEST_1',
                'FormDigestTimeoutSeconds': 30
            }
        });
        setFetchProviderExpectation({
            requestAssertions: function (request) {
                chai_1.assert.isTrue(request.headers.has('X-RequestDigest'));
            },
            responseObject: {
                access_token: 'test_token',
                expires_on: Date.now() / 1000 + 10000,
                not_before: '1467752142',
                resource: 'resource',
                scope: 'user_impersonation',
                token_type: 'Bearer'
            }
        });
        return tokenProvider.getOAuthToken(getTestResource(), '').then(function (oAuthToken) {
            chai_1.assert.equal(oAuthToken.token, 'test_token');
        });
    });
    it('should get the right error in case of an erroneous request', function () {
        setFetchProviderExpectation({
            requestAssertions: function (request) {
                chai_1.assert.isTrue(request.headers.has('X-RequestDigest'));
            },
            responseObject: {
                message: 'error',
                code: '1, some.exception'
            },
            responseOptions: {
                status: 400
            }
        });
        return tokenProvider.getOAuthToken(getTestResource(), '').then(function () { chai_1.assert.fail(); }, function (error) {
            chai_1.expect(error).instanceof(sp_client_shared_1.OAuthUtilityError);
            var tokenUtilError = error;
            chai_1.assert.equal(tokenUtilError.type, sp_client_shared_1.OAuthUtilityErrorType.serverError);
            chai_1.assert.equal(tokenUtilError.serverErrorCode, 1);
            chai_1.assert.equal(tokenUtilError.message, 'error');
        });
    });
    function setFetchProviderExpectation(expectations) {
        fetchProvider.expect({
            expectedUrl: '/_api/SP.OAuth.Token/Acquire',
            expectedRequestHeaders: [
                new MockFetchProvider_1.MockedHeader('Content-Type', 'application/json; charset=utf-8'),
                new MockFetchProvider_1.MockedHeader('Odata-Version', '4.0'),
                new MockFetchProvider_1.MockedHeader('Accept', 'application/json;odata.metadata=minimal')
            ],
            requestAssertions: expectations.requestAssertions,
            responseObject: expectations.responseObject,
            responseOptions: expectations.responseOptions
        });
    }
    function getTestResource() {
        return 'resource' + testCase;
    }
});
