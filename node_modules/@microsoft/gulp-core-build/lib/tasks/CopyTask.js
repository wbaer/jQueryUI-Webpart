"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var GulpTask_1 = require("./GulpTask");
/**
 * This task takes in a map of dest: [sources], and copies items from one place to another.
 */
var CopyTask = (function (_super) {
    __extends(CopyTask, _super);
    /**
     * Instantiates a CopyTask with an empty configuration
     */
    function CopyTask() {
        var _this = _super.call(this) || this;
        _this.name = 'copy';
        _this.taskConfig = {
            copyTo: {},
            shouldFlatten: true
        };
        return _this;
    }
    /**
     * Loads the z-schema object for this task
     * @internal
     */
    CopyTask.prototype.loadSchema = function () {
        return require('./copy.schema.json');
    };
    ;
    /**
     * Executes the copy task, which copy files based on the task's Configuration
     */
    CopyTask.prototype.executeTask = function (gulp, completeCallback) {
        /* tslint:disable:typedef */
        var flatten = require('gulp-flatten');
        var gulpif = require('gulp-if');
        var merge = require('merge2');
        var _a = this.taskConfig, copyTo = _a.copyTo, shouldFlatten = _a.shouldFlatten;
        /* tslint:enable:typedef */
        var allStreams = [];
        var _loop_1 = function (copyDest) {
            if (copyTo.hasOwnProperty(copyDest)) {
                var sources = copyTo[copyDest];
                sources.forEach(function (sourceMatch) { return allStreams.push(gulp.src(sourceMatch)
                    .pipe(gulpif(shouldFlatten, flatten()))
                    .pipe(gulp.dest(copyDest))); });
            }
        };
        for (var copyDest in copyTo) {
            _loop_1(copyDest);
        }
        if (allStreams.length === 0) {
            completeCallback();
        }
        else {
            return merge(allStreams);
        }
    };
    return CopyTask;
}(GulpTask_1.GulpTask));
exports.CopyTask = CopyTask;

//# sourceMappingURL=CopyTask.js.map
