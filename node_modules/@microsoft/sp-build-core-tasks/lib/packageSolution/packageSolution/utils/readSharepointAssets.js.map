{"version":3,"sources":["packageSolution/packageSolution/utils/readSharepointAssets.ts"],"names":[],"mappings":"AAAA;;;;;;;;GAQG;;AAEH,2BAA6B;AAC7B,uBAAyB;AACzB,+BAAkC;AAIlC,8DAAiD;AAEjD;;;;;GAKG;AACH,2CAA2C;AAC3C,8BAAqC,MAAiC,EAAE,SAAiB;IACvF,MAAM,CAAC;QACL,gBAAgB,EAAE,cAAc,CAAC,MAAM,CAAC,gBAAgB,EAAE,kBAAkB,EAAE,SAAS,CAAC;QACxF,YAAY,EAAE,cAAc,CAAC,MAAM,CAAC,YAAY,EAAE,cAAc,CAAC;QACjE,cAAc,EAAE,cAAc,CAAC,MAAM,CAAC,cAAc,EAAE,gBAAgB,EAAE,SAAS,CAAC;KACnF,CAAC;AACJ,CAAC;AAND,oDAMC;AAED,wBAAwB,cAAwB,EAAE,oBAA4B,EAAE,MAAe;IAC7F,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,UAAC,QAAgB;QACzC,IAAI,OAAe,CAAC;QACpB,IAAM,QAAQ,GAAW,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACjD,IAAI,CAAC;YACF,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC;QAClD,CAAC;QAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACb,MAAM,IAAI,KAAK,CAAC,oBAAkB,oBAAoB,UAAK,QAAU,CAAC,CAAC;QACzE,CAAC;QACD,qBAAG,CAAC,MAAM,CAAC,IAAI,CAAC,WAAS,oBAAoB,UAAK,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAG,CAAC,CAAC,CAAC;QAC9E,MAAM,CAAC;YACL,QAAQ,EAAE,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,GAAG,QAAQ;YAC/D,GAAG,EAAE,OAAO;SACb,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC","file":"packageSolution/packageSolution/utils/readSharepointAssets.js","sourcesContent":["/**\r\n * @file readSharepointAssets.ts\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n *\r\n * Using the configuration, reads a list of Sharepoint assets of one of 3 types\r\n * (element manifests, element files, and upgrade actions). Returns an object with a list\r\n * of IXml files to include in the package.\r\n *\r\n */\r\n\r\nimport * as path from 'path';\r\nimport * as fs from 'fs';\r\nimport colors = require('colors');\r\n\r\nimport IXml from '../models/packageXml/IXml';\r\nimport { ISharepointAssets } from '../models/packageXml/ISharepointAssets';\r\nimport { log } from '@microsoft/gulp-core-build';\r\n\r\n/**\r\n * Reads a special folder containing SharePoint assets which should automatically be integrated into a feature.\r\n * You can think of this as a slightly more useful version of readCustomFeatures, which allows for custom features\r\n * to be created, but is more cumbersome when you want to do something simple like include an upgrade action into\r\n * the SPPKG.\r\n */\r\n// tslint:disable-next-line:max-line-length\r\nexport function readSharepointAssets(assets: ISharepointAssets<string>, featureId: string): ISharepointAssets<IXml> {\r\n  return {\r\n    elementManifests: readAssetFiles(assets.elementManifests, 'Element Manifest', featureId),\r\n    elementFiles: readAssetFiles(assets.elementFiles, 'Element File'),\r\n    upgradeActions: readAssetFiles(assets.upgradeActions, 'Upgrade Action', featureId)\r\n  };\r\n}\r\n\r\nfunction readAssetFiles(assetFilePaths: string[], assetFileDescription: string, subdir?: string): IXml[] {\r\n  return assetFilePaths.map((filepath: string) => {\r\n    let content: string;\r\n    const filename: string = path.basename(filepath);\r\n    try {\r\n       content = fs.readFileSync(filepath).toString();\r\n    } catch (err) {\r\n      throw new Error(`Could not find ${assetFileDescription}: ${filepath}`);\r\n    }\r\n    log(colors.cyan(`Found ${assetFileDescription}: ${path.basename(filename)}`));\r\n    return {\r\n      filename: subdir ? path.posix.join(subdir, filename) : filename,\r\n      xml: content\r\n    };\r\n  });\r\n}\r\n"],"sourceRoot":"..\\..\\..\\..\\src"}