{"version":3,"sources":["SassTask.ts"],"names":[],"mappings":"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","file":"SassTask.js","sourcesContent":["import { GulpTask } from '@microsoft/gulp-core-build';\r\nimport gulp = require('gulp');\r\nimport * as gulpUtil from 'gulp-util';\r\nimport { EOL } from 'os';\r\nimport { splitStyles } from '@microsoft/load-themed-styles';\r\nimport through2 = require('through2');\r\nimport * as path from 'path';\r\n/* tslint:disable:typedef */\r\nconst merge = require('merge2');\r\n/* tslint:enable:typedef */\r\n\r\nconst scssTsExtName: string = '.scss.ts';\r\n\r\nexport interface ISassTaskConfig {\r\n  /** An optional parameter for text to include in the generated typescript file. */\r\n  preamble?: string;\r\n  /** An optional parameter for text to include at the end of the generated typescript file. */\r\n  postamble?: string;\r\n  /** An array of glob patterns for locating SASS files. */\r\n  sassMatch?: string[];\r\n  /**\r\n   * If this option is specified, ALL files will be treated as a module.scss and will\r\n   * automatically generate a corresponding TypeScript file. All classes will be\r\n   * appended with a hash to help ensure uniqueness on a page. This file can be\r\n   * imported directly, and will contain an object describing the mangled class names.\r\n   */\r\n  useCSSModules?: boolean;\r\n  /**\r\n   * If true, we will generate a CSS in the lib folder. If false, the CSS is directly embedded\r\n   * into the TypeScript file\r\n   */\r\n  dropCssFiles?: boolean;\r\n  /**\r\n   * If files are matched by sassMatch which do not end in .module.scss, log a warning.\r\n   */\r\n  warnOnNonCSSModules?: boolean;\r\n}\r\n\r\nconst _classMaps: { [file: string]: Object } = {};\r\n\r\nexport class SassTask extends GulpTask<ISassTaskConfig> {\r\n  public name: string = 'sass';\r\n\r\n  public taskConfig: ISassTaskConfig = {\r\n    preamble: '/* tslint:disable */',\r\n    postamble: '/* tslint:enable */',\r\n    sassMatch: [\r\n      'src/**/*.scss'\r\n    ],\r\n    useCSSModules: false,\r\n    dropCssFiles: false,\r\n    warnOnNonCSSModules: false\r\n  };\r\n\r\n  public cleanMatch: string[] = [\r\n    'src/**/*.scss.ts'\r\n  ];\r\n\r\n  public loadSchema(): Object {\r\n    return require('./sass.schema.json');\r\n  }\r\n\r\n  public executeTask(\r\n    gulp: gulp.Gulp,\r\n    completeCallback?: (result?: string) => void\r\n  ): Promise<{}> | NodeJS.ReadWriteStream | void {\r\n\r\n    /* tslint:disable:typedef */\r\n    const autoprefixer = require('autoprefixer');\r\n    const cssModules = require('postcss-modules');\r\n    /* tslint:enable:typedef */\r\n\r\n    /* tslint:disable:no-any */\r\n    const postCSSPlugins: any[] = [\r\n      autoprefixer({ browsers: ['> 1%', 'last 2 versions', 'ie >= 10'] })\r\n    ];\r\n    const modulePostCssPlugins: any[] = postCSSPlugins.slice(0);\r\n    /* tslint:enable:no-any */\r\n\r\n    modulePostCssPlugins.push(cssModules({\r\n      getJSON: this._generateModuleStub.bind(this),\r\n      generateScopedName: this.generateScopedName.bind(this)\r\n    }));\r\n\r\n    const srcPattern: string[] = this.taskConfig.sassMatch.slice(0);\r\n\r\n    const checkFilenameForCSSModule: (file: gulpUtil.File) => void = (file: gulpUtil.File) => {\r\n      if (!path.basename(file.path).match(/module\\.scss$/)) {\r\n\r\n        const filepath: string = path.relative(this.buildConfig.rootPath, file.path);\r\n        this.logWarning(`${filepath}: filename should end with module.scss`);\r\n      }\r\n    };\r\n\r\n    if (this.taskConfig.useCSSModules) {\r\n      this.logVerbose('Generating css modules.');\r\n      return this._processFiles(gulp, srcPattern, completeCallback, modulePostCssPlugins);\r\n    } else {\r\n      const moduleSrcPattern: string[] = srcPattern.map((value: string) => value.replace('.scss', '.module.scss'));\r\n      moduleSrcPattern.forEach((value: string) => srcPattern.push(`!${value}`));\r\n\r\n      return merge(this._processFiles(gulp, srcPattern, completeCallback, postCSSPlugins,\r\n                     this.taskConfig.warnOnNonCSSModules ? checkFilenameForCSSModule : undefined),\r\n                   this._processFiles(gulp, moduleSrcPattern, completeCallback, modulePostCssPlugins));\r\n    }\r\n  }\r\n\r\n  private _processFiles(\r\n    gulp: gulp.Gulp,\r\n    srcPattern: string[],\r\n    /* tslint:disable:no-any */\r\n    completeCallback: (result?: any) => void,\r\n    postCSSPlugins: any[],\r\n    /* tslint:enable:no-any */\r\n    checkFile?: (file: gulpUtil.File) => void\r\n  ): NodeJS.ReadWriteStream {\r\n    /* tslint:disable:typedef */\r\n    const changed = require('gulp-changed');\r\n    const cleancss = require('gulp-clean-css');\r\n    const clipEmptyFiles = require('gulp-clip-empty-files');\r\n    const clone = require('gulp-clone');\r\n    const path = require('path');\r\n    const postcss = require('gulp-postcss');\r\n    const sass = require('gulp-sass');\r\n    const texttojs = require('gulp-texttojs');\r\n    /* tslint:enable:typedef */\r\n\r\n    const tasks: NodeJS.ReadWriteStream[] = [];\r\n\r\n    const srcStream: NodeJS.ReadWriteStream = gulp.src(srcPattern);\r\n\r\n    const checkedStream: NodeJS.ReadWriteStream = (checkFile ?\r\n      srcStream.pipe(through2.obj(\r\n        // tslint:disable-next-line:no-function-expression\r\n        function (file: gulpUtil.File, encoding: string, callback: (p?: Object) => void): void {\r\n          // tslint:disable-next-line:no-unused-expression\r\n\r\n          checkFile(file);\r\n          this.push(file);\r\n          callback();\r\n        }\r\n      ))\r\n      : srcStream);\r\n\r\n    const baseTask: NodeJS.ReadWriteStream = checkedStream\r\n      .pipe(changed('src', { extension: scssTsExtName }))\r\n      .pipe(sass.sync({\r\n        importer: (url: string, prev: string, done: boolean): Object => ({ file: _patchSassUrl(url) })\r\n      }).on('error', function(error: Error): void {\r\n        sass.logError.call(this, error);\r\n        completeCallback('Errors found in sass file(s).');\r\n      }))\r\n      .pipe(postcss(postCSSPlugins))\r\n      .pipe(cleancss({\r\n        advanced: false\r\n      }))\r\n      .pipe(clipEmptyFiles());\r\n\r\n    if (this.taskConfig.dropCssFiles) {\r\n      tasks.push(baseTask.pipe(clone())\r\n        .pipe(gulp.dest(this.buildConfig.libFolder)));\r\n    }\r\n\r\n    tasks.push(baseTask.pipe(clone())\r\n      .pipe(texttojs({\r\n        ext: scssTsExtName,\r\n        isExtensionAppended: false,\r\n        template: (file: gulpUtil.File): string => {\r\n          const content: string = file.contents.toString();\r\n          const classNames: Object = _classMaps[file.path];\r\n          let exportClassNames: string = '';\r\n\r\n          if (classNames) {\r\n            const classNamesLines: string[] = [\r\n              'const styles = {'\r\n            ];\r\n\r\n            const classKeys: string[] = Object.keys(classNames);\r\n            classKeys.forEach((key: string, index: number) => {\r\n              const value: string = classNames[key];\r\n              let line: string = '';\r\n              if (key.indexOf('-') !== -1) {\r\n                this.logWarning(`The local CSS class '${key}' is not camelCase and will not be type-safe.`);\r\n                line = `  '${key}': '${value}'`;\r\n              } else {\r\n                line = `  ${key}: '${value}'`;\r\n              }\r\n\r\n              if ((index + 1) <= classKeys.length) {\r\n                line += ',';\r\n              }\r\n\r\n              classNamesLines.push(line);\r\n            });\r\n\r\n            classNamesLines.push(\r\n              '};',\r\n              '',\r\n              'export default styles;'\r\n            );\r\n\r\n            exportClassNames = classNamesLines.join(EOL);\r\n          }\r\n\r\n          let lines: string[] = [];\r\n\r\n          lines.push(this.taskConfig.preamble || '');\r\n\r\n          if (this.taskConfig.dropCssFiles) {\r\n            lines = lines.concat([\r\n              `require('./${path.basename(file.path, scssTsExtName)}.css');`,\r\n              exportClassNames\r\n            ]);\r\n          } else if (!!content) {\r\n            lines = lines.concat([\r\n              'import { loadStyles } from \\'@microsoft/load-themed-styles\\';',\r\n              '',\r\n              exportClassNames,\r\n              '',\r\n              `loadStyles(${JSON.stringify(splitStyles(content))});`\r\n            ]);\r\n          }\r\n\r\n          lines.push(this.taskConfig.postamble || '');\r\n\r\n          return (\r\n            lines\r\n              .join(EOL)\r\n              .replace(new RegExp(`(${EOL}){3,}`, 'g'), `${EOL}${EOL}`)\r\n              .replace(new RegExp(`(${EOL})+$`, 'm'), EOL)\r\n            );\r\n        }\r\n      }))\r\n      .pipe(gulp.dest('src')));\r\n\r\n    return merge(tasks);\r\n  }\r\n\r\n  private _generateModuleStub(cssFileName: string, json: Object): void {\r\n    cssFileName = cssFileName.replace('.css', '.scss.ts');\r\n    _classMaps[cssFileName] = json;\r\n  }\r\n\r\n  private generateScopedName(name: string, fileName: string, css: string): string {\r\n    /* tslint:disable:typedef */\r\n    const crypto = require('crypto');\r\n    /* tslint:enable:typedef */\r\n\r\n    return name + '_' + crypto.createHmac('sha1', fileName).update(css).digest('hex').substring(0, 8);\r\n  }\r\n}\r\n\r\nfunction _patchSassUrl(url: string): string {\r\n  if (url[0] === '~') {\r\n    url = 'node_modules/' + url.substr(1);\r\n  } else if (url === 'stdin') {\r\n    url = '';\r\n  }\r\n\r\n  return url;\r\n}\r\n"],"sourceRoot":"..\\src"}