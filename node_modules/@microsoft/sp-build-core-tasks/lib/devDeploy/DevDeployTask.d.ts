/// <reference types="es6-promise" />
import * as gulp from 'gulp';
import OdspGulpTask from './../OdspGulpTask';
import { IDeployAzureTaskConfigBase } from './../deployAzureStorage/DeployAzureStorageTask';
export interface IDevDeployTaskConfig extends IDeployAzureTaskConfigBase {
    /**
     * The directory in the Azure container to use. Recommended to be set to something that includes your user name
     *  to ensure you don't clobber others' work.
     */
    containerDirectoryName?: string;
    /**
     * If false, the current project directory and its dependencies are deployed. If true, we attempt to find a
     *  rush.json file and deploy everything in the repo. Defaults to false.
     */
    useRush?: boolean;
}
export declare class DevDeployTask extends OdspGulpTask<IDevDeployTaskConfig> {
    name: string;
    taskConfig: IDevDeployTaskConfig;
    executeTask(gulp: gulp.Gulp, completeCallback: (error?: string) => void): Promise<{}>;
    getDeployUrl(): string;
    private _getContainerUrl();
    private _getStorageDirName();
    private _disambiguatePath(path);
    private _getFilesInDirectory(dirName);
    /**
     * This function returns a directory name to be used in a directory on Azure storage, ensuring that the name does
     *  not collide with another directory's name. It also ensures that if the specified filesystem path has already
     *  been mapped to an Azure directory, the same name is used on Azure.
     */
    private _getAzureDirName(directoryMap, filesystemPath);
    private _getManifests(cumulativeManifestProcessor);
    private _mergeReferencedProjectLists(list1, list2);
}
