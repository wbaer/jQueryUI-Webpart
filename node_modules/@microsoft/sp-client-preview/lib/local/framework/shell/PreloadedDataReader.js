"use strict";
var sp_telemetry_1 = require("@ms/sp-telemetry");
var GuidHelpers_1 = require("../basicTypes/GuidHelpers");
var SPNavigationNode_1 = require("../pageContext/SPNavigationNode");
var PreloadedDataReader = (function () {
    function PreloadedDataReader(preloadedData) {
        this._preloadedData = preloadedData;
        this._isValid = false;
        if (this._preloadedData === undefined ||
            !GuidHelpers_1.default.isValid(this._preloadedData.clientSideApplicationId)) {
            sp_telemetry_1._TraceLogger.logVerbose(PreloadedDataReader._logSource, 'Warning: PreloadedDataReader: No preloaded data was found');
        }
        else {
            this._isValid = true;
        }
    }
    PreloadedDataReader._toNavNodes = function (srcNodes, pageContext) {
        var items = new Array();
        if (srcNodes) {
            for (var i = 0; i < srcNodes.length; i++) {
                var srcItem = srcNodes[i];
                var item = new SPNavigationNode_1.default(pageContext);
                item.load({ id: srcItem.Id });
                item.updateOdataObject(srcItem);
                items.push(item);
            }
        }
        return items;
    };
    PreloadedDataReader.prototype.initializePageContext = function (pageContext) {
        if (this._isValid) {
            pageContext.application.load({
                clientSideApplicationId: this._preloadedData.clientSideApplicationId,
                hostedByClassicPage: false
            });
            pageContext.application.updateOdataObject(undefined);
            pageContext.web.updateOdataObject(undefined);
            pageContext.list.updateOdataObject(undefined);
            pageContext.listItem.updateOdataObject(undefined);
            pageContext.core.updateOdataObject(undefined);
            var pageData = this._preloadedData.page;
            if (pageData) {
                pageContext.application.updateOdataObject(pageData);
            }
            var web = this._preloadedData.web;
            if (web) {
                pageContext.web.load({
                    id: GuidHelpers_1.default.getNormalized(web.Id),
                    serverRelativeUrl: web.ServerRelativeUrl,
                    title: web.Title
                });
                pageContext.web.updateOdataObject(web);
            }
            var list = this._preloadedData.list;
            if (list) {
                pageContext.list.load({
                    id: GuidHelpers_1.default.getNormalized(list.Id),
                    title: list.Title,
                    description: list.Description
                });
                pageContext.list.updateOdataObject(list);
            }
            var listItem = this._preloadedData.item;
            if (listItem) {
                pageContext.listItem.load({
                    id: listItem.ID
                });
                pageContext.listItem.updateOdataObject(listItem);
            }
            var user = this._preloadedData.user;
            if (user) {
                pageContext.user.load({
                    id: user.Id
                });
                pageContext.user.updateOdataObject(user);
            }
            var spPageContextInfo = this._preloadedData.spPageContextInfo;
            if (spPageContextInfo) {
                pageContext.core.load({
                    MenuData: spPageContextInfo.MenuData,
                    currentCultureName: spPageContextInfo.currentCultureName,
                    currentUICultureName: spPageContextInfo.currentUICultureName,
                    correlationId: spPageContextInfo.CorrelationId,
                    spoEnvironment: spPageContextInfo.env,
                    farmLabel: spPageContextInfo.farmLabel,
                    groupColor: spPageContextInfo.groupColor,
                    hasManageWebPermission: spPageContextInfo.hasManageWebPermission,
                    isWebWelcomePage: spPageContextInfo.isWebWelcomePage,
                    layoutsUrl: spPageContextInfo.layoutsUrl,
                    listPermsMask: spPageContextInfo.listPermsMask,
                    siteAbsoluteUrl: spPageContextInfo.siteAbsoluteUrl,
                    siteClientTag: spPageContextInfo.siteClientTag,
                    siteId: spPageContextInfo.siteId,
                    sitePagesEnabled: spPageContextInfo.sitePagesEnabled,
                    siteServerRelativeUrl: spPageContextInfo.siteServerRelativeUrl,
                    siteSubscriptionId: spPageContextInfo.siteSubscriptionId,
                    systemUserKey: spPageContextInfo.systemUserKey,
                    themedCssFolderUrl: spPageContextInfo.themedCssFolderUrl,
                    userDisplayName: spPageContextInfo.userDisplayName,
                    userLoginName: spPageContextInfo.userLoginName,
                    webAbsoluteUrl: spPageContextInfo.webAbsoluteUrl,
                    webId: spPageContextInfo.webId,
                    webLogoUrl: spPageContextInfo.webLogoUrl,
                    webServerRelativeUrl: spPageContextInfo.webServerRelativeUrl,
                    webTitle: spPageContextInfo.webTitle,
                    webTemplate: spPageContextInfo.webTemplate,
                    webPermMasks: spPageContextInfo.webPermMasks
                });
                pageContext.core.updateOdataObject(spPageContextInfo);
            }
        }
        else if (window['_spPageContextInfo'] !== undefined) {
            pageContext.application.load({
                clientSideApplicationId: '00000000-0000-0000-0000-000000000000',
                hostedByClassicPage: true
            });
            pageContext.web.load({
                id: '00000000-0000-0000-0000-000000000000',
                serverRelativeUrl: _spPageContextInfo.webServerRelativeUrl,
                title: _spPageContextInfo.webTitle
            });
            if (_spPageContextInfo.pageListId) {
                pageContext.list.load({
                    id: GuidHelpers_1.default.getNormalized(_spPageContextInfo.pageListId),
                    title: '',
                    description: ''
                });
                if (_spPageContextInfo.pageItemId) {
                    pageContext.listItem.load({
                        id: _spPageContextInfo.pageItemId
                    });
                }
            }
        }
        else {
        }
        if (this._preloadedData.spPageContextInfo && this._preloadedData.spPageContextInfo.navigationInfo) {
            this._initNav(pageContext.quickLaunch, this._preloadedData.spPageContextInfo.navigationInfo.quickLaunch, pageContext);
            this._initNav(pageContext.topNav, this._preloadedData.spPageContextInfo.navigationInfo.topNav, pageContext);
        }
    };
    PreloadedDataReader.prototype._initNav = function (target, source, pageContext) {
        if (!target || !source) {
            return;
        }
        target.updateOdataObject(source);
        var items = PreloadedDataReader._toNavNodes(source, pageContext);
        target.items = items;
    };
    return PreloadedDataReader;
}());
PreloadedDataReader._logSource = sp_telemetry_1._LogSource.create('PreloadedDataReader');
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = PreloadedDataReader;
