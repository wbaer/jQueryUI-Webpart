{"version":3,"sources":["OdspGulpTask.ts"],"names":[],"mappings":";;;;;;AACA,2BAA6B;AAC7B,+BAAiC;AACjC,8DAAsD;AA+GtD;IAAuD,gCAAqB;IAA5E;;IAoDA,CAAC;IAjDQ,kCAAW,GAAlB,UAAmB,IAAe,EAAE,gBAA0C;QAE5E,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;IACtD,CAAC;IAED,sBAAW,oCAAU;aAArB;YACE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,UAAqC,IAAI,EAAE,CAAC;QACtE,CAAC;;;OAAA;IAED,sBAAW,yCAAe;aAA1B;YACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBAC3B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;YAC5F,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC;QAC/B,CAAC;;;OAAA;IAEM,kCAAW,GAAlB,UAAmB,YAAoB;QACrC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;YAC/B,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,EAAE,CAAC;QACjC,CAAC;QAED,IAAM,SAAS,GAAoD,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;QAE7F,EAAE,CAAC,CAAC,SAAS,CAAC,YAAY,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC;YAC1C,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gBAClB,SAAS,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,CAAC,sCAAsC;YACxE,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,SAAS,CAAC,YAAY,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC,CAAC;YACxF,CAAC;QACH,CAAC;QAED,MAAM,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;IACjC,CAAC;IAEM,wCAAiB,GAAxB;QACE,IAAM,WAAW,GAAgB,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC,CAAC;QAC/F,IAAI,OAAO,GAAW,WAAW,CAAC,OAAO,CAAC;QAC1C,kFAAkF;QAClF,IAAM,gBAAgB,GAAW,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACtD,EAAE,CAAC,CAAC,gBAAgB,GAAG,CAAC,CAAC,CAAC,CAAC;YACzB,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,gBAAgB,CAAC,CAAC;QAChD,CAAC;QACD,MAAM,CAAC,OAAO,CAAC;IACjB,CAAC;IAEM,kCAAW,GAAlB,UAAmB,IAAS;QAC1B,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC7D,CAAC;IACH,mBAAC;AAAD,CApDA,AAoDC,CApDsD,0BAAQ,GAoD9D","file":"OdspGulpTask.js","sourcesContent":["import * as gulp from 'gulp';\r\nimport * as path from 'path';\r\nimport * as crypto from 'crypto';\r\nimport { GulpTask } from '@microsoft/gulp-core-build';\r\nimport { compiler as webpackCompiler } from 'webpack';\r\nimport { IClientSideComponentManifest } from '@microsoft/sp-module-interfaces';\r\n\r\nimport { IConfigEntry, IBundleEntry } from './configureWebpack/ConfigureWebpackTask';\r\nimport { IDeployEntry } from './copyAssets/CopyAssetsTask';\r\nimport { IExternalProjectMap } from './configureWebpack/ExternalsProcessor';\r\n\r\nexport interface IConfigJson {\r\n  /**\r\n   * The entries specified in config.json\r\n   */\r\n  entries?: IConfigEntry[];\r\n\r\n  /**\r\n   * The localized resources specified in config.json\r\n   */\r\n  localizedResources?: { [key: string]: string };\r\n\r\n  /**\r\n   * The externals specified in config.json\r\n   */\r\n  externals?: { [name: string]: string | INonAMDExternalModuleConfig };\r\n}\r\n\r\n/**\r\n * Configuration for a non-AMD external module\r\n */\r\nexport interface INonAMDExternalModuleConfig {\r\n  /**\r\n   * The path or URL to the bundled external non-AMD file\r\n   */\r\n  path: string;\r\n\r\n  /**\r\n   * The name of the global variable where an non-AMD dependency drops its exports\r\n   */\r\n  globalName: string;\r\n\r\n  /**\r\n   * The names of the non-AMD dependencies for this project\r\n   */\r\n  globalDependencies: string[];\r\n}\r\n\r\n/**\r\n * Common properties that are shared between tasks.\r\n */\r\nexport interface IOdspGulpTaskProperties extends IConfigJson {\r\n  /**\r\n   * The webpack stats object for the last-run webpack task.\r\n   */\r\n  webpackStats?: webpackCompiler.Stats;\r\n\r\n  /**\r\n   * The webpack stats object for the base bundle.\r\n   */\r\n  initialWebpackStats?: webpackCompiler.Stats;\r\n\r\n  /**\r\n   * Memoization of the manifest objects.\r\n   */\r\n  manifests?: { [key: string]: IClientSideComponentManifest };\r\n\r\n  /**\r\n   * Data describing each bundled entry.\r\n   */\r\n  bundleEntries?: IBundleEntry[];\r\n\r\n  /**\r\n   * Data describing each deployed entry\r\n   */\r\n  deployEntries?: IDeployEntry[];\r\n\r\n  /**\r\n   * Files discovered for the localized resources specified in config.json\r\n   */\r\n  discoveredLocalizedResources?: { [key: string]: ILocaleMap };\r\n\r\n  /**\r\n   * The URL to which the manifests.js file has been deployed after running dev-deploy.\r\n   */\r\n  devDeployUrl?: string;\r\n\r\n  /**\r\n   * A list of externals that were specified in config.json that were later bundled.\r\n   */\r\n  bundledExternals?: string[];\r\n\r\n  /**\r\n   * A map of linked externals.\r\n   */\r\n  linkedExternals?: IExternalProjectMap;\r\n\r\n  /**\r\n   * The name to use in the \"library\" property of the webpack configuration.\r\n   */\r\n  webpackLibraryName?: string;\r\n\r\n  /**\r\n   * If true, webpackLibraryName is the temporary name used in the webpack config when we have multiple\r\n   *  entrypoints. In the post-webpack steps, we need to update the library name to the standard\r\n   *  format in the \"define(<name>, ...\" function.\r\n   */\r\n  webpackLibraryNameIsTemporary?: boolean;\r\n}\r\n\r\nexport interface ILocaleMap {\r\n  [locale: string]: string;\r\n}\r\n\r\nexport default class OdspGulpTask<TASK_CONFIG> extends GulpTask<TASK_CONFIG> {\r\n  private _outputDirectory: string;\r\n\r\n  public executeTask(gulp: gulp.Gulp, completeCallback: (error?: string) => void):\r\n      NodeJS.ReadWriteStream | Promise<any> { // tslint:disable-line:no-any\r\n    throw new Error('executeTask must be implemented.');\r\n  }\r\n\r\n  public get properties(): IOdspGulpTaskProperties {\r\n    return this.buildConfig.properties as IOdspGulpTaskProperties || {};\r\n  }\r\n\r\n  public get outputDirectory(): string {\r\n    if (!this._outputDirectory) {\r\n      this._outputDirectory = path.join(this.buildConfig.rootPath, this.buildConfig.distFolder);\r\n    }\r\n\r\n    return this._outputDirectory;\r\n  }\r\n\r\n  public getManifest(manifestPath: string): IClientSideComponentManifest {\r\n    if (!this.properties.manifests) {\r\n      this.properties.manifests = {};\r\n    }\r\n\r\n    const manifests: { [key: string]: IClientSideComponentManifest } = this.properties.manifests;\r\n\r\n    if (manifests[manifestPath] === undefined) {\r\n      if (!manifestPath) {\r\n        manifests[manifestPath] = null; // tslint:disable-line:no-null-keyword\r\n      } else {\r\n        manifests[manifestPath] = require(path.join(this.buildConfig.rootPath, manifestPath));\r\n      }\r\n    }\r\n\r\n    return manifests[manifestPath];\r\n  }\r\n\r\n  public getPackageVersion(): string {\r\n    const packageJson: PackageJson = require(path.join(this.buildConfig.rootPath, 'package.json'));\r\n    let version: string = packageJson.version;\r\n    // Remove pre-release name if any, because pre-release is not handled by SPFx yet.\r\n    const indexOfDelimiter: number = version.indexOf('-');\r\n    if (indexOfDelimiter > 0) {\r\n      version = version.substr(0, indexOfDelimiter);\r\n    }\r\n    return version;\r\n  }\r\n\r\n  public getChecksum(data: any): string { // tslint:disable-line:no-any\r\n    return crypto.createHash('md5').update(data).digest('hex');\r\n  }\r\n}\r\n"],"sourceRoot":"..\\src"}