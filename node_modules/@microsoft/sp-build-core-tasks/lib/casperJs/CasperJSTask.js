"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var gulp_core_build_1 = require("@microsoft/gulp-core-build");
var child_process_1 = require("child_process");
var path = require("path");
var http = require("http");
var serveStatic = require("serve-static");
var glob = require("glob");
var finalhandler = require("finalhandler");
/**
 * CasperJS is a browser navigation scripting & testing utility written in Javascript for PhantomJS or SlimerJS.
 * This CasperJS task searches for files with the extension casperjstest.js and spawns child processes to execute
 * CasperJS tests. Test results will be reported to the build system and all errors will cause a build break.
 * PhantomJS has a known bug where it doesn't output errors to sterr, so some of the detailed error information
 * will be contained in the test result output.
 */
var CasperJSTask = (function (_super) {
    __extends(CasperJSTask, _super);
    function CasperJSTask() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'casperjs-tests';
        return _this;
    }
    CasperJSTask.prototype.executeTask = function (gulp, completeCallback) {
        var _this = this;
        var osdpBuildTasksRoot = path.resolve(__dirname, '..', '..');
        process.env.CASPER_PATH = path.join(osdpBuildTasksRoot, '\\node_modules\\casperjs');
        process.env.CASPER_BIN = path.join(process.env.CASPER_PATH, '\\bin\\');
        process.env.PHANTOMJS = path.join(osdpBuildTasksRoot, '\\node_modules\\phantomjs-prebuilt\\lib\\phantom\\bin\\phantomjs.exe');
        var casperTestPromiseArray = [];
        this._getFiles(path.join(process.cwd(), '\\lib')).then(function (fileNames) {
            if (fileNames.length < 1) {
                console.log('No casperJS tests found');
                completeCallback();
            }
            else {
                /* tslint:disable:no-any */
                var serve_1 = serveStatic(process.cwd());
                var server_1 = http.createServer(function (req, res) {
                    var done = finalhandler(req, res);
                    /* tslint:enable:no-any */
                    serve_1(req, res, done);
                });
                var port_1 = _this._getRandomPortNumber();
                server_1.on('error', function (e) {
                    if (e.code === 'EADDRINUSE') {
                        console.log('Address in use, retrying...');
                        port_1 = _this._getRandomPortNumber();
                        setTimeout(function () {
                            server_1.close();
                            server_1.listen(port_1);
                        }, 1000);
                    }
                });
                server_1.listen(port_1);
                var _loop_1 = function (i) {
                    var command = [process.env.PHANTOMJS,
                        process.env.CASPER_BIN + 'bootstrap.js',
                        '--casper-path=' + process.env.CASPER_PATH,
                        '--cli test',
                        fileNames[i],
                        '--url='].join(' ');
                    server_1.on('listening', function () {
                        console.log('Listening to port ' + port_1);
                        casperTestPromiseArray.push(_this._startCasperTestOnChildProcess(command + 'http://localhost:' + port_1));
                        if (casperTestPromiseArray.length === fileNames.length) {
                            Promise.all(casperTestPromiseArray).then(function (errors) {
                                var errorMessage = _this._createCasperJSErrorMessage(errors);
                                console.log('tests run on ' + fileNames.length + ' files');
                                errorMessage === '' ? completeCallback() : completeCallback(errorMessage);
                                server_1.close();
                            });
                        }
                    });
                };
                for (var i = 0; i < fileNames.length; i++) {
                    _loop_1(i);
                }
            }
        });
        return;
    };
    CasperJSTask.prototype._createCasperJSErrorMessage = function (errors) {
        return errors.filter(function (value) {
            return value !== '';
        }).join();
    };
    CasperJSTask.prototype._getFiles = function (dir) {
        return new Promise(function (complete) {
            glob('**/*.caspertest.js', { cwd: dir }, function (er, files) {
                complete(files.map(function (name) {
                    return path.resolve(dir, name);
                }));
            });
        });
    };
    CasperJSTask.prototype._startCasperTestOnChildProcess = function (cmd) {
        return new Promise(function (complete) {
            child_process_1.exec(cmd, function (error, stdout, stderr) {
                console.log('CasperJS Output: ' + stdout);
                complete([stderr, error].filter(function (value) {
                    return value && value !== '';
                }).join('\n'));
            });
        });
    };
    CasperJSTask.prototype._getRandomPortNumber = function () {
        var MAX_PORT = 65535;
        var MIN_PORT = 0;
        return Math.floor(Math.random() * (MAX_PORT - MIN_PORT + 1)) + MIN_PORT;
    };
    return CasperJSTask;
}(gulp_core_build_1.GulpTask));
exports.CasperJSTask = CasperJSTask;

//# sourceMappingURL=CasperJSTask.js.map
