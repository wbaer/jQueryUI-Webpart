"use strict";
var chai_1 = require("chai");
var FileDeletionUtility_1 = require("./FileDeletionUtility");
describe('FileDeletionUtility', function () {
    describe('constructor', function () {
        it('can be constructed', function () {
            var test = new FileDeletionUtility_1.FileDeletionUtility();
        });
    });
    describe('isParentDirectory', function () {
        it('can detect an immediate child', function () {
            chai_1.assert.isTrue(FileDeletionUtility_1.FileDeletionUtility.isParentDirectory('/a', '/a/b.txt'));
        });
        it('can detect a deep child', function () {
            chai_1.assert.isTrue(FileDeletionUtility_1.FileDeletionUtility.isParentDirectory('/a', '/a/b/c/d.txt'));
        });
        it('can detect if base path is longer', function () {
            chai_1.assert.isTrue(FileDeletionUtility_1.FileDeletionUtility.isParentDirectory('/a/b/c/d', '/a/b/c/d/g.txt'));
        });
        it('can detect siblings', function () {
            chai_1.assert.isFalse(FileDeletionUtility_1.FileDeletionUtility.isParentDirectory('/a/b', '/a/c'));
        });
        it('can detect siblings with file extensions', function () {
            chai_1.assert.isFalse(FileDeletionUtility_1.FileDeletionUtility.isParentDirectory('/a/b/c.txt', '/a/b/d.txt'));
        });
        it('can detect when not a parent', function () {
            chai_1.assert.isFalse(FileDeletionUtility_1.FileDeletionUtility.isParentDirectory('/a/b/c', '/a'));
            chai_1.assert.isFalse(FileDeletionUtility_1.FileDeletionUtility.isParentDirectory('/a/b/c', '/a/b.txt'));
        });
        it('accepts anything under the root', function () {
            chai_1.assert.isTrue(FileDeletionUtility_1.FileDeletionUtility.isParentDirectory('/', '/a.txt'));
            chai_1.assert.isTrue(FileDeletionUtility_1.FileDeletionUtility.isParentDirectory('/', '/a/b/c/d.txt'));
        });
        it('it is case sensitive', function () {
            chai_1.assert.isFalse(FileDeletionUtility_1.FileDeletionUtility.isParentDirectory('/a', '/A/b.txt'));
            chai_1.assert.isTrue(FileDeletionUtility_1.FileDeletionUtility.isParentDirectory('/a', '/a/b.txt'));
            chai_1.assert.isFalse(FileDeletionUtility_1.FileDeletionUtility.isParentDirectory('/a/B/c', '/a/b/c/d.txt'));
        });
        it('it does not accept null or undefined', function () {
            /* tslint:disable:no-null-keyword */
            chai_1.assert.isFalse(FileDeletionUtility_1.FileDeletionUtility.isParentDirectory('', '/A/b.txt'));
            chai_1.assert.isFalse(FileDeletionUtility_1.FileDeletionUtility.isParentDirectory(undefined, '/a/b.txt'));
            chai_1.assert.isFalse(FileDeletionUtility_1.FileDeletionUtility.isParentDirectory(null, '/a/b/c/d.txt'));
            chai_1.assert.isFalse(FileDeletionUtility_1.FileDeletionUtility.isParentDirectory('/A/b.txt', ''));
            chai_1.assert.isFalse(FileDeletionUtility_1.FileDeletionUtility.isParentDirectory('/a/b.txt', undefined));
            chai_1.assert.isFalse(FileDeletionUtility_1.FileDeletionUtility.isParentDirectory('/a/b/c/d.txt', null));
            /* tslint:enable:no-null-keyword */
        });
    });
    describe('removeChildren', function () {
        it('removes children of a parent', function () {
            var files = [
                '/a',
                '/a/b',
                '/a/b/c.txt',
                '/a/b/d.txt',
                '/a/z',
                '/b/f/g',
                '/b/f/ggg',
                '/b/f/ggg/foo.txt',
                '/c',
                '/c/a.txt',
                '/c/f/g/h/j/k/l/q',
                '/d'
            ];
            var expected = [
                '/a',
                '/b/f/g',
                '/b/f/ggg',
                '/c',
                '/d'
            ];
            var actual = FileDeletionUtility_1.FileDeletionUtility.removeChildren(files);
            chai_1.assert.equal(actual.length, expected.length);
            chai_1.assert.includeMembers(expected, actual);
        });
        it('removes everything under the root', function () {
            var files = [
                '/',
                '/a/b',
                '/a/b/c.txt',
                '/a/b/d.txt',
                '/a/z',
                '/b/f/g',
                '/b/f/ggg',
                '/b/f/ggg/foo.txt',
                '/c',
                '/c/a.txt',
                '/c/f/g/h/j/k/l/q',
                '/d'
            ];
            var expected = [
                '/'
            ];
            var actual = FileDeletionUtility_1.FileDeletionUtility.removeChildren(files);
            chai_1.assert.equal(actual.length, expected.length);
            chai_1.assert.includeMembers(expected, actual);
        });
    });
});

//# sourceMappingURL=FileDeletionUtility.test.js.map
