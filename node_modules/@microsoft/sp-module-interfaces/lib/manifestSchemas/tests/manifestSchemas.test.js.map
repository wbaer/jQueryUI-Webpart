{"version":3,"sources":["manifestSchemas/tests/manifestSchemas.test.ts"],"names":[],"mappings":"AAAA,+BAA+B;;AAE/B,kCAAqC;AACrC,uBAAyB;AACzB,2BAA6B;AAC7B,6BAA8B;AAC9B,iCAAmC;AACnC,yBAAyB;AAEzB,2EAAiE;AAEjE,4BAA4B;AAC5B,IAAM,gBAAgB,GAAW,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,aAAa,CAAC,CAAC;AAC3E,IAAM,WAAW,GAAa,EAAE,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;AAE/D,IAAM,cAAc,GAAc,QAAG,iBAAc,CAAC;AAEpD,2BAA2B,eAAkC,EAAE,QAAiB;IAC9E,IAAM,MAAM,GAA0B,eAAe,CAAC,aAAa,EAAE,IAAI,EAAE,CAAC;IAC5E,IAAM,aAAa,GAAa,MAAM,CAAC,GAAG,CAAC,UAAC,KAA0B;QACpE,MAAM,CAAI,cAAc,SAAI,KAAK,CAAC,IAAI,UAAK,KAAK,CAAC,OAAS,CAAC;IAC7D,CAAC,CAAC,CAAC;IAEH,aAAM,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,8BAA2B,QAAQ,GAAG,OAAK,QAAQ,MAAG,GAAG,EAAE,UAAI,aAAa,CAAC,IAAI,CAAC,EAAE,CAAG,CAAC,CAAC;AACvH,CAAC;AAED,QAAQ,CAAC,kBAAkB,EAAE;IAC3B,IAAI,OAAa,CAAC;IAClB,IAAI,eAAkC,CAAC;IAEvC,UAAU,CAAC;QACT,OAAO,GAAG,WAAW,CAAC,GAAG,CAAC,UAAC,UAAkB,IAAS,OAAA,kBAAS,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,UAAU,CAAC,CAAC,CAAC,EAA3D,CAA2D,CAAC,CAAC;QAEnH,eAAe,GAAG,IAAI,OAAO,CAAC,wCAAc,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mBAAmB,EAAE;QACtB,6CAA6C;QAC5C,eAAuB,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,6BAA6B;QAC/E,iBAAiB,CAAC,eAAe,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"manifestSchemas/tests/manifestSchemas.test.js","sourcesContent":["/// <reference types=\"mocha\" />\r\n\r\nimport ZSchema = require('z-schema');\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport { assert } from 'chai';\r\nimport { cloneDeep } from 'lodash';\r\nimport { EOL } from 'os';\r\n\r\nimport { zSchemaOptions } from './../../manifestSchemaValidator';\r\n\r\n// Discover the schema files\r\nconst schemasDirectory: string = path.join(__dirname, '..', 'jsonSchemas');\r\nconst schemaFiles: string[] = fs.readdirSync(schemasDirectory);\r\n\r\nconst errorSeparator: string = `${EOL}          - `;\r\n\r\nfunction assertValidSchema(schemaValidator: ZSchema.Validator, filePath?: string): void {\r\n  const errors: ZSchema.SchemaError[] = schemaValidator.getLastErrors() || [];\r\n  const errorMessages: string[] = errors.map((error: ZSchema.SchemaError) => {\r\n    return `${errorSeparator}(${error.path}) ${error.message}`;\r\n  });\r\n\r\n  assert(errors.length === 0, `Schema validation errors${filePath ? ` (${filePath})` : ''}:${errorMessages.join('')}`);\r\n}\r\n\r\ndescribe('Manifest schemas', () => {\r\n  let schemas: {}[];\r\n  let schemaValidator: ZSchema.Validator;\r\n\r\n  beforeEach(() => {\r\n    schemas = schemaFiles.map((schemaFile: string): {} => cloneDeep(require(path.join(schemasDirectory, schemaFile))));\r\n\r\n    schemaValidator = new ZSchema(zSchemaOptions);\r\n  });\r\n\r\n  it('schemas are valid', () => {\r\n    // @todo 272561 - update the z-schema typings\r\n    (schemaValidator as any).validateSchema(schemas); // tslint:disable-line:no-any\r\n    assertValidSchema(schemaValidator);\r\n  });\r\n});"],"sourceRoot":"..\\..\\..\\src"}