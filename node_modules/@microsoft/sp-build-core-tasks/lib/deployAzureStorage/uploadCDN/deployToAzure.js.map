{"version":3,"sources":["deployAzureStorage/uploadCDN/deployToAzure.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;AAEH,2BAA8B;AAC9B,+BAAkC;AAGlC,sFAAiF;AACjF,kFAA6E;AAC7E,wFAAmF;AACnF,6CAAwD;AAMxD;;GAEG;AACH,yBAAyB,KAAa,EAAE,GAAY;IAClD,MAAM,CAAC,IAAI,OAAO,CAAW,UAAC,OAAkC,EAAE,MAA8B;QAC9F,IAAM,OAAO,GAAiB,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;QAEtD,IAAI,CAAC,KAAK,EAAE,OAAO,EAAE,UAAC,GAAU,EAAE,OAAiB;YACjD,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACR,MAAM,CAAC,GAAG,CAAC,CAAC;YACd,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,OAAO,CAAC,OAAO,CAAC,CAAC;YACnB,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AAED;;GAEG;AACH,uBAAsC,MAAqC,EACrC,GAAwC;IACxC,qCAAqC;IACrC,QAA8C;IAF9C,oBAAA,EAAA,MAA6B,OAAO,CAAC,GAAG;IACxC,qCAAqC;IACrC,yBAAA,EAAA,WAAiC,OAAO,CAAC,KAAK;IAClF,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;QACtB,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,QAAoB,EAAE,MAA8B;YAC5E,MAAM,CAAC,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;IACL,CAAC;IAED,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;QACpB,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,QAAoB,EAAE,MAA8B;YAC5E,MAAM,CAAC,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;IACL,CAAC;IAED,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;QACtB,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,QAAoB,EAAE,MAA8B;YAC5E,MAAM,CAAC,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;IACL,CAAC;IAED,GAAG,CAAC,sBAAoB,MAAM,CAAC,UAAU,0BAAqB,MAAM,CAAC,UAAU,eAAY,CAAC,CAAC;IAE7F,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,UAAU,CAAC;SACzD,IAAI,CAAC,UAAC,KAAe;QAClB,MAAM,CAAC,2BAAiB,CAAC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,SAAS,CAAC;aACvD,IAAI,CAAC,UAAC,WAA8B,IAAK,OAAA,yBAAe,CAAC,WAAW,EAAE,MAAM,CAAC,SAAS,EAAE,SAAS,EAAE,GAAG,CAAC,EAA9D,CAA8D,CAAC;aACxG,IAAI,CAAC,UAAC,WAA8B;YAC7B,OAAA,4BAAkB,CAAC,WAAW,EAAE,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,UAAU,EAAE,KAAK,EAAE,GAAG,CAAC;QAAhF,CAAgF,CAAC;aACxF,IAAI,CAAC;YACJ,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC,CAAC;YACxC,GAAG,CAAC,2BAAyB,kBAAkB,CAAC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,SAAS,CAAC,OAAI,CAAC,CAAC;QACzF,CAAC,EAAE,UAAC,KAAY;YACd,QAAQ,CAAC,KAAK,CAAC,CAAC;YAEhB,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;gBAChB,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACxB,CAAC;QACN,CAAC,CAAC,CAAC;IACN,CAAC,CAAC,CAAC;AACP,CAAC;;AAzCD,gCAyCC;AAED,4BAAmC,WAAmB,EAAE,aAAqB;IAC3E,MAAM,CAAC,qBAAe,CAAC,aAAW,WAAW,2BAAwB,EAAE,aAAa,IAAI,EAAE,CAAC,CAAC;AAC9F,CAAC;AAFD,gDAEC","file":"deployAzureStorage/uploadCDN/deployToAzure.js","sourcesContent":["/**\r\n * @file deployToAzure.ts\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n *\r\n * Uploads source files to an Azure Blob Storage instance\r\n */\r\n\r\nimport glob = require('glob');\r\nimport colors = require('colors');\r\n\r\nimport { IDeployAzureStorageTaskConfig } from '../DeployAzureStorageTask';\r\nimport ensureBlobService from './../../utilities/azureStorage/ensureBlobService';\r\nimport ensureContainer from './../../utilities/azureStorage/ensureContainer';\r\nimport uploadFilesToAzure from './../../utilities/azureStorage/uploadFilesToAzure';\r\nimport { joinUrlSegments } from './../../utilities/url';\r\n\r\ninterface IGlobOptions {\r\n  cwd?: string;\r\n}\r\n\r\n/**\r\n * Uses glob to expand the filepath glob into a list of resolved file paths\r\n */\r\nfunction loadSourceFiles(globs: string, cwd?: string): Promise<string[]> {\r\n  return new Promise<string[]>((resolve: (files: string[]) => void, reject: (error: Error) => void) => {\r\n    const options: IGlobOptions = cwd ? { cwd: cwd } : {};\r\n\r\n    glob(globs, options, (err: Error, matches: string[]) => {\r\n      if (err) {\r\n        reject(err);\r\n      } else {\r\n        resolve(matches);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Deploys all the files in a certain directory to a specific Azure Blob Storage instance\r\n */\r\nexport default function deployToAzure(config: IDeployAzureStorageTaskConfig,\r\n                                      log: (str: string) => void = console.log,\r\n                                      /* tslint:disable-next-line:no-any */\r\n                                      logError: (error: any) => void = console.error): Promise<void> {\r\n  if (!config.container) {\r\n    return new Promise<void>((complete: () => void, reject: (error: Error) => void) => {\r\n      reject(new Error('Config file missing container name!'));\r\n    });\r\n  }\r\n\r\n  if (!config.account) {\r\n    return new Promise<void>((complete: () => void, reject: (error: Error) => void) => {\r\n      reject(new Error('Config file missing Azure account name!'));\r\n    });\r\n  }\r\n\r\n  if (!config.accessKey) {\r\n    return new Promise<void>((complete: () => void, reject: (error: Error) => void) => {\r\n      reject(new Error('Config file missing Azure access key!'));\r\n    });\r\n  }\r\n\r\n  log(`Uploading files '${config.uploadPath}' from directory '${config.workingDir}' to Azure`);\r\n\r\n  return loadSourceFiles(config.uploadPath, config.workingDir)\r\n    .then((files: string[]) => {\r\n        return ensureBlobService(config.account, config.accessKey)\r\n          .then((blobService: IAzureBlobService) => ensureContainer(blobService, config.container, undefined, log))\r\n          .then((blobService: IAzureBlobService) =>\r\n                  uploadFilesToAzure(blobService, config.container, config.workingDir, files, log))\r\n          .then(() => {\r\n            log(colors.green('Upload complete!\\n'));\r\n            log(`Access your files at: ${getAzureStorageUrl(config.account, config.container)}\\n`);\r\n          }, (error: Error) => {\r\n            logError(error);\r\n\r\n            if (error.stack) {\r\n              logError(error.stack);\r\n            }\r\n       });\r\n    });\r\n}\r\n\r\nexport function getAzureStorageUrl(accountName: string, containerName: string): string {\r\n  return joinUrlSegments(`https://${accountName}.blob.core.windows.net`, containerName || '');\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}