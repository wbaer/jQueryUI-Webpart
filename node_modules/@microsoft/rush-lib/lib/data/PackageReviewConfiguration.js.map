{"version":3,"sources":["data/PackageReviewConfiguration.ts"],"names":[],"mappings":"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","file":"data/PackageReviewConfiguration.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as fsx from 'fs-extra';\r\nimport * as path from 'path';\r\nimport * as os from 'os';\r\n\r\nimport Validator = require('z-schema');\r\nimport JsonFile from '../utilities/JsonFile';\r\nimport Utilities from '../utilities/Utilities';\r\n\r\n/**\r\n * Part of IPackageReviewJson.\r\n */\r\nexport interface IPackageReviewItemJson {\r\n  name: string;\r\n  allowedCategories: string[];\r\n}\r\n\r\n/**\r\n * Part of IPackageReviewJson.\r\n */\r\nexport interface IPackageReviewSettingsJson {\r\n  ignoredNpmScopes?: string[];\r\n}\r\n\r\n/**\r\n * This represents the JSON data structure for the \"PackageDependencies.json\" configuration file.\r\n * See packagereview-schema.json for documentation.\r\n */\r\nexport interface IPackageReviewJson {\r\n  $schema: string;\r\n  settings?: IPackageReviewSettingsJson;\r\n  browserPackages: IPackageReviewItemJson[];\r\n  nonBrowserPackages: IPackageReviewItemJson[];\r\n}\r\n\r\nexport class PackageReviewItem {\r\n  public packageName: string;\r\n  public allowedInBrowser: boolean;\r\n  public allowedCategories: Set<string> = new Set<string>();\r\n}\r\n\r\n/**\r\n * This represents the JSON file specified via the \"packageReviewFile\" option in rush.json.\r\n */\r\nexport default class PackageReviewConfiguration {\r\n  public items: PackageReviewItem[] = [];\r\n  private _itemsByName: Map<string, PackageReviewItem> = new Map<string, PackageReviewItem>();\r\n\r\n  private _ignoredNpmScopes: Set<string> = new Set<string>();\r\n\r\n  private _loadedJson: IPackageReviewJson;\r\n\r\n  /**\r\n   * Loads the configuration data from PackageDependencies.json and returns\r\n   * an PackageReviewFile object.\r\n   */\r\n  public static loadFromFile(jsonFilename: string): PackageReviewConfiguration {\r\n    const packageReviewJson: IPackageReviewJson = JsonFile.loadJsonFile(jsonFilename);\r\n\r\n    // Remove the $schema reference that appears in the configuration object (used for IntelliSense),\r\n    // since we are replacing it with the precompiled version.  The validator.setRemoteReference()\r\n    // API is a better way to handle this, but we'd first need to publish the schema file\r\n    // to a public web server where Visual Studio can find it.\r\n    delete packageReviewJson.$schema;\r\n\r\n    const validator: Validator = new Validator({\r\n      breakOnFirstError: true,\r\n      noTypeless: true\r\n    });\r\n\r\n    const packageReviewSchema: Object = JsonFile.loadJsonFile(\r\n      path.join(__dirname, '../packagereview-schema.json'));\r\n\r\n    if (!validator.validate(packageReviewJson, packageReviewSchema)) {\r\n      const error: Validator.SchemaError = validator.getLastError();\r\n\r\n      const detail: Validator.SchemaErrorDetail = error.details[0];\r\n      const errorMessage: string = `Error parsing file '${path.basename(jsonFilename)}',`\r\n        + `section[${detail.path}]:${os.EOL}(${detail.code}) ${detail.message}`;\r\n\r\n      console.log(os.EOL + 'ERROR: ' + errorMessage + os.EOL + os.EOL);\r\n      throw new Error(errorMessage);\r\n    }\r\n\r\n    return new PackageReviewConfiguration(packageReviewJson, jsonFilename);\r\n  }\r\n\r\n  /**\r\n   * DO NOT CALL -- Use PackageReviewFile.loadFromFile() instead.\r\n   */\r\n  constructor(packageReviewJson: IPackageReviewJson, jsonFilename: string) {\r\n    this._loadedJson = packageReviewJson;\r\n\r\n    this._ignoredNpmScopes.clear();\r\n    if (packageReviewJson.settings) {\r\n      if (packageReviewJson.settings.ignoredNpmScopes) {\r\n        for (const ignoredNpmScope of packageReviewJson.settings.ignoredNpmScopes) {\r\n          this._ignoredNpmScopes.add(ignoredNpmScope);\r\n        }\r\n      }\r\n    }\r\n\r\n    for (const browserPackage of packageReviewJson.browserPackages) {\r\n      this._addItemJson(browserPackage, jsonFilename, true);\r\n    }\r\n    for (const nonBrowserPackage of packageReviewJson.nonBrowserPackages) {\r\n      this._addItemJson(nonBrowserPackage, jsonFilename, false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A list of NPM package scopes that will be excluded from review (e.g. \\\"@types\\\")\r\n   */\r\n  public get ignoredNpmScopes(): Set<string> {\r\n    return this._ignoredNpmScopes;\r\n  }\r\n\r\n  public getItemByName(packageName: string): PackageReviewItem {\r\n    return this._itemsByName.get(packageName);\r\n  }\r\n\r\n  public addOrUpdatePackage(packageName: string, allowedInBrowser: boolean, reviewCategory: string): void {\r\n    let item: PackageReviewItem = this._itemsByName.get(packageName);\r\n    if (!item) {\r\n      item = new PackageReviewItem();\r\n      item.packageName = packageName;\r\n      item.allowedInBrowser = false;\r\n      this._addItem(item);\r\n    }\r\n\r\n    // Broaden (but do not narrow) the approval\r\n    if (allowedInBrowser) {\r\n      item.allowedInBrowser = true;\r\n    }\r\n\r\n    if (reviewCategory) {\r\n      item.allowedCategories.add(reviewCategory);\r\n    }\r\n  }\r\n\r\n  public saveFile(jsonFilename: string): void {\r\n    // Update the JSON structure that we already loaded, preserving any existing state\r\n    // (which passed schema validation).\r\n\r\n    // Only write settings if was there before, or if we have some settings\r\n    const writeSettings: boolean = this._loadedJson.settings !== undefined\r\n      || this._ignoredNpmScopes.size > 0;\r\n\r\n    if (writeSettings) {\r\n      if (!this._loadedJson.settings) {\r\n        this._loadedJson.settings = {};\r\n      }\r\n      this._loadedJson.settings.ignoredNpmScopes = Utilities.getSetAsArray(this._ignoredNpmScopes)\r\n        .sort();\r\n    }\r\n\r\n    this._loadedJson.browserPackages = [];\r\n    this._loadedJson.nonBrowserPackages = [];\r\n\r\n    this.items.sort((a: PackageReviewItem, b: PackageReviewItem) => {\r\n      return a.packageName.localeCompare(b.packageName);\r\n    });\r\n\r\n    for (const item of this.items) {\r\n      // Sort the items from the set.  Too bad we can't use the new Array.from().\r\n      const allowedCategories: string[] = Utilities.getSetAsArray(item.allowedCategories);\r\n      allowedCategories.sort();\r\n\r\n      const itemJson: IPackageReviewItemJson = {\r\n        name: item.packageName,\r\n        allowedCategories: allowedCategories\r\n      };\r\n      if (item.allowedInBrowser) {\r\n        this._loadedJson.browserPackages.push(itemJson);\r\n      } else {\r\n        this._loadedJson.nonBrowserPackages.push(itemJson);\r\n      }\r\n    }\r\n\r\n    // Save the file\r\n    let body: string = JSON.stringify(this._loadedJson, undefined, 2) + '\\n';\r\n\r\n    // Unindent the allowedCategories array to improve readability\r\n    body = body.replace(\r\n      /(\"allowedCategories\": +\\[)([^\\]]+)/g,\r\n      (substring: string, ...args: string[]) => {\r\n        return args[0] + args[1].replace(/\\s+/g, ' ');\r\n      }\r\n    );\r\n\r\n    // Add a header\r\n    body = '// DO NOT ADD COMMENTS IN THIS FILE.'\r\n      + '  They will be lost when the Rush tool resaves it.\\n' + body;\r\n\r\n    body = Utilities.getAllReplaced(body, '\\n', '\\r\\n');\r\n    fsx.writeFileSync(jsonFilename, body);\r\n  }\r\n\r\n  /**\r\n   * Helper function only used by the constructor when loading the file.\r\n   */\r\n  private _addItemJson(itemJson: IPackageReviewItemJson, jsonFilename: string, allowedInBrowser: boolean): void {\r\n    if (this._itemsByName.has(itemJson.name)) {\r\n      throw new Error(`Error loading package review file ${jsonFilename}:` + os.EOL\r\n        + ` the name \"${itemJson.name}\" appears more than once`);\r\n    }\r\n\r\n    const item: PackageReviewItem = new PackageReviewItem();\r\n    item.packageName = itemJson.name;\r\n    item.allowedInBrowser = allowedInBrowser;\r\n    if (itemJson.allowedCategories) {\r\n      for (const allowedCategory of itemJson.allowedCategories) {\r\n        item.allowedCategories.add(allowedCategory);\r\n      }\r\n    }\r\n    this._addItem(item);\r\n  }\r\n\r\n  /**\r\n   * Helper function that adds an already created PackageReviewItem to the\r\n   * list and set.\r\n   */\r\n  private _addItem(item: PackageReviewItem): void {\r\n    if (this._itemsByName.has(item.packageName)) {\r\n      throw new Error('Duplicate key'); // this is a program bug\r\n    }\r\n    this.items.push(item);\r\n    this._itemsByName.set(item.packageName, item);\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}