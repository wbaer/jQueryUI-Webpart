{"version":3,"sources":["components/Image/Image.tsx"],"names":[],"mappings":"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","file":"components/Image/Image.js","sourcesContent":["/* tslint:disable:no-unused-variable */\r\nimport * as React from 'react';\r\n/* tslint:enable:no-unused-variable */\r\nimport {\r\n  autobind,\r\n  BaseComponent,\r\n  css,\r\n  getNativeProps,\r\n  imageProperties\r\n} from '../../Utilities';\r\nimport { IImageProps, ImageFit, ImageLoadState } from './Image.Props';\r\n\r\nimport './Image.scss';\r\n\r\nexport interface IImageState {\r\n  loadState?: ImageLoadState;\r\n}\r\n\r\nexport enum CoverStyle {\r\n  landscape = 0,\r\n  portrait = 1\r\n}\r\n\r\nexport const CoverStyleMap = {\r\n  [CoverStyle.landscape]: 'ms-Image-image--landscape',\r\n  [CoverStyle.portrait]: 'ms-Image-image--portrait'\r\n};\r\n\r\nexport const ImageFitMap = {\r\n  [ImageFit.center]: 'ms-Image-image--center',\r\n  [ImageFit.contain]: 'ms-Image-image--contain',\r\n  [ImageFit.cover]: 'ms-Image-image--cover',\r\n  [ImageFit.none]: 'ms-Image-image--none'\r\n};\r\n\r\nconst KEY_PREFIX: string = 'fabricImage';\r\n\r\nexport class Image extends BaseComponent<IImageProps, IImageState> {\r\n  public static defaultProps = {\r\n    shouldFadeIn: true\r\n  };\r\n\r\n  private static _svgRegex = /\\.svg$/i;\r\n\r\n  // Make an initial assumption about the image layout until we can\r\n  // check the rendered element. The value here only takes effect when\r\n  // shouldStartVisible is true.\r\n  private _coverStyle: CoverStyle = CoverStyle.portrait;\r\n  private _imageElement: HTMLImageElement;\r\n  private _frameElement: HTMLDivElement;\r\n\r\n  constructor(props: IImageProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      loadState: ImageLoadState.notLoaded\r\n    };\r\n  }\r\n\r\n  public componentWillReceiveProps(nextProps: IImageProps) {\r\n    if (nextProps.src !== this.props.src) {\r\n      this.setState({\r\n        loadState: ImageLoadState.notLoaded\r\n      });\r\n    } else if (this.state.loadState === ImageLoadState.loaded) {\r\n      this._computeCoverStyle(nextProps);\r\n    }\r\n  }\r\n\r\n  public componentDidUpdate(prevProps: IImageProps, prevState: IImageState) {\r\n    this._checkImageLoaded();\r\n    if (this.props.onLoadingStateChange\r\n      && prevState.loadState !== this.state.loadState) {\r\n      this.props.onLoadingStateChange(this.state.loadState);\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    let imageProps = getNativeProps(this.props, imageProperties, ['width', 'height']);\r\n    let { src, alt, width, height, shouldFadeIn, className, imageFit, role, maximizeFrame} = this.props;\r\n    let { loadState } = this.state;\r\n    let coverStyle = this._coverStyle;\r\n    let loaded = loadState === ImageLoadState.loaded || (loadState === ImageLoadState.notLoaded && this.props.shouldStartVisible);\r\n\r\n    // If image dimensions aren't specified, the natural size of the image is used.\r\n    return (\r\n      <div\r\n        className={ css('ms-Image', className, { 'ms-Image--maximizeFrame': maximizeFrame }) }\r\n        style={ { width: width, height: height } }\r\n        ref={ this._resolveRef('_frameElement') }\r\n      >\r\n        <img\r\n          { ...imageProps }\r\n          onLoad={ this._onImageLoaded }\r\n          onError={ this._onImageError }\r\n          key={ KEY_PREFIX + this.props.src || '' }\r\n          className={\r\n            css('ms-Image-image',\r\n              CoverStyleMap[coverStyle],\r\n              (imageFit !== undefined) && ImageFitMap[imageFit], {\r\n                'is-fadeIn': shouldFadeIn,\r\n                'is-notLoaded': !loaded,\r\n                'is-loaded': loaded,\r\n                'ms-u-fadeIn400': loaded && shouldFadeIn,\r\n                'is-error': loadState === ImageLoadState.error,\r\n                'ms-Image-image--scaleWidth': (imageFit === undefined && !!width && !height),\r\n                'ms-Image-image--scaleHeight': (imageFit === undefined && !width && !!height),\r\n                'ms-Image-image--scaleWidthHeight': (imageFit === undefined && !!width && !!height),\r\n              }) }\r\n          ref={ this._resolveRef('_imageElement') }\r\n          src={ src }\r\n          alt={ alt }\r\n          role={ role }\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  @autobind\r\n  private _onImageLoaded(ev: React.SyntheticEvent<HTMLImageElement>): void {\r\n    let { src, onLoad } = this.props;\r\n    if (onLoad) {\r\n      onLoad(ev);\r\n    }\r\n\r\n    this._computeCoverStyle(this.props);\r\n\r\n    if (src) {\r\n      this.setState({\r\n        loadState: ImageLoadState.loaded\r\n      });\r\n    }\r\n  }\r\n\r\n  private _checkImageLoaded(): void {\r\n    let { src } = this.props;\r\n    let { loadState } = this.state;\r\n\r\n    if (loadState === ImageLoadState.notLoaded) {\r\n      // testing if naturalWidth and naturalHeight are greater than zero is better than checking\r\n      // .complete, because .complete will also be set to true if the image breaks. However,\r\n      // for some browsers, SVG images do not have a naturalWidth or naturalHeight, so fall back\r\n      // to checking .complete for these images.\r\n      let isLoaded: boolean = src && (this._imageElement.naturalWidth > 0 && this._imageElement.naturalHeight > 0) ||\r\n        (this._imageElement.complete && Image._svgRegex.test(src));\r\n\r\n      if (isLoaded) {\r\n        this._computeCoverStyle(this.props);\r\n        this.setState({\r\n          loadState: ImageLoadState.loaded\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  private _computeCoverStyle(props: IImageProps) {\r\n    let { imageFit, width, height } = props;\r\n    if (imageFit === ImageFit.cover || imageFit === ImageFit.contain) {\r\n      if (this._imageElement) {\r\n        // Determine the desired ratio using the width and height props.\r\n        // If those props aren't available, measure measure the frame.\r\n        let desiredRatio;\r\n        if (!!width && !!height) {\r\n          desiredRatio = (width as number) / (height as number);\r\n        } else {\r\n          desiredRatio = this._frameElement.clientWidth / this._frameElement.clientHeight;\r\n        }\r\n\r\n        // Examine the source image to determine its original ratio.\r\n        let naturalRatio = this._imageElement.naturalWidth / this._imageElement.naturalHeight;\r\n\r\n        // Should we crop from the top or the sides?\r\n        if (naturalRatio > desiredRatio) {\r\n          this._coverStyle = CoverStyle.landscape;\r\n        } else {\r\n          this._coverStyle = CoverStyle.portrait;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _onImageError(ev: React.SyntheticEvent<HTMLImageElement>) {\r\n    if (this.props.onError) {\r\n      this.props.onError(ev);\r\n    }\r\n    this.setState({\r\n      loadState: ImageLoadState.error\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}