{"version":3,"sources":["packageSolution/packageSolution/utils/readResources.ts"],"names":[],"mappings":"AAAA;;;;;;;GAOG;;AAIH,uCAAkD;AAClD;;;;;;GAMG;AACH,uBAAsC,OAAmC;IACvE,MAAM,CAAC,oBAAoB,CAAC,OAAO,CAAC,KAAK,CAAC,aAAa,EAAE,mBAAmB,CAAC;SAC1E,IAAI,CAAC,UAAC,oBAA8B;QACjC,EAAE,CAAC,CAAC,oBAAoB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACpC,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;QAC1D,CAAC;QACD,MAAM,CAAC,oBAAoB,CAAC,OAAO,CAAC,KAAK,CAAC,aAAa,EAAE,yBAAyB,CAAC;aAChF,IAAI,CAAC,UAAC,sBAAgC;YACrC,MAAM,CAAC;gBACL,sBAAsB,EAAE,sBAAsB;gBAC9C,mBAAmB,EAAE,oBAAoB,CAAC,CAAC,CAAC;aAC7C,CAAC;QACJ,CAAC,CAAC,CAAC;IACT,CAAC,CAAC,CAAC;AACP,CAAC;;AAdD,gCAcC;AAED,8EAA8E;AAC9E,8BAA8B,aAAqB,EAAE,KAAa;IAChE,MAAM,CAAC,+BAAoB,CAAC,aAAa,EAAE,KAAK,EAAE,wBAAwB,CAAC,CAAC;AAC9E,CAAC","file":"packageSolution/packageSolution/utils/readResources.js","sourcesContent":["/**\r\n * @file readResources.ts\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n *\r\n * Reads resources (RESX format) files from folder specified by config. It\r\n * returns an IResources object with the paths to both the default resources file\r\n * and a list of all the localized resources files.\r\n */\r\n\r\nimport { IPackageSolutionTaskConfig } from '../../PackageSolutionTask';\r\nimport IResources from '../models/packageXml/IResources';\r\nimport { getRelativeFilePaths } from './getFiles';\r\n/**\r\n * Reads all resources files from folder specified by config.\r\n * The file with name \"Resources.resx\" will be considered the default resource file.\r\n * More than one Resources.resx file will end up in an error.\r\n * All files following Resources.??-??.resx (such as Resources.en-US.resx) will be considered as\r\n * localized resources. It won't match against valid locales but that expression\r\n */\r\nexport default function readResources(options: IPackageSolutionTaskConfig): Promise<IResources> {\r\n  return getResourceFilePaths(options.paths.featureXmlDir, '**/Resources.resx')\r\n    .then((defaultResourcePaths: string[]) => {\r\n        if (defaultResourcePaths.length > 1) {\r\n          throw new Error('More than one default resources file');\r\n        }\r\n        return getResourceFilePaths(options.paths.featureXmlDir, '**/Resources.??-??.resx')\r\n          .then((localizedResourcePaths: string[]) => {\r\n            return {\r\n              localizedResourcePaths: localizedResourcePaths,\r\n              defaultResourcePath: defaultResourcePaths[0]\r\n            };\r\n          });\r\n    });\r\n}\r\n\r\n/** Reads the list of resources files relative path from a specified folder */\r\nfunction getResourceFilePaths(featureXmlDir: string, globs: string): Promise<string[]> {\r\n  return getRelativeFilePaths(featureXmlDir, globs, 'Found resources file: ');\r\n}\r\n"],"sourceRoot":"..\\..\\..\\..\\src"}