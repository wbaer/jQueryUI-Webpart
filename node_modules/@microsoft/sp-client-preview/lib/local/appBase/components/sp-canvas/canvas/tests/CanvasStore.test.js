"use strict";
var chai_1 = require("chai");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_page_context_1 = require("@microsoft/sp-page-context");
var sp_http_1 = require("@microsoft/sp-http");
var CanvasStore_1 = require("../canvasComponent/CanvasStore");
var CanvasLayout_1 = require("../canvasLayout/CanvasLayout");
var CanvasControlType_1 = require("../canvasControl/CanvasControlType");
var CanvasA11y_1 = require("../../a11y/CanvasA11y");
describe('Canvas Store tests', function () {
    var rootScope = sp_core_library_1.ServiceScope.startNewRoot();
    rootScope.provide(sp_http_1.SPHttpClient.serviceKey, new sp_http_1.SPHttpClient(rootScope));
    rootScope.provide(sp_page_context_1.PageContext.serviceKey, new sp_page_context_1.PageContext(rootScope));
    rootScope.finish();
    var canvasStore;
    var render;
    var a11yManager;
    var resetFlightId = -1;
    var canvasJsonTransportFlightId = 957;
    var canvasMultiColumnsFlightId = 963;
    var canvasFlightController = function (flightId) {
        if (flightId === resetFlightId) {
            sp_core_library_1._SPFlight.initialize([]);
            return;
        }
        var activeFlights = new Array(85);
        activeFlights[flightId >> 5] = 1 << (flightId & 31);
        sp_core_library_1._SPFlight.initialize(activeFlights);
    };
    beforeEach(function () {
        render = sinon.spy();
        canvasStore =
            new CanvasStore_1.default(rootScope, render, sp_core_library_1.DisplayMode.Edit);
        a11yManager = new CanvasA11y_1.CanvasA11yManager(document.createElement('div'), true);
    });
    it('should change a11 manager as expected', function (done) {
        canvasStore.a11yManager = a11yManager;
        chai_1.expect(canvasStore.a11yManager).to.equal(a11yManager, 'should get the a11 manager');
        done();
    });
    it('instantiates CanvasStore with layout flight enabled ', function (done) {
        canvasFlightController(canvasMultiColumnsFlightId);
        var store = new CanvasStore_1.default(rootScope, render, sp_core_library_1.DisplayMode.Edit);
        chai_1.expect(store.controlsProps.length).to.be.eql(0);
        chai_1.expect(store.toolboxProps.controlPosition).to.be.eql(CanvasLayout_1.default.undefinedControlPosition);
        canvasFlightController(resetFlightId);
        done();
    });
    it('should change the canvas element as expected', function (done) {
        var canvasElement = document.createElement('div');
        canvasStore.canvasElement = canvasElement;
        chai_1.expect(canvasStore.canvasElement).to.equal(canvasElement, 'should get the canvas element');
        done();
    });
    it('should return the deleted row and hover control id as expected', function (done) {
        canvasStore.deletedRow = 0;
        chai_1.expect(canvasStore.deletedRow).to.equal(0, 'deleted row should be the same');
        canvasStore.hoveredControlId = 'TestControl';
        chai_1.expect(canvasStore.hoveredControlId).to.equal('TestControl', 'hoveredControlId should be the same');
        done();
    });
    it('should return the deleted row and hovered control as expected with layout flight enabled', function (done) {
        canvasStore.deletedControlLayout = CanvasLayout_1.default.undefinedControlPosition;
        chai_1.expect(canvasStore.deletedControlLayout).to.equal(undefined, 'deleted layout should be undefined if not flighted');
        canvasFlightController(canvasMultiColumnsFlightId);
        var store = new CanvasStore_1.default(rootScope, render, sp_core_library_1.DisplayMode.Edit);
        store.deletedControlLayout = CanvasLayout_1.default.undefinedControlPosition;
        chai_1.expect(store.deletedControlLayout).to.equal(CanvasLayout_1.default.undefinedControlPosition, 'deleted layout should be the same');
        store.hoveredControlId = 'TestControl';
        chai_1.expect(store.hoveredControlId).to.equal('TestControl', 'hoveredControlId should be the same');
        chai_1.expect(store.scrollThreshold).to.not.be.null;
        canvasFlightController(resetFlightId);
        done();
    });
    it('should change the scrollable parent as expected', function (done) {
        var scrollableParent = document.createElement('div');
        canvasStore.scrollableParent = scrollableParent;
        chai_1.expect(canvasStore.scrollableParent).to.equal(scrollableParent, 'should get the scrollable parent');
        done();
    });
    it('should change the selected control id', function (done) {
        canvasStore.selectedControlId = 'mockId';
        chai_1.expect(canvasStore.selectedControlId).to.equal('mockId', 'should get the selected control id');
        done();
    });
    it('should open and close the delete button dialog as expected', function (done) {
        var controlProps = {
            controlType: CanvasControlType_1.default.RTE,
            displayMode: sp_core_library_1.DisplayMode.Edit,
            id: 'RTEControl'
        };
        canvasStore.handleToolboxItemClick(0, controlProps);
        chai_1.assert.isTrue(render.called);
        chai_1.expect(canvasStore.getControl('RTEControl')).to.be.not.null;
        canvasStore.handleDeleteControlButtonClicked(0, undefined);
        chai_1.expect(canvasStore.confirmationDialogProps.isOpen).to.be.true;
        canvasStore.handleDeleteControlDialogDismiss();
        chai_1.expect(canvasStore.confirmationDialogProps.isOpen).to.be.false;
        canvasStore.handleDeleteControlDialogConfirmation();
        done();
    });
    it('should open and close the delete button dialog as expected with layout flight enabled', function (done) {
        canvasFlightController(canvasMultiColumnsFlightId);
        var store = new CanvasStore_1.default(rootScope, render, sp_core_library_1.DisplayMode.Edit);
        var controlProps = {
            controlType: CanvasControlType_1.default.RTE,
            displayMode: sp_core_library_1.DisplayMode.Edit,
            id: 'RTEControl'
        };
        var layout = {
            zoneIndex: 1,
            sectionIndex: undefined,
            controlIndex: undefined
        };
        store.handleToolboxItemClick(layout, controlProps);
        chai_1.assert.isTrue(render.called);
        chai_1.expect(store.getControl('RTEControl')).to.be.not.null;
        store.handleDeleteControlButtonClicked(undefined, layout);
        chai_1.expect(store.confirmationDialogProps.isOpen).to.be.true;
        store.handleDeleteControlDialogDismiss();
        chai_1.expect(store.confirmationDialogProps.isOpen).to.be.false;
        canvasStore.handleDeleteControlDialogConfirmation();
        canvasFlightController(resetFlightId);
        done();
    });
    it('should change the display mode as expected', function (done) {
        canvasStore.displayMode = sp_core_library_1.DisplayMode.Read;
        chai_1.assert.isTrue(render.called);
        chai_1.expect(canvasStore.displayMode).to.equal(sp_core_library_1.DisplayMode.Read, 'Display mode is read');
        canvasStore.displayMode = sp_core_library_1.DisplayMode.Edit;
        chai_1.assert.isTrue(render.called);
        chai_1.expect(canvasStore.displayMode).to.equal(sp_core_library_1.DisplayMode.Edit, 'Display mode is edit');
        done();
    });
    it('should change the display mode as expected with layout flight enabled', function (done) {
        canvasFlightController(canvasMultiColumnsFlightId);
        var store = new CanvasStore_1.default(rootScope, render, sp_core_library_1.DisplayMode.Edit);
        store.displayMode = sp_core_library_1.DisplayMode.Read;
        chai_1.assert.isTrue(render.called);
        chai_1.expect(store.displayMode).to.equal(sp_core_library_1.DisplayMode.Read, 'Display mode is read');
        store.displayMode = sp_core_library_1.DisplayMode.Edit;
        chai_1.assert.isTrue(render.called);
        chai_1.expect(store.displayMode).to.equal(sp_core_library_1.DisplayMode.Edit, 'Display mode is edit');
        canvasFlightController(resetFlightId);
        done();
    });
    it('should add the control as expected', function (done) {
        var controlProps = {
            controlType: CanvasControlType_1.default.RTE,
            displayMode: sp_core_library_1.DisplayMode.Edit,
            id: 'RTEControl'
        };
        canvasStore.handleToolboxItemClick(0, controlProps);
        chai_1.assert.isTrue(render.called);
        chai_1.expect(canvasStore.getControl('RTEControl')).to.be.not.null;
        done();
    });
    it('should add web part as expected', function (done) {
        var webPartManifest = {
            manifestVersion: undefined,
            componentType: 'WebPart',
            id: 'WebPartZoneControl',
            alias: '',
            version: undefined,
            loaderConfig: undefined,
            preconfiguredEntries: undefined
        };
        var webPartZoneProps = {
            webPartData: undefined,
            webPartId: 'WebPartZoneControl',
            webPartManifest: webPartManifest,
            controlType: CanvasControlType_1.default.WebPartZone,
            displayMode: sp_core_library_1.DisplayMode.Edit,
            id: 'WebPartZoneControl',
            onChange: sinon.spy()
        };
        canvasStore.handleToolboxItemClick(1, webPartZoneProps);
        chai_1.assert.isTrue(render.called);
        chai_1.expect(canvasStore.getControl('WebPartZoneControl')).to.be.not.null;
        done();
    });
    it('should add the control as expected with flight enabled', function (done) {
        canvasFlightController(canvasMultiColumnsFlightId);
        var canvasControl = {
            controlType: CanvasControlType_1.default.RTE,
            displayMode: sp_core_library_1.DisplayMode.Edit,
            id: 'RTEControl'
        };
        var layout = {
            zoneIndex: 1,
            sectionIndex: undefined,
            controlIndex: undefined
        };
        var store = new CanvasStore_1.default(rootScope, render, sp_core_library_1.DisplayMode.Edit);
        store.handleToolboxItemClick(layout, canvasControl);
        chai_1.assert.isTrue(render.called);
        chai_1.expect(store.getControl('RTEControl')).to.be.not.null;
        chai_1.expect(store.controlsProps[0]).to.be.eql(canvasControl);
        chai_1.expect(store.selectedControlId).to.be.eql(canvasControl.id);
        chai_1.assert.isTrue(render.called);
        var webPartManifest = {
            manifestVersion: undefined,
            componentType: 'WebPart',
            id: 'WebPartZoneControl',
            alias: '',
            version: undefined,
            loaderConfig: undefined,
            preconfiguredEntries: undefined
        };
        var webPartZoneProps = {
            webPartData: undefined,
            webPartId: 'WebPartZoneControl',
            webPartManifest: webPartManifest,
            controlType: CanvasControlType_1.default.WebPartZone,
            displayMode: sp_core_library_1.DisplayMode.Edit,
            id: 'WebPartZoneControl',
            onChange: sinon.spy()
        };
        var layout1 = {
            zoneIndex: 2,
            sectionIndex: undefined,
            controlIndex: undefined
        };
        store.handleToolboxItemClick(layout1, webPartZoneProps);
        chai_1.assert.isTrue(render.called);
        chai_1.expect(store.getControl('WebPartZoneControl')).to.be.not.null;
        chai_1.expect(store.controlsProps[1]).to.be.eql(webPartZoneProps);
        store.handleConfigureButtonClicked('WebPartZoneControl');
        chai_1.expect(store.tryGeneratePreviewImageUrl()).to.not.be.null;
        canvasFlightController(resetFlightId);
        done();
    });
    it('should delete the control as expected', function (done) {
        var controlProps = {
            controlType: CanvasControlType_1.default.RTE,
            displayMode: sp_core_library_1.DisplayMode.Edit,
            id: 'RTEControl'
        };
        canvasStore.handleToolboxItemClick(0, controlProps);
        chai_1.assert.isTrue(render.called);
        chai_1.expect(canvasStore.getControl('RTEControl')).to.be.not.null;
        canvasStore.deleteControl(0, undefined);
        chai_1.assert.isTrue(render.called);
        chai_1.expect(canvasStore.getControl('RTEControl')).to.be.undefined;
        canvasStore.reclaimFocus();
        done();
    });
    it('should delete the control as expected with layout flight enabled', function (done) {
        canvasFlightController(canvasMultiColumnsFlightId);
        var store = new CanvasStore_1.default(rootScope, render, sp_core_library_1.DisplayMode.Edit);
        var controlProps = {
            controlType: CanvasControlType_1.default.RTE,
            displayMode: sp_core_library_1.DisplayMode.Edit,
            id: 'RTEControl'
        };
        var layout = {
            zoneIndex: 1,
            sectionIndex: undefined,
            controlIndex: undefined
        };
        store.handleToolboxItemClick(layout, controlProps);
        chai_1.assert.isTrue(render.called);
        chai_1.expect(store.getControl('RTEControl')).to.be.not.null;
        store.deleteControl(undefined, layout);
        chai_1.assert.isTrue(render.called);
        chai_1.expect(store.getControl('RTEControl')).to.be.undefined;
        canvasFlightController(resetFlightId);
        done();
    });
    it('should serialize the content as expected', function (done) {
        var serializedContent = canvasStore.serialize();
        chai_1.expect(serializedContent).to.be.not.null;
        var expectedContent = '<div></div>';
        chai_1.assert.strictEqual(serializedContent, expectedContent, 'Serialized the content as expected');
        done();
    });
    it('should serialize the content as expected with CanvasJsonTransport flight', function (done) {
        canvasFlightController(canvasJsonTransportFlightId);
        var serializedContent = canvasStore.serialize();
        var expectedContent = encodeURI(JSON.stringify([]));
        chai_1.expect(serializedContent).to.be.eql(expectedContent);
        canvasFlightController(resetFlightId);
        done();
    });
    it('should deserialize the content as expected', function (done) {
        var serializedContent = canvasStore.serialize();
        chai_1.expect(canvasStore.deserialize(serializedContent)).to.be.not.null;
        done();
    });
    it('should deserialize the content as expected with CanvasJsonTransport flight', function (done) {
        canvasFlightController(canvasJsonTransportFlightId);
        var serializedContent = canvasStore.serialize();
        canvasStore.deserialize(serializedContent);
        chai_1.expect(canvasStore.controlsProps.length).to.be.eql(0);
        var serializedContentNonEmpty = JSON.stringify([{
                controlType: CanvasControlType_1.default.RTE,
                displayMode: sp_core_library_1.DisplayMode.Edit,
                id: 'RTEControl'
            }]);
        canvasStore.deserialize(serializedContentNonEmpty);
        chai_1.expect(canvasStore.controlsProps.length).to.be.eql(1);
        canvasFlightController(resetFlightId);
        done();
    });
    it('should open the toolbox as expected', function (done) {
        canvasStore.openToolbox(0, 0, undefined);
        chai_1.assert.isTrue(render.called);
        var toolboxProps = canvasStore.toolboxProps;
        chai_1.expect(toolboxProps.isOpen).to.be.true;
        chai_1.expect(toolboxProps.row).to.be.eq(0);
        chai_1.expect(toolboxProps.verticalPosition).to.be.eq(0);
        done();
    });
    it('should open the toolbox with layout as expected', function (done) {
        canvasFlightController(canvasMultiColumnsFlightId);
        var layout = {
            zoneIndex: 0,
            sectionIndex: 0,
            controlIndex: 0
        };
        canvasStore.openToolbox(layout, 0);
        chai_1.assert.isTrue(render.called);
        var toolboxProps = canvasStore.toolboxProps;
        chai_1.expect(toolboxProps.isOpen).to.be.true;
        chai_1.expect(toolboxProps.verticalPosition).to.be.eq(0);
        chai_1.expect(toolboxProps.controlPosition).to.be.eql(layout);
        canvasFlightController(resetFlightId);
        done();
    });
    it('should close the toolbox as expected', function (done) {
        canvasStore.closeToolbox();
        chai_1.assert.isTrue(render.called);
        var toolboxProps = canvasStore.toolboxProps;
        chai_1.expect(toolboxProps.isOpen).to.be.false;
        done();
    });
    it('should close the toolbox as expected with layout flight enabled', function (done) {
        canvasFlightController(canvasMultiColumnsFlightId);
        var store = new CanvasStore_1.default(rootScope, render, sp_core_library_1.DisplayMode.Edit);
        store.closeToolbox();
        chai_1.assert.isTrue(render.called);
        var toolboxProps = store.toolboxProps;
        chai_1.expect(toolboxProps.isOpen).to.be.false;
        chai_1.expect(toolboxProps.controlPosition).to.be.eql(CanvasLayout_1.default.undefinedControlPosition);
        canvasFlightController(resetFlightId);
        done();
    });
    it('should get the layout as expected with layout flight enabled', function (done) {
        chai_1.expect(canvasStore.canvasLayout).to.be.undefined;
        canvasFlightController(canvasMultiColumnsFlightId);
        var store = new CanvasStore_1.default(rootScope, render, sp_core_library_1.DisplayMode.Edit);
        chai_1.expect(store.canvasLayout).to.not.be.undefined;
        chai_1.expect(store.canvasLayout.zones.length).to.be.eql(0);
        var controlProps = {
            controlType: CanvasControlType_1.default.RTE,
            displayMode: sp_core_library_1.DisplayMode.Edit,
            id: 'RTEControl'
        };
        var controlPos = {
            zoneIndex: 1,
            sectionIndex: undefined,
            controlIndex: undefined
        };
        store.handleToolboxItemClick(controlPos, controlProps);
        chai_1.expect(store.canvasLayout.zones.length).to.be.eql(1);
        canvasFlightController(resetFlightId);
        done();
    });
});
