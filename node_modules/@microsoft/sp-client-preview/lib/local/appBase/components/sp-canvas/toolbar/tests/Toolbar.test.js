"use strict";
var chai_1 = require("chai");
var enzyme_1 = require("enzyme");
var React = require("react");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var Toolbar_1 = require("../toolbar/Toolbar");
var CanvasControlType_1 = require("../../canvas/canvasControl/CanvasControlType");
var ToolbarButton_1 = require("../toolbarButton/ToolbarButton");
var office_ui_fabric_react_1 = require("office-ui-fabric-react");
describe('Toolbar tests', function () {
    var toolbarProps;
    var onDeleteButtonClick;
    var onConfigureButtonClick;
    var toolbarElement;
    beforeEach(function () {
        onDeleteButtonClick = sinon.spy();
        onConfigureButtonClick = sinon.spy();
        toolbarProps = {
            controlType: CanvasControlType_1.default.WebPartZone,
            displayMode: sp_core_library_1.DisplayMode.Edit,
            id: 'mockToolbar',
            row: 0,
            onDeleteButtonClick: onDeleteButtonClick,
            onConfigureButtonClick: onConfigureButtonClick
        };
        toolbarElement = enzyme_1.mount(React.createElement(Toolbar_1.default, toolbarProps));
    });
    afterEach(function () {
        toolbarElement.unmount();
    });
    it('should render the toolbar buttons as expected', function (done) {
        chai_1.expect(toolbarElement.find(ToolbarButton_1.default).length).to.be.eq(2);
        done();
    });
    it('should render the focus zone only in edit mode', function (done) {
        chai_1.expect(toolbarElement.find(office_ui_fabric_react_1.FocusZone).length).to.be.eq(1);
        toolbarProps.displayMode = sp_core_library_1.DisplayMode.Read;
        toolbarElement = enzyme_1.mount(React.createElement(Toolbar_1.default, toolbarProps));
        chai_1.expect(toolbarElement.find(office_ui_fabric_react_1.FocusZone).length).to.be.eq(0);
        done();
    });
    it('should render the configure button and click should call the handler', function (done) {
        chai_1.expect(toolbarElement.find("[data-automation-id='configureButton']").length).to.be.eq(1);
        toolbarElement.find("[data-automation-id='configureButton']").simulate('click');
        chai_1.expect(onConfigureButtonClick.calledOnce).to.be.true;
        done();
    });
    it('should render the delete button and click should call the handler', function (done) {
        chai_1.expect(toolbarElement.find("[data-automation-id='deleteButton']").length).to.be.eq(1);
        toolbarElement.find("[data-automation-id='deleteButton']").simulate('click');
        chai_1.expect(onDeleteButtonClick.calledOnce).to.be.true;
        done();
    });
    it('should not configureElement if the control type is web part zone', function (done) {
        toolbarProps.controlType = CanvasControlType_1.default.RTE;
        toolbarElement = enzyme_1.mount(React.createElement(Toolbar_1.default, toolbarProps));
        chai_1.expect(toolbarElement.find("[data-automation-id='configureButton']").length).to.be.eq(0);
        chai_1.expect(toolbarElement.find("[data-automation-id='deleteButton']").length).to.be.eq(1);
        chai_1.expect(toolbarElement.find(office_ui_fabric_react_1.FocusZone).length).to.be.eq(1);
        done();
    });
});
