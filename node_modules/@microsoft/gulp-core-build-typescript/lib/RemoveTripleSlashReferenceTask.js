"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var path = require("path");
var through2 = require("through2");
/* tslint:disable:typedef */
var cached = require('gulp-cache');
var md5 = require('md5');
/* tslint:enable:typedef */
var gulp_core_build_1 = require("@microsoft/gulp-core-build");
var RemoveTripleSlashReferenceTask = (function (_super) {
    __extends(RemoveTripleSlashReferenceTask, _super);
    function RemoveTripleSlashReferenceTask() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'ts-npm-lint';
        _this.taskConfig = {};
        return _this;
    }
    RemoveTripleSlashReferenceTask.prototype.executeTask = function (gulp) {
        var taskScope = this;
        var filePattern = path.join(taskScope.buildConfig.libFolder, '**', '*.d.ts');
        /**
         * Matches:
         *  /// <reference path="../../typings.d.ts" />
         *  /// <reference path='../../typings.d.ts' />
         *  ///<reference path='../../typings.d.ts' />
         *  ///<reference foo="bar" path='../../typings.d.ts'/>
         *  /// <reference path='../../typings.d.ts' bar="foo" />
         */
        var referencePathRegex = /^\/\/\/[ ]+<reference.*path=['"]([^'"]*)['"][^>]+>/gm;
        return gulp.src(filePattern)
            .pipe(cached(
        /* tslint:disable:no-function-expression */
        through2.obj(function (file, encoding, callback) {
            /* tslint:enable:no-function-expression */
            try {
                var rawContents = file.contents.toString();
                var relativePathToCurrentFile_1 = path.relative(taskScope.buildConfig.rootPath, file.path);
                taskScope.logVerbose(relativePathToCurrentFile_1);
                file[taskScope.name] = {
                    failureCount: 0
                };
                var newContents = rawContents.replace(referencePathRegex, function (_, tsdFile) {
                    file[taskScope.name].failureCount++;
                    taskScope.log("Removed reference to '" + tsdFile + "' in " + relativePathToCurrentFile_1);
                    return "// [" + taskScope.name + "] removed reference to '" + tsdFile + "'";
                });
                file.contents = new Buffer(newContents);
                this.push(file);
                callback();
            }
            catch (e) {
                taskScope.logError(e);
                callback(e);
            }
        }), {
            name: md5(taskScope.name + taskScope.buildConfig.rootPath),
            // What on the result indicates it was successful
            success: function (jshintedFile) {
                /* tslint:disable:no-string-literal */
                return jshintedFile[taskScope.name].failureCount === 0;
                /* tslint:enable:no-string-literal */
            },
            // By default, the cache attempts to store the value of the objects in the stream
            // For this task, this is over-engineering since we never need to store anything extra.
            value: function (file) {
                return {
                    path: file.path
                };
            }
        }))
            .pipe(gulp.dest(taskScope.buildConfig.libFolder));
    };
    return RemoveTripleSlashReferenceTask;
}(gulp_core_build_1.GulpTask));
exports.RemoveTripleSlashReferenceTask = RemoveTripleSlashReferenceTask;

//# sourceMappingURL=RemoveTripleSlashReferenceTask.js.map
