/**
 * WebPart PropertyPane configuration events
 *
 * @internal
 */
export declare enum WebPartConfigurationEvent {
    /**
     * Event indicating the start of the web part's configuration in the PropertyPane.
     *
     * This event is triggered in the following scenarios:
     *  - After user clicks on 'configure' button or
     *  - After user invokes 'openPropertyPane' or 'refreshPropertyPane' from the web part or
     *  - When the user switches web parts and the new web part will get the event.
     */
    PropertyPaneConfigurationStart = 1,
    /**
     * Event indicating that the web part's configuration is complete in the PropertyPane.
     *
     * This event is triggered in the following scenarios:
     *  - When the CONFIGURATION_COMPLETE_TIMEOUT(currently the value is 5 secs) elapses after the last change and
     *    the PropertyPane is still in focus.
     *  - If the PropertyPane is closed, before the CONFIGURATION_COMPLETE_TIMEOUT elapses.
     *      > In this case 'PropertyPaneConfigurationComplete' is fired before the 'PropertyPaneClosed' is fired.
     *  - If the PropertyPaneApplyClicked event is triggered, before the CONFIGURATION_COMPLETE_TIMEOUT elapses.
     *  - When the user switches web parts and the current web part will get the event.
     */
    PropertyPaneConfigurationComplete = 2,
    /**
     * Event indicating that the PropertyPane is opened.
     *
     * This event is triggered after the PropertyPane opens(slides in). This happens in the following cases:
     *  - When the user tries to configure using the 'configure' button or calling openPropertyPane or
     *    refreshPropertyPane from the web part
     *    while the PropertyPane is closed.
     *
     * This event is fired before the 'PropertyPaneConfigurationStart' event is fired.
     */
    PropertyPaneOpened = 3,
    /**
     * Event indicating that the PropertyPane is closed.
     *
     * This event is triggered after the PropertyPane is closed(slides out). This happens in two cases:
     *  - When user clicks 'x' button on the PropertyPane.
     *  - When user toggles the already open PropertyPane.
     */
    PropertyPaneClosed = 4,
    /**
     * Event indicating that the 'Apply' button is clicked on the PropertyPane.
     *
     * This event is triggered only on the non-reactive PropertyPane.
     */
    PropertyPaneApplyClicked = 5,
    /**
     * Event indicating that the PropertyPane lost the focus.
     *
     * This event is triggered when 'Alt + P'(this is the key combination to toggle the property pane focus)
     * is pressed while the PropertyPane is in focus. This results in PropertyPane loosing the focus and
     * it's associated web part will get back the focus.
     */
    PropertyPaneLostFocus = 6,
    /**
     * Event indicates either of the following two things:
     *  - A new web part has requested to configure or
     *  - The current web part has requested to open/toggle the property pane while it's closed.
     */
    PropertyPaneWebPartsSwitched = 7,
}
/**
 * Describes the PropertyPane state.
 *
 * @internal
 */
export declare enum PropertyPaneState {
    Open = 1,
    Close = 2,
    Toggle = 3,
    Default = 4,
    /**
     * Indicates if the property pane has to just refresh the contents, while it is open
     * for the same web part which is requestiong the state change.
     *
     * Only web parts are expected to use the state, as of now.
     */
    Refresh = 5,
}
/**
 * Configuration event callback
 *
 * @alpha
 */
export interface IWebPartConfigurationEventCallback {
    (event: WebPartConfigurationEvent, data?: any): void;
}
