/// <reference types="es6-promise" />
/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file Internal interfaces to help invoke web part private APIs.
 */
import { _QosMonitor } from '@ms/sp-telemetry';
import { DisplayMode } from '@microsoft/sp-core-library';
import { default as IWebPartData } from './IWebPartData';
import { IPropertyPaneControl } from '../propertyPane/propertyPaneControl/IPropertyPaneControl';
import IWebPartContext from './IWebPartContext';
import IViewportAwareWebpart from './IViewportAwareWebpart';
/**
 * This interface describes the web part class type (versus a web part object instance).
 */
export interface IClientSideWebPartClass {
    /**
     * Subclasses of BaseClientSideWebPart must have a constructor that accepts no parameters.
     */
    new (): IClientSideWebPartInternal;
}
/**
 * Internal client side web part interface. This interface contains methods that internal code can call
 * on the web part object. TypeScript does not support internals yet. This is a work around to make code
 * type safe and not have to cast objects to any before calling private methods. We do not want to make
 * the internal methods public or protected. These methods should not be available to web part developers.
 *
 * @see BaseClientSideWebPart.ts for documentation.
 * @internal - this interface is not exposed to third party developers.
 */
export interface IClientSideWebPartInternal extends IPropertyPaneControl, IViewportAwareWebpart {
    domElement: HTMLElement;
    accessibleTitle: string;
    previewImageUrl: string;
    _internalInitialize(webPartContext: IWebPartContext): void;
    _internalDeserialize(data: IWebPartData): void;
    _internalFirstTimeRender(addedFromPersistedData: boolean | undefined, mode: DisplayMode, qosMonitor?: _QosMonitor, data?: IWebPartData): Promise<void>;
    _internalSetDisplayMode(newDisplayMode: DisplayMode): void;
    _internalSetDirtyBit(): void;
}
