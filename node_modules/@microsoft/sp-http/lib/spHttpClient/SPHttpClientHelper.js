"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ODataVersion_1 = require("./ODataVersion");
var HttpClientHelper_1 = require("../httpClient/HttpClientHelper");
var SPHttpClientHelper = (function (_super) {
    __extends(SPHttpClientHelper, _super);
    function SPHttpClientHelper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SPHttpClientHelper.cloneHeaders = function (options) {
        var clonedHeaders = new Headers();
        var temp = new Request('', { headers: options.headers || {} });
        temp.headers.forEach(function (value, name) {
            clonedHeaders.append(name, value); 
        });
        return clonedHeaders;
    };
    SPHttpClientHelper.applyDefaultHeaders = function (headers, configuration, options, oDataVersion) {
        if (configuration.jsonRequest) {
            if (options.method && options.method.toUpperCase() !== 'GET') {
                if (!headers.has('Content-Type')) {
                    if (oDataVersion === ODataVersion_1.default.v3) {
                        headers.append('Content-Type', 'application/json;odata=verbose;charset=utf-8');
                    }
                    else if (oDataVersion === ODataVersion_1.default.v4) {
                        headers.append('Content-Type', 'application/json;charset=utf-8');
                    }
                    else {
                        throw new Error('ISPHttpClientConfiguration.jsonRequest is enabled, which requires'
                            + ' the "OData-Version" header to be 3.0 or 4.0');
                    }
                }
            }
        }
        if (configuration.jsonResponse) {
            if (!headers.has('Accept')) {
                if (oDataVersion === ODataVersion_1.default.v3) {
                    headers.append('Accept', 'application/json');
                }
                else if (oDataVersion === ODataVersion_1.default.v4) {
                    headers.append('Accept', 'application/json;odata.metadata=minimal');
                }
                else {
                    throw new Error('ISPHttpClientConfiguration.jsonResponse is enabled, which requires'
                        + ' the "OData-Version" header to be 3.0 or 4.0');
                }
            }
        }
    };
    SPHttpClientHelper.handleAuthenticationErrors = function (promise, webUrl, digestCache) {
        return promise.then(function (response) {
            if (response.status === 403) {
                digestCache.clearDigest(webUrl);
            }
            return response;
        });
    };
    return SPHttpClientHelper;
}(HttpClientHelper_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SPHttpClientHelper;
