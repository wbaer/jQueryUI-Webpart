"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = require("react");
var TraceListHeader_module_scss_1 = require("./TraceListHeader.module.scss");
var TraceDisplayStore_1 = require("../../../../../Stores/TraceDisplayStore");
var TraceDisplay_resx_1 = require("./../../TraceDisplay.resx");
var TraceListHeader = (function (_super) {
    __extends(TraceListHeader, _super);
    function TraceListHeader(props) {
        var _this = _super.call(this, props) || this;
        _this._handleFilterChange = _this._handleFilterChange.bind(_this);
        _this.state = {
            filterToggles: {}
        };
        return _this;
    }
    TraceListHeader.prototype.render = function () {
        var _this = this;
        return (React.createElement("ul", { className: TraceListHeader_module_scss_1.default.container },
            React.createElement("li", { className: TraceListHeader_module_scss_1.default.timestamp }, TraceDisplay_resx_1.default.TimestampHeaderLabel),
            React.createElement("li", { className: TraceListHeader_module_scss_1.default.level },
                React.createElement("p", { role: 'button', onClick: function () { return _this._toggleFilterStateForColumn('level'); }, className: TraceListHeader_module_scss_1.default.headerText }, TraceDisplay_resx_1.default.LevelHeaderLabel),
                React.createElement("button", { onClick: function () { return _this._toggleFilterStateForColumn('level'); }, className: [TraceListHeader_module_scss_1.default.filterButton, 'ms-Icon', 'ms-Icon--Filter'].join(' ') }),
                React.createElement("div", { className: this._getFilterStyleForColumn('level'), id: 'levelFilterDropdown' }, Object.keys(this.props.filters.level).map(function (id) {
                    return React.createElement("div", { key: id, className: TraceListHeader_module_scss_1.default.filterRow },
                        React.createElement("input", { type: 'checkbox', name: 'level '.concat(id), "aria-checked": _this.props.filters.level[id], checked: _this.props.filters.level[id], onChange: _this._handleFilterChange }),
                        id);
                }))),
            React.createElement("li", { className: TraceListHeader_module_scss_1.default.scope },
                React.createElement("p", { role: 'button', onClick: function () { return _this._toggleFilterStateForColumn('scope'); }, className: TraceListHeader_module_scss_1.default.headerText }, TraceDisplay_resx_1.default.ScopeHeaderLabel),
                React.createElement("button", { onClick: function () { return _this._toggleFilterStateForColumn('scope'); }, className: [TraceListHeader_module_scss_1.default.filterButton, 'ms-Icon', 'ms-Icon--Filter'].join(' ') }),
                React.createElement("div", { className: this._getFilterStyleForColumn('scope'), id: 'scopeFilterDropdown' }, Object.keys(this.props.filters.scope).map(function (id) {
                    return React.createElement("div", { key: id, className: TraceListHeader_module_scss_1.default.filterRow },
                        React.createElement("input", { type: 'checkbox', name: 'scope '.concat(id), "aria-checked": _this.props.filters.scope[id], checked: _this.props.filters.scope[id], onChange: _this._handleFilterChange }),
                        id);
                }))),
            React.createElement("li", { className: TraceListHeader_module_scss_1.default.source },
                React.createElement("p", { role: 'button', onClick: function () { return _this._toggleFilterStateForColumn('source'); }, className: TraceListHeader_module_scss_1.default.headerText }, TraceDisplay_resx_1.default.SourceHeaderLabel),
                React.createElement("button", { onClick: function () { return _this._toggleFilterStateForColumn('source'); }, className: [TraceListHeader_module_scss_1.default.filterButton, 'ms-Icon', 'ms-Icon--Filter'].join(' ') }),
                React.createElement("div", { className: this._getFilterStyleForColumn('source'), id: 'sourceFilterDropdown' }, Object.keys(this.props.filters.source).map(function (id) {
                    return React.createElement("div", { key: id, className: TraceListHeader_module_scss_1.default.filterRow },
                        React.createElement("input", { type: 'checkbox', name: 'source '.concat(id), "aria-checked": _this.props.filters.source[id], checked: _this.props.filters.source[id], onChange: _this._handleFilterChange }),
                        id);
                }))),
            React.createElement("li", { className: TraceListHeader_module_scss_1.default.message }, TraceDisplay_resx_1.default.MessageHeaderLabel)));
    };
    TraceListHeader.prototype._getFilterStyleForColumn = function (columnId) {
        var filterStyle = this.state.filterToggles[columnId]
            ? TraceListHeader_module_scss_1.default.displayBlock
            : TraceListHeader_module_scss_1.default.displayNone;
        return [TraceListHeader_module_scss_1.default.filterOverlay, filterStyle].join(' ');
    };
    TraceListHeader.prototype._toggleFilterStateForColumn = function (columnId) {
        var filterToggles = {};
        for (var toggle in this.state.filterToggles) {
            if (this.state.filterToggles.hasOwnProperty(toggle)) {
                var value = this.state.filterToggles[toggle];
                filterToggles[toggle] = columnId !== toggle ? !value : value;
            }
        }
        this.setState({ filterToggles: filterToggles });
    };
    TraceListHeader.prototype._handleFilterChange = function (event) {
        var all = 'all';
        var name = 'name';
        var eventTargetNameAttribute = event.target.getAttribute(name) || '';
        var filterDetailsTuple = eventTargetNameAttribute.split(' ');
        var filterType = filterDetailsTuple[0];
        var filterSubType = filterDetailsTuple[1];
        var subfilters = this.props.filters[filterType];
        if (filterSubType === all) {
            subfilters[all] = !subfilters[all];
            Object.keys(subfilters).forEach(function (element, count, array) {
                subfilters[element] = subfilters[all];
            });
        }
        else {
            subfilters[all] = false;
            subfilters[filterSubType] = !subfilters[filterSubType];
            var allTrue_1 = true;
            Object.keys(subfilters).forEach(function (key) {
                if (key !== all && subfilters[key] === false) {
                    allTrue_1 = false;
                }
            });
            if (allTrue_1) {
                subfilters[all] = true;
            }
        }
        TraceDisplayStore_1.TraceDisplayStore.instance.applyTraceFilter(this.props.filters);
    };
    return TraceListHeader;
}(React.Component));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = TraceListHeader;
