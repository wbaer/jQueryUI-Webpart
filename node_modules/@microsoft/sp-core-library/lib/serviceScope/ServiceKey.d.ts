import ServiceScope from './ServiceScope';
/**
 * This is a callback that is used by ServiceKey.createCustom().
 */
export declare type ServiceCreator<T> = (serviceScope: ServiceScope) => T;
/**
 * The ServiceKey is a lookup key that is used when calling ServiceScope.consume()
 * to fetch a dependency.  The key also defines a default implementation of the
 * dependency, which will be autocreated by the root scope if the dependency is not found.
 * Providing a default implementation ensures that new dependencies can be safely
 * introduced without inadvertently breaking components that are loaded by an older host
 * (that does not provide the new dependency).
 * @public
 */
export default class ServiceKey<T> {
    private static _lastId;
    id: string;
    name: string;
    defaultCreator: ServiceCreator<T>;
    /**
     * Constructs a new ServiceKey whose default implementation will be a new instance of
     * a TypeScript class that accepts the standard constructor parameter.  If you want to
     * specify custom constructor parameters, use createCustom() instead.
     * @param name - A name such as "MyApplication.IMyService" which should be unique within
     *   your application.
     * @param serviceClass - the TypeScript class that implements the service.
     * @returns - the newly created ServiceKey
     */
    static create<T>(name: string, serviceClass: {
        new (serviceScope: ServiceScope);
    }): ServiceKey<T>;
    /**
     * Constructs a new ServiceKey whose default implementation will be obtained
     * by invoking the specified callback.
     * @param name - A name such as "MyApplication.IMyService" which should be unique within
     *   your application.
     * @param defaultCreator - A callback that returns an object that implements the T interface
     * @returns - the newly created ServiceKey
     */
    static createCustom<T>(name: string, defaultCreator: ServiceCreator<T>): ServiceKey<T>;
    private constructor(id, name, defaultCreator);
}
