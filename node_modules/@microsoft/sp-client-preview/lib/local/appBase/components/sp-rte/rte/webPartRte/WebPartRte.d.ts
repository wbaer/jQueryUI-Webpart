import { BaseRte, IBaseRteProps, IBaseRteState } from '../BaseRte';
import { IRichTextEditor } from '../IRichTextEditor';
export interface IWebPartRteProps extends IBaseRteProps {
    onChanged?: (value: {}) => {};
    ariaLabel?: string;
}
export interface IWebPartRteState extends IBaseRteState {
}
/**
 * WebPartRte component. This component is used inside webparts.
 *
 * @internal
 */
export default class WebPartRte extends BaseRte<IWebPartRteProps, IWebPartRteState> {
    private static defaultOptions;
    protected readonly TAG_NAME: string;
    private static _getFormattingBarDefaultPosition(isRtl?);
    constructor(props: IWebPartRteProps);
    protected _initState(): void;
    protected _afterEditorCreated(editor: IRichTextEditor): void;
    protected _finalizeAction(ariaActionName?: string): void;
    /**
     * Here is the a11y design of webPartRte:
     *
     * Keyboard:
     *   1. Focus on textbox, pressing TAB or shift-TAB will move focus outside the textbox.
     *      a. TAB goes to formattingBar.
     *      b. Shift + TAB goes to previous control.
     *      c. Press TAB on formattingBar goes to next control.
     *   2. Focus on textbox, pressing Alt + F10 will move focus to formattingBar. (Same as TextWebpart)
     *   3. Focus on formattingBar, pressing Escape will exit the webpart. (Itâ€™s captured by framework)
     *   4. Focus on formattingBar, pressing Shift + TAB will move focus back to textbox
     *   5. Focus in textbox (iframe) will not be lost. The keystroke for canvas still works.
     *      E.g. Escape to exit webpart, Alt + P to go to property pane).
     *
     * Screen reader:
     *   1. Focus on textbox, pressing Alt + F10, screen reader will tell user to:
     *      a. Use arrow keys to navigate inside formattingBar. (same as TextWebpart)
     *      b. Use Shift + TAB to move focus back to textbox. (different with TextWebpart)
     *   2. Focus on textbox, screen reader read instruction of pressing Alt + F10 to go to the formattingBar.
     */
    protected _handleKeyDown(evt: KeyboardEvent): void;
    /**
     * Re-dispatch the event inside iframe so that frameowork can capture the keyboard event in RTE.
     * It is to make sure keystroke for canvas used to exit webpart or jump to property pane can work as expected.
     * There is an issue of chrome http://stackoverflow.com/questions/8942678/keyboardevent-in-chrome-keycode-is-0
     * As workaround it initializes an Event instead of KeyboardEvent and it is merged with the necessary values
     * from the event being re-dispatched.
     */
    private _redispatchKeyboardEvent(evt);
}
