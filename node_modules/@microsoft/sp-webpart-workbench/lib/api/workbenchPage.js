"use strict";
var path = require("path");
var fs = require("fs");
var Resolve_1 = require("@microsoft/sp-build-core-tasks/lib/utilities/Resolve");
var projectRootPath = process.cwd();
var workbenchRootPath;
try {
    workbenchRootPath = Resolve_1.resolvePackage('@microsoft/sp-webpart-workbench', projectRootPath);
}
catch (e) {
    workbenchRootPath = path.join(__dirname, '..', '..');
}
var loaderManifestID = '1c6c9123-7aac-41f3-a376-3caea41ed83f';
var serveConfig;
try {
    serveConfig = require(path.join(projectRootPath, 'config', 'serve.json'));
}
catch (e) {
    serveConfig = {
        port: 4321,
        initialPage: ''
    };
}
var faviconUrl = getUrlForPath(path.join(workbenchRootPath, 'dist', 'assets', 'server-icon.png'));
var loaderPackageName = '@microsoft/sp-loader';
var loaderUrl;
try {
    var loaderPath = getLoaderPath();
    loaderUrl = getUrlForPath(loaderPath);
}
catch (e) {
}
var tempDirPath = path.join(projectRootPath, 'temp');
var manifestsJsPath = path.join(tempDirPath, 'manifests.js');
var manifestJsUrl = getUrlForPath(manifestsJsPath);
var workbenchInitUrl = getUrlForPath(path.join(workbenchRootPath, 'lib', 'api', 'workbenchInit.js'));
function getUrlForPath(filePath) {
    var relativePath = path.relative(projectRootPath, filePath);
    return (serveConfig.https ? 'https' : 'http') + "://localhost:" + serveConfig.port + "/" + relativePath.replace(/\\/g, '/');
}
function generateWorkbenchPageContent() {
    var head;
    var body;
    if (!loaderUrl) {
        body = getErrorBody('Module loader could not be resolved. Unable to load workbench');
    }
    else {
        head = "\n  <script type=\"text/javascript\" src=\"" + manifestJsUrl + "\"></script>\n  <script type=\"text/javascript\" src=\"" + loaderUrl + "\"></script>\n  <script type=\"text/javascript\" src=\"" + workbenchInitUrl + "\"></script>";
        body = "\n  <script type=\"text/javascript\">\n    window.spModuleLoader.start(window.preloadedData);\n  </script>";
    }
    return getPageWithBodyAndHead(body, head);
}
exports.generateWorkbenchPageContent = generateWorkbenchPageContent;
function getErrorBody(serrorMessage) {
    return "\n  <span style=\"font-weight:bold;color:red;font-size:20px;\">\n    " + serrorMessage + "\n  </span>";
}
function getPageWithBodyAndHead(body, head) {
    return "<!doctype html>\n<html dir=\"ltr\">\n<head>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n\n  <title>SharePoint Web Part Workbench</title>\n\n  <link rel=\"shortcut icon\" href=\"" + faviconUrl + "\" />\n" + (head || '') + "\n</head>\n<body>\n" + body + "\n</body>\n</html>\n";
}
function getLoaderPath() {
    var loaderPackagePath = Resolve_1.resolvePackage(loaderPackageName, workbenchRootPath);
    var loaderDistFolder = path.join(loaderPackagePath, 'dist');
    var loaderManifestPath = path.join(loaderDistFolder, loaderManifestID + ".manifest.json");
    var loaderManifest = require(loaderManifestPath);
    var loaderEntryModuleConfig = loaderManifest.loaderConfig.scriptResources[loaderManifest.loaderConfig.entryModuleId];
    if (!loaderEntryModuleConfig) {
        throw 'Unable to find module loader entrypoint';
    }
    var foundPath;
    switch (loaderEntryModuleConfig.type) {
        case 'path':
            foundPath = disambiguatePath(loaderEntryModuleConfig.path);
            break;
        case 'localizedPath':
            foundPath = disambiguatePath(loaderEntryModuleConfig.defaultPath);
            break;
        default:
            throw "Invalid module loader manifest found at " + loaderManifestPath;
    }
    if (!foundPath) {
        throw 'Unable to find moudle loader path';
    }
    return path.join(loaderPackagePath, foundPath);
}
function disambiguatePath(path) {
    if (typeof path === 'string') {
        return path;
    }
    else {
        return path.debug || path.default;
    }
}
var workbenchFilePath = path.join(tempDirPath, 'workbench.html');
fs.writeFileSync(workbenchFilePath, generateWorkbenchPageContent());
var redirectPath = getUrlForPath(workbenchFilePath);
function workbenchPage(request, response) {
    response.redirect(redirectPath);
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = workbenchPage;
