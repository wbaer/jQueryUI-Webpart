/// <reference types="webpack" />
/// <reference types="node" />
import * as gulp from 'gulp';
import * as webpack from 'webpack';
import { WebpackTask } from '@microsoft/gulp-core-build-webpack';
import { ISetWebpackPublicPathLoaderOptions } from '@microsoft/loader-set-webpack-public-path/lib/SetWebpackPublicPathLoader';
import { IClientSideComponentManifest } from '@microsoft/sp-module-interfaces';
import { ConfigureExternalBundlingWebpackTask } from './ConfigureExternalBundlingWebpackTask';
import OdspGulpTask, { ILocaleMap } from './../OdspGulpTask';
export interface IConfigureWebpackTaskConfig {
    webpack?: WebpackTask;
    webpackPublicPathOptions?: ISetWebpackPublicPathLoaderOptions;
    libraryName?: string;
    libraryTarget?: string;
    configureExternalBundlingWebpackTask?: ConfigureExternalBundlingWebpackTask;
    /**
     * An optional callback can be provided that allows the generated webpack configuration to be modified.
     */
    additionalConfiguration?: (generatedConfiguration: webpack.Configuration) => webpack.Configuration;
    /**
     * An optional list of linked externals to include. For example, if you want to bundle react, list "react" in this
     *  array. This is only designed to be used in very special cases and is not intended to be used regularly.
     */
    linkedExternalsToBundle?: string[];
}
export interface IConfigEntry {
    entry: string;
    manifest: string;
    outputPath: string;
    stringsExternalName?: string;
}
export interface IBundleEntry {
    configEntry: IConfigEntry;
    entryName: string;
    nonLocalizedEntrypointPath?: string;
    localizedEntrypointPaths?: ILocaleMap;
    manifest: IClientSideComponentManifest;
}
export declare function getBundleId(manifest: IClientSideComponentManifest, version?: string): string;
export declare const fileLoaderExts: string[];
/**
 * Configures the @microsoft/gulp-core-build-webpack task with some smart defaults based on the package configuration.
 *
 * Example:
 *  IN:
 *    setConfig({
 *      webpack: <reference to webpack task>,
 *      webpackPublicPathOptions: <options for @microsoft/loader-set-webpack-public-path>,
 *      libraryName: <optional library name - set this if the library should be a global on the window>,
 *      configureExternalBundlingWebpackTask: <optional reference to ConfigureExternalBundlingWebpackTask task>
 *    })
 *    buildConfig.properties.entries = [{
 *      "entry": "./lib/App.js",
 *      "manifest": "./src/app.manifest.json",
 *      "outputPath": "dist/app.bundle.js"
 *    }]
 *    buildConfig.properties.externals = {
 *      "react-dom": "node_modules/react-dom/dist/react-dom.js",
 *      "react": "node_modules/react/dist/react.js",
 *      "flux": "node_modules/flux/dist/flux.js",
 *    }
 *
 *  OUT:
 *    set webpack config to:
 *    {
 *        context: ... root path ...,
 *        entry: { ... mapping of names to entries ... },
 *        resolveLoader: {
 *          alias: undefined,
 *          root: ... node_modules ...
 *        },
 *        resolve: {
 *          extensions: ['', '.tsx', '.ts', '.jsx', '.js', '.less', '.css', '.html'],
 *          modulesDirectories: [ ... root path + /node_modules ],
 *          alias: { }
 *        },
 *        output: {
 *          library: <library name, if provided>,
 *          libraryTarget: <library target, if specified> or 'amd',
 *          path: ... dist folder ...,
 *          publicPath: this.taskConfig.publicPath,
 *          filename: PRODUCTION ? '[name]_[chunkhash].js' : '[name].js'
 *        },
 *        externals: [ ... externals names ... ],
 *        module: {
 *          preLoaders: [],
 *          noParse: [ /\.map$/ ],
 *          loaders: [
 *            {
 *              test: /\.module.scss$/,
 *              loader:
 *                'load-themed-styles!css-loader?&modules&localIdentName=[name]__[local]___[hash:base64:5]'
 *            },
 *            {
 *              test: /\.scss$/, exclude: /\.module.scss$/,
 *              loader: 'load-themed-styles!css-loader'
 *            },
 *            {
 *              test: /\.(jpg|png|woff|eot|ttf|svg|gif)$/,
 *              loader: '@microsoft/loader-cased-file?name=[name]_[hash].[ext]'
 *            }
 *          ]
 *        },
 *        plugins: []
 *      }
 */
export declare class ConfigureWebpackTask extends OdspGulpTask<IConfigureWebpackTaskConfig> {
    name: string;
    taskConfig: IConfigureWebpackTaskConfig;
    private _baseConfig;
    loadSchema(): Object;
    constructor();
    setConfig(config: IConfigureWebpackTaskConfig): void;
    getKarmaConfig(postLoaders: webpack.Loader[], externals: webpack.ExternalsElement[]): webpack.Configuration;
    executeTask(gulp: gulp.Gulp, completeCallback: (error?: string) => void): NodeJS.ReadWriteStream;
    /**
     * Modify the localized webpack config to make sure the end result is correct.
     *
     * @internal
     */
    tinkerWithLocConfig(config: webpack.Configuration): void;
    private _appendToBaseConfig(config);
    private _logNoEntriesWarning();
    private _setWebpackConfig(config);
}
