"use strict";
var chai_1 = require("chai");
var index_1 = require("./index");
var Guid_1 = require("../Guid");
describe('Guid tests', function () {
    var validGuids = [
        '9d4f312c-e365-45b4-b6ef-fa24e512e7e5',
        '{e25dc355-64df-4d3d-beb8-001e5dae531c}',
        'Guid(1158fbf1-8dac-4252-b378-77489fd230d8)'
    ];
    var validNormalizedGuids = [
        '9d4f312c-e365-45b4-b6ef-fa24e512e7e5',
        'e25dc355-64df-4d3d-beb8-001e5dae531c',
        '1158fbf1-8dac-4252-b378-77489fd230d8'
    ];
    var invalidGuids = [
        'not-a-guid',
        '{not-a-guid}',
        'Guid(not-a-guid)',
        '9x4f312y-z365-45b4-b6ef-fa24e512e7e5',
        index_1.TEST_UNDEFINED,
        index_1.TEST_NULL
    ];
    var invalidNormalizedGuids = [
        'not-a-guid',
        '9x4f312y-z365-45b4-b6ef-fa24e512e7e5',
        index_1.TEST_UNDEFINED,
        index_1.TEST_NULL
    ];
    describe('Static methods', function () {
        it('Can validate Guids', function () {
            for (var _i = 0, validNormalizedGuids_1 = validNormalizedGuids; _i < validNormalizedGuids_1.length; _i++) {
                var g = validNormalizedGuids_1[_i];
                chai_1.expect(Guid_1.default.isValid(g)).to.be.true;
            }
            for (var _a = 0, invalidNormalizedGuids_1 = invalidNormalizedGuids; _a < invalidNormalizedGuids_1.length; _a++) {
                var g = invalidNormalizedGuids_1[_a];
                chai_1.expect(Guid_1.default.isValid(g)).to.be.false;
            }
        });
        it('Can create valid Guids', function () {
            for (var i = 0; i < 5; ++i) {
                chai_1.expect(Guid_1.default.isValid(Guid_1.default.newGuid().toString())).to.be.true;
            }
        });
        it('Can create Guid instances from a string', function () {
            for (var _i = 0, validGuids_1 = validGuids; _i < validGuids_1.length; _i++) {
                var g = validGuids_1[_i];
                chai_1.expect(Guid_1.default.tryParse(g)).to.not.be.undefined;
                chai_1.expect(Guid_1.default.parse(g)).to.not.be.undefined;
            }
            for (var _a = 0, invalidGuids_1 = invalidGuids; _a < invalidGuids_1.length; _a++) {
                var g = invalidGuids_1[_a];
                chai_1.expect(Guid_1.default.tryParse(g)).to.be.undefined; 
            }
        });
    });
    describe('Instance methods', function () {
        it('Can be converted into a string', function () {
            var guidString = validNormalizedGuids[0];
            var guid = Guid_1.default.parse(guidString);
            chai_1.expect(guid.toString() === guidString);
        });
        it('Can compare two Guids', function () {
            var guidA = Guid_1.default.newGuid();
            var guidB = Guid_1.default.parse(validGuids[0]);
            var guidC = Guid_1.default.parse(validGuids[0]);
            chai_1.expect(guidA.equals(guidB)).to.be.false;
            chai_1.expect(guidA.equals(guidA)).to.be.true;
            chai_1.expect(guidB.equals(guidC)).to.be.true;
        });
    });
});
