"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var sp_core_library_1 = require("@microsoft/sp-core-library");
var BaseClientSideWebPart_1 = require("../BaseClientSideWebPart");
var PropertyPaneTextField_1 = require("../../propertyPane/propertyPaneFields/propertyPaneTextField/PropertyPaneTextField");
var BaseTestWebPart = (function (_super) {
    __extends(BaseTestWebPart, _super);
    function BaseTestWebPart() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.textElement = document.createElement('span');
        return _this;
    }
    Object.defineProperty(BaseTestWebPart.prototype, "publicDomElement", {
        get: function () { return this.domElement; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseTestWebPart.prototype, "publicManifest", {
        get: function () { return this.context.manifest; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseTestWebPart.prototype, "publicInstanceId", {
        get: function () { return this.context.instanceId; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseTestWebPart.prototype, "publicDisplayMode", {
        get: function () { return this.displayMode; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseTestWebPart.prototype, "publicHost", {
        get: function () { return this.context.host; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseTestWebPart.prototype, "publicProperties", {
        get: function () { return this.properties; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseTestWebPart.prototype, "publicRenderedOnce", {
        get: function () { return this.renderedOnce; },
        enumerable: true,
        configurable: true
    });
    BaseTestWebPart.prototype.publicPropertyPaneConfiguration = function () { return this.getPropertyPaneConfiguration(); };
    Object.defineProperty(BaseTestWebPart.prototype, "publicContext", {
        get: function () { return this.context; },
        enumerable: true,
        configurable: true
    });
    BaseTestWebPart.prototype.render = function (mode, data) {
        if (mode === void 0) { mode = sp_core_library_1.DisplayMode.Read; }
        if (this.textElement) {
            this.textElement.innerText = !this.renderedOnce ? 'firstRenderValue' : 'secondRenderValue';
        }
    };
    Object.defineProperty(BaseTestWebPart.prototype, "dataVersion", {
        get: function () {
            return sp_core_library_1.Version.parse('1.0');
        },
        enumerable: true,
        configurable: true
    });
    BaseTestWebPart.prototype.onDispose = function () {
        this.textElement = undefined;
    };
    return BaseTestWebPart;
}(BaseClientSideWebPart_1.default));
exports.BaseTestWebPart = BaseTestWebPart;
var TestWebPart = (function (_super) {
    __extends(TestWebPart, _super);
    function TestWebPart() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TestWebPart.prototype.getPropertyPaneConfiguration = function () {
        return {
            pages: [{
                    header: {
                        description: 'Test WebPart Settings'
                    },
                    groups: [
                        {
                            groupName: '',
                            groupFields: [
                                PropertyPaneTextField_1.PropertyPaneTextField('prop1', { label: 'Prop1' })
                            ]
                        }
                    ]
                }]
        };
    };
    Object.defineProperty(TestWebPart.prototype, "dataVersion", {
        get: function () {
            return sp_core_library_1.Version.parse('1.0');
        },
        enumerable: true,
        configurable: true
    });
    TestWebPart.prototype.onAfterDeserialize = function (properties, dataVersion) {
        var props = properties;
        var isLoadedDataNewer = dataVersion.greaterThan(this.dataVersion);
        if (isLoadedDataNewer) {
            props.prop1 = 'updated to be forward-compatible';
        }
        return props;
    };
    return TestWebPart;
}(BaseTestWebPart));
exports.TestWebPart = TestWebPart;
var TestWebPartV2 = (function (_super) {
    __extends(TestWebPartV2, _super);
    function TestWebPartV2() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(TestWebPartV2.prototype, "dataVersion", {
        get: function () {
            return sp_core_library_1.Version.parse('2.0');
        },
        enumerable: true,
        configurable: true
    });
    TestWebPartV2.prototype.onAfterDeserialize = function (properties, dataVersion) {
        var isLoadedDataOlder = dataVersion.lessThan(this.dataVersion);
        if (isLoadedDataOlder) {
            properties.prop2 = 'created to be backward-compatible';
        }
        return properties;
    };
    return TestWebPartV2;
}(BaseTestWebPart));
exports.TestWebPartV2 = TestWebPartV2;
var TestWebPartWithNoRender = (function (_super) {
    __extends(TestWebPartWithNoRender, _super);
    function TestWebPartWithNoRender() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TestWebPartWithNoRender.prototype.render = function () {
        return;
    };
    Object.defineProperty(TestWebPartWithNoRender.prototype, "dataVersion", {
        get: function () {
            return sp_core_library_1.Version.parse('1.0');
        },
        enumerable: true,
        configurable: true
    });
    TestWebPartWithNoRender.prototype.onDispose = function () {
        this.textElement = undefined;
    };
    return TestWebPartWithNoRender;
}(BaseClientSideWebPart_1.default));
exports.TestWebPartWithNoRender = TestWebPartWithNoRender;
