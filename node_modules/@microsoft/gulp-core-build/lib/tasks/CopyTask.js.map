{"version":3,"sources":["tasks/CopyTask.ts"],"names":[],"mappings":";;;;;;AAAA,uCAAsC;AAsBtC;;GAEG;AACH;IAA8B,4BAAqB;IACjD;;OAEG;IACH;QAAA,YACE,iBAAO,SAQR;QANC,KAAI,CAAC,IAAI,GAAG,MAAM,CAAC;QAEnB,KAAI,CAAC,UAAU,GAAG;YAChB,MAAM,EAAE,EAAE;YACV,aAAa,EAAE,IAAI;SACpB,CAAC;;IACJ,CAAC;IAED;;;OAGG;IACI,6BAAU,GAAjB;QACE,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;IACvC,CAAC;IAAA,CAAC;IAEF;;OAEG;IACI,8BAAW,GAAlB,UACE,IAAe,EACf,gBAA2C;QAG3C,4BAA4B;QAC5B,IAAM,OAAO,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;QACxC,IAAM,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;QAClC,IAAM,KAAK,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;QAC1B,IAAA,oBAA2C,EAAzC,kBAAM,EAAE,gCAAa,CAAqB;QAClD,2BAA2B;QAE3B,IAAM,UAAU,GAA6B,EAAE,CAAC;gCAErC,QAAQ;YACjB,EAAE,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACpC,IAAM,OAAO,GAAa,MAAM,CAAC,QAAQ,CAAC,CAAC;gBAE3C,OAAO,CAAC,OAAO,CAAC,UAAA,WAAW,IAAI,OAAA,UAAU,CAAC,IAAI,CAC5C,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC;qBAClB,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,OAAO,EAAE,CAAC,CAAC;qBACtC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAC7B,EAJ8B,CAI9B,CAAC,CAAC;YACL,CAAC;QACH,CAAC;QAVD,GAAG,CAAC,CAAC,IAAM,QAAQ,IAAI,MAAM,CAAC;oBAAnB,QAAQ;SAUlB;QAED,EAAE,CAAC,CAAC,UAAU,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YAC5B,gBAAgB,EAAE,CAAC;QACrB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QAC3B,CAAC;IACH,CAAC;IACH,eAAC;AAAD,CA1DA,AA0DC,CA1D6B,mBAAQ,GA0DrC;AA1DY,4BAAQ","file":"tasks/CopyTask.js","sourcesContent":["import { GulpTask } from './GulpTask';\r\nimport gulp = require('gulp');\r\n\r\n/** Configuration for CopyTask */\r\nexport interface ICopyConfig {\r\n  /**\r\n   * The list of patterns and the destination which where they should be copied\r\n   */\r\n  copyTo: {\r\n    /**\r\n     * A mapping of destination paths (absolute or relative) to a list of glob pattern matches\r\n     */\r\n    [destPath: string]: string[];\r\n  };\r\n\r\n  /**\r\n   * If true, the files will be copied into a flattened folder. If false, they will retain the original\r\n   * folder structure. True by default.\r\n   */\r\n  shouldFlatten?: boolean;\r\n}\r\n\r\n/**\r\n * This task takes in a map of dest: [sources], and copies items from one place to another.\r\n */\r\nexport class CopyTask extends GulpTask<ICopyConfig> {\r\n  /**\r\n   * Instantiates a CopyTask with an empty configuration\r\n   */\r\n  constructor() {\r\n    super();\r\n\r\n    this.name = 'copy';\r\n\r\n    this.taskConfig = {\r\n      copyTo: {},\r\n      shouldFlatten: true\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Loads the z-schema object for this task\r\n   * @internal\r\n   */\r\n  public loadSchema(): Object {\r\n    return require('./copy.schema.json');\r\n  };\r\n\r\n  /**\r\n   * Executes the copy task, which copy files based on the task's Configuration\r\n   */\r\n  public executeTask(\r\n    gulp: gulp.Gulp,\r\n    completeCallback: (result?: Object) => void\r\n  ): Promise<Object> | NodeJS.ReadWriteStream | void {\r\n\r\n    /* tslint:disable:typedef */\r\n    const flatten = require('gulp-flatten');\r\n    const gulpif = require('gulp-if');\r\n    const merge = require('merge2');\r\n    const { copyTo, shouldFlatten } = this.taskConfig;\r\n    /* tslint:enable:typedef */\r\n\r\n    const allStreams: NodeJS.ReadWriteStream[] = [];\r\n\r\n    for (const copyDest in copyTo) {\r\n      if (copyTo.hasOwnProperty(copyDest)) {\r\n        const sources: string[] = copyTo[copyDest];\r\n\r\n        sources.forEach(sourceMatch => allStreams.push(\r\n          gulp.src(sourceMatch)\r\n            .pipe(gulpif(shouldFlatten, flatten()))\r\n            .pipe(gulp.dest(copyDest))\r\n        ));\r\n      }\r\n    }\r\n\r\n    if (allStreams.length === 0) {\r\n      completeCallback();\r\n    } else {\r\n      return merge(allStreams);\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}