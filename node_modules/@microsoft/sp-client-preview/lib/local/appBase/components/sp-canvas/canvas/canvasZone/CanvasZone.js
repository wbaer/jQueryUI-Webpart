"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = require("react");
var office_ui_fabric_react_1 = require("office-ui-fabric-react");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var CanvasSection_1 = require("../canvasSection/CanvasSection");
var Toolbar_1 = require("../../toolbar/toolbar/Toolbar");
require("CanvasZone.scss");
var CanvasZone = (function (_super) {
    __extends(CanvasZone, _super);
    function CanvasZone(props, context) {
        return _super.call(this, props, context) || this;
    }
    CanvasZone.prototype.render = function () {
        var _this = this;
        var store = this.context.store;
        var displayMode = store.displayMode;
        var _a = this.props, fullWidth = _a.fullWidth, zone = _a.zone, selectedPosition = _a.selectedPosition, shouldCenterAlign = _a.shouldCenterAlign;
        var isCurZoneSelected = selectedPosition.zoneIndex === zone.index;
        var isCurZoneEmpty = true;
        var sectionComponents = [];
        var sections = zone.sections;
        sections.forEach(function (curSection, curIdx) {
            sectionComponents.push(React.createElement(CanvasSection_1.default, { zoneIndex: zone.index, section: curSection, selectedPosition: selectedPosition, key: curSection.index }));
            if (isCurZoneEmpty && !curSection.isEmpty()) {
                isCurZoneEmpty = false;
            }
        });
        var isReadMode = displayMode === sp_core_library_1.DisplayMode.Read;
        var layoutZoneClassName = office_ui_fabric_react_1.css('CanvasZone', 'ms-Grid-row', {
            'CanvasZone--edit': !isReadMode,
            'CanvasZone--fullWidth': fullWidth,
            'CanvasZone--read': isReadMode,
            'CanvasZone--selected': isCurZoneSelected,
            'CanvasZone--empty': isCurZoneEmpty,
            'CanvasZone--centerAlign': shouldCenterAlign
        });
        return (React.createElement("div", { className: layoutZoneClassName, ref: function (ref) { return _this._domElement = ref; }, "data-automation-id": 'CanvasZone' },
            sectionComponents,
            React.createElement(Toolbar_1.default, { className: 'CanvasZoneToolbar', controlType: undefined, controlPosition: { zoneIndex: zone.index, sectionIndex: undefined, controlIndex: undefined }, displayMode: displayMode, id: zone.index.toString(), row: undefined, onConfigureButtonClick: store.handleConfigureZoneButtonClicked, onDeleteButtonClick: store.handleDeleteZoneButtonClicked })));
    };
    return CanvasZone;
}(React.Component));
CanvasZone.contextTypes = {
    store: React.PropTypes.object.isRequired
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = CanvasZone;
