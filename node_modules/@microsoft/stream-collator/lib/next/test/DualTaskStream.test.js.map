{"version":3,"sources":["next/test/DualTaskStream.test.ts"],"names":[],"mappings":"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","file":"next/test/DualTaskStream.test.js","sourcesContent":["/// <reference types=\"mocha\" />\r\n\r\nimport { assert } from 'chai';\r\nimport * as colors from 'colors';\r\n\r\nimport DualTaskStream from '../DualTaskStream';\r\n\r\nconst helloWorld: string = 'Hello, world!';\r\n\r\ndescribe('DualTaskStream', () => {\r\n  it('passes stdout values through unmodified', (done: () => void) => {\r\n    const stream: DualTaskStream = new DualTaskStream();\r\n\r\n    stream.on('data', (data: string | Buffer) => {\r\n      assert.equal(data.toString(), helloWorld);\r\n      done();\r\n    });\r\n\r\n    stream.stdout.write(helloWorld);\r\n  });\r\n\r\n  it('writes stderr values in red', (done: () => void) => {\r\n    const stream: DualTaskStream = new DualTaskStream();\r\n\r\n    stream.on('data', (data: string | Buffer) => {\r\n      assert.equal(data.toString(), colors.red(helloWorld));\r\n      done();\r\n    });\r\n\r\n    stream.stderr.write(helloWorld);\r\n  });\r\n\r\n  it('writes warnings written to stderr in yellow to stdout', (done: () => void) => {\r\n    const stream: DualTaskStream = new DualTaskStream();\r\n    var helloWorld = 'Warning - ' + helloWorld; /* tslint:disable-line */\r\n\r\n    stream.on('data', (data: string | Buffer) => {\r\n      assert.equal(data.toString(), colors.yellow(helloWorld));\r\n      assert.equal(stream.stdout.readAll(), colors.yellow(helloWorld));\r\n      done();\r\n    });\r\n\r\n    stream.stderr.write(helloWorld);\r\n  });\r\n\r\n  it('doesn\\'t write data in quiet mode', (done: () => void) => {\r\n    const stream: DualTaskStream = new DualTaskStream(true);\r\n\r\n    stream.stdout.write(helloWorld);\r\n\r\n    stream.stdout.end();\r\n    assert.isNull(stream.read());\r\n\r\n    done();\r\n  });\r\n\r\n  it('doesn\\'t write warnings from stderr in quiet mode', (done: () => void) => {\r\n    const stream: DualTaskStream = new DualTaskStream(true);\r\n    var helloWorld = 'Warning - ' + helloWorld; /* tslint:disable-line */\r\n\r\n    stream.stderr.write(helloWorld);\r\n\r\n    stream.stderr.end();\r\n    assert.isNull(stream.read());\r\n\r\n    done();\r\n  });\r\n\r\n  it('end() closes both substreams', (done: () => void) => {\r\n    const stream: DualTaskStream = new DualTaskStream(true);\r\n\r\n    let stderrClosed: boolean, stdoutClosed: boolean = false;\r\n\r\n    const finishedIfBothStreamsClosed: () => void = () => {\r\n      if (stderrClosed && stdoutClosed) {\r\n        done();\r\n      }\r\n    };\r\n\r\n    stream.stderr.on('end', () => {\r\n      stderrClosed = true;\r\n      finishedIfBothStreamsClosed();\r\n    });\r\n\r\n    stream.stdout.on('end', () => {\r\n      stdoutClosed = true;\r\n      finishedIfBothStreamsClosed();\r\n    });\r\n\r\n    stream.end();\r\n  });\r\n\r\n  it('end() closes both substreams even if stdout is complete', (done: () => void) => {\r\n    const stream: DualTaskStream = new DualTaskStream(true);\r\n\r\n    let stderrClosed: boolean, stdoutClosed: boolean = false;\r\n\r\n    const finishedIfBothStreamsClosed: () => void = () => {\r\n      if (stderrClosed && stdoutClosed) {\r\n        done();\r\n      }\r\n    };\r\n\r\n    stream.stderr.on('end', () => {\r\n      stderrClosed = true;\r\n      finishedIfBothStreamsClosed();\r\n    });\r\n\r\n    stream.stdout.on('end', () => {\r\n      stdoutClosed = true;\r\n      finishedIfBothStreamsClosed();\r\n    });\r\n\r\n    stream.stdout.end();\r\n    stream.end();\r\n  });\r\n\r\n  it('end() closes both substreams even if stderr is complete', (done: () => void) => {\r\n    const stream: DualTaskStream = new DualTaskStream(true);\r\n\r\n    let stderrClosed: boolean, stdoutClosed: boolean = false;\r\n\r\n    const finishedIfBothStreamsClosed: () => void = () => {\r\n      if (stderrClosed && stdoutClosed) {\r\n        done();\r\n      }\r\n    };\r\n\r\n    stream.stderr.on('end', () => {\r\n      stderrClosed = true;\r\n      finishedIfBothStreamsClosed();\r\n    });\r\n\r\n    stream.stdout.on('end', () => {\r\n      stdoutClosed = true;\r\n      finishedIfBothStreamsClosed();\r\n    });\r\n\r\n    stream.stderr.end();\r\n    stream.end();\r\n  });\r\n\r\n    it('can call end twice without error', (done: () => void) => {\r\n    const stream: DualTaskStream = new DualTaskStream(true);\r\n\r\n    let stderrClosed: boolean, stdoutClosed: boolean = false;\r\n\r\n    const finishedIfBothStreamsClosed: () => void = () => {\r\n      if (stderrClosed && stdoutClosed) {\r\n        assert.doesNotThrow(() => { stream.end(); });\r\n        done();\r\n      }\r\n    };\r\n\r\n    stream.stderr.on('end', () => {\r\n      stderrClosed = true;\r\n      finishedIfBothStreamsClosed();\r\n    });\r\n\r\n    stream.stdout.on('end', () => {\r\n      stdoutClosed = true;\r\n      finishedIfBothStreamsClosed();\r\n    });\r\n\r\n    stream.end();\r\n  });\r\n});\r\n"],"sourceRoot":"..\\..\\..\\src"}