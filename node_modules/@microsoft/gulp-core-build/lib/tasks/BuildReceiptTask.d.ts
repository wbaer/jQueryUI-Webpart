/// <reference types="es6-promise" />
/// <reference types="node" />
import { GulpTask } from './GulpTask';
import gulp = require('gulp');
export interface IBuildReceiptTask {
}
/**
 * This task is responsible for generating a build receipt, which is a hash of filePath to sha1 git hash,
 * based on the current folder's content. If a {buildConfig.packagePath}/build.json file exists, it will
 * parse it and object compare the computed build receipt with the contents. If everything is the same, it
 * will set buildConfig.isRedundantBuild flag to true, which can be used in task isEnabled methods to skip
 * unnecessary work.
 *
 * The utility function "_getLocalHashes" will use the git.exe process to get the hashes from the git
 * cache. It also asks for git status, which will tell us what has been changed since. It uses this info
 * to build the hash.
 *
 * The utility funciton "_readPackageHashes" will read the local build.json file from the packagePath
 * folder.
 */
export declare class CheckBuildReceiptTask extends GulpTask<IBuildReceiptTask> {
    name: string;
    executeTask(gulp: gulp.Gulp, completeCallback: (result?: Object) => void): Promise<Object> | NodeJS.ReadWriteStream | void;
}
/**
 * This task writes _lastFilesHash, generated from the CheckBuildReceipt task, to the package path in the
 * build.json file. It should only be executed in a task which runs the CheckBuildReceipt subtask first, and
 * should only be run at the end of the task when everything has successfully completed.
 */
export declare class UpdateBuildReceiptTask extends GulpTask<IBuildReceiptTask> {
    name: string;
    executeTask(gulp: gulp.Gulp, completeCallback: (result?: Object) => void): Promise<Object> | NodeJS.ReadWriteStream | void;
}
