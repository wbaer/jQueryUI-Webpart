"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var path = require("path");
var ConfigureWebpackTask_1 = require("./../configureWebpack/ConfigureWebpackTask");
var globEscape = require("glob-escape");
var OdspGulpTask_1 = require("./../OdspGulpTask");
/**
 * Configures the @microsoft/gulp-core-build-webpack task with some smart defaults based on the package configuration.
 *
 * Example:
 *  IN:
 *    setConfig({
 *      includeExtensions: ['template.html'],
 *      excludeExtensions: ['png'],
 *      includeFiles: ['/assets/goodAsset.png'],
 *      excludeFiles: ['/assets/badAsset.gif']
 *    })
 *
 *  OUT:
 *    copies all files that match our standard webpack file-loader extensions
 *      ('jpg', 'png', 'woff', 'eot', 'ttf', 'svg', 'gif'), with the following extensions, in the following order of
 *    precedence (from lowest to highest):
 *      1. including additional extensions (i.e. 'template.html')
 *      2. excluding specific extensions (i.e. 'png')
 *      3. including specific globs (i.e. '/assets/goodAsset.png')
 *      4. excluding specific globs (i.e. '/assets/badAsset.gif')
 */
var CopyStaticAssetsTask = (function (_super) {
    __extends(CopyStaticAssetsTask, _super);
    function CopyStaticAssetsTask() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'copy-static-assets';
        _this.taskConfig = {
            includeExtensions: [],
            excludeExtensions: [],
            includeFiles: [],
            excludeFiles: []
        };
        return _this;
    }
    CopyStaticAssetsTask.prototype.loadSchema = function () {
        return require('./copy-static-assets.schema.json');
    };
    CopyStaticAssetsTask.prototype.executeTask = function (gulp, completeCallback) {
        var rootPath = path.join(this.buildConfig.rootPath, this.buildConfig.srcFolder || 'src');
        var libPath = path.join(this.buildConfig.rootPath, this.buildConfig.libFolder || 'lib');
        var globPatterns = [];
        var allExtensions = this.taskConfig.includeExtensions.concat(ConfigureWebpackTask_1.fileLoaderExts, ['json', 'html']);
        for (var _i = 0, allExtensions_1 = allExtensions; _i < allExtensions_1.length; _i++) {
            var ext = allExtensions_1[_i];
            if (this.taskConfig.excludeExtensions.indexOf(ext) !== -1) {
                return; // Skipping this extension. It's been excluded
            }
            if (!ext.match(/^\./)) {
                ext = "." + ext;
            }
            globPatterns.push(path.join(rootPath, '**', "*" + globEscape(ext)));
        }
        for (var _a = 0, _b = this.taskConfig.includeFiles; _a < _b.length; _a++) {
            var file = _b[_a];
            if (this.taskConfig.excludeFiles.indexOf(file) !== -1) {
                return; // Skipping this file. It's been excluded
            }
            globPatterns.push(path.join(rootPath, file));
        }
        for (var _c = 0, _d = this.taskConfig.excludeFiles; _c < _d.length; _c++) {
            var file = _d[_c];
            globPatterns.push("!" + path.join(rootPath, file));
        }
        return gulp.src(globPatterns, { base: rootPath })
            .pipe(gulp.dest(libPath))
            .on('finish', function () { return completeCallback(); });
    };
    return CopyStaticAssetsTask;
}(OdspGulpTask_1.default));
exports.CopyStaticAssetsTask = CopyStaticAssetsTask;

//# sourceMappingURL=CopyStaticAssetsTask.js.map
