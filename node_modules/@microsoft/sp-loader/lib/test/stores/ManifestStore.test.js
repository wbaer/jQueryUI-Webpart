"use strict";
var chai_1 = require("chai");
var test_1 = require("@microsoft/sp-core-library/lib/test");
var ManifestStore_1 = require("../../stores/ManifestStore");
var DebugManifestPrompt_1 = require("../../DebugManifestPrompt");
var componentConstants = require("../../utilities/componentConstants");
require("es6-collections");
describe('ManifestStore tests', function () {
    afterEach(function () {
        ManifestStore_1.default._instance = undefined; 
    });
    describe('Adding an internal manifest', function () {
        var imageWebPartId = 'd1d91016-032f-456d-98a4-721247c305e8';
        var imageWebPartAlias = 'ImageWebpart';
        var webpartManifest = {
            manifestVersion: 2,
            componentType: 'WebPart',
            id: imageWebPartId,
            alias: imageWebPartAlias,
            isInternal: true,
            version: '0.0.1',
            loaderConfig: {
                internalModuleBaseUrls: ['https://cdn.net/'],
                entryModuleId: 'main.bundle',
                scriptResources: {}
            },
            preconfiguredEntries: []
        };
        beforeEach(function () {
            ManifestStore_1.default.instance.registerManifests([webpartManifest], true);
        });
        it('should get isInternal as true', function (done) {
            var fetchedManifest = ManifestStore_1.default.instance.getManifest(imageWebPartId);
            chai_1.assert.isTrue(fetchedManifest.isInternal);
            done();
        });
        it('should get alias back', function (done) {
            var fetchedManifest = ManifestStore_1.default.instance.getManifest(imageWebPartId);
            chai_1.assert.equal(fetchedManifest.alias, imageWebPartAlias);
            done();
        });
    });
    describe('Adding a third-party manifest', function () {
        var customWebPartId = '00000000-0000-0000-0000-000000000000';
        var customWebPartAlias = 'CustomWebpart';
        var webpartManifest = {
            manifestVersion: 2,
            componentType: 'WebPart',
            id: customWebPartId,
            alias: customWebPartAlias,
            version: '0.0.1',
            loaderConfig: {
                internalModuleBaseUrls: ['https://cdn.net/'],
                entryModuleId: 'main.bundle',
                scriptResources: {}
            },
            preconfiguredEntries: []
        };
        beforeEach(function () {
            ManifestStore_1.default.instance.registerManifests([webpartManifest], true);
        });
        it('should get isInternal as false', function (done) {
            var fetchedManifest = ManifestStore_1.default.instance.getManifest(customWebPartId);
            chai_1.assert.isFalse(!!fetchedManifest.isInternal);
            done();
        });
        it('should get alias back', function (done) {
            var fetchedManifest = ManifestStore_1.default.instance.getManifest(customWebPartId);
            chai_1.assert.equal(fetchedManifest.alias, customWebPartAlias);
            done();
        });
    });
    describe('Adding two manifests with different versions', function () {
        var imageWebPartId = 'd1d91016-032f-456d-98a4-721247c305e8';
        var imageWebPartAlias = 'ImageWebpart';
        var v1 = '1.0.0';
        var v2 = '2.0.0';
        var webpartManifestVersion1 = {
            manifestVersion: 2,
            componentType: 'WebPart',
            id: imageWebPartId,
            alias: imageWebPartAlias,
            isInternal: true,
            version: v1,
            loaderConfig: {
                internalModuleBaseUrls: ['https://cdn.net/'],
                entryModuleId: 'main.bundle',
                scriptResources: {}
            },
            preconfiguredEntries: []
        };
        var webpartManifestVersion2 = {
            manifestVersion: 2,
            componentType: 'WebPart',
            id: imageWebPartId,
            alias: imageWebPartAlias,
            isInternal: true,
            version: v2,
            loaderConfig: {
                internalModuleBaseUrls: ['https://cdn.net/'],
                entryModuleId: 'main.bundle',
                scriptResources: {}
            },
            preconfiguredEntries: []
        };
        beforeEach(function () {
            ManifestStore_1.default.instance.registerManifests([webpartManifestVersion1, webpartManifestVersion2], true);
        });
        it('requesting manifest by id will returns undefined', function () {
            chai_1.assert.isUndefined(ManifestStore_1.default.instance.tryGetManifest(imageWebPartId));
        });
        it('requesting version 1.0.0 returns version 1.0.0', function () {
            var fetchedManifest = ManifestStore_1.default.instance.getManifest(imageWebPartId, v1);
            chai_1.assert.equal(fetchedManifest.version, v1);
        });
        it('requesting version 2.0.0 returns version 2.0.0', function () {
            var fetchedManifest = ManifestStore_1.default.instance.getManifest(imageWebPartId, v2);
            chai_1.assert.equal(fetchedManifest.version, v2);
        });
    });
    describe('Adding two manifests with compatible versions', function () {
        var imageWebPartId = 'd1d91016-032f-456d-98a4-721247c305e8';
        var imageWebPartAlias = 'ImageWebpart';
        var v1 = '1.0.0';
        var v11 = '1.1.0';
        var webpartManifestVersion1 = {
            manifestVersion: 2,
            componentType: 'WebPart',
            id: imageWebPartId,
            alias: imageWebPartAlias,
            isInternal: true,
            version: v1,
            loaderConfig: {
                internalModuleBaseUrls: ['https://cdn.net/'],
                entryModuleId: 'main.bundle',
                scriptResources: {}
            },
            preconfiguredEntries: []
        };
        var webpartManifestVersion11 = {
            manifestVersion: 2,
            componentType: 'WebPart',
            id: imageWebPartId,
            alias: imageWebPartAlias,
            isInternal: true,
            version: v11,
            loaderConfig: {
                internalModuleBaseUrls: ['https://cdn.net/'],
                entryModuleId: 'main.bundle',
                scriptResources: {}
            },
            preconfiguredEntries: []
        };
        beforeEach(function () {
            ManifestStore_1.default.instance.registerManifests([webpartManifestVersion1, webpartManifestVersion11], true);
        });
        it('requesting manifest by id returns undefined', function () {
            chai_1.assert.isUndefined(ManifestStore_1.default.instance.tryGetManifest(imageWebPartId));
        });
        it('requesting version 1.0.0 returns version 1.1.0', function () {
            var fetchedManifest = ManifestStore_1.default.instance.getManifest(imageWebPartId, v1);
            chai_1.assert.equal(fetchedManifest.version, v11);
        });
        it('requesting version 1.1.0 returns version 1.1.0', function () {
            var fetchedManifest = ManifestStore_1.default.instance.getManifest(imageWebPartId, v11);
            chai_1.assert.equal(fetchedManifest.version, v11);
        });
    });
    describe('GA manifest only is compatible with pre-GA version request', function () {
        var imageWebPartId = 'd1d91016-032f-456d-98a4-721247c305e8';
        var imageWebPartAlias = 'ImageWebpart';
        var v1 = '1.0.0';
        var preVersion = '0.0.1';
        var webpartManifestVersion1 = {
            manifestVersion: 2,
            componentType: 'WebPart',
            id: imageWebPartId,
            alias: imageWebPartAlias,
            isInternal: true,
            version: v1,
            loaderConfig: {
                internalModuleBaseUrls: ['https://cdn.net/'],
                entryModuleId: 'main.bundle',
                scriptResources: {}
            },
            preconfiguredEntries: []
        };
        beforeEach(function () {
            ManifestStore_1.default.instance.registerManifests([webpartManifestVersion1], true);
        });
        it('requesting manifest by id returns 1.0.0 manifest', function () {
            chai_1.assert.equal(ManifestStore_1.default.instance.tryGetManifest(imageWebPartId), webpartManifestVersion1);
        });
        it('requesting version 0.0.1 returns version 1.0.0', function () {
            var fetchedManifest = ManifestStore_1.default.instance.getManifest(imageWebPartId, preVersion);
            chai_1.assert.equal(fetchedManifest.version, v1);
        });
    });
    describe('GA manifest coexists with pre-GA', function () {
        var imageWebPartId = 'd1d91016-032f-456d-98a4-721247c305e8';
        var imageWebPartAlias = 'ImageWebpart';
        var v1 = '1.0.0';
        var preVersion = '0.0.2';
        var webpartManifestVersion1 = {
            manifestVersion: 2,
            componentType: 'WebPart',
            id: imageWebPartId,
            alias: imageWebPartAlias,
            isInternal: true,
            version: v1,
            loaderConfig: {
                internalModuleBaseUrls: ['https://cdn.net/'],
                entryModuleId: 'main.bundle',
                scriptResources: {}
            },
            preconfiguredEntries: []
        };
        var webpartManifestPreVersion = {
            manifestVersion: 2,
            componentType: 'WebPart',
            id: imageWebPartId,
            alias: imageWebPartAlias,
            isInternal: true,
            version: preVersion,
            loaderConfig: {
                internalModuleBaseUrls: ['https://cdn.net/'],
                entryModuleId: 'main.bundle',
                scriptResources: {}
            },
            preconfiguredEntries: []
        };
        beforeEach(function () {
            ManifestStore_1.default.instance.registerManifests([webpartManifestPreVersion, webpartManifestVersion1], true);
        });
        it('requesting manifest by id returns undefined', function () {
            chai_1.assert.isUndefined(ManifestStore_1.default.instance.tryGetManifest(imageWebPartId));
        });
        it('requesting nonexisting version 0.0.1 returns version 1.0.0', function () {
            var fetchedManifest = ManifestStore_1.default.instance.getManifest(imageWebPartId, preVersion);
            chai_1.assert.equal(fetchedManifest.version, v1);
        });
    });
    describe('Adding two manifests with the same version', function () {
        var componentId = 'd1d91016-032f-456d-98a4-721247c305e8';
        var alias1 = 'WebPart1';
        var alias2 = 'WebPart2';
        var manifest1 = {
            manifestVersion: 2,
            componentType: 'Library',
            id: componentId,
            alias: alias1,
            version: '1.0.0',
            loaderConfig: {
                internalModuleBaseUrls: ['https://cdn.net/'],
                entryModuleId: 'main.bundle',
                scriptResources: {}
            }
        };
        var manifest2 = {
            manifestVersion: 2,
            componentType: 'Library',
            id: componentId,
            alias: alias2,
            version: '1.0.0',
            loaderConfig: {
                internalModuleBaseUrls: ['https://cdn.net/'],
                entryModuleId: 'main.bundle',
                scriptResources: {}
            }
        };
        beforeEach(function () {
            ManifestStore_1.default.instance.registerManifests([manifest1], true);
        });
        it('overwrite flag on sets the new manifest', function () {
            ManifestStore_1.default.instance.registerManifests([manifest2], true);
            var manifest = ManifestStore_1.default.instance.getManifest(componentId);
            chai_1.assert.isDefined(manifest);
            chai_1.assert.equal(manifest.alias, alias2);
        });
        it('overwrite flag off keeps the previous manifest', function () {
            ManifestStore_1.default.instance.registerManifests([manifest2], false);
            var manifest = ManifestStore_1.default.instance.getManifest(componentId);
            chai_1.assert.isDefined(manifest);
            chai_1.assert.equal(manifest.alias, alias1);
        });
    });
    describe('Getting a non-existing manifest', function () {
        var customWebPartId = '00000000-0000-0000-0000-000000000000';
        it('returns undefined', function (done) {
            var fetchedManifest = ManifestStore_1.default.instance.tryGetManifest(customWebPartId);
            chai_1.assert.isUndefined(fetchedManifest);
            done();
        });
    });
    describe('Register preloaded data', function () {
        var applicationId = 'd1d91016-032f-456d-98a4-721247c305e8';
        var manifestId = '00000000-032f-456d-98a4-721247c305e8';
        var applicationManifest = {
            manifestVersion: 2,
            componentType: 'Application',
            id: applicationId,
            alias: 'MyApplication',
            version: '1.0.0',
            loaderConfig: {
                internalModuleBaseUrls: ['https://cdn.net/'],
                entryModuleId: 'main.bundle',
                scriptResources: {}
            }
        };
        var additionalManifest = {
            manifestVersion: 2,
            componentType: 'Library',
            id: manifestId,
            alias: 'MyLibrary',
            version: '1.0.0',
            loaderConfig: {
                internalModuleBaseUrls: ['https://cdn.net/'],
                entryModuleId: 'main.bundle',
                scriptResources: {}
            }
        };
        var preloadedData = {
            clientSideApplicationId: applicationId,
            clientSideApplicationManifest: applicationManifest,
            manifests: [additionalManifest],
            spPageContextInfo: test_1.TEST_UNDEFINED
        };
        it('does nothing with no preloaded data', function () {
            ManifestStore_1.default.instance.registerPreloadedManifests(test_1.TEST_UNDEFINED);
            chai_1.assert.equal(ManifestStore_1.default.instance.getRegisteredManifests().length, 0);
        });
        it('registers application manifest', function () {
            ManifestStore_1.default.instance.registerPreloadedManifests(preloadedData);
            var manifest = ManifestStore_1.default.instance.getManifest(applicationId);
            chai_1.assert.equal(manifest, applicationManifest);
        });
        it('registers additional manifests', function () {
            ManifestStore_1.default.instance.registerPreloadedManifests(preloadedData);
            var manifest = ManifestStore_1.default.instance.getManifest(manifestId);
            chai_1.assert.equal(manifest, additionalManifest);
        });
    });
    describe('Register debug manifest', function () {
        var componentId = 'd1d91016-032f-456d-98a4-721247c305e8';
        var prodAlias = 'ProdAlias';
        var debugAlias = 'DebugAlias';
        var prodManifest = {
            manifestVersion: 2,
            componentType: 'Library',
            id: componentId,
            alias: prodAlias,
            version: '1.0.0',
            loaderConfig: {
                internalModuleBaseUrls: ['https://cdn.net/'],
                entryModuleId: 'main.bundle',
                scriptResources: {}
            }
        };
        var debugManifest = {
            manifestVersion: 2,
            componentType: 'Library',
            id: componentId,
            alias: debugAlias,
            version: '1.0.0',
            loaderConfig: {
                internalModuleBaseUrls: ['https://cdn.net/'],
                entryModuleId: 'main.bundle',
                scriptResources: {}
            }
        };
        beforeEach(function () {
            DebugManifestPrompt_1.default.instance.dangerouslyForce();
        });
        it('registers with production manifest', function () {
            ManifestStore_1.default.instance.registerManifests([prodManifest], true);
            var debugManifests = {};
            debugManifests[componentId] = debugManifest;
            ManifestStore_1.default.instance.registerDebugManifests(debugManifests);
            var manifest = ManifestStore_1.default.instance.getManifest(componentId);
            chai_1.assert.isDefined(manifest);
            chai_1.assert.equal(manifest.alias, debugAlias);
        });
        it('registers without production manifest', function () {
            var debugManifests = {};
            debugManifests[componentId] = debugManifest;
            ManifestStore_1.default.instance.registerDebugManifests(debugManifests);
            var manifest = ManifestStore_1.default.instance.getManifest(componentId);
            chai_1.assert.isDefined(manifest);
            chai_1.assert.equal(manifest.alias, debugAlias);
        });
    });
    it('Requesting React 14 returns React 15', function () {
        var v14 = '0.14.8';
        var v15 = '15.4.2';
        var reactManifest = {
            manifestVersion: 2,
            componentType: 'Library',
            id: componentConstants.reactComponentId,
            alias: 'React',
            isInternal: true,
            version: v15,
            loaderConfig: {
                internalModuleBaseUrls: ['https://cdn.net/'],
                entryModuleId: 'main.bundle',
                scriptResources: {}
            }
        };
        var reactDomManifest = {
            manifestVersion: 2,
            componentType: 'Library',
            id: componentConstants.reactDomComponentId,
            alias: 'ReactDom',
            isInternal: true,
            version: v15,
            loaderConfig: {
                internalModuleBaseUrls: ['https://cdn.net/'],
                entryModuleId: 'main.bundle',
                scriptResources: {}
            }
        };
        ManifestStore_1.default.instance.registerManifests([reactManifest, reactDomManifest], true);
        chai_1.assert.equal(ManifestStore_1.default.instance.tryGetManifest(componentConstants.reactComponentId, v14), reactManifest);
        chai_1.assert.equal(ManifestStore_1.default.instance.tryGetManifest(componentConstants.reactComponentId, v15), reactManifest);
        chai_1.assert.equal(ManifestStore_1.default.instance.tryGetManifest(componentConstants.reactDomComponentId, v14), reactDomManifest);
        chai_1.assert.equal(ManifestStore_1.default.instance.tryGetManifest(componentConstants.reactDomComponentId, v15), reactDomManifest);
    });
});
