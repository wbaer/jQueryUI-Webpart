"use strict";
/* tslint:disable:typedef */
var fileLoader = require('file-loader');
var loaderUtils = require('loader-utils');
/* tslint:enable:typedef */
var nameLowerRegExp = /\[name\:lower\]/ig;
/* tslint:disable:no-any */
function casedFileLoader(content) {
    /* tslint:enable:no-any */
    var query = loaderUtils.parseQuery(this.query);
    if (query.name && query.name.match(nameLowerRegExp)) {
        // Replace "[name:lower]" with "[name]"
        this.query = this.query.replace(nameLowerRegExp, '[name]');
        // Create a fake context replacing "emitFile" with our own implementation
        var fileLoaderUrl_1;
        /* tslint:disable:no-any */
        var fileLoaderContent_1;
        /* tslint:enable:no-any */
        var fileLoaderContext = {
            /* tslint:disable:no-any */
            emitFile: function (url, loaderContent) {
                /* tslint:enable:no-any */
                fileLoaderUrl_1 = url;
                fileLoaderContent_1 = loaderContent;
            }
        };
        // Copy all of the properties of "this" to our fake context, but make sure we don't overwrite our
        // implementation of "emitFile"
        for (var property in this) {
            if (!fileLoaderContext.hasOwnProperty(property)) {
                /* tslint:disable:typedef */
                var propertyValue = this[property];
                /* tslint:enable:typedef */
                fileLoaderContext[property] = propertyValue;
            }
        }
        var fileLoaderResult = fileLoader.call(fileLoaderContext, content);
        var lowercaseUrl = fileLoaderUrl_1.toLowerCase();
        var oldEncodedUrl = JSON.stringify(fileLoaderUrl_1);
        var newEncodedUrl = JSON.stringify(lowercaseUrl);
        // Pass content out of the file loader
        this.emitFile(lowercaseUrl, fileLoaderContent_1);
        return fileLoaderResult.replace(oldEncodedUrl, newEncodedUrl);
    }
    else {
        // Pass through to the standard file loader
        return fileLoader.call(this, content);
    }
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = casedFileLoader;
// Set this loader as "raw," so we get the file's raw bitstream, not a decoded string
/* tslint:disable:no-any */
casedFileLoader.raw = true;
/* tslint:enable:no-any */

//# sourceMappingURL=casedFileLoader.js.map
