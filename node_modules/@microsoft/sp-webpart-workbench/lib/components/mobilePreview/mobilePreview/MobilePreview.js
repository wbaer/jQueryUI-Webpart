"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var React = require("react");
var office_ui_fabric_react_1 = require("office-ui-fabric-react");
var MobilePreview_module_scss_1 = require("./MobilePreview.module.scss");
var MobilePreviewDevices_1 = require("../MobilePreviewDevices");
var MobilePreviewClickStopBar_1 = require("../mobilePreviewClickStopBar/MobilePreviewClickStopBar");
var MobilePreviewHeaderBar_1 = require("../mobilePreviewHeaderBar/MobilePreviewHeaderBar");
var MobilePreviewDeviceView_1 = require("../mobilePreviewDeviceView/MobilePreviewDeviceView");
var MobilePreviewDimensionInput_1 = require("../mobilePreviewDimensionInput/MobilePreviewDimensionInput");
var MobilePreviewRotate_1 = require("../mobilePreviewRotate/MobilePreviewRotate");
var DeviceType;
(function (DeviceType) {
    DeviceType[DeviceType["Phone"] = 0] = "Phone";
    DeviceType[DeviceType["Tablet"] = 1] = "Tablet";
})(DeviceType = exports.DeviceType || (exports.DeviceType = {}));
var DeviceOrientation;
(function (DeviceOrientation) {
    DeviceOrientation[DeviceOrientation["Portrait"] = 0] = "Portrait";
    DeviceOrientation[DeviceOrientation["Landscape"] = 1] = "Landscape";
})(DeviceOrientation = exports.DeviceOrientation || (exports.DeviceOrientation = {}));
var MobilePreview = (function (_super) {
    __extends(MobilePreview, _super);
    function MobilePreview(props) {
        var _this = _super.call(this, props) || this;
        _this.inProgressURL = '';
        if (!_this.props.devices) {
            _this.devices = MobilePreviewDevices_1.mobilePreviewDevices;
        }
        else {
            _this.devices = _this.props.devices;
        }
        var deviceType = _this.props.deviceType || DeviceType.Phone;
        _this.defaultPhone = _this.devices.phones[_this.devices.phones.length - 1];
        _this.defaultTablet = _this.devices.tablets[_this.devices.tablets.length - 1];
        _this.state = {
            currentOrientation: deviceType === DeviceType.Phone ?
                DeviceOrientation.Portrait : DeviceOrientation.Landscape,
            currentDevice: deviceType === DeviceType.Phone ? _this.defaultPhone : _this.defaultTablet,
            deviceType: deviceType,
            url: window.location.href + '?Mode=Read'
        };
        _this._sortDevices();
        _this.state.currentDevice = props.deviceType === DeviceType.Phone ? _this.defaultPhone : _this.defaultTablet;
        return _this;
    }
    MobilePreview.prototype.render = function () {
        this._sortDevices();
        var mobilePreviewClickStopBar = React.createElement(MobilePreviewClickStopBar_1.default, { currentDevice: this.state.currentDevice, currentOrientation: this.state.currentOrientation, devices: this.state.deviceType === DeviceType.Phone ? this.devices.phones : this.devices.tablets, deviceType: this.state.deviceType, onSelectClickStop: this._onClickstopChangeForm });
        var mobilePreviewHeaderBar = React.createElement(MobilePreviewHeaderBar_1.default, { onChangeURL: this._onChangedURLField, onExit: this.props.onExit, onClickURLSubmit: this._onClickURL, onChangeDeviceType: this._onClickChangeDeviceType });
        var mobilePreviewDeviceView = React.createElement(MobilePreviewDeviceView_1.default, { currentDevice: this.state.currentDevice, currentOrientation: this.state.currentOrientation, deviceType: this.state.deviceType, url: this.state.url });
        var mobilePreviewDimensionInput = React.createElement(MobilePreviewDimensionInput_1.default, { currentDevice: this.state.currentDevice, onChangedX: this._onChangedX, onChangedY: this._onChangedY });
        var mobilePreviewRotate = React.createElement(MobilePreviewRotate_1.default, { onRotate: this._onClickRotate, currentOrientation: this.state.currentOrientation });
        var containerClass = office_ui_fabric_react_1.css(MobilePreview_module_scss_1.default.mobilePreviewContainer, 'ms-Grid');
        return (React.createElement("div", { className: containerClass },
            mobilePreviewHeaderBar,
            mobilePreviewClickStopBar,
            React.createElement("div", { className: MobilePreview_module_scss_1.default.mobilePreviewDeviceContainer },
                mobilePreviewDimensionInput,
                mobilePreviewRotate,
                mobilePreviewDeviceView)));
    };
    MobilePreview.prototype._onClickstopChangeForm = function (device) {
        this.setState({
            currentDevice: device,
            currentOrientation: this.state.currentOrientation,
            deviceType: this.state.deviceType,
            url: this.state.url
        });
    };
    MobilePreview.prototype._onClickRotate = function (orientation) {
        this.setState({
            currentDevice: this.state.currentDevice,
            currentOrientation: orientation,
            deviceType: this.state.deviceType,
            url: this.state.url
        });
    };
    MobilePreview.prototype._onClickChangeDeviceType = function (type) {
        this.setState({
            currentDevice: type === DeviceType.Phone ? this.defaultPhone : this.defaultTablet,
            currentOrientation: type === DeviceType.Phone ? DeviceOrientation.Portrait : DeviceOrientation.Landscape,
            deviceType: type,
            url: this.state.url
        });
    };
    MobilePreview.prototype._onChangedX = function (event) {
        var heightTarget = event.target;
        var customDevice = {
            name: 'Custom Device',
            width: +heightTarget.value,
            height: this.state.currentDevice.height
        };
        this.setState({
            currentDevice: customDevice,
            currentOrientation: this.state.currentOrientation,
            deviceType: this.state.deviceType,
            url: this.state.url
        });
    };
    MobilePreview.prototype._onChangedY = function (event) {
        var heightTarget = event.target;
        var customDevice = {
            name: 'Custom Device',
            height: +heightTarget.value,
            width: this.state.currentDevice.width
        };
        this.setState({
            currentDevice: customDevice,
            currentOrientation: this.state.currentOrientation,
            deviceType: this.state.deviceType,
            url: this.state.url
        });
    };
    MobilePreview.prototype._onChangedURLField = function (value) {
        this.inProgressURL = value;
    };
    MobilePreview.prototype._onClickURL = function () {
        if (this.inProgressURL === '' || this.inProgressURL === undefined) {
            return;
        }
        this.setState({
            currentDevice: this.state.currentDevice,
            currentOrientation: this.state.currentOrientation,
            deviceType: this.state.deviceType,
            url: this.inProgressURL
        });
    };
    MobilePreview.prototype._sortDevices = function () {
        if (this.state.deviceType === DeviceType.Phone) {
            this.devices.phones.sort(this._comparePhones);
            this.defaultPhone = this.devices.phones[this.devices.phones.length - 1];
        }
        else {
            this.devices.tablets.sort(this._compareTablets);
            this.defaultTablet = this.devices.tablets[this.devices.tablets.length - 1];
        }
    };
    MobilePreview.prototype._comparePhones = function (deviceA, deviceB) {
        var aMeasure = deviceA.width;
        var bMeasure = deviceB.width;
        if (this.state.currentOrientation === DeviceOrientation.Landscape) {
            aMeasure = deviceA.height;
            bMeasure = deviceB.height;
        }
        return bMeasure - aMeasure;
    };
    MobilePreview.prototype._compareTablets = function (deviceA, deviceB) {
        var aMeasure = deviceA.height;
        var bMeasure = deviceB.height;
        if (this.state.currentOrientation === DeviceOrientation.Landscape) {
            aMeasure = deviceA.width;
            bMeasure = deviceB.width;
        }
        return bMeasure - aMeasure;
    };
    return MobilePreview;
}(React.Component));
__decorate([
    office_ui_fabric_react_1.autobind
], MobilePreview.prototype, "_onClickstopChangeForm", null);
__decorate([
    office_ui_fabric_react_1.autobind
], MobilePreview.prototype, "_onClickRotate", null);
__decorate([
    office_ui_fabric_react_1.autobind
], MobilePreview.prototype, "_onClickChangeDeviceType", null);
__decorate([
    office_ui_fabric_react_1.autobind
], MobilePreview.prototype, "_onChangedX", null);
__decorate([
    office_ui_fabric_react_1.autobind
], MobilePreview.prototype, "_onChangedY", null);
__decorate([
    office_ui_fabric_react_1.autobind
], MobilePreview.prototype, "_onChangedURLField", null);
__decorate([
    office_ui_fabric_react_1.autobind
], MobilePreview.prototype, "_onClickURL", null);
__decorate([
    office_ui_fabric_react_1.autobind
], MobilePreview.prototype, "_sortDevices", null);
__decorate([
    office_ui_fabric_react_1.autobind
], MobilePreview.prototype, "_comparePhones", null);
__decorate([
    office_ui_fabric_react_1.autobind
], MobilePreview.prototype, "_compareTablets", null);
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = MobilePreview;
