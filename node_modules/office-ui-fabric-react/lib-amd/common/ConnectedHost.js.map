{"version":3,"sources":["common/ConnectedHost.tsx"],"names":[],"mappings":"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","file":"common/ConnectedHost.js","sourcesContent":["import * as React from 'react';\r\nimport { ISubscribable } from './ISubscribable';\r\nimport { BaseComponent, autobind, assign, shallowCompare } from '../Utilities';\r\nimport { IStoreKey } from './storeKey';\r\nimport { StoreSet } from './StoreSet';\r\n\r\n// Track all components that require changes.\r\nlet _changedComponents: ConnectedHost[];\r\n\r\nexport interface IConnectedHostProps {\r\n  componentProps: any;\r\n  storesToSubscribe: IStoreKey<any>[];\r\n  component: any;\r\n  getProps: (stores: any, props: any) => any;\r\n}\r\n\r\nexport interface IConnectedHostState {\r\n  props: any;\r\n}\r\n\r\nexport class ConnectedHost extends BaseComponent<IConnectedHostProps, IConnectedHostState> {\r\n  public static contextTypes = {\r\n    stores: React.PropTypes.object\r\n  };\r\n\r\n  public context: {\r\n    stores: StoreSet;\r\n  };\r\n\r\n  private _stores: ISubscribable[];\r\n  private _changeEnqueued: boolean;\r\n  private _isMounted: boolean;\r\n\r\n  constructor(props: IConnectedHostProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      props: null\r\n    };\r\n  }\r\n\r\n  public componentWillMount() {\r\n    if (this.props.storesToSubscribe && this.props.storesToSubscribe.length > 0) {\r\n      if (!this.context.stores) {\r\n        throw `A connected component was hosted in an environment where no stores were hosted. Use the StoreHost to host components.`;\r\n      }\r\n\r\n      // Resolve and subscribe to stores.\r\n      this._stores = this.props.storesToSubscribe.map(storeKey => {\r\n        let store = this.context.stores.getStore(storeKey);\r\n\r\n        if (!store) {\r\n          throw `The \"${storeKey.name}\" store was required by a connected component, but not exposed.`;\r\n        }\r\n        this._disposables.push(store.subscribe(this._onStoreChanged));\r\n\r\n        return store;\r\n      });\r\n    }\r\n\r\n    // We can only initialize state at this point, where context has been resolved.\r\n    this.state = {\r\n      props: this._getComponentProps(this.props)\r\n    };\r\n  }\r\n\r\n  public componentDidMount() {\r\n    this._isMounted = true;\r\n  }\r\n\r\n  public componentWillUnmount() {\r\n    this._isMounted = false;\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps) {\r\n    this._updateProps(newProps);\r\n  }\r\n\r\n  public shouldComponentUpdate(newProps: IConnectedHostProps, newState) {\r\n    let inputPropsHaveChanged = !shallowCompare(this.props.componentProps, newProps.componentProps);\r\n    let computedPropsHaveChanged = !shallowCompare(this.state.props, newState.props);\r\n    let shouldUpdate = inputPropsHaveChanged || computedPropsHaveChanged;\r\n\r\n    return shouldUpdate;\r\n  }\r\n\r\n  public render() {\r\n    let { component: Component } = this.props;\r\n    let { props } = this.state;\r\n\r\n    return props ? <Component { ...props } /> : null;\r\n  }\r\n\r\n  @autobind\r\n  private _onStoreChanged() {\r\n    let { storesToSubscribe } = this.props;\r\n\r\n    if (!storesToSubscribe || storesToSubscribe.length < 2) {\r\n      this._updateProps();\r\n    } else if (!this._changeEnqueued) {\r\n      if (!_changedComponents) {\r\n        _changedComponents = [];\r\n        this._async.setImmediate(() => {\r\n          _changedComponents.forEach(comp => comp._updateProps());\r\n          _changedComponents = null;\r\n        });\r\n      }\r\n      _changedComponents.push(this);\r\n      this._changeEnqueued = true;\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _updateProps(props?: any) {\r\n    this._changeEnqueued = false;\r\n    props = this._getComponentProps(props || this.props);\r\n    this.setState({ props });\r\n  }\r\n\r\n  private _getComponentProps(props: any) {\r\n    let newProps = assign(\r\n      {},\r\n      props.componentProps,\r\n      props.getProps(props.componentProps, ...this._stores));\r\n\r\n    return newProps;\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}