"use strict";
var SPComponentLoaderProxy_1 = require("./SPComponentLoaderProxy");
var ManifestStore_1 = require("./stores/ManifestStore");
var DebugManifestPrompt_1 = require("./DebugManifestPrompt");
var debugManifestsQueryParameterName = 'debugManifests';
var debugManifestsFileQueryParameterName = 'debugManifestsFile';
var sessionStorageKey = 'sp-loader_debugManifests';
var DebugManifestProvider = (function () {
    function DebugManifestProvider() {
    }
    Object.defineProperty(DebugManifestProvider, "instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new DebugManifestProvider();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    DebugManifestProvider.loadDebugManifests = function (alternativeManifestsFiles, noPrompt, noCache, noAlert, registerAsNonDebug) {
        if (noPrompt === void 0) { noPrompt = false; }
        if (noCache === void 0) { noCache = false; }
        if (noAlert === void 0) { noAlert = false; }
        if (registerAsNonDebug === void 0) { registerAsNonDebug = false; }
        if (noPrompt) {
            DebugManifestPrompt_1.default.instance.dangerouslyForce();
        }
        return DebugManifestProvider.instance.getDebugManifests(noCache, alternativeManifestsFiles, noAlert).then(function (debugManifests) {
            if (registerAsNonDebug) {
                var manifests = Object.keys(debugManifests).map(function (id) {
                    return debugManifests[id];
                });
                ManifestStore_1.default.instance.registerManifests(manifests, false);
            }
            else {
                ManifestStore_1.default.instance.registerDebugManifests(debugManifests);
            }
            return DebugManifestPrompt_1.default.instance.ensureDebugAllowed(!!debugManifests && Object.keys(debugManifests).length > 0).then(function (result) {
            });
        });
    };
    DebugManifestProvider.prototype.getDebugManifests = function (noCache, alternativeManifestsFiles, noAlert) {
        var _this = this;
        if (noCache === void 0) { noCache = false; }
        if (noAlert === void 0) { noAlert = false; }
        return new Promise(function (resolve, reject) {
            var localDebugManifests = _this._parseManifestsFromFragementQueryParameter();
            if (window.location.search.match(/\breset\b/)) {
                try {
                    window.sessionStorage.removeItem(sessionStorageKey);
                }
                catch (e) {
                    console.debug("Error clearing session storage. Error: " + e);
                }
                resolve({});
            }
            else {
                var existingManifests_1 = {};
                try {
                    var serializedManifests = window.sessionStorage.getItem(sessionStorageKey);
                    if (serializedManifests) {
                        existingManifests_1 = JSON.parse(serializedManifests) || {};
                    }
                }
                catch (e) {
                    console.debug("Error querying session storage. Error: " + e);
                }
                if (localDebugManifests) {
                    Object.keys(existingManifests_1).forEach(function (existingManifestKey) {
                        if (!localDebugManifests[existingManifestKey]) {
                            localDebugManifests[existingManifestKey] = existingManifests_1[existingManifestKey];
                        }
                    });
                }
                var queryParameterManifestsFile = _this._parseManifestsFileFromFragementQueryParameter(false);
                var manifestsFiles_1 = !!queryParameterManifestsFile ? [queryParameterManifestsFile] : alternativeManifestsFiles;
                if (manifestsFiles_1 && manifestsFiles_1.length > 0 && localDebugManifests) {
                    DebugManifestPrompt_1.default.instance.ensureDebugAllowed(true).then(function (isDebugAllowed) {
                        if (!isDebugAllowed) {
                            _this._resolvePreviousDebugManifests(noCache, localDebugManifests, resolve);
                            return;
                        }
                        var tryGetDebugManifests = function (promise) {
                            return promise.then(function (manifestsScript) {
                                _this._parseManifestsFileFromFragementQueryParameter(true);
                                var manifests = manifestsScript.getManifests();
                                manifests.forEach(function (manifest) {
                                    localDebugManifests[manifest.id] = manifest;
                                });
                                if (!noCache) {
                                    _this._trySetSessionStorageManifests(localDebugManifests);
                                }
                                resolve(localDebugManifests);
                            });
                        };
                        var debugManifestsScriptPromise = tryGetDebugManifests(SPComponentLoaderProxy_1.default.loadScript(manifestsFiles_1[0]));
                        var _loop_1 = function (i) {
                            var oldPromise = debugManifestsScriptPromise;
                            debugManifestsScriptPromise = oldPromise.catch(function () {
                                return tryGetDebugManifests(SPComponentLoaderProxy_1.default.loadScript(manifestsFiles_1[i]));
                            });
                        };
                        for (var i = 1; i < manifestsFiles_1.length; i++) {
                            _loop_1(i);
                        }
                        debugManifestsScriptPromise.catch(function (error) {
                            var errorString = "Error loading debug manifest script. (" + (error.message ? error.message : error) + ") \n\n" +
                                'Ensure loading unsafe scripts is allowed.';
                            if (!noAlert) {
                                alert(errorString);
                            }
                            reject(new Error(errorString));
                        });
                    });
                }
                else {
                    _this._resolvePreviousDebugManifests(noCache, localDebugManifests, resolve);
                }
            }
        });
    };
    DebugManifestProvider.prototype._resolvePreviousDebugManifests = function (noCache, localDebugManifests, resolve) {
        if (!noCache && localDebugManifests) {
            this._trySetSessionStorageManifests(localDebugManifests);
        }
        resolve(localDebugManifests);
    };
    DebugManifestProvider.prototype._trySetSessionStorageManifests = function (localDebugManifests) {
        try {
            window.sessionStorage.setItem(sessionStorageKey, JSON.stringify(localDebugManifests));
        }
        catch (e) {
            console.debug("Error setting session storage. Error: " + e);
        }
    };
    DebugManifestProvider.prototype._parseManifestsFileFromFragementQueryParameter = function (clearParamter) {
        return this._getAndClearFragmentQueryParameter(debugManifestsFileQueryParameterName, clearParamter);
    };
    DebugManifestProvider.prototype._parseManifestsFromFragementQueryParameter = function () {
        var debugManifestsString = this._getAndClearFragmentQueryParameter(debugManifestsQueryParameterName);
        if (debugManifestsString) {
            try {
                return JSON.parse(debugManifestsString);
            }
            catch (e) {
                console.debug("Error parsing manifests query parameter. Error: " + e);
            }
        }
        else {
            return {};
        }
    };
    DebugManifestProvider.prototype._getAndClearFragmentQueryParameter = function (parameter, clearParamter) {
        if (clearParamter === void 0) { clearParamter = true; }
        var result = undefined;
        if (window.location.hash) {
            var fragment = window.location.hash.indexOf('#') === 0
                ? window.location.hash.substr(1)
                : window.location.hash;
            var fragmentQueryParameters = this._parseQueryParameters(fragment);
            if (fragmentQueryParameters &&
                fragmentQueryParameters[parameter]) {
                result = decodeURIComponent(fragmentQueryParameters[parameter]);
                if (clearParamter) {
                    var newFragment = fragment.replace(parameter + "=" + fragmentQueryParameters[parameter], '');
                    if (newFragment !== '') {
                        window.history.replaceState('', document.title, "" + window.location.pathname + window.location.search + "#" + newFragment);
                    }
                    else {
                        window.history.replaceState('', document.title, "" + window.location.pathname + window.location.search);
                    }
                }
            }
        }
        return result;
    };
    DebugManifestProvider.prototype._parseQueryParameters = function (queryParameterString) {
        if (queryParameterString) {
            if (queryParameterString.indexOf('?') === 0) {
                queryParameterString = queryParameterString.substr(1);
            }
            var queryParameters = queryParameterString.split('&');
            var result_1 = {};
            queryParameters.forEach(function (queryParameter) {
                var equalsIndex = queryParameter.indexOf('=');
                if (equalsIndex === -1) {
                    result_1[queryParameter] = '';
                }
                else {
                    result_1[queryParameter.substr(0, equalsIndex)] = queryParameter.substr(equalsIndex + 1);
                }
            });
            return result_1;
        }
        else {
            return undefined;
        }
    };
    return DebugManifestProvider;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = DebugManifestProvider;
