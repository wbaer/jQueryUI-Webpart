{"version":3,"sources":["tasks/BuildReceiptTask.ts"],"names":[],"mappings":"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","file":"tasks/BuildReceiptTask.js","sourcesContent":["import { GulpTask } from './GulpTask';\r\nimport gulp = require('gulp');\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport * as child_process from 'child_process';\r\n\r\nexport interface IBuildReceiptTask {\r\n}\r\n\r\nconst PROCESS_OUTPUT_DELIMITER: string = '///~X~X~X~X~X~X~///';\r\n\r\nlet _lastLocalHashes: { [path: string]: string } = {};\r\n\r\n/**\r\n * This task is responsible for generating a build receipt, which is a hash of filePath to sha1 git hash,\r\n * based on the current folder's content. If a {buildConfig.packagePath}/build.json file exists, it will\r\n * parse it and object compare the computed build receipt with the contents. If everything is the same, it\r\n * will set buildConfig.isRedundantBuild flag to true, which can be used in task isEnabled methods to skip\r\n * unnecessary work.\r\n *\r\n * The utility function \"_getLocalHashes\" will use the git.exe process to get the hashes from the git\r\n * cache. It also asks for git status, which will tell us what has been changed since. It uses this info\r\n * to build the hash.\r\n *\r\n * The utility funciton \"_readPackageHashes\" will read the local build.json file from the packagePath\r\n * folder.\r\n */\r\nexport class CheckBuildReceiptTask extends GulpTask<IBuildReceiptTask> {\r\n  public name: string = 'check-for-changes';\r\n  public executeTask(\r\n    gulp: gulp.Gulp,\r\n    completeCallback: (result?: Object) => void\r\n  ): Promise<Object> | NodeJS.ReadWriteStream | void {\r\n\r\n    _getLocalHashes().then(localHashes => {\r\n      _lastLocalHashes = localHashes;\r\n      _readPackageHashes(path.join(process.cwd(), this.buildConfig.packageFolder, 'build.json')).then(packageHashes => {\r\n        if (packageHashes) {\r\n          if (_areObjectsEqual(localHashes, packageHashes)) {\r\n            this.buildConfig.isRedundantBuild = true;\r\n            this.log('Build is redundant. Skipping steps.');\r\n          } else {\r\n            _areObjectsEqual(localHashes, packageHashes);\r\n            this.log('Build has new content, continuing execution.');\r\n          }\r\n        }\r\n        completeCallback();\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * This task writes _lastFilesHash, generated from the CheckBuildReceipt task, to the package path in the\r\n * build.json file. It should only be executed in a task which runs the CheckBuildReceipt subtask first, and\r\n * should only be run at the end of the task when everything has successfully completed.\r\n */\r\nexport class UpdateBuildReceiptTask extends GulpTask<IBuildReceiptTask> {\r\n  public name: string = 'mark-changes';\r\n  public executeTask(\r\n    gulp: gulp.Gulp,\r\n    completeCallback: (result?: Object) => void\r\n  ): Promise<Object> | NodeJS.ReadWriteStream | void {\r\n\r\n    const packageHashPath: string = path.join(process.cwd(), this.buildConfig.packageFolder, 'build.json');\r\n\r\n    fs.writeFile(packageHashPath, JSON.stringify(_lastLocalHashes, undefined, 2), completeCallback);\r\n  }\r\n}\r\n\r\nfunction _getLocalHashes(): Promise<{ [path: string]: string }> {\r\n  return new Promise((complete) => {\r\n    child_process.exec(\r\n      `git ls-tree HEAD -r && echo ${PROCESS_OUTPUT_DELIMITER} && git status --s -u .`,\r\n      { cwd: process.cwd() },\r\n      (error: Error, stdout: string) => {\r\n        const fileHashes: { [path: string]: string } = {};\r\n        const processOutputBlocks: string[] = stdout.split(PROCESS_OUTPUT_DELIMITER + '\\n');\r\n\r\n        processOutputBlocks[0].split('\\n').forEach(line => {\r\n          if (line) {\r\n            const parts: string[] = line.substr(line.indexOf('blob ') + 5).split('\\t');\r\n            fileHashes[parts[1]] = parts[0];\r\n          }\r\n        });\r\n\r\n      if (processOutputBlocks[1]) {\r\n        const changedFiles: string[] =\r\n          processOutputBlocks[1]\r\n            .split('\\n')\r\n            .map(line => line.trim().split(' ')[1]).filter(name => !!name);\r\n\r\n        if (changedFiles.length) {\r\n          child_process.exec(\r\n            'git hash-object ' + changedFiles.join(' '),\r\n            { cwd: process.cwd() },\r\n            (hashError: Error, hashStdout: string) => {\r\n            const hashes: string[] = hashStdout.split('\\n');\r\n\r\n            changedFiles.forEach((filename, i) => fileHashes[filename] = hashes[i]);\r\n\r\n            complete(fileHashes);\r\n          });\r\n        }\r\n      } else {\r\n        complete(fileHashes);\r\n      }\r\n    });\r\n\r\n  });\r\n}\r\n\r\nfunction _readPackageHashes(receiptPath: string): Promise<{ [path: string]: string }> {\r\n  return new Promise((complete) => {\r\n    fs.readFile(receiptPath, 'utf8', (err, data) => {\r\n      complete(err ? undefined : JSON.parse(data));\r\n    });\r\n  });\r\n}\r\n\r\nfunction _areObjectsEqual(obj1: Object, obj2: Object): boolean {\r\n  const obj1Keys: string[] = Object.keys(obj1);\r\n  const obj2Keys: string[] = Object.keys(obj2);\r\n\r\n  if (obj1Keys.length === obj2Keys.length) {\r\n    for (const key of obj1Keys) {\r\n      if (obj1[key] !== obj2[key]) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n"],"sourceRoot":"..\\..\\src"}