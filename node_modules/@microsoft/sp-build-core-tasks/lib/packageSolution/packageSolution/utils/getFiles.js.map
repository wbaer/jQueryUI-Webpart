{"version":3,"sources":["packageSolution/packageSolution/utils/getFiles.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAEH,+BAAkC;AAClC,2BAA8B;AAC9B,uBAA0B;AAC1B,2BAA6B;AAC7B,8DAAiD;AAIjD,mDAAmD;AACnD,kBAAyB,GAAW,EAAE,KAAa,EAAE,YAAqC;IAArC,6BAAA,EAAA,6BAAqC;IACxF,MAAM,CAAC,IAAI,OAAO,CAAS,UAAC,QAAiC,EAAE,MAA8B;QAC3F,IAAI,CAAC,KAAK,EAAE;YACV,GAAG,EAAE,GAAG;SACT,EAAE,UAAC,KAAY,EAAE,KAAe;YAC7B,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACV,MAAM,CAAC,KAAK,CAAC,CAAC;YAChB,CAAC;YACD,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAE,UAAC,QAAgB;gBACnC,qBAAG,CAAC,YAAY,GAAG,QAAQ,CAAC,CAAC;gBAC7B,MAAM,CAAC;oBACL,QAAQ,EAAE,QAAQ;oBAClB,GAAG,EAAE,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,EAAE;wBAC7C,QAAQ,EAAE,OAAO;qBAClB,CAAC;iBACH,CAAC;YACJ,CAAC,CAAC,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACL,CAAC;AAnBD,4BAmBC;AAED,8DAA8D;AAC9D,8BAAqC,GAAW,EAAE,KAAa,EAAE,YAAqC;IAArC,6BAAA,EAAA,6BAAqC;IAEpG,MAAM,CAAC,IAAI,OAAO,CAAW,UAAC,QAAmC,EAAE,MAA8B;QAC/F,IAAI,CAAC,KAAK,EAAE;YACV,GAAG,EAAE,GAAG;SACT,EAAE,UAAC,KAAY,EAAE,KAAe;YAC/B,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACV,MAAM,CAAC,KAAK,CAAC,CAAC;YAChB,CAAC;YACD,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,UAAC,QAAgB;gBAClC,QAAQ,GAAG,QAAQ,CAAC;gBACpB,qBAAG,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,CAAC,CAAC;gBAC1C,MAAM,CAAC,QAAQ,CAAC;YAClB,CAAC,CAAC,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AAhBD,oDAgBC","file":"packageSolution/packageSolution/utils/getFiles.js","sourcesContent":["/**\r\n * @file getFiles.ts\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n *\r\n * Reads relative file paths given a working directory and a glob.\r\n * Relative paths are generated by removing a certain\r\n */\r\n\r\nimport colors = require('colors');\r\nimport glob = require('glob');\r\nimport fs = require('fs');\r\nimport * as path from 'path';\r\nimport { log } from '@microsoft/gulp-core-build';\r\n\r\nimport IXml from '../models/packageXml/IXml';\r\n\r\n/** Loads a directory of files into IXml objects */\r\nexport function getFiles(cwd: string, globs: string, foundMessage: string = 'Found file: '): Promise<IXml[]> {\r\n  return new Promise<IXml[]>((complete: (files: IXml[]) => void, reject: (error: Error) => void) => {\r\n    glob(globs, {\r\n      cwd: cwd\r\n    }, (error: Error, files: string[]) => {\r\n        if (error) {\r\n          reject(error);\r\n        }\r\n        complete(files.map( (filename: string): IXml => {\r\n          log(foundMessage + filename);\r\n          return {\r\n            filename: filename,\r\n            xml: fs.readFileSync(path.join(cwd, filename), {\r\n              encoding: 'utf-8'\r\n            })\r\n          };\r\n        }));\r\n      });\r\n  });\r\n}\r\n\r\n/** Reads the list of relative path from a specified folder */\r\nexport function getRelativeFilePaths(cwd: string, globs: string, foundMessage: string = 'Found file: '):\r\n  Promise<string[]> {\r\n  return new Promise<string[]>((complete: (files: string[]) => void, reject: (error: Error) => void) => {\r\n    glob(globs, {\r\n      cwd: cwd\r\n    }, (error: Error, files: string[]) => {\r\n      if (error) {\r\n        reject(error);\r\n      }\r\n      complete(files.map((filename: string) => {\r\n        filename = filename;\r\n        log(colors.cyan(foundMessage + filename));\r\n        return filename;\r\n      }));\r\n    });\r\n  });\r\n}"],"sourceRoot":"..\\..\\..\\..\\src"}