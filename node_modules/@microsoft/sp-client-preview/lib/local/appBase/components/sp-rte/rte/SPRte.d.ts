/// <reference types="es6-promise" />
/**
 * @copyright Microsoft Corporation. All rights reserved.
 */
import * as React from 'react';
import ICanvasControl from '../../sp-canvas/canvas/canvasControl/ICanvasControl';
import { ICanvasContext } from '../../sp-canvas/canvas/canvasComponent/ICanvasComponent';
import { BaseRte, IBaseRteProps, IBaseRteState } from './BaseRte';
import { ISPRteFormattingBarPosition } from '../formattingbar/SPRteFormattingBar';
import { IRichTextEditor } from './IRichTextEditor';
export interface ISPRteProps extends IBaseRteProps, ICanvasControl {
}
export interface ISPRteState extends IBaseRteState {
}
/**
 * @class TextWebPart class. This component is used as a canvas control.
 */
export default class SPRte extends BaseRte<ISPRteProps, ISPRteState> {
    static contextTypes: React.ValidationMap<{}>;
    /**
     * @ readOnly
     */
    private static _TOOLBAR_DEFAULT_POSITION;
    /**
     * @ readOnly
     *
     * The scrollOffset that works for a full-height canvas
     */
    private static _BASE_SCROLL_THRESHOLD;
    /**
     * @ readOnly
     */
    private static _CONTROLZONE_PADDING_HORIZONTAL;
    private static _LINE_HEIGHT;
    protected readonly TAG_NAME: string;
    context: ICanvasContext;
    private _currentScrollTop;
    private _restoreScrollTopOnNextFocus;
    private _isPasting;
    constructor(props: ISPRteProps);
    protected _createNewEditor(innerHTML: string, startupFocus?: boolean): Promise<IRichTextEditor>;
    protected _onImagePaste(isImageValid: boolean, imageBlob?: Blob, innerHTML?: string): void;
    private static readonly _IS_CKEDITOR_FLIGHTED;
    componentDidMount(): void;
    componentDidUpdate(prevProps: ISPRteProps, prevState: ISPRteState): void;
    protected _closeLinkDialog(): void;
    protected _openLinkDialog(defaultAddress?: string): void;
    protected _restoreOnFocus(): boolean;
    focus(): void;
    protected _handleTextChange(): void;
    /**
     * Hide/Show the formatting bar and update the formatting bar position if needed.
     * If the editor is not focused, hide the formatting bar
     * If the selection is collapsed the formatting bar will render in a static location
     * If the selection is not collapsed the formatting bar will appear near the selection
     */
    protected _updateFormattingBar(isHidden: boolean): void;
    protected _onBeforePaste(): void;
    protected _handleScroll(): void;
    protected _getFormattingBarPosition(): ISPRteFormattingBarPosition;
    private _onAfterPaste();
    private _shouldFormattingBarStick();
    private _isRTEInLastColumn();
    private _createImageWebPartAndSplitRTE(innerHTML, imageSource, position, id);
    private _addRTEAndImageWebPartWithLayout(position, itemPropsRTE, itemPropsImageWebPart);
    private _addRTEAndImageWebPartWithoutLayout(id, itemPropsRTE, itemPropsImageWebPart);
}
