{"version":3,"sources":["gulp2vs.ts"],"names":[],"mappings":"AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,6CAA+C;AAC/C,uBAAyB;AAGzB,8DAAsE;AACtE,gEAAmF;AACnF,kEAAoE;AAEpE,OAAO,CAAC,GAAG,CAAC,uBAAuB,GAAG,OAAO,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC;AAE3D,IAAM,aAAa,GAAkB,IAAI,uBAAa,CAAC;IACrD,mBAAmB,CAAC,eAAe;IACnC,mBAAmB,CAAC,mBAAmB;CACxC,CAAC,CAAC;AAEH,IAAM,MAAM,GAAgB,6BAAW,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;AAEhE,IAAM,UAAU,GAA+B,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAE1E,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,UAAC,IAAY;IACxC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC;AAEH,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,UAAC,IAAY;IACxC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC;AAEH,UAAU,CAAC,EAAE,CAAC,MAAM,EAAE,UAAC,IAAY;IACjC,IAAM,MAAM,GAAgB,aAAa,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC,CAAC;IAEzE,GAAG,CAAC,CAAC,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QAC/C,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,kCAAkB,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;IAClF,CAAC;IAED,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;IACnC,MAAM,CAAC,KAAK,EAAE,CAAC;IACf,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;QAClB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC;AACH,CAAC,CAAC,CAAC","file":"gulp2vs.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as child_process from 'child_process';\r\nimport * as os from 'os';\r\n\r\nimport TaskError from './errorDetection/TaskError';\r\nimport { Interleaver, ITaskWriter } from '@microsoft/stream-collator';\r\nimport ErrorDetector, { ErrorDetectionMode } from './errorDetection/ErrorDetector';\r\nimport * as ErrorDetectionRules from './errorDetection/rules/index';\r\n\r\nconsole.log('gulp2vs: Running in \"' + process.cwd() + '\"');\r\n\r\nconst errorDetector: ErrorDetector = new ErrorDetector([\r\n  ErrorDetectionRules.TsErrorDetector,\r\n  ErrorDetectionRules.TsLintErrorDetector\r\n]);\r\n\r\nconst writer: ITaskWriter = Interleaver.registerTask('vs gulp');\r\n\r\nconst gulpBundle: child_process.ChildProcess = child_process.exec('gulp');\r\n\r\ngulpBundle.stdout.on('data', (data: string) => {\r\n  writer.write(data);\r\n});\r\n\r\ngulpBundle.stderr.on('data', (data: string) => {\r\n  writer.writeError(data);\r\n});\r\n\r\ngulpBundle.on('exit', (code: number) => {\r\n  const errors: TaskError[] = errorDetector.execute(writer.getStdOutput());\r\n\r\n  for (let i: number = 0; i < errors.length; i++) {\r\n    writer.writeError(errors[i].toString(ErrorDetectionMode.VisualStudio) + os.EOL);\r\n  }\r\n\r\n  writer.writeLine('gulp2vs: Done.');\r\n  writer.close();\r\n  if (errors.length) {\r\n    process.exit(1);\r\n  }\r\n});\r\n"],"sourceRoot":"..\\src"}