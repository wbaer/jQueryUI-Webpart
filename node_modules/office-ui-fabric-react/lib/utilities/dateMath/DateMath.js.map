{"version":3,"sources":["utilities/dateMath/DateMath.ts"],"names":[],"mappings":";AAAA,IAAM,YAAY,GAAG,CAAC,CAAC;AACvB,IAAM,cAAc,GAAG,EAAE,CAAC;AAE1B;;;;;GAKG;AACH,iBAAwB,IAAU,EAAE,IAAY;IAC9C,IAAI,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IACtC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;IACxC,MAAM,CAAC,MAAM,CAAC;AAChB,CAAC;AAJD,0BAIC;AAED;;;;;GAKG;AACH,kBAAyB,IAAU,EAAE,KAAa;IAChD,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,GAAG,YAAY,CAAC,CAAC;AAC7C,CAAC;AAFD,4BAEC;AAED;;;;;;;GAOG;AACH,mBAA0B,IAAU,EAAE,MAAc;IAClD,IAAI,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IACtC,IAAI,QAAQ,GAAG,MAAM,CAAC,QAAQ,EAAE,GAAG,MAAM,CAAC;IAC1C,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAE1B,qHAAqH;IACrH,oDAAoD;IACpD,qFAAqF;IACrF,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,QAAQ,GAAG,cAAc,CAAC,GAAG,cAAc,CAAC,GAAG,cAAc,CAAC,CAAC,CAAC;QAC1F,MAAM,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC;IAC9C,CAAC;IACD,MAAM,CAAC,MAAM,CAAC;AAChB,CAAC;AAZD,8BAYC;AAED;;;;;;;GAOG;AACH,kBAAyB,IAAU,EAAE,KAAa;IAChD,IAAI,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IACtC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,GAAG,KAAK,CAAC,CAAC;IAE/C,qHAAqH;IACrH,oDAAoD;IACpD,qFAAqF;IACrF,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,cAAc,CAAC,GAAG,cAAc,CAAC,GAAG,cAAc,CAAC,CAAC,CAAC;QACjG,MAAM,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC;IAC9C,CAAC;IACD,MAAM,CAAC,MAAM,CAAC;AAChB,CAAC;AAXD,4BAWC;AAED;;;;;;;GAOG;AACH,kBAAyB,IAAU,EAAE,KAAa;IAChD,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;AAClD,CAAC;AAFD,4BAEC;AAED;;;GAGG;AACH,sBAA6B,KAAW,EAAE,KAAW;IACnD,MAAM,CAAC,CAAC,KAAK,CAAC,WAAW,EAAE,KAAK,KAAK,CAAC,WAAW,EAAE;WAC9C,KAAK,CAAC,QAAQ,EAAE,KAAK,KAAK,CAAC,QAAQ,EAAE;WACrC,KAAK,CAAC,OAAO,EAAE,KAAK,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;AAC5C,CAAC;AAJD,oCAIC","file":"utilities/dateMath/DateMath.js","sourcesContent":["const DAYS_IN_WEEK = 7;\r\nconst MONTHS_IN_YEAR = 12;\r\n\r\n/**\r\n * Returns a date offset from the given date by the specified number of days.\r\n * @param {Date} date - The origin date\r\n * @param {number} days - The number of days to offset. 'days' can be negative.\r\n * @return {Date} A new Date object offset from the origin date by the given number of days\r\n */\r\nexport function addDays(date: Date, days: number): Date {\r\n  let result = new Date(date.getTime());\r\n  result.setDate(result.getDate() + days);\r\n  return result;\r\n}\r\n\r\n/**\r\n * Returns a date offset from the given date by the specified number of weeks.\r\n * @param {Date} date - The origin date\r\n * @param {number} weeks - The number of weeks to offset. 'weeks' can be negative.\r\n * @return {Date} A new Date object offset from the origin date by the given number of weeks\r\n */\r\nexport function addWeeks(date: Date, weeks: number): Date {\r\n  return addDays(date, weeks * DAYS_IN_WEEK);\r\n}\r\n\r\n/**\r\n * Returns a date offset from the given date by the specified number of months.\r\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\r\n * to contain the original day-of-month, we'll use the last day of the new month.\r\n * @param {Date} date - The origin date\r\n * @param {number} months - The number of months to offset. 'months' can be negative.\r\n * @return {Date} A new Date object offset from the origin date by the given number of months\r\n */\r\nexport function addMonths(date: Date, months: number): Date {\r\n  let result = new Date(date.getTime());\r\n  let newMonth = result.getMonth() + months;\r\n  result.setMonth(newMonth);\r\n\r\n  // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\r\n  // Loop until we back up to a day the new month has.\r\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\r\n  if (result.getMonth() !== ((newMonth % MONTHS_IN_YEAR) + MONTHS_IN_YEAR) % MONTHS_IN_YEAR) {\r\n    result = addDays(result, -result.getDate());\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Returns a date offset from the given date by the specified number of years.\r\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\r\n * to contain the original day-of-month, we'll use the last day of the new month.\r\n * @param {Date} date - The origin date\r\n * @param {number} years - The number of years to offset. 'years' can be negative.\r\n * @return {Date} A new Date object offset from the origin date by the given number of years\r\n */\r\nexport function addYears(date: Date, years: number): Date {\r\n  let result = new Date(date.getTime());\r\n  result.setFullYear(date.getFullYear() + years);\r\n\r\n  // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\r\n  // Loop until we back up to a day the new month has.\r\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\r\n  if (result.getMonth() !== ((date.getMonth() % MONTHS_IN_YEAR) + MONTHS_IN_YEAR) % MONTHS_IN_YEAR) {\r\n    result = addDays(result, -result.getDate());\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Returns a date that is a copy of the given date, aside from the month changing to the given month.\r\n *  The method tries to preserve the day-of-month; however, if the new month does not have enough days\r\n * to contain the original day-of-month, we'll use the last day of the new month.\r\n * @param {Date} date - The origin date\r\n * @param {number} month - The 0-based index of the month to set on the date.\r\n * @return {Date} A new Date object with the given month set.\r\n */\r\nexport function setMonth(date: Date, month: number): Date {\r\n  return addMonths(date, month - date.getMonth());\r\n}\r\n\r\n/**\r\n * Compares two dates, and returns true if the two dates (not accounting for time-of-day) are equal.\r\n * @return {boolean} True if the two dates represent the same date (regardless of time-of-day), false otherwise.\r\n */\r\nexport function compareDates(date1: Date, date2: Date): boolean {\r\n  return (date1.getFullYear() === date2.getFullYear()\r\n    && date1.getMonth() === date2.getMonth()\r\n    && date1.getDate() === date2.getDate());\r\n}"],"sourceRoot":"..\\..\\..\\src"}