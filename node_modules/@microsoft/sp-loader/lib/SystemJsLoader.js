"use strict";
var ManifestStore_1 = require("./stores/ManifestStore");
var AddressStore_1 = require("./stores/AddressStore");
var resolveAddress_1 = require("./resolveAddress");
var normalizeName_1 = require("./normalizeName");
var SPLoader_resx_1 = require("./SPLoader.resx");
var SystemJsLoader = (function () {
    function SystemJsLoader() {
        this._configuredFailoverPaths = [];
    }
    Object.defineProperty(SystemJsLoader, "instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new SystemJsLoader();
                this._instance._initialize();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    SystemJsLoader.prototype.ensure = function (name, module) {
        var system = this._system;
        if (!system.has(name)) {
            system.set(name, system.newModule(module));
        }
    };
    SystemJsLoader.prototype.systemConfig = function (config) {
        this._originalSystemConfig.call(this._system, config);
    };
    SystemJsLoader.prototype.systemImport = function (name) {
        return this._system.import(name);
    };
    SystemJsLoader.prototype.systemDelete = function (manifest) {
        this._system.delete(normalizeName_1.default(manifest));
    };
    SystemJsLoader.prototype.configure = function (manifest) {
        var resources = manifest.loaderConfig.scriptResources;
        var depsMap = {};
        var globalDepsMap = {};
        for (var name_1 in resources) {
            if (resources[name_1].type === 'component') {
                var moduleConfiguration = resources[name_1];
                var resourceManifest = ManifestStore_1.default.instance.tryGetManifest(moduleConfiguration.id, moduleConfiguration.version);
                if (resourceManifest) {
                    depsMap[name_1] = normalizeName_1.default(resourceManifest);
                }
                if (moduleConfiguration.failoverPath) {
                    if (this._configuredFailoverPaths.indexOf(name_1) === -1) {
                        var normalizedName = normalizeName_1.normalizeFailoverPathName(name_1);
                        AddressStore_1.default.instance.set(normalizedName, resolveAddress_1.default(manifest, name_1));
                        globalDepsMap[name_1] = normalizedName;
                        this._configuredFailoverPaths.push(name_1);
                    }
                }
            }
            else {
                var normalizedName = void 0;
                if (name_1 === manifest.loaderConfig.entryModuleId) {
                    normalizedName = normalizeName_1.default(manifest);
                }
                else {
                    normalizedName = normalizeName_1.default(manifest, name_1);
                    depsMap[name_1] = normalizedName;
                }
                AddressStore_1.default.instance.set(normalizedName, resolveAddress_1.default(manifest, name_1));
                var resource = resources[name_1];
                if (resource && resource.globalName) {
                    var meta = {};
                    meta[normalizedName] = {
                        format: 'global',
                        exports: resource.globalName
                    };
                    var globalConfig = {
                        meta: meta
                    };
                    this.systemConfig(globalConfig);
                }
            }
        }
        var packages = {};
        packages[normalizeName_1.default(manifest)] = {
            map: depsMap,
            defaultExtension: false
        };
        var config = {
            packages: packages
        };
        this.systemConfig(config);
        if (Object.keys(globalDepsMap).length) {
            this.systemConfig({
                map: globalDepsMap
            });
        }
    };
    SystemJsLoader.prototype._initialize = function () {
        this._system = require('raw-script!systemjs/dist/system');
        this._originalSystemConfig = this._system.config;
        this._system.config = function (config) {
            throw new Error(SPLoader_resx_1.default.systemConfigDisabledError);
        };
        var pluginName = 'sp-loader-resolver';
        var loader = {
            locate: function (module) {
                var address = AddressStore_1.default.instance.get(module.name);
                if (address) {
                    return address;
                }
                else {
                    console.log('Address not found for module name: ' + module.name + '. Using it as absolute URL.');
                    return module.name;
                }
            }
        };
        var systemConfig = {
            baseURL: SystemJsLoader._invalidBaseUrl,
            defaultJsExtensions: false,
            meta: {
                '*': {
                    loader: pluginName,
                    scriptLoad: true
                }
            }
        };
        this._system.set(pluginName, this._system.newModule(loader));
        this.systemConfig(systemConfig);
    };
    return SystemJsLoader;
}());
SystemJsLoader._invalidBaseUrl = 'https://relative-path.invalid/';
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SystemJsLoader;
