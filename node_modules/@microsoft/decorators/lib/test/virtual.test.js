"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var chai_1 = require("chai");
var virtual_1 = require("../virtual");
var override_1 = require("../override");
describe('@virtual tests', function () {
    describe('Main scenario', function () {
        it('valid usage', function () {
            var BaseClass = (function () {
                function BaseClass() {
                }
                BaseClass.prototype.test = function () {
                };
                BaseClass.prototype.test2 = function () {
                };
                BaseClass.prototype.test3 = function () {
                };
                return BaseClass;
            }());
            __decorate([
                virtual_1.virtual
            ], BaseClass.prototype, "test", null);
            __decorate([
                virtual_1.virtual
            ], BaseClass.prototype, "test3", null);
            var ChildClass = (function (_super) {
                __extends(ChildClass, _super);
                function ChildClass() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                ChildClass.prototype.test = function () {
                    _super.prototype.test.call(this);
                };
                ChildClass.prototype.test2 = function () {
                    _super.prototype.test2.call(this);
                };
                ChildClass.prototype.test4 = function () {
                };
                return ChildClass;
            }(BaseClass));
            __decorate([
                override_1.override
            ], ChildClass.prototype, "test", null);
            __decorate([
                override_1.override
            ], ChildClass.prototype, "test2", null);
            __decorate([
                override_1.override
            ], ChildClass.prototype, "test4", null);
            chai_1.assert(true);
        });
    });
});
