// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
"use strict";
var fsx = require("fs-extra");
var path = require("path");
var os = require("os");
var Validator = require("z-schema");
var JsonFile_1 = require("../utilities/JsonFile");
var Utilities_1 = require("../utilities/Utilities");
var PackageReviewItem = (function () {
    function PackageReviewItem() {
        this.allowedCategories = new Set();
    }
    return PackageReviewItem;
}());
exports.PackageReviewItem = PackageReviewItem;
/**
 * This represents the JSON file specified via the "packageReviewFile" option in rush.json.
 */
var PackageReviewConfiguration = (function () {
    /**
     * DO NOT CALL -- Use PackageReviewFile.loadFromFile() instead.
     */
    function PackageReviewConfiguration(packageReviewJson, jsonFilename) {
        this.items = [];
        this._itemsByName = new Map();
        this._ignoredNpmScopes = new Set();
        this._loadedJson = packageReviewJson;
        this._ignoredNpmScopes.clear();
        if (packageReviewJson.settings) {
            if (packageReviewJson.settings.ignoredNpmScopes) {
                for (var _i = 0, _a = packageReviewJson.settings.ignoredNpmScopes; _i < _a.length; _i++) {
                    var ignoredNpmScope = _a[_i];
                    this._ignoredNpmScopes.add(ignoredNpmScope);
                }
            }
        }
        for (var _b = 0, _c = packageReviewJson.browserPackages; _b < _c.length; _b++) {
            var browserPackage = _c[_b];
            this._addItemJson(browserPackage, jsonFilename, true);
        }
        for (var _d = 0, _e = packageReviewJson.nonBrowserPackages; _d < _e.length; _d++) {
            var nonBrowserPackage = _e[_d];
            this._addItemJson(nonBrowserPackage, jsonFilename, false);
        }
    }
    /**
     * Loads the configuration data from PackageDependencies.json and returns
     * an PackageReviewFile object.
     */
    PackageReviewConfiguration.loadFromFile = function (jsonFilename) {
        var packageReviewJson = JsonFile_1.default.loadJsonFile(jsonFilename);
        // Remove the $schema reference that appears in the configuration object (used for IntelliSense),
        // since we are replacing it with the precompiled version.  The validator.setRemoteReference()
        // API is a better way to handle this, but we'd first need to publish the schema file
        // to a public web server where Visual Studio can find it.
        delete packageReviewJson.$schema;
        var validator = new Validator({
            breakOnFirstError: true,
            noTypeless: true
        });
        var packageReviewSchema = JsonFile_1.default.loadJsonFile(path.join(__dirname, '../packagereview-schema.json'));
        if (!validator.validate(packageReviewJson, packageReviewSchema)) {
            var error = validator.getLastError();
            var detail = error.details[0];
            var errorMessage = "Error parsing file '" + path.basename(jsonFilename) + "',"
                + ("section[" + detail.path + "]:" + os.EOL + "(" + detail.code + ") " + detail.message);
            console.log(os.EOL + 'ERROR: ' + errorMessage + os.EOL + os.EOL);
            throw new Error(errorMessage);
        }
        return new PackageReviewConfiguration(packageReviewJson, jsonFilename);
    };
    Object.defineProperty(PackageReviewConfiguration.prototype, "ignoredNpmScopes", {
        /**
         * A list of NPM package scopes that will be excluded from review (e.g. \"@types\")
         */
        get: function () {
            return this._ignoredNpmScopes;
        },
        enumerable: true,
        configurable: true
    });
    PackageReviewConfiguration.prototype.getItemByName = function (packageName) {
        return this._itemsByName.get(packageName);
    };
    PackageReviewConfiguration.prototype.addOrUpdatePackage = function (packageName, allowedInBrowser, reviewCategory) {
        var item = this._itemsByName.get(packageName);
        if (!item) {
            item = new PackageReviewItem();
            item.packageName = packageName;
            item.allowedInBrowser = false;
            this._addItem(item);
        }
        // Broaden (but do not narrow) the approval
        if (allowedInBrowser) {
            item.allowedInBrowser = true;
        }
        if (reviewCategory) {
            item.allowedCategories.add(reviewCategory);
        }
    };
    PackageReviewConfiguration.prototype.saveFile = function (jsonFilename) {
        // Update the JSON structure that we already loaded, preserving any existing state
        // (which passed schema validation).
        // Only write settings if was there before, or if we have some settings
        var writeSettings = this._loadedJson.settings !== undefined
            || this._ignoredNpmScopes.size > 0;
        if (writeSettings) {
            if (!this._loadedJson.settings) {
                this._loadedJson.settings = {};
            }
            this._loadedJson.settings.ignoredNpmScopes = Utilities_1.default.getSetAsArray(this._ignoredNpmScopes)
                .sort();
        }
        this._loadedJson.browserPackages = [];
        this._loadedJson.nonBrowserPackages = [];
        this.items.sort(function (a, b) {
            return a.packageName.localeCompare(b.packageName);
        });
        for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
            var item = _a[_i];
            // Sort the items from the set.  Too bad we can't use the new Array.from().
            var allowedCategories = Utilities_1.default.getSetAsArray(item.allowedCategories);
            allowedCategories.sort();
            var itemJson = {
                name: item.packageName,
                allowedCategories: allowedCategories
            };
            if (item.allowedInBrowser) {
                this._loadedJson.browserPackages.push(itemJson);
            }
            else {
                this._loadedJson.nonBrowserPackages.push(itemJson);
            }
        }
        // Save the file
        var body = JSON.stringify(this._loadedJson, undefined, 2) + '\n';
        // Unindent the allowedCategories array to improve readability
        body = body.replace(/("allowedCategories": +\[)([^\]]+)/g, function (substring) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            return args[0] + args[1].replace(/\s+/g, ' ');
        });
        // Add a header
        body = '// DO NOT ADD COMMENTS IN THIS FILE.'
            + '  They will be lost when the Rush tool resaves it.\n' + body;
        body = Utilities_1.default.getAllReplaced(body, '\n', '\r\n');
        fsx.writeFileSync(jsonFilename, body);
    };
    /**
     * Helper function only used by the constructor when loading the file.
     */
    PackageReviewConfiguration.prototype._addItemJson = function (itemJson, jsonFilename, allowedInBrowser) {
        if (this._itemsByName.has(itemJson.name)) {
            throw new Error("Error loading package review file " + jsonFilename + ":" + os.EOL
                + (" the name \"" + itemJson.name + "\" appears more than once"));
        }
        var item = new PackageReviewItem();
        item.packageName = itemJson.name;
        item.allowedInBrowser = allowedInBrowser;
        if (itemJson.allowedCategories) {
            for (var _i = 0, _a = itemJson.allowedCategories; _i < _a.length; _i++) {
                var allowedCategory = _a[_i];
                item.allowedCategories.add(allowedCategory);
            }
        }
        this._addItem(item);
    };
    /**
     * Helper function that adds an already created PackageReviewItem to the
     * list and set.
     */
    PackageReviewConfiguration.prototype._addItem = function (item) {
        if (this._itemsByName.has(item.packageName)) {
            throw new Error('Duplicate key'); // this is a program bug
        }
        this.items.push(item);
        this._itemsByName.set(item.packageName, item);
    };
    return PackageReviewConfiguration;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = PackageReviewConfiguration;

//# sourceMappingURL=PackageReviewConfiguration.js.map
