// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
"use strict";
var Utilities_1 = require("./Utilities");
var StopwatchState;
(function (StopwatchState) {
    StopwatchState[StopwatchState["Stopped"] = 1] = "Stopped";
    StopwatchState[StopwatchState["Started"] = 2] = "Started";
})(StopwatchState = exports.StopwatchState || (exports.StopwatchState = {}));
/**
 * Represents a typical timer/stopwatch which keeps track
 * of elapsed time in between two events.
 */
var Stopwatch = (function () {
    function Stopwatch(getTime) {
        if (getTime === void 0) { getTime = Utilities_1.default.getTimeInMs; }
        this._startTime = undefined;
        this._endTime = undefined;
        this._getTime = getTime;
        this._state = StopwatchState.Stopped;
    }
    /**
     * Static helper function which creates a stopwatch which is immediately started
     */
    Stopwatch.start = function () {
        return new Stopwatch().start();
    };
    Object.defineProperty(Stopwatch.prototype, "state", {
        get: function () {
            return this._state;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Starts the stopwatch. Note that if end() has been called,
     * reset() should be called before calling start() again.
     */
    Stopwatch.prototype.start = function () {
        if (this._startTime !== undefined) {
            throw new Error('Call reset() before starting the Stopwatch');
        }
        this._startTime = this._getTime();
        this._endTime = undefined;
        this._state = StopwatchState.Started;
        return this;
    };
    /**
     * Stops executing the stopwatch and saves the current timestamp
     */
    Stopwatch.prototype.stop = function () {
        this._endTime = (this._startTime !== undefined ? this._getTime() : undefined);
        this._state = StopwatchState.Stopped;
        return this;
    };
    /**
     * Resets all values of the stopwatch back to the original
     */
    Stopwatch.prototype.reset = function () {
        this._endTime = this._startTime = undefined;
        this._state = StopwatchState.Stopped;
        return this;
    };
    /**
     * Displays how long the stopwatch has been executing in a human readable format.
     */
    Stopwatch.prototype.toString = function () {
        if (this._state === StopwatchState.Stopped && this._startTime === undefined) {
            return '0.00 seconds (stopped)';
        }
        var curTime = this._endTime !== undefined
            ? this._endTime
            : this._getTime();
        var totalSeconds = ((curTime - this._startTime) / 1000.0);
        if (totalSeconds > 60) {
            var minutes = Math.floor(totalSeconds / 60);
            var seconds = totalSeconds % 60.0;
            return minutes.toFixed(0) + " minute" + (minutes === 1 ? '' : 's') +
                (" " + seconds.toFixed(1) + " seconds");
        }
        else {
            return totalSeconds.toFixed(2) + " seconds";
        }
    };
    return Stopwatch;
}());
exports.Stopwatch = Stopwatch;

//# sourceMappingURL=Stopwatch.js.map
