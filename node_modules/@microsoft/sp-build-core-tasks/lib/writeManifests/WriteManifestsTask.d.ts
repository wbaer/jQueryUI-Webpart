/// <reference types="node" />
import * as gulp from 'gulp';
import OdspGulpTask from './../OdspGulpTask';
import { ICumulativeManifestOptions } from './cumulativeManifest/cumulativeManifestProcessor';
export interface IWriteManifestsTaskConfig {
    /**
     * The deploy CDN path.
     */
    deployCdnPath?: string;
    /**
     * A prefix to prepend to all assets' URLs. For example, if this value is "foobar", a resulting CDN path for an asset
     *  called "baz.js" will be "foobar/baz.js"
     */
    cdnUrlPrefix?: string;
    /**
     * The CDN base path. This value will populate the "internalModuleBaseUrls" CDN manifest property.
     */
    cdnBasePath?: string;
    /**
     * The debug base path, which is the value that will populate the "internalModuleBaseUrls" manifest property for
     *  debug manifests.
     */
    debugBasePath?: string;
    /**
     * If specified, only use this locale in the debug manifest.
     */
    debugLocale?: string;
    /**
     * Options for the cumulative manifest files to be dropped in the dist folder. If this field is null, cumulative
     *  files will not be produced.
     */
    cumulativeManifestOptions?: ICumulativeManifestOptions;
    /**
     * Defaults to true. If true, wrap the manifest in the Manifest Server format.
     * This should be true for all 1st party builds.
     */
    shouldWrapProductionManifestForManifestServer?: boolean;
}
/**
 * Writes a manifest for each entry in the project.
 *
 * Example:
 *  IN:
 *   the result of the prepareDeploy step enumerating each entry, each entry's dependencies, and a developer-generated
 *    base manifest for each entry.
 *
 *  OUT:
 *   a debug and, optionally, a production manifest for each entry.
 */
export declare class WriteManifestsTask extends OdspGulpTask<IWriteManifestsTaskConfig> {
    name: string;
    taskConfig: IWriteManifestsTaskConfig;
    private _localizedResourcesCache;
    loadSchema(): Object;
    /**
     * Normalizes a locale name. So "en-us" becomes "en-US" and "sr-cyrl-rs" becomes "sr-Cyrl-RS". There are two special
     *  cases. For pseudo-locales like "qps-ploc", everything stays lowecase. For language-script locales like "uz-Cyrl",
     *  only the script name's first character should be uppercased.
     */
    normalizeLocaleName(localeName: string): string;
    executeTask(gulp: gulp.Gulp, completeCallback: (error?: string) => void): NodeJS.ReadWriteStream;
    /**
     * Localizes a manifest. Only works with WebPart and Application manifests,
     * otherwise it does nothing
     */
    private _localizeManifest(manifest);
    /**
     * Perform some final fixup on manifests.
     */
    private _doFinalManifestFixup(manifest);
    /**
     * Localizes a WebPart manifest. That includes title, description and group
     * for all preconfigured entries
     */
    private _localizeWebPartManifest(manifest);
    /**
     * Localizes an Application manifest. This includes title and description of the Application
     */
    private _localizeApplicationManifest(manifest);
    /**
     * Localizes a string with an id in the web $moduleName:expression;
     * If the string to localize is not based on an id, it returns the input param untouched.
     */
    private _localizeString(stringToLocalize);
    /**
     * Localizes a string where it's been verified that the id follows the schema.
     * @param resourceName Name of the resource to load
     * @param expression Expression to be evaluated on the resource
     * @stringId Original id for the string. Used for logging purposes only
     * @returns Localized string with all found locales
     */
    private _localizeStringInternal(resourceName, expression, stringId);
    /**
     * Gets a resource file from a path.
     */
    private _getResource(resourcePath);
    /**
     * Caches a resource file from a path.
     * Because this execute in the build tools, function define is not defined,
     * so a fake function is created that will return the default element of the module.
     */
    private _cacheResource(resourcePath);
    private _generateManifest(deployEntry, loaderConfig);
    private _generateLoaderConfig(deployModules, internalModuleBaseUrls, resolvePath, defaultLocaleOverride?);
    private _resolveDebugPath(assetPath);
    private _resolveProductionPath(assetPath);
    private _uppercaseFirstLetter(str);
}
