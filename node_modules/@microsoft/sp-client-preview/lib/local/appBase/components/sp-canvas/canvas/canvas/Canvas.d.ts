import { DisplayMode } from '@microsoft/sp-core-library';
import { ICanvasOptions } from './ICanvasOptions';
/**
 * SharePoint Client-side Applications can use the SharePoint Canvas to enable rich content authoring
 * as part of their experience. The SharePoint canvas provides Rich Text Editing capabilities, SharePoint
 * Client-side WebPart aggregation and hosting, and a beautiful railed design experience.
 *
 * @alpha
 */
export default class Canvas {
    private _container;
    private _coreComponent;
    private _store;
    /**
     * Construct a new instance of the Canvas.
     *
     * @param container - The host DOM container for the Canvas. When render() is invoked the Canvas will
     *   render into 'container'.
     * @param canvasOptions - The optional parameters of the Canvas.
     */
    constructor(container: HTMLElement, canvasOptions: ICanvasOptions);
    /**
     * Render the Canvas into its container DOM element. The Canvas will use the DisplayMode it was
     * constructed with.
     * If the Canvas has already been rendered once, the Canvas will clear its contents and then, if present,
     * use 'serializedCanvas' to rehydrate itself.
     *
     * @param serializedCanvas - Optional. The string must have been created by a previous instance of
     *   the Canvas. If absent, an empty Canvas will be rendered. If present, the Canvas will rehydrate
     *   to represent the state of the Canvas when serialized.
     */
    render(serializedCanvas?: string): void;
    /**
     * @returns The number of controls in the Canvas.
     */
    readonly count: number;
    /**
      * Get the preview image url generated from webpart manager if it is available.
      * The preview image is the first preview image provided by a webpart
      *
      * @returns the URL of the preview image
      */
    readonly previewImageUrl: string;
    /**
     * Get the Canvas  DisplayMode.
     *
     * @returns The DisplayMode of the Canvas
     */
    /**
     * Re-render the Canvas in a new DisplayMode.
     *
     * @param newMode - The desired DisplayMode of the Canvas
     */
    displayMode: DisplayMode;
    /**
     * Unmount the Canvas from the container it was constructed with.
     */
    dispose(): void;
    /**
     * Display the Canvas' Toolbox at a given row. If the Toolbox is already open, the Toolbox will close
     * at its previous row and re-open at the new row.
     *
     * @param row - The desired row for the Toolbox to open at. The rows are zero-based numbered.
     *   If an invalid row is passed, no changes will occur.
     *
     * @returns A boolean indicating whether the Toolbox successfully opened.
     */
    openToolbox(row: number): boolean;
    /**
     * Serialize the current contents of the Canvas. The serialized string is in a HTML format understood by
     * SharePoint's Rich Text Field. The returned string can be crawled by search. Modifying the returned
     * string outside of the Canvas is not supported.
     *
     * @returns Serialized representation of the Canvas at the time the method is invoked.
     */
    serialize(): string;
    private _render();
}
