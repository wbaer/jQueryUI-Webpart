"use strict";
var VersionMismatchFinder = (function () {
    function VersionMismatchFinder(projects) {
        this._projects = projects;
        this._mismatches = new Map();
        this._analyze();
    }
    Object.defineProperty(VersionMismatchFinder.prototype, "numberOfMismatches", {
        get: function () {
            return this._mismatches.size;
        },
        enumerable: true,
        configurable: true
    });
    VersionMismatchFinder.prototype.getMismatches = function () {
        return this._iterableToArray(this._mismatches.keys());
    };
    VersionMismatchFinder.prototype.getVersionsOfMismatch = function (mismatch) {
        return this._mismatches.has(mismatch)
            ? this._iterableToArray(this._mismatches.get(mismatch).keys())
            : undefined;
    };
    VersionMismatchFinder.prototype.getConsumersOfMismatch = function (mismatch, version) {
        var mismatchedPackage = this._mismatches.get(mismatch);
        if (!mismatchedPackage) {
            return undefined;
        }
        var mismatchedVersion = mismatchedPackage.get(version);
        return mismatchedVersion;
    };
    VersionMismatchFinder.prototype._analyze = function () {
        var _this = this;
        this._projects.forEach(function (project) {
            _this._addDependenciesToList(project.packageName, project.packageJson.dependencies);
            _this._addDependenciesToList(project.packageName, project.packageJson.devDependencies);
            // tslint:disable:no-any
            _this._addDependenciesToList(project.packageName, project.packageJson.peerDependencies);
            _this._addDependenciesToList(project.packageName, project.packageJson.optionalDependencies);
            // tslint:enable:no-any
        });
        this._mismatches.forEach(function (mismatches, project) {
            if (mismatches.size <= 1) {
                _this._mismatches.delete(project);
            }
        });
    };
    VersionMismatchFinder.prototype._addDependenciesToList = function (project, depMap) {
        var _this = this;
        Object.keys(depMap || {}).forEach(function (dependency) {
            var version = depMap[dependency];
            if (!_this._mismatches.has(dependency)) {
                _this._mismatches.set(dependency, new Map());
            }
            if (!_this._mismatches.get(dependency).has(version)) {
                _this._mismatches.get(dependency).set(version, []);
            }
            _this._mismatches.get(dependency).get(version).push(project);
        });
    };
    VersionMismatchFinder.prototype._iterableToArray = function (iterable) {
        var b = [];
        var a;
        while ((a = iterable.next()) && !a.done) {
            b.push(a.value);
        }
        return b;
    };
    return VersionMismatchFinder;
}());
exports.VersionMismatchFinder = VersionMismatchFinder;

//# sourceMappingURL=VersionMismatchFinder.js.map
