{"version":3,"sources":["utilities/decorators/withResponsiveMode.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,6BAA+B;AAC/B,iDAAgD;AAChD,6CAA4C;AAM5C,IAAY,cAOX;AAPD,WAAY,cAAc;IACxB,qDAAS,CAAA;IACT,uDAAU,CAAA;IACV,qDAAS,CAAA;IACT,uDAAU,CAAA;IACV,yDAAW,CAAA;IACX,2DAAY,CAAA;AACd,CAAC,EAPW,cAAc,GAAd,sBAAc,KAAd,sBAAc,QAOzB;AAED,IAAM,yBAAyB,GAAG;IAChC,GAAG;IACH,GAAG;IACH,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,QAAQ;CACT,CAAC;AAEF,IAAI,YAA4B,CAAC;AAEjC;;GAEG;AACH,2BAAkC,cAA8B;IAC9D,YAAY,GAAG,cAAc,CAAC;AAChC,CAAC;AAFD,8CAEC;AAED,4BAAqF,iBAA4E;IAE/J,MAAM;QAAkC,sCAA0C;QAEhF;YAAA,YACE,iBAAO,SAMR;YALC,KAAI,CAAC,2BAA2B,GAAG,KAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;YAE/E,KAAI,CAAC,KAAK,GAAG;gBACX,cAAc,EAAE,KAAI,CAAC,kBAAkB,EAAE;aAC1C,CAAC;;QACJ,CAAC;QAEM,8CAAiB,GAAxB;YAAA,iBAUC;YATC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,MAAM,EAAE,QAAQ,EAAE;gBAChC,IAAI,cAAc,GAAG,KAAI,CAAC,kBAAkB,EAAE,CAAC;gBAE/C,EAAE,CAAC,CAAC,cAAc,KAAK,KAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC;oBACjD,KAAI,CAAC,QAAQ,CAAC;wBACZ,cAAc,EAAE,cAAc;qBAC/B,CAAC,CAAC;gBACL,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;QAEM,iDAAoB,GAA3B;YACE,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QACzB,CAAC;QAEM,mCAAM,GAAb;YACQ,IAAA,0CAAc,CAAgB;YAEpC,MAAM,CAAC,CACL,oBAAC,iBAAiB,aAAC,GAAG,EAAG,IAAI,CAAC,2BAA2B,EAAG,cAAc,EAAG,cAAc,IAAQ,IAAI,CAAC,KAAK,EAAK,CACnH,CAAC;QACJ,CAAC;QAEO,+CAAkB,GAA1B;YACE,IAAI,cAAc,GAAG,cAAc,CAAC,KAAK,CAAC;YAC1C,IAAI,GAAG,GAAG,qBAAS,EAAE,CAAC;YAEtB,EAAE,CAAC,CAAC,OAAO,GAAG,KAAK,WAAW,CAAC,CAAC,CAAC;gBAC/B,OAAO,GAAG,CAAC,UAAU,GAAG,yBAAyB,CAAC,cAAc,CAAC,EAAE,CAAC;oBAClE,cAAc,EAAE,CAAC;gBACnB,CAAC;YACH,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,EAAE,CAAC,CAAC,YAAY,KAAK,SAAS,CAAC,CAAC,CAAC;oBAC/B,cAAc,GAAG,YAAY,CAAC;gBAChC,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,MAAM,IAAI,KAAK,CACb,4FAA4F;wBAC5F,+DAA+D,CAChE,CAAC;gBACJ,CAAC;YACH,CAAC;YAED,MAAM,CAAC,cAAc,CAAC;QACxB,CAAC;QACH,yBAAC;IAAD,CAxDO,AAwDN,CAxDuC,6BAAa,GAwDnD;AACJ,CAAC;AA3DD,gDA2DC","file":"utilities/decorators/withResponsiveMode.js","sourcesContent":["import * as React from 'react';\r\nimport { BaseDecorator } from './BaseDecorator';\r\nimport { getWindow } from '../../Utilities';\r\n\r\nexport interface IWithResponsiveModeState {\r\n  responsiveMode?: ResponsiveMode;\r\n}\r\n\r\nexport enum ResponsiveMode {\r\n  small = 0,\r\n  medium = 1,\r\n  large = 2,\r\n  xLarge = 3,\r\n  xxLarge = 4,\r\n  xxxLarge = 5\r\n}\r\n\r\nconst RESPONSIVE_MAX_CONSTRAINT = [\r\n  479,\r\n  639,\r\n  1023,\r\n  1365,\r\n  1919,\r\n  99999999\r\n];\r\n\r\nlet _defaultMode: ResponsiveMode;\r\n\r\n/**\r\n * Allows a server rendered scenario to provide a default responsive mode.\r\n */\r\nexport function setResponsiveMode(responsiveMode: ResponsiveMode) {\r\n  _defaultMode = responsiveMode;\r\n}\r\n\r\nexport function withResponsiveMode<P extends { responsiveMode?: ResponsiveMode }, S>(ComposedComponent: (new (props: P, ...args: any[]) => React.Component<P, S>)): any {\r\n\r\n  return class WithResponsiveMode extends BaseDecorator<P, IWithResponsiveModeState> {\r\n\r\n    constructor() {\r\n      super();\r\n      this._updateComposedComponentRef = this._updateComposedComponentRef.bind(this);\r\n\r\n      this.state = {\r\n        responsiveMode: this._getResponsiveMode()\r\n      };\r\n    }\r\n\r\n    public componentDidMount() {\r\n      this._events.on(window, 'resize', () => {\r\n        let responsiveMode = this._getResponsiveMode();\r\n\r\n        if (responsiveMode !== this.state.responsiveMode) {\r\n          this.setState({\r\n            responsiveMode: responsiveMode\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n      this._events.dispose();\r\n    }\r\n\r\n    public render() {\r\n      let { responsiveMode } = this.state;\r\n\r\n      return (\r\n        <ComposedComponent ref={ this._updateComposedComponentRef } responsiveMode={ responsiveMode } { ...this.props } />\r\n      );\r\n    }\r\n\r\n    private _getResponsiveMode(): ResponsiveMode {\r\n      let responsiveMode = ResponsiveMode.small;\r\n      let win = getWindow();\r\n\r\n      if (typeof win !== 'undefined') {\r\n        while (win.innerWidth > RESPONSIVE_MAX_CONSTRAINT[responsiveMode]) {\r\n          responsiveMode++;\r\n        }\r\n      } else {\r\n        if (_defaultMode !== undefined) {\r\n          responsiveMode = _defaultMode;\r\n        } else {\r\n          throw new Error(\r\n            'Content was rendered in a server environment without providing a default responsive mode. ' +\r\n            'Call setResponsiveMode to define what the responsive mode is.'\r\n          );\r\n        }\r\n      }\r\n\r\n      return responsiveMode;\r\n    }\r\n  };\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}