/**
 * An writable interface for managing output of simultaneous processes.
 * @todo #168347: should we export a WritableStream or Buffer or similar?
 */
export interface ITaskWriter {
    write(data: string): void;
    writeLine(data: string): void;
    writeError(data: string): void;
    getStdOutput(): string;
    getStdError(): string;
    close(): void;
}
/**
 * A static class which manages the output of multiple threads.
 * @todo #168348: make this class not be static
 * @todo #168349: add ability to inject stdout WritableStream
 * @todo #168350: add unit testing
 */
export default class Interleaver {
    private static _tasks;
    private static _activeTask;
    private static _stdout;
    /**
     * Resets the default output stream
     */
    static setStdOut(stdout: {
        write: (text: string) => void;
    }): void;
    /**
     * Registers a task into the list of active buffers and returns a ITaskWriter for the
     * calling process to use to manage output.
     */
    static registerTask(taskName: string, quietMode?: boolean): ITaskWriter;
    /**
     * Removes information about all running tasks
     */
    static reset(): void;
    /**
     * Adds the text to the tasks's buffer, and writes it to the console if it is the active task
     */
    private static _writeTaskOutput(taskName, data, stream?);
    /**
     * Returns the current value of the task's buffer
     */
    private static _getTaskOutput(taskName, stream?);
    /**
     * Marks a task as completed. There are 3 cases:
     *  - If the task was the active task, also write out all completed, unwritten tasks
     *  - If there is no active task, write the output to the screen
     *  - If there is an active task, mark the task as completed and wait for active task to complete
     */
    private static _completeTask(taskName);
    /**
     * Helper function which writes all completed tasks
     */
    private static _writeAllCompletedTasks();
    /**
     * Write and delete task
     */
    private static _writeTask(taskName, taskInfo);
    /**
     * A constructor which throws an exception if used
     */
    constructor();
}
