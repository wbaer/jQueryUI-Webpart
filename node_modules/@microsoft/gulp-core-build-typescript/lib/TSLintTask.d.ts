/// <reference types="vinyl" />
/// <reference types="node" />
import { GulpTask, IBuildConfig } from '@microsoft/gulp-core-build';
import gulpType = require('gulp');
import gutil = require('gulp-util');
import * as TSLint from 'tslint';
export interface ITSLintTaskConfig {
    /**
     * A TsLint configuration objects
     */
    lintConfig?: any;
    /**
     * Directories to search for custom linter rules
     */
    rulesDirectory?: string | string[];
    /**
     * An array of files which the linter should analyze
     */
    sourceMatch?: string[];
    /**
     * A function which reports errors to the proper location. Defaults to using the base GulpTask's
     * this.fileError() function.
      */
    reporter?: (result: TSLint.LintResult, file: gutil.File, options: ITSLintTaskConfig) => void;
    /**
     * If true, displays warnings as errors. If the reporter function is overwritten, it should reference
     * this flag. Defaults to `false`.
     */
    displayAsWarning?: boolean;
    /**
     * If true, the lintConfig rules which were previously set will be removed. This flag is useful
     * for ensuring that there are no rules activated from previous calls to setConfig(). Default is 'false'.
     */
    removeExistingRules?: boolean;
    /**
     * If false, does not use a default tslint configuration as the basis for creating the list of active rules.
     * Defaults to 'true'
     */
    useDefaultConfigAsBase?: boolean;
}
export declare class TSLintTask extends GulpTask<ITSLintTaskConfig> {
    name: string;
    taskConfig: ITSLintTaskConfig;
    private _defaultLintRules;
    setConfig(config: ITSLintTaskConfig): void;
    loadSchema(): Object;
    executeTask(gulp: gulpType.Gulp): NodeJS.ReadWriteStream;
    getCleanMatch(buildConfig: IBuildConfig, taskConfig?: ITSLintTaskConfig): string[];
    private _getTsLintFilepath();
    private _loadLintRules();
}
