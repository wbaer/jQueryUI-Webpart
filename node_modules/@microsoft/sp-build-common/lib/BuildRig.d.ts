/// <reference types="es6-collections" />
import * as gulp from 'gulp';
import * as yargs from 'yargs';
import * as coreBuild from '@microsoft/gulp-core-build';
/**
 * The flags which this build rig defines. Extend this for child rigs
 */
export interface ICoreBuildArgs {
    production: boolean;
    ship: boolean;
    tasks: boolean;
    verbose: boolean;
}
/**
 * Represents the a task which is registered to the gulp command line
 * The arguments function is evaluated if this is the current task, it should
 * interact with yargs to define any custom values.
 *
 * @todo 178074 this code should be removed
 */
export interface ITaskDefinition {
    executable: coreBuild.IExecutable;
    arguments?: (args: yargs.Argv) => void;
}
/**
 * Represents a gulp-core-build build "rig", or a collection of tasks and
 * configurations. It can be extended to define more top-level configurable tasks,
 * inject subtasks into the chain, register arguments to the command line.
 *
 * This class represents all the logic which doesn't belong in a rig, and should instead
 * be a part of gulp-core-build. Thus, this class should be removed once that logic
 * is properly replicated in gulp-core-build.
 *
 * @todo 178074, 253519, 253526
 */
export declare abstract class BuildRig {
    protected args: ICoreBuildArgs;
    /**
     * The primary entry point into this build rig, accepts a gulp instance which is passed through to gulp-core-build
     */
    initialize(gulp: gulp.Gulp): void;
    /**
     * Override this function to create new top-level tasks which can be executed via the command line
     */
    protected abstract getTasks(): Map<string, ITaskDefinition>;
    /**
     * Override this function to do configuration before the configuration .json files have been loaded
     */
    protected abstract setupSharedConfig(): void;
    /**
     * Override this function to do configuration after the configuration .json files have been loadeds
     */
    protected abstract finalizeSharedConfig(): void;
    /**
     * Override this function to register more top-level command line arguments (i.e. not task-specific).
     * Ideally, extend the ICoreBuildArgs when hooking into this function
     * @todo 253519 : this code should be removed once we determine the interface for argument parsing with GCB
     */
    protected getYargs(): yargs.Argv;
    protected _disableTasks(...tasks: coreBuild.IExecutable[]): void;
    /**
     * Loads the config.json file into the gulp-core-build general property bag
     */
    private _loadCustomConfig();
    /**
     * Helper function which loads a custom config file from disk, then runs the SchemaValidator on it
     */
    private _readConfigFile(filename, schemafile);
}
