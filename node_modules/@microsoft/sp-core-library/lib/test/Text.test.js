"use strict";
var chai_1 = require("chai");
var index_1 = require("./index");
var Text_1 = require("../Text");
var Guid_1 = require("../Guid");
describe('Text tests', function () {
    describe('Format tests', function () {
        it('should throw when using invalid input', function (done) {
            chai_1.assert.throws(function () { Text_1.default.format(index_1.TEST_UNDEFINED); });
            chai_1.assert.throws(function () { Text_1.default.format(index_1.TEST_NULL); });
            done();
        });
        it('should successfully format strings with good input', function (done) {
            chai_1.assert.equal(Text_1.default.format('Test #{0}', 1), 'Test #1');
            chai_1.assert.equal(Text_1.default.format('Test {1} and {0}', 'A', 'B'), 'Test B and A');
            chai_1.assert.equal(Text_1.default.format('{0} and {0}', 'More'), 'More and More');
            chai_1.assert.equal(Text_1.default.format('This is a {0} statement', true), 'This is a true statement');
            chai_1.assert.equal(Text_1.default.format('The empty guid is {0}', Guid_1.default.empty), 'The empty guid is 00000000-0000-0000-0000-000000000000');
            done();
        });
        it('should successfully format strings with bad input', function (done) {
            chai_1.assert.equal(Text_1.default.format(''), '');
            chai_1.assert.equal(Text_1.default.format('Test #1'), 'Test #1');
            chai_1.assert.equal(Text_1.default.format('Test {2} and {0}', 3, '2', 1), 'Test 1 and 3');
            chai_1.assert.equal(Text_1.default.format('Test {1} and {0}', 3, '2', 1), 'Test 2 and 3');
            chai_1.assert.equal(Text_1.default.format('Test #{1}', 1), 'Test #{1}');
            chai_1.assert.equal(Text_1.default.format('Test {0} and {1}', index_1.TEST_NULL, index_1.TEST_UNDEFINED), 'Test null and undefined');
            done();
        });
    });
});
