"use strict";
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_lodash_subset_1 = require("@microsoft/sp-lodash-subset");
var sp_telemetry_1 = require("@ms/sp-telemetry");
var SystemJsLoader_1 = require("./SystemJsLoader");
var ManifestStore_1 = require("./stores/ManifestStore");
var ComponentStore_1 = require("./stores/ComponentStore");
var telemetryConstants = require("./utilities/telemetryConstants");
var normalizeName_1 = require("./normalizeName");
var sp_core_library_2 = require("@microsoft/sp-core-library");
var SPLoader_resx_1 = require("./SPLoader.resx");
var FIRST_RETRY = 1;
var MAX_NUMBER_RETRIES = 3;
var _systemJsLoader = SystemJsLoader_1.default.instance;
function loadComponent(manifest) {
    sp_core_library_1.Validate.isNotNullOrUndefined(manifest, 'manifest');
    var cachedModule = ComponentStore_1.default.instance.getComponent(manifest.id, manifest.version);
    if (cachedModule) {
        return cachedModule;
    }
    var qosMonitor = new sp_telemetry_1._QosMonitor(telemetryConstants.loadComponentQosScenarioName);
    var qosExtraData = _buildQosExtraData(manifest); 
    var componentPromise = _loadComponentRetryStrategy(manifest, FIRST_RETRY, MAX_NUMBER_RETRIES)
        .then(function (component) {
        qosMonitor.writeSuccess(qosExtraData);
        return component;
    })
        .catch(function (error) {
        qosMonitor.writeUnexpectedFailure(undefined, error, qosExtraData);
        ComponentStore_1.default.instance.deleteComponent(manifest.id, manifest.version);
        throw error;
    });
    ComponentStore_1.default.instance.storeComponent(manifest.id, manifest.version, componentPromise);
    return componentPromise;
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = loadComponent;
function _loadComponentRetryStrategy(manifest, currentRetryNumber, maxNumberRetries) {
    if (currentRetryNumber === 1) {
        sp_telemetry_1._TraceLogger.logVerbose(telemetryConstants.loadComponentLogSource, sp_core_library_2.Text.format(SPLoader_resx_1.default.loadComponentLog, manifest.id, manifest.alias, manifest.version));
    }
    else {
        sp_telemetry_1._TraceLogger.logVerbose(telemetryConstants.loadComponentLogSource, sp_core_library_2.Text.format(SPLoader_resx_1.default.loadComponentRetryLog, manifest.id, manifest.alias, currentRetryNumber, maxNumberRetries));
    }
    return _loadComponentImpl(manifest)
        .then(function (component) {
        sp_telemetry_1._TraceLogger.logVerbose(telemetryConstants.loadComponentLogSource, sp_core_library_2.Text.format(SPLoader_resx_1.default.loadComponentEndLog, manifest.id, manifest.alias, manifest.version));
        return component;
    })
        .catch(function (error) {
        _systemJsLoader.systemDelete(manifest);
        if (currentRetryNumber <= maxNumberRetries) {
            return _loadComponentRetryStrategy(manifest, currentRetryNumber + 1, maxNumberRetries);
        }
        else {
            sp_telemetry_1._TraceLogger.logError(telemetryConstants.loadComponentLogSource, new Error(sp_core_library_2.Text.format(SPLoader_resx_1.default.loadComponentMaxRetriesError, manifest.id, manifest.alias, maxNumberRetries)));
            throw error;
        }
    });
}
function _loadComponentImpl(manifest) {
    var qosMonitor = new sp_telemetry_1._QosMonitor(telemetryConstants.loadComponentImplQosScenarioName);
    var qosExtraData = _buildQosExtraData(manifest); 
    try {
        _systemJsLoader.configure(manifest);
    }
    catch (error) {
        qosMonitor.writeUnexpectedFailure(telemetryConstants.configureSystemJsErrorTagName, error, qosExtraData);
        return Promise.reject(error);
    }
    var componentDeps = [];
    var pathDeps = [];
    try {
        componentDeps = _loadComponentDependencies(manifest);
    }
    catch (error) {
        qosMonitor.writeUnexpectedFailure(telemetryConstants.loadComponentDependenciesErrorTagName, error, qosExtraData);
        return Promise.reject(error);
    }
    try {
        pathDeps = _loadPathDependencies(manifest);
    }
    catch (error) {
        qosMonitor.writeUnexpectedFailure(telemetryConstants.loadPathDependenciesErrorTagName, error, qosExtraData);
        return Promise.reject(error);
    }
    return Promise.all(componentDeps.concat(pathDeps)).then(function (components) {
        return _loadEntryPoint(manifest).then(function (entryPoint) {
            _validateComponentIsNotEmptyOrThrow(entryPoint, manifest, qosMonitor, qosExtraData);
            qosMonitor.writeSuccess(qosExtraData);
            return entryPoint;
        });
    }).catch(function (e) {
        var error = new Error(sp_core_library_2.Text.format(SPLoader_resx_1.default.loadComponentError, manifest.id, manifest.alias, e.message));
        qosMonitor.writeUnexpectedFailure(undefined, error, qosExtraData);
        sp_telemetry_1._TraceLogger.logVerbose(telemetryConstants.loadComponentLogSource, error.message);
        throw error;
    });
}
function _validateComponentIsNotEmptyOrThrow(component, manifest, qosMonitor, qosExtraData 
) {
    var error = undefined;
    if (sp_lodash_subset_1.isEmpty(component)) {
        error = new Error(sp_core_library_2.Text.format(SPLoader_resx_1.default.loadComponentReturnsEmptyError, manifest.id, manifest.alias));
    }
    var defaultObject = component.default; 
    if (defaultObject && sp_lodash_subset_1.isEmpty(defaultObject) && !defaultObject.prototype) {
        error = new Error(sp_core_library_2.Text.format(SPLoader_resx_1.default.loadComponentReturnsDefaultEmptyError, manifest.id, manifest.alias));
    }
    if (error) {
        sp_telemetry_1._TraceLogger.logVerbose(telemetryConstants.loadComponentLogSource, error.message);
        qosMonitor.writeUnexpectedFailure(telemetryConstants.emptyComponentErrorTagName, error, qosExtraData);
        throw error;
    }
}
function _loadComponentDependencies(manifest) {
    var depPromises = [];
    var resources = manifest.loaderConfig.scriptResources;
    var _loop_1 = function (name_1) {
        if (resources[name_1].type === 'component' && !resources[name_1].shouldNotPreload) {
            var moduleConfiguration_1 = resources[name_1];
            var resourceManifest = ManifestStore_1.default.instance.tryGetManifest(moduleConfiguration_1.id, moduleConfiguration_1.version);
            if (resourceManifest) {
                var dep = loadComponent(resourceManifest).catch(function (e) {
                    var error = new Error(sp_core_library_2.Text.format(SPLoader_resx_1.default.loadComponentDependencyError, name_1, manifest.id, manifest.alias));
                    sp_telemetry_1._TraceLogger.logVerbose(telemetryConstants.loadComponentLogSource, error.message);
                    throw error;
                });
                depPromises.push(dep);
            }
            else {
                if (moduleConfiguration_1.failoverPath) {
                    var dep = _systemJsLoader.systemImport(normalizeName_1.normalizeFailoverPathName(name_1))
                        .catch(function (e) {
                        var error = new Error(sp_core_library_2.Text.format(SPLoader_resx_1.default.loadComponentDependencyFailoverPathError, name_1, moduleConfiguration_1.failoverPath, manifest.id, manifest.alias));
                        sp_telemetry_1._TraceLogger.logVerbose(telemetryConstants.loadComponentLogSource, error.message);
                        throw error;
                    });
                    depPromises.push(dep);
                }
                else {
                    var error = new Error(sp_core_library_2.Text.format(SPLoader_resx_1.default.manifestNotFoundError, moduleConfiguration_1.id, moduleConfiguration_1.version));
                    sp_telemetry_1._TraceLogger.logVerbose(telemetryConstants.loadComponentLogSource, error.message);
                    depPromises.push(Promise.reject(error));
                }
            }
        }
    };
    for (var name_1 in resources) {
        _loop_1(name_1);
    }
    return depPromises;
}
function _loadPathDependencies(manifest) {
    var resources = manifest.loaderConfig.scriptResources;
    var loadedPathDependencies = new Map();
    for (var name_2 in resources) {
        if ((resources[name_2].type === 'path' || resources[name_2].type === 'localizedPath')
            && !resources[name_2].shouldNotPreload) {
            if (name_2 !== manifest.loaderConfig.entryModuleId) {
                _loadPathDependency(manifest, name_2, loadedPathDependencies);
            }
        }
    }
    return sp_lodash_subset_1.toArray(loadedPathDependencies.values());
}
function _loadPathDependency(manifest, name, loadedPathDependencies) {
    var loadedPathDependency = loadedPathDependencies.get(name);
    if (loadedPathDependency) {
        return loadedPathDependency;
    }
    var qosMonitor = new sp_telemetry_1._QosMonitor(telemetryConstants.loadPathDependencyQosScenarioName);
    var qosExtraData = {
        name: name,
        manifestId: manifest.id,
        version: manifest.version,
        alias: manifest.alias,
        isInternal: manifest.isInternal
    };
    sp_telemetry_1._TraceLogger.logVerbose(telemetryConstants.loadComponentLogSource, sp_core_library_2.Text.format(SPLoader_resx_1.default.loadPathDependencyLog, name, manifest.id, manifest.alias));
    var resources = manifest.loaderConfig.scriptResources;
    var pathConfig = resources[name];
    var loadPromise;
    if (pathConfig && pathConfig.globalDependencies) {
        var depPromises = pathConfig.globalDependencies.map(function (dep) { return _loadPathDependency(manifest, dep, loadedPathDependencies); });
        loadPromise = Promise.all(depPromises).then(function () {
            return _systemImportPathDependency(manifest, name);
        }, function () {
            var error = new Error(sp_core_library_2.Text.format(SPLoader_resx_1.default.loadPathDependencyBlockedByAnotherDependencyError, name, manifest.id, manifest.alias));
            sp_telemetry_1._TraceLogger.logVerbose(telemetryConstants.loadComponentLogSource, error.message);
            throw error; 
        });
    }
    else {
        loadPromise = _systemImportPathDependency(manifest, name);
    }
    loadedPathDependencies.set(name, loadPromise);
    return loadPromise.then(function (load) {
        qosMonitor.writeSuccess(qosExtraData);
        return load;
    }, function (error) {
        qosMonitor.writeUnexpectedFailure(undefined, error, qosExtraData);
        throw error;
    });
}
function _systemImportPathDependency(manifest, name) {
    return _systemJsLoader.systemImport(normalizeName_1.default(manifest, name)).catch(function (e) {
        var error = new Error(sp_core_library_2.Text.format(SPLoader_resx_1.default.loadPathDependencyError, name, manifest.id, manifest.alias));
        sp_telemetry_1._TraceLogger.logVerbose(telemetryConstants.loadComponentLogSource, error.message);
        throw error; 
    });
}
function _loadEntryPoint(manifest) {
    var entryPointModule = _systemJsLoader.systemImport(normalizeName_1.default(manifest)).catch(function (e) {
        var error = new Error(sp_core_library_2.Text.format(SPLoader_resx_1.default.loadEntryPointError, manifest.id, manifest.alias));
        sp_telemetry_1._TraceLogger.logVerbose(telemetryConstants.loadComponentLogSource, error.message);
        throw error;
    });
    return entryPointModule.then(function (module) {
        return _getExportFromModule(manifest, module);
    });
}
function _getExportFromModule(manifest, module) {
    var retValue = module;
    if (manifest.loaderConfig.exportName) {
        retValue = module[manifest.loaderConfig.exportName];
        _systemJsLoader.ensure(normalizeName_1.default(manifest, manifest.loaderConfig.exportName), retValue);
    }
    return retValue;
}
function _buildQosExtraData(manifest) {
    return {
        manifestId: manifest.id,
        version: manifest.version,
        alias: manifest.alias,
        isInternal: manifest.isInternal
    };
}
