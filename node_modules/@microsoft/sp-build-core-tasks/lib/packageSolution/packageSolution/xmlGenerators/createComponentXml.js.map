{"version":3,"sources":["packageSolution/packageSolution/xmlGenerators/createComponentXml.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AACH,mCAAmC;;AAEnC,2BAA6B;AAC7B,kCAAoC;AAEpC,yDAAoD;AAGpD,+DAA0D;AAE1D,4BAA2C,OAAmB,EAAE,SAAiB;IAC/E,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,KAAK,uBAAa,CAAC,WAAW;QAC1C,OAAO,CAAC,IAAI,KAAK,uBAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;QAE5C,IAAM,IAAI,GAAW,OAAO,CAAC,IAAI,KAAK,uBAAa,CAAC,WAAW;cAC3D,aAAa,GAAG,UAAU,CAAC;QAE/B,MAAM,CAAC;YACL,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,EAAK,IAAI,SAAI,OAAO,CAAC,EAAE,SAAM,CAAC;YACjE,GAAG,EAAE,YAAY,CAAC;gBAChB,QAAQ,EAAE;oBACR;wBACE,mBAAmB,EAAE;4BACnB;gCACE,KAAK,EAAE;oCACL,IAAI,EAAE,OAAO,CAAC,IAAI;oCAClB,EAAE,EAAE,OAAO,CAAC,EAAE;oCACd,iBAAiB,EAAE,OAAO,CAAC,QAAQ;oCACnC,IAAI,EAAE,IAAI;iCACX;6BACF;yBACF;qBACF;oBACD;wBACE,KAAK,EAAE;4BACL,KAAK,EAAE,0CAA0C;yBAClD;qBACF;iBACF;aACF,EAAE,8BAAoB,CAAC;SACzB,CAAC;IACJ,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,mEAAmE;QACnE,MAAM,CAAC;YACL,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,aAAW,OAAO,CAAC,EAAE,SAAM,CAAC;YACjE,GAAG,EAAE,YAAY,CAAC;gBAChB,QAAQ,EAAE;oBACR;wBACE,mBAAmB,EAAE;4BACnB;gCACE,KAAK,EAAE;oCACL,IAAI,EAAE,OAAO,CAAC,IAAI;oCAClB,EAAE,EAAE,OAAO,CAAC,EAAE;oCACd,iBAAiB,EAAE,OAAO,CAAC,QAAQ;oCACnC,IAAI,EAAE,SAAS;iCAChB;6BACF;yBACF;qBACF;oBACD;wBACE,MAAM,EAAE,YAAY,CAAC,SAAS,EAAE,OAAO,CAAC;qBACzC;oBACD;wBACE,KAAK,EAAE;4BACL,KAAK,EAAE,0CAA0C;yBAClD;qBACF;iBACF;aACF,EAAE,8BAAoB,CAAC;SACzB,CAAC;IACJ,CAAC;AACH,CAAC;;AA7DD,qCA6DC;AAED;;GAEG;AACH,kCAAkC;AAClC,sBAAsB,SAAiB,EAAE,SAAqB;IAC5D,kCAAkC;IAClC,IAAM,MAAM,GAAU,CAAC;YACrB,KAAK,EAAE;gBACL,IAAI,EAAE,SAAS,CAAC,IAAI;gBACpB,GAAG,EAAE,cAAc;gBACnB,IAAI,EAAE,KAAK;aACZ;SACF,CAAC,CAAC;IAEH,MAAM,CAAC,MAAM,CAAC;AAChB,CAAC","file":"packageSolution/packageSolution/xmlGenerators/createComponentXml.js","sourcesContent":["/**\r\n * @file createComponentXml.ts\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n *\r\n * Creates an package's Element.Xml for a WebPart or ClientSideSolution\r\n */\r\n/// <reference path='./xml.d.ts' />\r\n\r\nimport * as path from 'path';\r\nimport * as XmlGenerator from 'xml';\r\n\r\nimport componentType from '../models/ComponentType';\r\nimport IComponent from '../models/packageDefinition/IComponent';\r\nimport IXml from '../models/packageXml/IXml';\r\nimport serializationOptions from './serializationOptions';\r\n\r\nexport default function createComponentXml(options: IComponent, featureId: string): IXml {\r\n  if (options.type === componentType.Application ||\r\n      options.type === componentType.CodePart) {\r\n\r\n    const type: string = options.type === componentType.Application\r\n      ? 'Application' : 'CodePart';\r\n\r\n    return {\r\n      filename: path.posix.join(featureId, `${type}_${options.id}.xml`),\r\n      xml: XmlGenerator({\r\n        Elements: [\r\n          {\r\n            ClientSideComponent: [\r\n              {\r\n                _attr: {\r\n                  Name: options.name,\r\n                  Id: options.id,\r\n                  ComponentManifest: options.manifest,\r\n                  Type: type\r\n                }\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            _attr: {\r\n              xmlns: 'http://schemas.microsoft.com/sharepoint/'\r\n            }\r\n          }\r\n        ]\r\n      }, serializationOptions)\r\n    };\r\n  } else {\r\n    // @todo Note that the options.id is NOT necessarily the feature ID\r\n    return {\r\n      filename: path.posix.join(featureId, `WebPart_${options.id}.xml`),\r\n      xml: XmlGenerator({\r\n        Elements: [\r\n          {\r\n            ClientSideComponent: [\r\n              {\r\n                _attr: {\r\n                  Name: options.name,\r\n                  Id: options.id,\r\n                  ComponentManifest: options.manifest,\r\n                  Type: 'WebPart'\r\n                }\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            Module: createModule(featureId, options)\r\n          },\r\n          {\r\n            _attr: {\r\n              xmlns: 'http://schemas.microsoft.com/sharepoint/'\r\n            }\r\n          }\r\n        ]\r\n      }, serializationOptions)\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Creates a Module xml element with all the files.\r\n */\r\n// tslint:disable-next-line:no-any\r\nfunction createModule(featureId: string, component: IComponent): any {\r\n  // tslint:disable-next-line:no-any\r\n  const result: any[] = [{\r\n    _attr: {\r\n      Name: component.name,\r\n      Url: '_catalogs/wp',\r\n      List: '113'\r\n    }\r\n  }];\r\n\r\n  return result;\r\n}"],"sourceRoot":"..\\..\\..\\..\\src"}