var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
define(["require", "exports", "react", "../../Utilities"], function (require, exports, React, Utilities_1) {
    "use strict";
    var DIRECTIONAL_KEY_CODES = [
        Utilities_1.KeyCodes.up,
        Utilities_1.KeyCodes.down,
        Utilities_1.KeyCodes.left,
        Utilities_1.KeyCodes.right,
        Utilities_1.KeyCodes.home,
        Utilities_1.KeyCodes.end,
        Utilities_1.KeyCodes.tab,
        Utilities_1.KeyCodes.pageUp,
        Utilities_1.KeyCodes.pageDown
    ];
    // We will track the last focus visibility state so that if we tear down and recreate
    // the Fabric component, we will use the last known value as the default.
    var _lastIsFocusVisible = false;
    // Ensure that the HTML element has a dir specified. This helps to ensure RTL/LTR macros in css for all components will work.
    if (typeof (document) === 'object' && document.documentElement && !document.documentElement.getAttribute('dir')) {
        document.documentElement.setAttribute('dir', 'ltr');
    }
    var Fabric = (function (_super) {
        __extends(Fabric, _super);
        function Fabric() {
            var _this = _super.call(this) || this;
            _this.state = {
                isFocusVisible: _lastIsFocusVisible
            };
            _this._events = new Utilities_1.EventGroup(_this);
            return _this;
        }
        Fabric.prototype.componentDidMount = function () {
            this._events.on(document.body, 'mousedown', this._onMouseDown, true);
            this._events.on(document.body, 'keydown', this._onKeyDown, true);
        };
        Fabric.prototype.componentWillUnmount = function () {
            this._events.dispose();
        };
        Fabric.prototype.render = function () {
            var isFocusVisible = this.state.isFocusVisible;
            var rootClass = Utilities_1.css('ms-Fabric ms-font-m', this.props.className, {
                'is-focusVisible': isFocusVisible
            });
            return (React.createElement("div", __assign({}, this.props, { className: rootClass, ref: 'root' })));
        };
        Fabric.prototype._onMouseDown = function () {
            if (this.state.isFocusVisible) {
                this.setState({
                    isFocusVisible: false
                });
                _lastIsFocusVisible = false;
            }
        };
        Fabric.prototype._onKeyDown = function (ev) {
            if (!this.state.isFocusVisible && DIRECTIONAL_KEY_CODES.indexOf(ev.which) > -1) {
                this.setState({
                    isFocusVisible: true
                });
                _lastIsFocusVisible = true;
            }
        };
        return Fabric;
    }(React.Component));
    exports.Fabric = Fabric;
});

//# sourceMappingURL=Fabric.js.map
