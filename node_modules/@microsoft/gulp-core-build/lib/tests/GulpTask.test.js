'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
require("es6-promise");
var chai_1 = require("chai");
var index_1 = require("../index");
var gutil = require("gulp-util");
var stream_1 = require("stream");
var path = require("path");
var testArray = [];
var PromiseTask = (function (_super) {
    __extends(PromiseTask, _super);
    function PromiseTask() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'promise';
        _this.taskConfig = {};
        return _this;
    }
    /* tslint:disable:no-any */
    PromiseTask.prototype.executeTask = function (gulp) {
        var _this = this;
        /* tslint:enable:no-any */
        return new Promise(function (resolve, reject) {
            testArray.push(_this.name);
            resolve();
        });
    };
    return PromiseTask;
}(index_1.GulpTask));
var StreamTask = (function (_super) {
    __extends(StreamTask, _super);
    function StreamTask() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'stream';
        _this.taskConfig = {};
        return _this;
    }
    /* tslint:disable:no-any */
    StreamTask.prototype.executeTask = function (gulp) {
        var _this = this;
        /* tslint:enable:no-any */
        var stream = new stream_1.Readable({ objectMode: true });
        // Add no opt function to make it compat with through
        stream['_read'] = function () {
            // Do Nothing
        };
        setTimeout(function () {
            var file = new gutil.File({
                path: 'test.js',
                contents: new Buffer('test')
            });
            stream.push(file);
            testArray.push(_this.name);
            stream.emit('end');
        }, 100);
        return stream;
    };
    return StreamTask;
}(index_1.GulpTask));
var SyncTask = (function (_super) {
    __extends(SyncTask, _super);
    function SyncTask() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'sync';
        _this.taskConfig = {};
        return _this;
    }
    SyncTask.prototype.executeTask = function (gulp) {
        testArray.push(this.name);
    };
    return SyncTask;
}(index_1.GulpTask));
var SyncWithReturnTask = (function (_super) {
    __extends(SyncWithReturnTask, _super);
    function SyncWithReturnTask() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'sync-with-return';
        _this.taskConfig = {};
        return _this;
    }
    SyncWithReturnTask.prototype.executeTask = function (gulp) {
        testArray.push(this.name);
    };
    return SyncWithReturnTask;
}(index_1.GulpTask));
var CallbackTask = (function (_super) {
    __extends(CallbackTask, _super);
    function CallbackTask() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'callback';
        _this.taskConfig = {};
        return _this;
    }
    CallbackTask.prototype.executeTask = function (gulp, callback) {
        testArray.push(this.name);
        callback();
    };
    return CallbackTask;
}(index_1.GulpTask));
var SchemaTask = (function (_super) {
    __extends(SchemaTask, _super);
    function SchemaTask() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'schema-task';
        _this.taskConfig = {
            shouldDoThings: false
        };
        return _this;
    }
    SchemaTask.prototype.executeTask = function (gulp, callback) {
        callback();
    };
    SchemaTask.prototype._getConfigFilePath = function () {
        return path.join(__dirname, 'schema-task.config.json');
    };
    return SchemaTask;
}(index_1.GulpTask));
var tasks = [];
tasks.push(new PromiseTask());
tasks.push(new StreamTask());
tasks.push(new SyncTask());
tasks.push(new SyncWithReturnTask());
tasks.push(new CallbackTask());
describe('GulpTask', function () {
    var _loop_1 = function (task) {
        it(task.name + " serial", function (done) {
            testArray = [];
            task.setConfig({ addToMe: testArray });
            index_1.serial(task).execute({}).then(function () {
                chai_1.expect(testArray).to.deep.equal([task.name]);
                done();
            }).catch(function (error) { return done(error); });
        });
        it(task.name + " parallel", function (done) {
            testArray = [];
            task.setConfig({ addToMe: testArray });
            index_1.parallel(task).execute({}).then(function () {
                chai_1.expect(testArray).to.deep.equal([task.name]);
                done();
            }).catch(function (error) { return done(error); });
        });
    };
    for (var _i = 0, tasks_1 = tasks; _i < tasks_1.length; _i++) {
        var task = tasks_1[_i];
        _loop_1(task);
    }
    it("all tasks serial", function (done) {
        testArray = [];
        for (var _i = 0, tasks_2 = tasks; _i < tasks_2.length; _i++) {
            var task = tasks_2[_i];
            task.setConfig({ addToMe: testArray });
        }
        index_1.serial(tasks).execute({}).then(function () {
            for (var _i = 0, tasks_3 = tasks; _i < tasks_3.length; _i++) {
                var task = tasks_3[_i];
                chai_1.expect(testArray.indexOf(task.name)).to.be.greaterThan(-1);
            }
            done();
        }).catch(function (error) { return done(error); });
    });
    it("all tasks parallel", function (done) {
        testArray = [];
        for (var _i = 0, tasks_4 = tasks; _i < tasks_4.length; _i++) {
            var task = tasks_4[_i];
            task.setConfig({ addToMe: testArray });
        }
        index_1.parallel(tasks).execute({}).then(function () {
            for (var _i = 0, tasks_5 = tasks; _i < tasks_5.length; _i++) {
                var task = tasks_5[_i];
                chai_1.expect(testArray.indexOf(task.name)).to.be.greaterThan(-1);
            }
            done();
        }).catch(function (error) { return done(error); });
    });
    it("reads schema file if loadSchema is implemented", function (done) {
        var schemaTask = new SchemaTask();
        chai_1.assert.isFalse(schemaTask.taskConfig.shouldDoThings);
        schemaTask.onRegister();
        chai_1.assert.isTrue(schemaTask.taskConfig.shouldDoThings);
        done();
    });
    it("throws validation error is config does not conform to schema file", function (done) {
        var schemaTask = new SchemaTask();
        // tslint:disable-next-line:no-any
        schemaTask._getConfigFilePath = function () {
            return path.join(__dirname, 'other-schema-task.config.json');
        };
        chai_1.assert.isFalse(schemaTask.taskConfig.shouldDoThings);
        chai_1.assert.throws(schemaTask.onRegister);
        done();
    });
});

//# sourceMappingURL=GulpTask.test.js.map
