{"version":3,"sources":["utilities/azureStorage/ensureContainer.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;AAEH,yBAAwC,WAA8B,EAC9B,aAAqB,EACrB,gBAA0C,EAC1C,GAAwC;IAAxC,oBAAA,EAAA,MAA6B,OAAO,CAAC,GAAG;IAC9E,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;QACtB,gBAAgB,GAAG;YACjB,iBAAiB,EAAE,MAAM;SAC1B,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,IAAI,OAAO,CAAoB,UAAC,OAAyC,EACzC,MAA8B;QACjE,IAAI,CAAC;YACH,WAAW,CAAC,0BAA0B,CAAC,aAAa,EAAE,gBAAgB,EACpE,UAAC,KAAc,EAAE,MAAe,EAAE,QAAwB;gBACxD,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBACV,MAAM,CAAC,IAAI,KAAK,CAAC,iCAA+B,aAAe,CAAC,CAAC,CAAC;gBACpE,CAAC;gBAED,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;oBACX,GAAG,CAAC,wBAAsB,aAAe,CAAC,CAAC;gBAC7C,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,GAAG,CAAC,gBAAc,aAAa,cAAW,CAAC,CAAC;gBAC9C,CAAC;gBAED,OAAO,CAAC,WAAW,CAAC,CAAC;YACvB,CAAC,CACF,CAAC;QACJ,CAAC;QAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACf,MAAM,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;QAC3B,CAAC;IACH,CAAC,CACF,CAAC;AACJ,CAAC;;AAjCD,kCAiCC","file":"utilities/azureStorage/ensureContainer.js","sourcesContent":["/**\r\n * @file ensureBlobService.d.ts\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n *\r\n * Creates a container on an Azure Blob Service connection object\r\n */\r\n\r\nexport default function ensureContainer(blobService: IAzureBlobService,\r\n                                        containerName: string,\r\n                                        containerOptions?: ICreateContainerOptions,\r\n                                        log: (str: string) => void = console.log): Promise<IAzureBlobService> {\r\n  if (!containerOptions) {\r\n    containerOptions = {\r\n      publicAccessLevel: 'blob'\r\n    };\r\n  }\r\n\r\n  return new Promise<IAzureBlobService>((resolve: (svc: IAzureBlobService) => void,\r\n                                         reject: (error: Error) => void) => {\r\n      try {\r\n        blobService.createContainerIfNotExists(containerName, containerOptions,\r\n          (error: boolean, result: boolean, response: IAzureResponse) => {\r\n            if (error) {\r\n              reject(new Error(`Unable to create container: ${containerName}`));\r\n            }\r\n\r\n            if (result) {\r\n              log(`Created container: ${containerName}`);\r\n            } else {\r\n              log(`Container {${containerName}} exists!`);\r\n            }\r\n\r\n            resolve(blobService);\r\n          }\r\n        );\r\n      } catch (error) {\r\n        reject(new Error(error));\r\n      }\r\n    }\r\n  );\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}