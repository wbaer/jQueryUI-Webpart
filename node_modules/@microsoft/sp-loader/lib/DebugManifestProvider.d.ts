/// <reference types="es6-promise" />
/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file DebugManifestProvider.ts
 */
import { IClientSideComponentManifest } from '@microsoft/sp-module-interfaces';
export interface IManifestMap {
    [id: string]: IClientSideComponentManifest;
}
/**
 * This class assists with parsing debug manifests from the URL fragment or from sessionStorage.
 *
 * We allow developers to specify a set of manifests in the URL to override the manifests we get from the server.
 * The format is: <url-to-page>.aspx#debugManifestsFile=<path to manfiests init script>
 *
 * When a manifest file is specified in the URL, we cache its contents in sessionStorage so the developer doesn't need
 * to supply it on every request. This class also reads the "reset=1" query parameter to clear the cached debug
 * manifests from sessionStorage.
 */
export default class DebugManifestProvider {
    private static _instance;
    static readonly instance: DebugManifestProvider;
    /**
     * Loads debug manifests from the specificed URLs. URLs are tried in order until one succeeds.
     *
     * @param noPrompt - If true, do not show the security warning dialog. Defaults to false.
     * @param noCache - If true, do not cache the debug manifests in session storage. Defaults to false.
     * @param noAlert - If true, do not show an error alert if nonoe of the URLs can be loaded. Defaults to false.
     * @param registerAsNonDebug - If true, load manifests as non-debug.
     */
    static loadDebugManifests(alternativeManifestsFiles?: string[], noPrompt?: boolean, noCache?: boolean, noAlert?: boolean, registerAsNonDebug?: boolean): Promise<void>;
    getDebugManifests(noCache?: boolean, alternativeManifestsFiles?: string[], noAlert?: boolean): Promise<IManifestMap | undefined>;
    private _resolvePreviousDebugManifests(noCache, localDebugManifests, resolve);
    private _trySetSessionStorageManifests(localDebugManifests);
    private _parseManifestsFileFromFragementQueryParameter(clearParamter);
    private _parseManifestsFromFragementQueryParameter();
    private _getAndClearFragmentQueryParameter(parameter, clearParamter?);
    /**
     * Parse a string as querystring parameters. VSO:201753 to replace with standard library.
     */
    private _parseQueryParameters(queryParameterString);
}
