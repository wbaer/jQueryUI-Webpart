"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var office_ui_fabric_react_1 = require("office-ui-fabric-react");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var React = require("react");
var ReactDOM = require("react-dom");
var CanvasStore_1 = require("../canvasComponent/CanvasStore");
var CanvasToolboxHint = (function (_super) {
    __extends(CanvasToolboxHint, _super);
    function CanvasToolboxHint(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this._handleClick = _this._handleClick.bind(_this);
        if (CanvasStore_1.default.isLayoutSupported) {
            require('./LayoutCanvasToolboxHint.css');
        }
        else {
            require('./CanvasToolboxHint.css');
        }
        return _this;
    }
    CanvasToolboxHint.prototype.componentDidMount = function () {
        this._domNode = ReactDOM.findDOMNode(this);
        if (this.props.shouldFocus) {
            this.focus();
        }
    };
    CanvasToolboxHint.prototype.componentDidUpdate = function () {
        this.componentDidMount();
    };
    CanvasToolboxHint.prototype.render = function () {
        var _this = this;
        var _a = this.props, ariaLabel = _a.ariaLabel, isVisible = _a.isVisible, shouldCenterAlign = _a.shouldCenterAlign;
        var hintClassName = office_ui_fabric_react_1.css('CanvasToolboxHint', {
            'is-visible': isVisible
        });
        var hintButtonWrapperClassName = office_ui_fabric_react_1.css('CanvasToolboxHint-plusButtonWrapper', {
            'centerAlign': shouldCenterAlign
        });
        return this.context.store.displayMode === sp_core_library_1.DisplayMode.Edit && (React.createElement("button", { "aria-haspopup": true, "aria-label": ariaLabel, className: hintClassName, onClick: this._handleClick, "data-automation-id": 'toolboxHintButton' },
            React.createElement("div", { className: hintButtonWrapperClassName },
                React.createElement("div", { className: 'CanvasToolboxHint-plusButton', ref: function (ref) { return _this._canvasToolPlusButton = ref; } },
                    React.createElement("i", { className: 'ms-Icon ms-Icon--Add' })))));
    };
    CanvasToolboxHint.prototype.focus = function () {
        var _this = this;
        window.setTimeout(function () { return _this._domNode.focus(); }, 0);
    };
    CanvasToolboxHint.prototype._handleClick = function () {
        this.context.store.selectedControlId = undefined;
        var verticalPosition;
        var horizontalPosition;
        var plusButton = this._canvasToolPlusButton;
        if (this._domNode) {
            var _a = this._domNode, clientWidth = _a.clientWidth, offsetTop = _a.offsetTop, offsetLeft = _a.offsetLeft, parentElement = _a.parentElement;
            if (this.props.layout && this.props.layout.sectionIndex) {
                verticalPosition = parentElement.offsetTop + this._domNode.offsetTop;
                horizontalPosition = offsetLeft + parentElement.offsetLeft + (clientWidth / 2) - 146;
            }
            else {
                verticalPosition = offsetTop;
                horizontalPosition = plusButton ? plusButton.offsetLeft : 0;
            }
        }
        this.context.store.openToolbox(this.props.layout || this.props.row, verticalPosition, horizontalPosition);
    };
    return CanvasToolboxHint;
}(React.Component));
CanvasToolboxHint.contextTypes = {
    store: React.PropTypes.object.isRequired
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = CanvasToolboxHint;
