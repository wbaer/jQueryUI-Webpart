{"version":3,"sources":["data/RushConfiguration.ts"],"names":[],"mappings":"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","file":"data/RushConfiguration.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport * as fsx from 'fs-extra';\r\nimport * as os from 'os';\r\nimport * as semver from 'semver';\r\n\r\nimport rushVersion from '../rushVersion';\r\nimport Validator = require('z-schema');\r\nimport JsonFile from '../utilities/JsonFile';\r\nimport RushConfigurationProject, { IRushConfigurationProjectJson } from './RushConfigurationProject';\r\nimport Utilities from '../utilities/Utilities';\r\n\r\n/**\r\n * Part of IRushConfigurationJson.\r\n */\r\nexport interface IRushGitPolicyJson {\r\n  allowedEmailRegExps?: string[];\r\n  sampleEmail?: string;\r\n}\r\n\r\n/**\r\n * This represents the JSON data structure for the \"rush.json\" configuration file.\r\n * See rush-schema.json for documentation.\r\n */\r\nexport interface IRushConfigurationJson {\r\n  $schema: string;\r\n  commonFolder: string;\r\n  npmVersion: string;\r\n  rushMinimumVersion: string;\r\n  nodeSupportedVersionRange?: string;\r\n  projectFolderMinDepth?: number;\r\n  projectFolderMaxDepth?: number;\r\n  packageReviewFile?: string;\r\n  reviewCategories?: string[];\r\n  useLocalNpmCache?: boolean;\r\n  gitPolicy?: IRushGitPolicyJson;\r\n  projects: IRushConfigurationProjectJson[];\r\n}\r\n\r\n/**\r\n * This represents the JSON data structure for the \"rush-link.json\" data file.\r\n */\r\nexport interface IRushLinkJson {\r\n  localLinks: {\r\n    [name: string]: string[]\r\n  };\r\n}\r\n\r\n/**\r\n * This represents the Rush configuration for a repository, based on the Rush.json\r\n * configuration file.\r\n */\r\nexport default class RushConfiguration {\r\n  private _rushJsonFolder: string;\r\n  private _commonFolder: string;\r\n  private _commonFolderName: string;\r\n  private _cacheFolder: string;\r\n  private _tmpFolder: string;\r\n  private _tempModulesFolder: string;\r\n  private _homeFolder: string;\r\n  private _rushLinkJsonFilename: string;\r\n  private _npmToolVersion: string;\r\n  private _npmToolFilename: string;\r\n  private _projectFolderMinDepth: number;\r\n  private _projectFolderMaxDepth: number;\r\n  private _packageReviewFile: string;\r\n  private _reviewCategories: Set<string>;\r\n  private _gitAllowedEmailRegExps: string[];\r\n  private _gitSampleEmail: string;\r\n  private _projects: RushConfigurationProject[];\r\n  private _projectsByName: Map<string, RushConfigurationProject>;\r\n\r\n  /**\r\n   * Loads the configuration data from an Rush.json configuration file and returns\r\n   * an RushConfiguration object.\r\n   */\r\n  public static loadFromConfigurationFile(rushJsonFilename: string): RushConfiguration {\r\n    const rushConfigurationJson: IRushConfigurationJson = JsonFile.loadJsonFile(rushJsonFilename);\r\n\r\n    // Check the Rush version *before* we validate the schema, since if the version is outdated\r\n    // then the schema may have changed.\r\n    const rushMinimumVersion: string = rushConfigurationJson.rushMinimumVersion;\r\n    // If the version is missing or malformed, fall through and let the schema handle it.\r\n    if (rushMinimumVersion && semver.valid(rushMinimumVersion)) {\r\n      if (semver.lt(rushVersion, rushMinimumVersion)) {\r\n        throw new Error(`Your rush tool is version ${rushVersion}, but rush.json`\r\n          + ` requires version ${rushConfigurationJson.rushMinimumVersion} or newer.  To upgrade,`\r\n          + ` run \"npm install @microsoft/rush -g\".`);\r\n      }\r\n    }\r\n\r\n    // Remove the $schema reference that appears in the configuration object (used for IntelliSense),\r\n    // since we are replacing it with the precompiled version.  The validator.setRemoteReference()\r\n    // API is a better way to handle this, but we'd first need to publish the schema file\r\n    // to a public web server where Visual Studio can find it.\r\n    delete rushConfigurationJson.$schema;\r\n\r\n    const validator: Validator = new Validator({\r\n      breakOnFirstError: true,\r\n      noTypeless: true\r\n    });\r\n\r\n    const rushSchema: Object = JsonFile.loadJsonFile(path.join(__dirname, '../rush-schema.json'));\r\n\r\n    if (!validator.validate(rushConfigurationJson, rushSchema)) {\r\n      const error: Validator.SchemaError = validator.getLastError();\r\n\r\n      const detail: Validator.SchemaErrorDetail = error.details[0];\r\n      const errorMessage: string = `Error parsing file '${path.basename(rushJsonFilename)}',`\r\n        + `section[${detail.path}]:${os.EOL}(${detail.code}) ${detail.message}`;\r\n\r\n      console.log(os.EOL + 'ERROR: ' + errorMessage + os.EOL + os.EOL);\r\n      throw new Error(errorMessage);\r\n    }\r\n\r\n    return new RushConfiguration(rushConfigurationJson, rushJsonFilename);\r\n  }\r\n\r\n  public static loadFromDefaultLocation(): RushConfiguration {\r\n    let currentFolder: string = process.cwd();\r\n\r\n    // Look upwards at parent folders until we find a folder containing rush.json\r\n    for (let i: number = 0; i < 10; ++i) {\r\n      const rushJsonFilename: string = path.join(currentFolder, 'rush.json');\r\n\r\n      if (fsx.existsSync(rushJsonFilename)) {\r\n        if (i > 0) {\r\n          console.log('Found configuration in ' + rushJsonFilename);\r\n        }\r\n        console.log('');\r\n        return RushConfiguration.loadFromConfigurationFile(rushJsonFilename);\r\n      }\r\n\r\n      const parentFolder: string = path.dirname(currentFolder);\r\n      if (parentFolder === currentFolder) {\r\n        break;\r\n      }\r\n      currentFolder = parentFolder;\r\n    }\r\n    throw new Error('Unable to find rush.json configuration file');\r\n  }\r\n\r\n  /**\r\n   * This generates the unique names that are used to create temporary projects\r\n   * in the Rush common folder.\r\n   * NOTE: sortedProjectJsons is sorted by the caller.\r\n   */\r\n  private static _generateTempNamesForProjects(sortedProjectJsons: IRushConfigurationProjectJson[]):\r\n    Map<IRushConfigurationProjectJson, string> {\r\n\r\n    const tempNamesByProject: Map<IRushConfigurationProjectJson, string> =\r\n      new Map<IRushConfigurationProjectJson, string>();\r\n    const usedTempNames: Set<string> = new Set<string>();\r\n\r\n    // NOTE: projectJsons was already sorted in alphabetical order by the caller.\r\n    for (const projectJson of sortedProjectJsons) {\r\n      // If the name is \"@ms/MyProject\", extract the \"MyProject\" part\r\n      const unscopedName: string = Utilities.parseScopedPackageName(projectJson.packageName).name;\r\n\r\n      // Generate a unique like name \"rush-MyProject\", or \"rush-MyProject-2\" if\r\n      // there is a naming conflict\r\n      let counter: number = 0;\r\n      let tempProjectName: string = 'rush-' + unscopedName;\r\n      while (usedTempNames.has(tempProjectName)) {\r\n        ++counter;\r\n        tempProjectName = 'rush-' + unscopedName + '-' + counter;\r\n      }\r\n      usedTempNames.add(tempProjectName);\r\n      tempNamesByProject.set(projectJson, tempProjectName);\r\n    }\r\n\r\n    return tempNamesByProject;\r\n  }\r\n\r\n  /**\r\n   * DO NOT CALL -- Use RushConfiguration.loadFromConfigurationFile() or Use RushConfiguration.loadFromDefaultLocation()\r\n   * instead.\r\n   */\r\n  constructor(rushConfigurationJson: IRushConfigurationJson, rushJsonFilename: string) {\r\n    if (rushConfigurationJson.nodeSupportedVersionRange) {\r\n      if (!semver.validRange(rushConfigurationJson.nodeSupportedVersionRange)) {\r\n        throw new Error('Error parsing the node-semver expression in the \"nodeSupportedVersionRange\"'\r\n          + ` field from rush.json: \"${rushConfigurationJson.nodeSupportedVersionRange}\"`);\r\n      }\r\n      if (!semver.satisfies(process.version, rushConfigurationJson.nodeSupportedVersionRange)) {\r\n        throw new Error(`Your dev environment is running Node.js version ${process.version} which does`\r\n          + ` not meet the requirements for building this repository.  (The rush.json configuration`\r\n          + ` requires nodeSupportedVersionRange=\"${rushConfigurationJson.nodeSupportedVersionRange}\")`);\r\n      }\r\n    }\r\n\r\n    this._rushJsonFolder = path.dirname(rushJsonFilename);\r\n    this._commonFolder = path.resolve(path.join(this._rushJsonFolder, rushConfigurationJson.commonFolder));\r\n    if (!fsx.existsSync(this._commonFolder)) {\r\n      throw new Error(`Rush common folder does not exist: ${rushConfigurationJson.commonFolder}`);\r\n    }\r\n    this._commonFolderName = path.basename(this._commonFolder);\r\n\r\n    if (rushConfigurationJson.useLocalNpmCache) {\r\n      this._cacheFolder = path.resolve(path.join(this._commonFolder, 'npm-cache'));\r\n      this._tmpFolder = path.resolve(path.join(this._commonFolder, 'npm-tmp'));\r\n    }\r\n\r\n    this._tempModulesFolder = path.join(this._commonFolder, 'temp_modules');\r\n\r\n    const unresolvedUserFolder: string = process.env[(process.platform === 'win32') ? 'USERPROFILE' : 'HOME'];\r\n    this._homeFolder = path.resolve(unresolvedUserFolder);\r\n    if (!fsx.existsSync(this._homeFolder)) {\r\n      throw new Error('Unable to determine the current user\\'s home directory');\r\n    }\r\n\r\n    this._rushLinkJsonFilename = path.join(this._commonFolder, 'rush-link.json');\r\n\r\n    this._npmToolVersion = rushConfigurationJson.npmVersion;\r\n    this._npmToolFilename = path.join(this._commonFolder, 'npm-local', 'node_modules', '.bin', 'npm');\r\n\r\n    this._projectFolderMinDepth = rushConfigurationJson.projectFolderMinDepth !== undefined\r\n      ? rushConfigurationJson.projectFolderMinDepth : 1;\r\n    if (this._projectFolderMinDepth < 1) {\r\n      throw new Error('Invalid projectFolderMinDepth; the minimum possible value is 1');\r\n    }\r\n\r\n    this._projectFolderMaxDepth = rushConfigurationJson.projectFolderMaxDepth !== undefined\r\n      ? rushConfigurationJson.projectFolderMaxDepth : 2;\r\n    if (this._projectFolderMaxDepth < this._projectFolderMinDepth) {\r\n      throw new Error('The projectFolderMaxDepth cannot be smaller than the projectFolderMinDepth');\r\n    }\r\n\r\n    this._packageReviewFile = undefined;\r\n    if (rushConfigurationJson.packageReviewFile) {\r\n      this._packageReviewFile = path.resolve(path.join(this._rushJsonFolder, rushConfigurationJson.packageReviewFile));\r\n      if (!fsx.existsSync(this._packageReviewFile)) {\r\n        throw new Error('The packageReviewFile file was not found: \"' + this._packageReviewFile + '\"');\r\n      }\r\n    }\r\n\r\n    this._reviewCategories = new Set<string>(rushConfigurationJson.reviewCategories);\r\n\r\n    this._gitAllowedEmailRegExps = [];\r\n    this._gitSampleEmail = '';\r\n    if (rushConfigurationJson.gitPolicy) {\r\n      if (rushConfigurationJson.gitPolicy.sampleEmail) {\r\n        this._gitSampleEmail = rushConfigurationJson.gitPolicy.sampleEmail;\r\n      }\r\n\r\n      if (rushConfigurationJson.gitPolicy.allowedEmailRegExps) {\r\n        this._gitAllowedEmailRegExps = rushConfigurationJson.gitPolicy.allowedEmailRegExps;\r\n\r\n        if (this._gitSampleEmail.trim().length < 1) {\r\n          throw new Error('The rush.json file is missing the \"sampleEmail\" option, ' +\r\n            'which is required when using \"allowedEmailRegExps\"');\r\n        }\r\n      }\r\n    }\r\n\r\n    this._projects = [];\r\n    this._projectsByName = new Map<string, RushConfigurationProject>();\r\n\r\n    // We sort the projects array in alphabetical order.  This ensures that the packages\r\n    // are processed in a deterministic order by the various Rush algorithms.\r\n    const sortedProjectJsons: IRushConfigurationProjectJson[] = rushConfigurationJson.projects.slice(0);\r\n    sortedProjectJsons.sort(\r\n      (a: IRushConfigurationProjectJson, b: IRushConfigurationProjectJson) => a.packageName.localeCompare(b.packageName)\r\n    );\r\n\r\n    const tempNamesByProject: Map<IRushConfigurationProjectJson, string>\r\n      = RushConfiguration._generateTempNamesForProjects(sortedProjectJsons);\r\n\r\n    for (const projectJson of sortedProjectJsons) {\r\n      const tempProjectName: string = tempNamesByProject.get(projectJson);\r\n      const project: RushConfigurationProject = new RushConfigurationProject(projectJson, this, tempProjectName);\r\n      this._projects.push(project);\r\n      if (this._projectsByName.get(project.packageName)) {\r\n        throw new Error(`The project name \"${project.packageName}\" was specified more than once`\r\n          + ` in the rush.json configuration file.`);\r\n      }\r\n      this._projectsByName.set(project.packageName, project);\r\n    }\r\n\r\n    for (const project of this._projects) {\r\n      project.cyclicDependencyProjects.forEach((cyclicDependencyProject: string) => {\r\n        if (!this.getProjectByName(cyclicDependencyProject)) {\r\n          throw new Error(`In rush.json, the \"${cyclicDependencyProject}\" project does not exist,`\r\n            + ` but was referenced by the cyclicDependencyProjects for ${project.packageName}`);\r\n        }\r\n      });\r\n\r\n      // Compute the downstream dependencies within the list of Rush projects.\r\n      this._populateDownstreamDependencies(project.packageJson.dependencies, project.packageName);\r\n      this._populateDownstreamDependencies(project.packageJson.devDependencies, project.packageName);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The folder that contains rush.json for this project.\r\n   */\r\n  public get rushJsonFolder(): string {\r\n    return this._rushJsonFolder;\r\n  }\r\n\r\n  /**\r\n   * The common folder specified in rush.json.  By default, this is the fully\r\n   * resolved path for a subfolder of rushJsonFolder whose name is \"common\".\r\n   * Example: \"C:\\MyRepo\\common\"\r\n   */\r\n  public get commonFolder(): string {\r\n    return this._commonFolder;\r\n  }\r\n\r\n  /**\r\n   * This is how we refer to the common folder, e.g. in error messages.\r\n   * For example if commonFolder is \"C:\\MyRepo\\common\" then\r\n   * commonFolderName=\"common\".\r\n   */\r\n  public get commonFolderName(): string {\r\n    return this._commonFolderName;\r\n  }\r\n\r\n  /**\r\n   * The cache folder specified in rush.json. If no folder is specified, this\r\n   * value is undefined.\r\n   * Example: \"C:\\MyRepo\\common\\npm-cache\"\r\n   */\r\n  public get cacheFolder(): string {\r\n    return this._cacheFolder;\r\n  }\r\n\r\n  /**\r\n   * The tmp folder specified in rush.json. If no folder is specified, this\r\n   * value is undefined.\r\n   * Example: \"C:\\MyRepo\\common\\npm-tmp\"\r\n   */\r\n  public get tmpFolder(): string {\r\n    return this._tmpFolder;\r\n  }\r\n\r\n  /**\r\n   * The folder containing the temp packages generated by \"rush generate\".\r\n   * Example: \"C:\\MyRepo\\common\\temp_modules\"\r\n   */\r\n  public get tempModulesFolder(): string {\r\n    return this._tempModulesFolder;\r\n  }\r\n\r\n  /**\r\n   * The absolute path to the home directory for the current user.  On Windows,\r\n   * it would be something like \"C:\\Users\\YourName\".\r\n   */\r\n  public get homeFolder(): string {\r\n    return this._homeFolder;\r\n  }\r\n\r\n  /**\r\n   * The filename of the build dependency data file.  By default this is\r\n   * called 'rush-link.json' resides in the Rush common folder.\r\n   * Its data structure is defined by IRushLinkJson.\r\n   */\r\n  public get rushLinkJsonFilename(): string {\r\n    return this._rushLinkJsonFilename;\r\n  }\r\n\r\n  /**\r\n   * The version of the locally installed NPM tool.  (Example: \"1.2.3\")\r\n   */\r\n  public get npmToolVersion(): string {\r\n    return this._npmToolVersion;\r\n  }\r\n\r\n  /**\r\n   * The absolute path to the locally installed NPM tool.  If \"rush install\" has not\r\n   * been run, then this file may not exist yet.\r\n   * Example: \"C:\\MyRepo\\common\\npm-local\\node_modules\\.bin\\npm\"\r\n   */\r\n  public get npmToolFilename(): string {\r\n    return this._npmToolFilename;\r\n  }\r\n\r\n  /**\r\n   * The minimum allowable folder depth for the projectFolder field in the rush.json file.\r\n   * This setting provides a way for repository maintainers to discourage nesting of project folders\r\n   * that makes the directory tree more difficult to navigate.  The default value is 2,\r\n   * which implements a standard 2-level hierarchy of <categoryFolder>/<projectFolder>/package.json.\r\n   */\r\n  public get projectFolderMinDepth(): number {\r\n    return this._projectFolderMinDepth;\r\n  }\r\n\r\n  /**\r\n   * The maximum allowable folder depth for the projectFolder field in the rush.json file.\r\n   * This setting provides a way for repository maintainers to discourage nesting of project folders\r\n   * that makes the directory tree more difficult to navigate.  The default value is 2,\r\n   * which implements on a standard convention of <categoryFolder>/<projectFolder>/package.json.\r\n   */\r\n  public get projectFolderMaxDepth(): number {\r\n    return this._projectFolderMaxDepth;\r\n  }\r\n\r\n  /**\r\n   * The absolute path to a JSON file that tracks the NPM packages that were approved for usage\r\n   * in this repository.  This is part of an optional approval workflow, whose purpose is to\r\n   * review any new dependencies that are introduced (e.g. maybe a legal review is required, or\r\n   * maybe we are trying to minimize bloat).  When \"rush generate\" is run, any new\r\n   * package.json dependencies will be appended to this file.  When \"rush install\" is run\r\n   * (e.g. as part of a PR build), an error will be reported if the file is not up to date.\r\n   * The intent is that this file will be stored in Git and tracked by a branch policy which\r\n   * notifies reviewers whenever a PR attempts to modify the file.\r\n   *\r\n   * The PackageReviewConfiguration class can load/save this file format.\r\n   *\r\n   * Example: \"C:\\MyRepo\\common\\reviews\\PackageDependenies.json\"\r\n   */\r\n  public get packageReviewFile(): string {\r\n    return this._packageReviewFile;\r\n  }\r\n\r\n  /**\r\n   * A list of category names that are valid for usage as the RushConfigurationProject.reviewCategory field.\r\n   * This array will never be undefined.\r\n   */\r\n  public get reviewCategories(): Set<string> {\r\n    return this._reviewCategories;\r\n  }\r\n\r\n  /**\r\n   * A list of regular expressions describing allowable e-mail patterns for Git commits.\r\n   * They are case-insensitive anchored JavaScript RegExps.\r\n   * Example: \".*@example\\.com\"\r\n   * This array will never be undefined.\r\n   */\r\n  public get gitAllowedEmailRegExps(): string[] {\r\n    return this._gitAllowedEmailRegExps;\r\n  }\r\n\r\n  /**\r\n   * An example valid e-mail address that conforms to one of the allowedEmailRegExps.\r\n   * Example: \"foxtrot@example\\.com\"\r\n   * This will never be undefined, and will always be nonempty if gitAllowedEmailRegExps is used.\r\n   */\r\n  public get gitSampleEmail(): string {\r\n    return this._gitSampleEmail;\r\n  }\r\n\r\n  public get projects(): RushConfigurationProject[] {\r\n    return this._projects;\r\n  }\r\n\r\n  public get projectsByName(): Map<string, RushConfigurationProject> {\r\n    return this._projectsByName;\r\n  }\r\n\r\n  /**\r\n   * Looks up a project in the projectsByName map.  If the project is not found,\r\n   * then undefined is returned.\r\n   */\r\n  public getProjectByName(projectName: string): RushConfigurationProject {\r\n    return this._projectsByName.get(projectName);\r\n  }\r\n\r\n  /**\r\n   * This is used e.g. by command-line interfaces such as \"rush build --to example\".\r\n   * If \"example\" is not a project name, then it also looks for a scoped name\r\n   * like \"@something/example\".  If exactly one project matches this heuristic, it\r\n   * is returned.  Otherwise, undefined is returned.\r\n   */\r\n  public findProjectByShorthandName(shorthandProjectName: string): RushConfigurationProject {\r\n    // Is there an exact match?\r\n    let result: RushConfigurationProject = this._projectsByName.get(shorthandProjectName);\r\n    if (result) {\r\n      return result;\r\n    }\r\n\r\n    // Is there an approximate match?\r\n    for (const project of this._projects) {\r\n      if (Utilities.parseScopedPackageName(project.packageName).name === shorthandProjectName) {\r\n        if (result) {\r\n          // Ambiguous -- there is more than one match\r\n          return undefined;\r\n        } else {\r\n          result = project;\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private _populateDownstreamDependencies(dependencies: { [key: string]: string }, packageName: string): void {\r\n    if (!dependencies) {\r\n      return;\r\n    }\r\n    Object.keys(dependencies).forEach(dependencyName => {\r\n      const depProject: RushConfigurationProject = this._projectsByName.get(dependencyName);\r\n\r\n      if (depProject) {\r\n        depProject.downstreamDependencyProjects.push(packageName);\r\n      }\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}