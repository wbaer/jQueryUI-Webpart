"use strict";
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_telemetry_1 = require("@ms/sp-telemetry");
var SPApplicationLoader_1 = require("./SPApplicationLoader");
var SystemJsLoader_1 = require("./SystemJsLoader");
var ManifestStore_1 = require("./stores/ManifestStore");
var ComponentStore_1 = require("./stores/ComponentStore");
var DebugManifestProvider_1 = require("./DebugManifestProvider");
var componentConstants = require("./utilities/componentConstants");
var telemetryConstants = require("./utilities/telemetryConstants");
var normalizeName_1 = require("./normalizeName");
var loadComponent_1 = require("./loadComponent");
var SPLoader_resx_1 = require("./SPLoader.resx");
var SPSystemJsComponentLoader = (function () {
    function SPSystemJsComponentLoader() {
        this._isInitialized = false;
        if (!SPSystemJsComponentLoader._headElement) {
            SPSystemJsComponentLoader._headElement = document.getElementsByTagName('head')[0];
        }
        this._systemJsLoader = SystemJsLoader_1.default.instance;
    }
    SPSystemJsComponentLoader.prototype.start = function (preloadedData) {
        return this.initialize(preloadedData).then(function () {
            return SPApplicationLoader_1.default.loadApplication(preloadedData);
        }).catch(function (error) {
            sp_telemetry_1._TraceLogger.logError(telemetryConstants.startLogSource, error);
            throw error;
        });
    };
    SPSystemJsComponentLoader.prototype.initialize = function (preloadedData) {
        var _this = this;
        if (this._isInitialized) {
            return Promise.resolve();
        }
        this._isInitialized = true;
        ManifestStore_1.default.instance.registerPreloadedManifests(preloadedData);
        return DebugManifestProvider_1.default.loadDebugManifests().then(function () {
            if (preloadedData && preloadedData.spPageContextInfo) {
                SPSystemJsComponentLoader._currentLocale = preloadedData.spPageContextInfo.currentUICultureName;
            }
            if (NPM_BUILD) {
                require('./utilities/initializeNpmModule').initializeNpmModule();
            }
            _this._setComponent(ManifestStore_1.default.instance.getManifest(componentConstants.spLoaderComponentId), require('./index'));
            _this._setComponent(ManifestStore_1.default.instance.getManifest(componentConstants.spCoreLibraryComponentId), require('@microsoft/sp-core-library'));
            _this._setComponent(ManifestStore_1.default.instance.getManifest(componentConstants.spLodashSubsetComponentId), require('@microsoft/sp-lodash-subset'));
            _this._setComponent(ManifestStore_1.default.instance.getManifest(componentConstants.spTelemetryComponentId), require('@ms/sp-telemetry'));
            _this._setComponent(ManifestStore_1.default.instance.getManifest(componentConstants.odspUtilitiesBundleComponentId), require('@ms/sp-telemetry/lib/odsp-utilities/odsp-utilities-exporter'));
        });
    };
    SPSystemJsComponentLoader.prototype.loadScript = function (url, options) {
        sp_core_library_1.Validate.isNonemptyString(url, 'url');
        if (typeof options === 'string') {
            var error = new Error(SPLoader_resx_1.default.loadScriptWithStringError);
            sp_telemetry_1._TraceLogger.logError(telemetryConstants.loadScriptLogSource, error);
            throw error;
        }
        if (options && options.globalExportsName) {
            var globalMetaConfig = {
                meta: {}
            };
            globalMetaConfig.meta[url] = {
                format: 'global',
                exports: options.globalExportsName
            };
            this._systemJsLoader.systemConfig(globalMetaConfig);
        }
        return this._systemJsLoader.systemImport(url);
    };
    SPSystemJsComponentLoader.prototype.loadComponent = function (manifest) {
        return loadComponent_1.default(manifest);
    };
    SPSystemJsComponentLoader.prototype.loadComponentById = function (id, version) {
        sp_core_library_1.Validate.isNonemptyString(id, 'id');
        var manifest = ManifestStore_1.default.instance.getManifest(id, version);
        return this.loadComponent(manifest);
    };
    SPSystemJsComponentLoader.prototype.registerManifests = function (manifests) {
        ManifestStore_1.default.instance.registerManifests(manifests, false);
    };
    Object.defineProperty(SPSystemJsComponentLoader.prototype, "manifests", {
        get: function () {
            return ManifestStore_1.default.instance.getRegisteredManifests();
        },
        enumerable: true,
        configurable: true
    });
    SPSystemJsComponentLoader.prototype.loadCss = function (url) {
        sp_core_library_1.Validate.isNonemptyString(url, 'url');
        var linkTag = document.createElement('link');
        linkTag.rel = 'stylesheet';
        linkTag.type = 'text/css';
        linkTag.href = url;
        SPSystemJsComponentLoader._headElement.appendChild(linkTag);
    };
    SPSystemJsComponentLoader.prototype._forceLocalManifests = function () {
        return DebugManifestProvider_1.default.loadDebugManifests(['https://localhost:4321/temp/manifests.js', 'http://localhost:4321/temp/manifests.js'], 
 true,  true,  true,  true);
    };
    SPSystemJsComponentLoader.prototype.tryGetManifestById = function (id, version) {
        sp_core_library_1.Validate.isNonemptyString(id, 'id');
        return ManifestStore_1.default.instance.tryGetManifest(id, version);
    };
    SPSystemJsComponentLoader.prototype._setComponent = function (manifest, componentModule) {
        if (!manifest) {
            return;
        }
        var normalizedName = normalizeName_1.default(manifest);
        this._systemJsLoader.ensure(normalizedName, componentModule);
        ComponentStore_1.default.instance.storeComponent(manifest.id, manifest.version, Promise.resolve(componentModule));
    };
    return SPSystemJsComponentLoader;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SPSystemJsComponentLoader;
