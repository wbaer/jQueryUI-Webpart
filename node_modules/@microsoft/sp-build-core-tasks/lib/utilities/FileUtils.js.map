{"version":3,"sources":["utilities/FileUtils.ts"],"names":[],"mappings":";AAAA,oCAAsC;AACtC,+BAAiC;AACjC,+BAAiC;AAEjC,2BAAkC,OAAe,EAAE,QAA6B;IAA7B,yBAAA,EAAA,qBAA6B;IAC9E,MAAM,CAAC,qBAAqB,CAAC,yBAAyB,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC;AAC7E,CAAC;AAFD,8CAEC;AAED,mCAA0C,OAAe,EAAE,QAA6B;IAA7B,yBAAA,EAAA,qBAA6B;IACtF,MAAM,CAAC,IAAI,QAAQ,CAAC,IAAI,CAAC;QACvB,QAAQ,EAAE,IAAI,MAAM,CAAC,OAAO,CAAC;QAC7B,IAAI,EAAE,QAAQ;KACf,CAAC,CAAC;AACL,CAAC;AALD,8DAKC;AAED,+BAAsC,IAAmB;IACvD,IAAM,UAAU,GAAoB,IAAI,MAAM,CAAC,QAAQ,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;IAC9E,kCAAkC;IACjC,UAAkB,CAAC,KAAK,GAAG;QAC1B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChB,oCAAoC;QACpC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChB,mCAAmC;IACrC,CAAC,CAAC;IAEF,MAAM,CAAC,UAAU,CAAC;AACpB,CAAC;AAXD,sDAWC;AAED,sBAA6B,OAAe;IAC1C,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;AACrF,CAAC;AAFD,oCAEC","file":"utilities/FileUtils.js","sourcesContent":["import * as gulpUtil from 'gulp-util';\r\nimport * as stream from 'stream';\r\nimport * as crypto from 'crypto';\r\n\r\nexport function writeStringToFile(content: string, filename: string = 'tempfile'): NodeJS.ReadableStream {\r\n  return getGulpUtilFileStream(writeStringToGulpUtilFile(content, filename));\r\n}\r\n\r\nexport function writeStringToGulpUtilFile(content: string, filename: string = 'tempfile'): gulpUtil.File {\r\n  return new gulpUtil.File({\r\n    contents: new Buffer(content),\r\n    path: filename\r\n  });\r\n}\r\n\r\nexport function getGulpUtilFileStream(file: gulpUtil.File): NodeJS.ReadableStream {\r\n  const fileStream: stream.Readable = new stream.Readable({ objectMode: true });\r\n  // tslint:disable-next-line:no-any\r\n  (fileStream as any)._read = function(): void {\r\n    this.push(file);\r\n    /* tslint:disable:no-null-keyword */\r\n    this.push(null);\r\n    /* tslint:enable:no-null-keyword */\r\n  };\r\n\r\n  return fileStream;\r\n}\r\n\r\nexport function getShortHash(content: string): string {\r\n  return crypto.createHash('md5').update(content).digest('base64').replace('==', '');\r\n}\r\n"],"sourceRoot":"..\\..\\src"}