"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var sp_core_library_1 = require("@microsoft/sp-core-library");
var office_ui_fabric_react_1 = require("office-ui-fabric-react");
var React = require("react");
var CanvasControlType_1 = require("../../canvas/canvasControl/CanvasControlType");
var ToolbarButton_1 = require("../toolbarButton/ToolbarButton");
require("./Toolbar.scss");
var CanvasStrings_resx_1 = require("../../loc/CanvasStrings.resx");
var Toolbar = (function (_super) {
    __extends(Toolbar, _super);
    function Toolbar(props) {
        var _this = _super.call(this, props) || this;
        _this._handleConfigureButtonClicked = _this._handleConfigureButtonClicked.bind(_this);
        _this._handleDeleteButtonClicked = _this._handleDeleteButtonClicked.bind(_this);
        return _this;
    }
    Toolbar.prototype.render = function () {
        var _a = this.props, className = _a.className, controlType = _a.controlType, displayMode = _a.displayMode, key = _a.key;
        var configureButton;
        if (controlType !== CanvasControlType_1.default.RTE) {
            configureButton = (React.createElement(ToolbarButton_1.default, { key: 'edit' + key, canBeActive: false, fabricIconKey: 'Edit', onClick: this._handleConfigureButtonClicked, title: CanvasStrings_resx_1.default.ToolbarConfigButtonTitle, automationId: 'configureButton' }));
        }
        return (sp_core_library_1.DisplayMode.Edit === displayMode &&
            React.createElement(office_ui_fabric_react_1.FocusZone, { isCircularNavigation: true },
                React.createElement("div", { className: className || 'CanvasControlToolbar', role: 'toolbar' },
                    configureButton,
                    React.createElement(ToolbarButton_1.default, { key: 'delete' + key, canBeActive: false, fabricIconKey: 'Delete', onClick: this._handleDeleteButtonClicked, title: CanvasStrings_resx_1.default.ToolbarDeleteButtonTitle, automationId: 'deleteButton' }))));
    };
    Toolbar.prototype._handleConfigureButtonClicked = function () {
        this.props.onConfigureButtonClick(this.props.id);
    };
    Toolbar.prototype._handleDeleteButtonClicked = function () {
        this.props.onDeleteButtonClick(this.props.row, this.props.controlPosition);
    };
    return Toolbar;
}(React.Component));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Toolbar;
