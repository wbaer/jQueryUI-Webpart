{"version":3,"sources":["components/GroupedList/GroupHeader.tsx"],"names":[],"mappings":"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","file":"components/GroupedList/GroupHeader.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  autobind,\r\n  css\r\n} from '../../Utilities';\r\nimport { IGroupDividerProps } from './GroupedList.Props';\r\nimport { SelectionMode } from '../../utilities/selection/index';\r\nimport { Check } from '../Check/Check';\r\nimport { GroupSpacer } from './GroupSpacer';\r\nimport { Spinner } from '../../Spinner';\r\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\r\nimport './GroupHeader.scss';\r\n\r\nexport interface IGroupHeaderState {\r\n  isCollapsed: boolean;\r\n  isLoadingVisible: boolean;\r\n}\r\n\r\nexport class GroupHeader extends React.Component<IGroupDividerProps, IGroupHeaderState> {\r\n  constructor(props: IGroupDividerProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isCollapsed: this.props.group && this.props.group.isCollapsed,\r\n      isLoadingVisible: false\r\n    };\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps) {\r\n    if (newProps.group) {\r\n      let newCollapsed = newProps.group.isCollapsed;\r\n      let isGroupLoading = newProps.headerProps && newProps.headerProps.isGroupLoading;\r\n      let newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(newProps.group);\r\n\r\n      this.setState({\r\n        isCollapsed: newCollapsed,\r\n        isLoadingVisible: newLoadingVisible\r\n      });\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    let {\r\n      group,\r\n      groupLevel,\r\n      viewport,\r\n      selectionMode,\r\n      loadingText,\r\n      isSelected,\r\n      selected,\r\n      isCollapsedGroupSelectVisible\r\n    } = this.props;\r\n    let { isCollapsed, isLoadingVisible } = this.state;\r\n\r\n    if (isCollapsedGroupSelectVisible === undefined) {\r\n      isCollapsedGroupSelectVisible = true;\r\n    }\r\n    let canSelectGroup = selectionMode === SelectionMode.multiple;\r\n    let isSelectionCheckVisible = canSelectGroup && (isCollapsedGroupSelectVisible || !(group && group.isCollapsed));\r\n    let currentlySelected = isSelected || selected;\r\n    return group && (\r\n      <div\r\n        className={ css('ms-GroupHeader', {\r\n          'is-selected': currentlySelected\r\n        }) }\r\n        style={ viewport ? { minWidth: viewport.width } : {} }\r\n        onClick={ this._onHeaderClick }\r\n        aria-label={ group.ariaLabel || group.name }\r\n        data-is-focusable={ true } >\r\n\r\n        <FocusZone direction={ FocusZoneDirection.horizontal }>\r\n\r\n          { isSelectionCheckVisible ? (\r\n            <button\r\n              className='ms-GroupHeader-check'\r\n              data-selection-toggle={ true }\r\n              onClick={ this._onToggleSelectGroupClick } >\r\n              <Check checked={ currentlySelected } />\r\n            </button>\r\n          ) : (selectionMode !== SelectionMode.none ? GroupSpacer({ count: 1 }) : null)\r\n          }\r\n\r\n          { GroupSpacer({ count: groupLevel }) }\r\n\r\n          <div className='ms-GroupHeader-dropIcon'><i className='ms-Icon ms-Icon--Tag'></i></div>\r\n          <button className='ms-GroupHeader-expand' onClick={ this._onToggleCollapse }>\r\n            <i className={ css('ms-Icon ms-Icon--ChevronDown', {\r\n              'is-collapsed': isCollapsed\r\n            }) } />\r\n          </button>\r\n\r\n          <div className='ms-GroupHeader-title ms-font-xl'>\r\n            <span>{ group.name } </span>\r\n            {/* hasMoreData flag is set when grouping is throttle by SPO server which in turn resorts to regular sorting to simulate\r\n                grouping behaviors, in which case group count is the number of items returned so far. That's the reasons we need to\r\n                use \"+\" to show we might have more items than count indicates. */}\r\n            <span>({ group.count }{ group.hasMoreData && '+' }) </span>\r\n          </div>\r\n\r\n          <div className={ css('ms-GroupHeader-loading', { 'is-loading': isLoadingVisible }) }>\r\n            <Spinner label={ loadingText } />\r\n          </div>\r\n\r\n        </FocusZone>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  @autobind\r\n  private _onToggleCollapse(ev: React.MouseEvent<HTMLElement>) {\r\n    let { group, onToggleCollapse, isGroupLoading } = this.props;\r\n    let { isCollapsed } = this.state;\r\n\r\n    let newCollapsed = !isCollapsed;\r\n    let newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(group);\r\n\r\n    this.setState({\r\n      isCollapsed: newCollapsed,\r\n      isLoadingVisible: newLoadingVisible\r\n    });\r\n    if (onToggleCollapse) {\r\n      onToggleCollapse(group);\r\n    }\r\n\r\n    ev.stopPropagation();\r\n    ev.preventDefault();\r\n  }\r\n\r\n  @autobind\r\n  private _onToggleSelectGroupClick(ev: React.MouseEvent<HTMLElement>) {\r\n    let { onToggleSelectGroup, group } = this.props;\r\n\r\n    if (onToggleSelectGroup) {\r\n      onToggleSelectGroup(group);\r\n    }\r\n\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n  }\r\n\r\n  @autobind\r\n  private _onHeaderClick() {\r\n    let { group, onGroupHeaderClick, onToggleSelectGroup } = this.props;\r\n\r\n    if (onGroupHeaderClick) {\r\n      onGroupHeaderClick(group);\r\n    } else if (onToggleSelectGroup) {\r\n      onToggleSelectGroup(group);\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}