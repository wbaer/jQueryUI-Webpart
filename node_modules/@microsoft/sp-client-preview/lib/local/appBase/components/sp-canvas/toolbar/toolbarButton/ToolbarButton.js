"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var office_ui_fabric_react_1 = require("office-ui-fabric-react");
var React = require("react");
require("./ToolbarButton.scss");
var Utilities_1 = require("../../common/Utilities");
var ButtonState;
(function (ButtonState) {
    ButtonState[ButtonState["Active"] = 0] = "Active";
    ButtonState[ButtonState["Disabled"] = 1] = "Disabled";
    ButtonState[ButtonState["Normal"] = 2] = "Normal";
})(ButtonState = exports.ButtonState || (exports.ButtonState = {}));
var ToolbarButton = (function (_super) {
    __extends(ToolbarButton, _super);
    function ToolbarButton(props) {
        return _super.call(this, props) || this;
    }
    ToolbarButton.prototype.render = function () {
        var buttonClassName = office_ui_fabric_react_1.css('ToolbarButton', this.props.className, {
            'ToolbarButton--disabled': this.props.disabled,
            'ToolbarButton--active': this.props.isActive
        });
        var iconCssClass = this.props.fabricIconKey ?
            "ms-Icon ms-Icon--" + this.props.fabricIconKey : (this.props.iconClassName || '');
        var isTouchDevice = Utilities_1.default.isTouchEnabled();
        var onClick = isTouchDevice ? undefined : this.props.onClick;
        var onMouseDown = isTouchDevice ? this.props.onClick : undefined;
        return (React.createElement("button", { type: 'button', "aria-disabled": this.props.disabled ? true : undefined, "aria-pressed": this.props.canBeActive ? this.props.isActive : undefined, className: buttonClassName, onClick: onClick, onMouseDown: onMouseDown, title: this.props.title, tabIndex: this.props.tabIndex, "data-automation-id": this.props.automationId, onKeyDown: this.props.onKeyDown ? this.props.onKeyDown : undefined, onBlur: this.props.onBlur },
            React.createElement("i", { className: iconCssClass }),
            this.props.label));
    };
    return ToolbarButton;
}(React.Component));
ToolbarButton.defaultProps = {
    key: undefined,
    fabricIconKey: undefined,
    onClick: undefined,
    canBeActive: true,
    className: 'CanvasControlToolbar-item',
    disabled: false,
    isActive: false
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ToolbarButton;
