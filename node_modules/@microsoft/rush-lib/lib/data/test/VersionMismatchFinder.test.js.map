{"version":3,"sources":["data/test/VersionMismatchFinder.test.ts"],"names":[],"mappings":"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","file":"data/test/VersionMismatchFinder.test.js","sourcesContent":["/// <reference types='mocha' />\r\n\r\nimport { assert } from 'chai';\r\nimport RushConfigurationProject from '../RushConfigurationProject';\r\nimport { VersionMismatchFinder } from '../VersionMismatchFinder';\r\n\r\ndescribe('VersionMismatchFinder', () => {\r\n\r\n  it('finds no mismatches if there are none', (done: MochaDone) => {\r\n    const projects: RushConfigurationProject[] = [\r\n      {\r\n        packageName: 'A',\r\n        packageJson: {\r\n          dependencies: {\r\n            '@types/foo': '1.2.3',\r\n            'karma': '0.0.1'\r\n          }\r\n        }\r\n      },\r\n      {\r\n        packageName: 'B',\r\n        packageJson: {\r\n          dependencies: {\r\n            '@types/foo': '1.2.3',\r\n            'karma': '0.0.1'\r\n          }\r\n        }\r\n      }\r\n    ] as any as RushConfigurationProject[]; // tslint:disable-line:no-any\r\n    const mismatchFinder: VersionMismatchFinder = new VersionMismatchFinder(projects);\r\n    assert.isNumber(mismatchFinder.numberOfMismatches);\r\n    assert.equal(mismatchFinder.numberOfMismatches, 0);\r\n    assert.equal(mismatchFinder.getMismatches().length, 0);\r\n    done();\r\n  });\r\n\r\n  it('finds a mismatch in two packages', (done: MochaDone) => {\r\n    const projects: RushConfigurationProject[] = [\r\n      {\r\n        packageName: 'A',\r\n        packageJson: {\r\n          dependencies: {\r\n            '@types/foo': '1.2.3',\r\n            'karma': '0.0.1'\r\n          }\r\n        }\r\n      },\r\n      {\r\n        packageName: 'B',\r\n        packageJson: {\r\n          dependencies: {\r\n            '@types/foo': '2.0.0',\r\n            'karma': '0.0.1'\r\n          }\r\n        }\r\n      }\r\n    ] as any as RushConfigurationProject[]; // tslint:disable-line:no-any\r\n    const mismatchFinder: VersionMismatchFinder = new VersionMismatchFinder(projects);\r\n    assert.isNumber(mismatchFinder.numberOfMismatches);\r\n    assert.equal(mismatchFinder.numberOfMismatches, 1);\r\n    assert.equal(mismatchFinder.getMismatches().length, 1);\r\n    assert.equal(mismatchFinder.getMismatches()[0], '@types/foo');\r\n    assert.includeMembers(mismatchFinder.getVersionsOfMismatch('@types/foo'), ['2.0.0', '1.2.3']);\r\n    assert.equal(mismatchFinder.getConsumersOfMismatch('@types/foo', '2.0.0'), 'B');\r\n    assert.equal(mismatchFinder.getConsumersOfMismatch('@types/foo', '1.2.3'), 'A');\r\n    done();\r\n  });\r\n\r\n  it('won\\'t let you access mismatches that don\\t exist', (done: MochaDone) => {\r\n    const projects: RushConfigurationProject[] = [\r\n      {\r\n        packageName: 'A',\r\n        packageJson: {\r\n          dependencies: {\r\n            '@types/foo': '1.2.3',\r\n            'karma': '0.0.1'\r\n          }\r\n        }\r\n      },\r\n      {\r\n        packageName: 'B',\r\n        packageJson: {\r\n          dependencies: {\r\n            '@types/foo': '2.0.0',\r\n            'karma': '0.0.1'\r\n          }\r\n        }\r\n      }\r\n    ] as any as RushConfigurationProject[]; // tslint:disable-line:no-any\r\n    const mismatchFinder: VersionMismatchFinder = new VersionMismatchFinder(projects);\r\n    assert.equal(mismatchFinder.getVersionsOfMismatch('@types/foobar'), undefined);\r\n    assert.equal(mismatchFinder.getConsumersOfMismatch('@types/fobar', '2.0.0'), undefined);\r\n    assert.equal(mismatchFinder.getConsumersOfMismatch('@types/foo', '9.9.9'), undefined);\r\n    done();\r\n  });\r\n\r\n  it('finds two mismatches in two different pairs of projects', (done: MochaDone) => {\r\n    const projects: RushConfigurationProject[] = [\r\n      {\r\n        packageName: 'A',\r\n        packageJson: {\r\n          dependencies: {\r\n            '@types/foo': '1.2.3',\r\n            'karma': '0.0.1'\r\n          }\r\n        }\r\n      },\r\n      {\r\n        packageName: 'B',\r\n        packageJson: {\r\n          dependencies: {\r\n            '@types/foo': '2.0.0',\r\n            'karma': '0.0.1'\r\n          }\r\n        }\r\n      },\r\n      {\r\n        packageName: 'C',\r\n        packageJson: {\r\n          dependencies: {\r\n            'mocha': '1.2.3',\r\n            'karma': '0.0.1'\r\n          }\r\n        }\r\n      },\r\n      {\r\n        packageName: 'D',\r\n        packageJson: {\r\n          dependencies: {\r\n            'mocha': '2.0.0',\r\n            'karma': '0.0.1'\r\n          }\r\n        }\r\n      }\r\n    ] as any as RushConfigurationProject[]; // tslint:disable-line:no-any\r\n    const mismatchFinder: VersionMismatchFinder = new VersionMismatchFinder(projects);\r\n    assert.isNumber(mismatchFinder.numberOfMismatches);\r\n    assert.equal(mismatchFinder.numberOfMismatches, 2);\r\n    assert.equal(mismatchFinder.getMismatches().length, 2);\r\n    assert.includeMembers(mismatchFinder.getMismatches(), ['@types/foo', 'mocha']);\r\n    assert.includeMembers(mismatchFinder.getVersionsOfMismatch('@types/foo'), ['2.0.0', '1.2.3']);\r\n    assert.includeMembers(mismatchFinder.getVersionsOfMismatch('mocha'), ['2.0.0', '1.2.3']);\r\n    assert.equal(mismatchFinder.getConsumersOfMismatch('@types/foo', '1.2.3'), 'A');\r\n    assert.equal(mismatchFinder.getConsumersOfMismatch('@types/foo', '2.0.0'), 'B');\r\n    assert.equal(mismatchFinder.getConsumersOfMismatch('mocha', '1.2.3'), 'C');\r\n    assert.equal(mismatchFinder.getConsumersOfMismatch('mocha', '2.0.0'), 'D');\r\n    done();\r\n  });\r\n\r\n  it('finds three mismatches in three projects', (done: MochaDone) => {\r\n      const projects: RushConfigurationProject[] = [\r\n      {\r\n        packageName: 'A',\r\n        packageJson: {\r\n          dependencies: {\r\n            '@types/foo': '1.2.3',\r\n            'karma': '0.0.1'\r\n          }\r\n        }\r\n      },\r\n      {\r\n        packageName: 'B',\r\n        packageJson: {\r\n          dependencies: {\r\n            '@types/foo': '2.0.0',\r\n            'karma': '0.0.1'\r\n          }\r\n        }\r\n      },\r\n      {\r\n        packageName: 'C',\r\n        packageJson: {\r\n          dependencies: {\r\n            '@types/foo': '9.9.9',\r\n            'karma': '0.0.1'\r\n          }\r\n        }\r\n      }\r\n    ] as any as RushConfigurationProject[]; // tslint:disable-line:no-any\r\n    const mismatchFinder: VersionMismatchFinder = new VersionMismatchFinder(projects);\r\n    assert.isNumber(mismatchFinder.numberOfMismatches);\r\n    assert.equal(mismatchFinder.numberOfMismatches, 1);\r\n    assert.equal(mismatchFinder.getMismatches().length, 1);\r\n    assert.includeMembers(mismatchFinder.getMismatches(), ['@types/foo']);\r\n    assert.includeMembers(mismatchFinder.getVersionsOfMismatch('@types/foo'), ['2.0.0', '1.2.3', '9.9.9']);\r\n    assert.equal(mismatchFinder.getConsumersOfMismatch('@types/foo', '1.2.3'), 'A');\r\n    assert.equal(mismatchFinder.getConsumersOfMismatch('@types/foo', '2.0.0'), 'B');\r\n    assert.equal(mismatchFinder.getConsumersOfMismatch('@types/foo', '9.9.9'), 'C');\r\n    done();\r\n  });\r\n\r\n  it('checks dev dependencies', (done: MochaDone) => {\r\n    const projects: RushConfigurationProject[] = [\r\n      {\r\n        packageName: 'A',\r\n        packageJson: {\r\n          dependencies: {\r\n            '@types/foo': '1.2.3',\r\n            'karma': '0.0.1'\r\n          }\r\n        }\r\n      },\r\n      {\r\n        packageName: 'B',\r\n        packageJson: {\r\n          devDependencies: {\r\n            '@types/foo': '2.0.0',\r\n            'karma': '0.0.1'\r\n          }\r\n        }\r\n      }\r\n    ] as any as RushConfigurationProject[]; // tslint:disable-line:no-any\r\n    const mismatchFinder: VersionMismatchFinder = new VersionMismatchFinder(projects);\r\n    assert.isNumber(mismatchFinder.numberOfMismatches);\r\n    assert.equal(mismatchFinder.numberOfMismatches, 1);\r\n    assert.equal(mismatchFinder.getMismatches().length, 1);\r\n    assert.equal(mismatchFinder.getMismatches()[0], '@types/foo');\r\n    assert.includeMembers(mismatchFinder.getVersionsOfMismatch('@types/foo'), ['2.0.0', '1.2.3']);\r\n    assert.equal(mismatchFinder.getConsumersOfMismatch('@types/foo', '2.0.0'), 'B');\r\n    assert.equal(mismatchFinder.getConsumersOfMismatch('@types/foo', '1.2.3'), 'A');\r\n    done();\r\n  });\r\n\r\n  it('checks peer dependencies', (done: MochaDone) => {\r\n    const projects: RushConfigurationProject[] = [\r\n      {\r\n        packageName: 'A',\r\n        packageJson: {\r\n          dependencies: {\r\n            '@types/foo': '1.2.3',\r\n            'karma': '0.0.1'\r\n          }\r\n        }\r\n      },\r\n      {\r\n        packageName: 'B',\r\n        packageJson: {\r\n          peerDependencies: {\r\n            '@types/foo': '2.0.0',\r\n            'karma': '0.0.1'\r\n          }\r\n        }\r\n      }\r\n    ] as any as RushConfigurationProject[]; // tslint:disable-line:no-any\r\n    const mismatchFinder: VersionMismatchFinder = new VersionMismatchFinder(projects);\r\n    assert.isNumber(mismatchFinder.numberOfMismatches);\r\n    assert.equal(mismatchFinder.numberOfMismatches, 1);\r\n    assert.equal(mismatchFinder.getMismatches().length, 1);\r\n    assert.equal(mismatchFinder.getMismatches()[0], '@types/foo');\r\n    assert.includeMembers(mismatchFinder.getVersionsOfMismatch('@types/foo'), ['2.0.0', '1.2.3']);\r\n    assert.equal(mismatchFinder.getConsumersOfMismatch('@types/foo', '2.0.0'), 'B');\r\n    assert.equal(mismatchFinder.getConsumersOfMismatch('@types/foo', '1.2.3'), 'A');\r\n    done();\r\n  });\r\n\r\n  it('checks optional dependencies', (done: MochaDone) => {\r\n    const projects: RushConfigurationProject[] = [\r\n      {\r\n        packageName: 'A',\r\n        packageJson: {\r\n          dependencies: {\r\n            '@types/foo': '1.2.3',\r\n            'karma': '0.0.1'\r\n          }\r\n        }\r\n      },\r\n      {\r\n        packageName: 'B',\r\n        packageJson: {\r\n          optionalDependencies: {\r\n            '@types/foo': '2.0.0',\r\n            'karma': '0.0.1'\r\n          }\r\n        }\r\n      }\r\n    ] as any as RushConfigurationProject[]; // tslint:disable-line:no-any\r\n    const mismatchFinder: VersionMismatchFinder = new VersionMismatchFinder(projects);\r\n    assert.isNumber(mismatchFinder.numberOfMismatches);\r\n    assert.equal(mismatchFinder.numberOfMismatches, 1);\r\n    assert.equal(mismatchFinder.getMismatches().length, 1);\r\n    assert.equal(mismatchFinder.getMismatches()[0], '@types/foo');\r\n    assert.includeMembers(mismatchFinder.getVersionsOfMismatch('@types/foo'), ['2.0.0', '1.2.3']);\r\n    assert.equal(mismatchFinder.getConsumersOfMismatch('@types/foo', '2.0.0'), 'B');\r\n    assert.equal(mismatchFinder.getConsumersOfMismatch('@types/foo', '1.2.3'), 'A');\r\n    done();\r\n  });\r\n});"],"sourceRoot":"..\\..\\..\\src"}