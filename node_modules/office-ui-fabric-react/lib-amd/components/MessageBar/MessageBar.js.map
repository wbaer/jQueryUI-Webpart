{"version":3,"sources":["components/MessageBar/MessageBar.tsx"],"names":[],"mappings":"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","file":"components/MessageBar/MessageBar.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  css,\r\n  getId\r\n} from '../../Utilities';\r\nimport { Button, ButtonType } from '../../Button';\r\nimport { IMessageBarProps, MessageBarType } from './MessageBar.Props';\r\nimport './MessageBar.scss';\r\n\r\nexport interface IMessageBarState {\r\n  labelId?: string;\r\n  showContent?: boolean;\r\n}\r\n\r\nexport class MessageBar extends React.Component<IMessageBarProps, IMessageBarState> {\r\n\r\n  public static defaultProps: IMessageBarProps = {\r\n    messageBarType: MessageBarType.info,\r\n    onDismiss: null,\r\n    isMultiline: true,\r\n  };\r\n\r\n  private ICON_MAP = {\r\n    [MessageBarType.info]: 'Info',\r\n    [MessageBarType.warning]: 'Info',\r\n    [MessageBarType.error]: 'ErrorBadge',\r\n    [MessageBarType.blocked]: 'Blocked',\r\n    [MessageBarType.remove]: 'Blocked', // TODO remove deprecated value at >= 1.0.0\r\n    [MessageBarType.severeWarning]: 'Warning',\r\n    [MessageBarType.success]: 'Completed'\r\n  };\r\n\r\n  constructor(props: IMessageBarProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      labelId: getId('MessageBar'),\r\n      showContent: false\r\n    };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    let { isMultiline } = this.props;\r\n\r\n    return isMultiline ? this._renderMultiLine() : this._renderSingleLine();\r\n  }\r\n\r\n  public componentDidMount() {\r\n    /**\r\n     * Live regions need an update to announce content.\r\n     */\r\n    setTimeout(() => {\r\n      this.setState({ showContent: true });\r\n    }, 10);\r\n  }\r\n\r\n  private _getActionsDiv(): JSX.Element {\r\n    if (this.props.actions) {\r\n      return <div className={ this.props.isMultiline ? 'ms-MessageBar-actions' : 'ms-MessageBar-actionsOneline' }>\r\n        { this.props.actions }\r\n      </div>;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private _getClassName(): string {\r\n    return css(this.props.className, 'ms-MessageBar', {\r\n      'ms-MessageBar': this.props.messageBarType === MessageBarType.info,\r\n      'ms-MessageBar--error': this.props.messageBarType === MessageBarType.error,\r\n      'ms-MessageBar--blocked': (this.props.messageBarType === MessageBarType.blocked) || (this.props.messageBarType === MessageBarType.remove), // TODO remove deprecated value at >= 1.0.0\r\n      'ms-MessageBar--severeWarning': this.props.messageBarType === MessageBarType.severeWarning,\r\n      'ms-MessageBar--success': this.props.messageBarType === MessageBarType.success,\r\n      'ms-MessageBar--warning': this.props.messageBarType === MessageBarType.warning\r\n    });\r\n  }\r\n\r\n  private _getDismissDiv(): JSX.Element {\r\n    if (this.props.onDismiss != null) {\r\n      return <Button\r\n        disabled={ false }\r\n        className='ms-MessageBar-dismissal'\r\n        buttonType={ ButtonType.icon }\r\n        onClick={ this.props.onDismiss }\r\n        icon='Cancel'\r\n        ariaLabel={ this.props.dismissButtonAriaLabel }\r\n      />;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private _getIconSpan(): JSX.Element {\r\n    return <div className='ms-MessageBar-icon'><i className={ `ms-Icon ms-Icon--${this.ICON_MAP[this.props.messageBarType]}` }></i></div>;\r\n  }\r\n\r\n  private _getInnerTextClassName(): string {\r\n    return this.props.onDismiss || this.props.actions ? 'ms-MessageBar-innerTextPadding' : 'ms-MessageBar-innerText';\r\n  }\r\n\r\n  private _renderMultiLine(): React.ReactElement<React.HTMLProps<HTMLAreaElement>> {\r\n    return (\r\n      <div\r\n        className={ this._getClassName() + ' ms-MessageBar-multiline' }\r\n        role='status'\r\n        aria-live={ this._getAnnouncementPriority() }>\r\n        <div className='ms-MessageBar-content'>\r\n          { this._getIconSpan() }\r\n          <div className='ms-MessageBar-actionables'>\r\n            <div className='ms-MessageBar-text' id={ this.state.labelId }>\r\n              <span className={ this._getInnerTextClassName() }>\r\n                { this.state.showContent && this.props.children }\r\n              </span>\r\n            </div>\r\n            { this._getActionsDiv() }\r\n            { this._getDismissDiv() }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _renderSingleLine(): React.ReactElement<React.HTMLProps<HTMLAreaElement>> {\r\n    return (\r\n      <div className={ this._getClassName() + ' ms-MessageBar-singleline' }\r\n        role='status'\r\n        aria-live={ this._getAnnouncementPriority() }>\r\n        <div className='ms-MessageBar-content'>\r\n          { this._getIconSpan() }\r\n          <div className='ms-MessageBar-actionables'>\r\n            <div className='ms-MessageBar-text' id={ this.state.labelId }>\r\n              <span className={ this._getInnerTextClassName() }>\r\n                { this.state.showContent && this.props.children }\r\n              </span>\r\n            </div>\r\n          </div>\r\n          { this._getActionsDiv() }\r\n          <div className='ms-MessageBar-dismissalOneline'>\r\n            { this._getDismissDiv() }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _getAnnouncementPriority(): string {\r\n    switch (this.props.messageBarType) {\r\n      case MessageBarType.blocked:\r\n      case MessageBarType.error:\r\n      case MessageBarType.severeWarning:\r\n        return 'assertive';\r\n    }\r\n    return 'polite';\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}