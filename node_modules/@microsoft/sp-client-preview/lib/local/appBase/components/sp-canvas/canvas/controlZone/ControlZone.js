"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = require("react");
var office_ui_fabric_react_1 = require("office-ui-fabric-react");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var odsp_utilities_bundle_1 = require("@ms/odsp-utilities-bundle");
var sp_webpart_base_1 = require("@microsoft/sp-webpart-base");
var sp_client_base_1 = require("@microsoft/sp-client-base");
var CanvasControlType_1 = require("../canvasControl/CanvasControlType");
var CanvasStore_1 = require("../canvasComponent/CanvasStore");
var CanvasA11y_1 = require("../../a11y/CanvasA11y");
var CanvasStrings_resx_1 = require("../../loc/CanvasStrings.resx");
var ControlZone = (function (_super) {
    __extends(ControlZone, _super);
    function ControlZone(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this._handleClickCapture = _this._handleClickCapture.bind(_this);
        _this._handleKeydownCapture = _this._handleKeydownCapture.bind(_this);
        _this._handleMouseOut = _this._handleMouseOut.bind(_this);
        _this._handleMouseOver = _this._handleMouseOver.bind(_this);
        _this._handleToolbarKeydown = _this._handleToolbarKeydown.bind(_this);
        _this._handleTrapFocus = _this._handleTrapFocus.bind(_this);
        _this._handleControlFocus = _this._handleControlFocus.bind(_this);
        _this._selectControl = _this._selectControl.bind(_this);
        if (CanvasStore_1.default.isLayoutSupported) {
            require('./LayoutControlZone.css');
        }
        else {
            require('./ControlZone.css');
        }
        return _this;
    }
    ControlZone.prototype.shouldComponentUpdate = function (nextProps) {
        var _a = this.props, displayMode = _a.displayMode, isSelected = _a.isSelected, row = _a.row, position = _a.position;
        return (displayMode !== nextProps.displayMode ||
            isSelected !== nextProps.isSelected ||
            row !== nextProps.row ||
            !sp_client_base_1.Compare.shallowCompare(position, nextProps.position));
    };
    ControlZone.prototype.componentDidMount = function () {
        if (this.context.store.selectedControlId === this.props.id) {
            this.context.store.scrollIntoView('partial', this._domElement, 500, ControlZone._VERTICAL_MARGIN * 2);
            this.context.store.a11yManager.navigateTo(this._domElement);
        }
        this._childControl = this.context.store.getControl(this.props.id);
        if (this.props.displayMode === sp_core_library_1.DisplayMode.Edit) {
            this._toolbarElement.addEventListener('keydown', this._handleToolbarKeydown);
            this._childControlElement.addEventListener('keydown', this._handleKeydownCapture, true);
        }
    };
    ControlZone.prototype.componentDidUpdate = function (prevProps) {
        var displayMode = this.props.displayMode;
        if (prevProps.displayMode !== displayMode) {
            if (displayMode === sp_core_library_1.DisplayMode.Edit) {
                this._toolbarElement.addEventListener('keydown', this._handleToolbarKeydown);
                this._childControlElement.addEventListener('keydown', this._handleKeydownCapture, true);
            }
            else if (displayMode === sp_core_library_1.DisplayMode.Read) {
                this._toolbarElement.removeEventListener('keydown', this._handleToolbarKeydown);
                this._childControlElement.removeEventListener('keydown', this._handleKeydownCapture, true);
            }
        }
    };
    ControlZone.prototype.render = function () {
        var _this = this;
        var _a = this.props, children = _a.children, displayMode = _a.displayMode, isSelected = _a.isSelected, id = _a.id;
        var controlType = children[0].props.controlType;
        var isReadMode = displayMode === sp_core_library_1.DisplayMode.Read;
        var accessibleLabel = '';
        var ariaPrimaryLabelById = "cswpAccessibleLabel_" + id;
        var ariaContextualLabelId = "cswpAccessibleLabelContextual_" + id;
        var ariaLabelledBy;
        if (controlType === CanvasControlType_1.default.WebPartZone) {
            ariaLabelledBy = ariaContextualLabelId;
        }
        else if (controlType === CanvasControlType_1.default.RTE) {
            accessibleLabel = odsp_utilities_bundle_1.StringHelper.format(CanvasStrings_resx_1.default.CanvasZoneAriaWebpartName || '', CanvasStrings_resx_1.default.TextWebPartDisplayName || '') || '';
            ariaLabelledBy = ariaPrimaryLabelById;
        }
        if (displayMode === sp_core_library_1.DisplayMode.Edit) {
            accessibleLabel = odsp_utilities_bundle_1.StringHelper.format(CanvasStrings_resx_1.default.AriaWebPartEnterTemplate || '', accessibleLabel) || '';
            if (controlType === CanvasControlType_1.default.WebPartZone) {
                ariaLabelledBy += " " + ariaPrimaryLabelById;
            }
        }
        var zoneClassName = office_ui_fabric_react_1.css('ControlZone', {
            'ControlZone--edit': !isReadMode,
            'ControlZone--selected': isSelected
        });
        return (
        React.createElement("div", { "aria-labelledby": ariaLabelledBy, className: zoneClassName, ref: function (ref) { return _this._domElement = ref; }, onMouseOut: this._handleMouseOut, onMouseOver: this._handleMouseOver, tabIndex: isReadMode ? -1 : 0, "data-automation-id": 'ControlZone' },
            React.createElement("div", null,
                React.createElement("div", { className: 'ControlZone-control', onClickCapture: isReadMode ? undefined : this._handleClickCapture, onFocus: isReadMode ? undefined : this._handleControlFocus, ref: function (ref) { return _this._childControlElement = ref; } }, children[0]),
                React.createElement("div", { ref: function (ref) { return _this._toolbarElement = ref; } }, children[1]),
                React.createElement("div", { id: ariaPrimaryLabelById, className: 'ControlZone-screenReaderOnly' }, accessibleLabel))));
    };
    ControlZone.prototype._handleControlFocus = function (e) {
        this._selectControl();
    };
    ControlZone.prototype._handleClickCapture = function (e) {
        this._selectControl();
    };
    ControlZone.prototype._handleKeydownCapture = function (evt) {
        if (this._childControl && this._childControl.props.controlType === CanvasControlType_1.default.WebPartZone) {
            if (CanvasA11y_1.isEscape(evt)) {
                this.context.store.a11yManager.navigateTo(this._domElement);
                evt.stopPropagation();
                evt.preventDefault();
            }
            else if (CanvasA11y_1.isKey(CanvasA11y_1.KeyCodes.F10, evt, true)) {
                this.context.store.a11yManager.navigateTo(this._toolbarElement);
                this.context.store.a11yManager.ariaAlert(CanvasStrings_resx_1.default.ToolbarNavigationArrowKeys);
                evt.stopPropagation();
                evt.preventDefault();
            }
            else if (CanvasA11y_1.isKey(CanvasA11y_1.KeyCodes.P, evt, true)) {
                this.context.store.webPartManager.setPropertyPaneState(this._childControl.props.id, sp_webpart_base_1.PropertyPaneState.Open);
                evt.stopPropagation();
                evt.preventDefault();
            }
            else if (!CanvasA11y_1.isShiftTab(evt) || evt.target !== CanvasA11y_1.getFirstFocusableChild(this._childControlElement)) {
                this.context.store.a11yManager.skipEvent(evt);
            }
        }
    };
    ControlZone.prototype._handleToolbarKeydown = function (evt) {
        if (this._childControl && this._childControl.props.controlType === CanvasControlType_1.default.RTE) {
            if (CanvasA11y_1.isEscape(evt)) {
                this._childControl.focus();
                evt.stopPropagation();
                evt.preventDefault();
            }
            else if (CanvasA11y_1.isTab(evt)) {
                this._childControl.focusFormattingBar();
                evt.stopPropagation();
                evt.preventDefault();
            }
        }
    };
    ControlZone.prototype._handleMouseOut = function (e) {
        this.context.store.hoveredControlId = undefined;
    };
    ControlZone.prototype._handleMouseOver = function (e) {
        this.context.store.hoveredControlId = this.props.id;
    };
    ControlZone.prototype._handleTrapFocus = function (e) {
        if (e.target === this._trapDiv) {
            this._childControl.focus();
        }
    };
    ControlZone.prototype._selectControl = function () {
        if (this.context.store.selectedControlId !== this.props.id) {
            this.context.store.selectedControlId = this.props.id;
        }
    };
    return ControlZone;
}(React.Component));
ControlZone.contextTypes = {
    store: React.PropTypes.object.isRequired
};
ControlZone._VERTICAL_MARGIN = 22;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ControlZone;
