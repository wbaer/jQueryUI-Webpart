/**
 * @copyright Microsoft Corporation. All rights reserved.
 *
 * @file Contains ToolbarSubmenu class which is used to group related buttons in toolbar
 */
import * as React from 'react';
import { IToolbarButtonProps } from '../toolbarButton/ToolbarButton';
import { BaseComponent } from 'office-ui-fabric-react';
import './ToolbarSubmenu.scss';
export interface IToolbarSubmenuProps extends React.Props<ToolbarSubmenu> {
    isOpen: boolean;
    buttons?: IToolbarButtonProps[];
    onClose?: (isDocumentClick?: boolean) => void;
    onOpen?: () => void;
    title?: string;
    /**
     * By default, the submenu will take on the width of the button it contains.
     * Set this to true when you want to make it wide, such as when showing text formats.
     * This also overrides the size of any buttons contained in the menu, so that
     * they occupy the full width of the menu.
     */
    isWide?: boolean;
    onBlur?: (e: React.FocusEvent<any>) => void;
}
export interface IToolbarSubmenuState {
    isOpen: boolean;
}
/**
 * @class Submenu can be used in as toolbar item just like a button, to group a number of related buttons
 * that do different variations of an action (like text alignment). Only one of the buttons in a submenu
 * can be active at a time. The icon shown in the closed state is the icon of the active button
 */
export default class ToolbarSubmenu extends BaseComponent<IToolbarSubmenuProps, IToolbarSubmenuState> {
    /**
     * We only want to show button in closed state active, if a button was explicitly active in props
     */
    private _hasExplicitActiveButton;
    /**
     * Keep track of the button to set focus to when the submenu closes during keyboard navigation.
     */
    private _focusElement;
    private _isKeyboardNav;
    private _menuElement;
    constructor(props: IToolbarSubmenuProps);
    componentDidMount(): void;
    componentDidUpdate(prevProps: IToolbarSubmenuProps, prevState: IToolbarSubmenuState): void;
    componentWillReceiveProps(nextProps: IToolbarSubmenuProps): void;
    componentWillUnmount(): void;
    /**
     *  Render the submenu, depending on its open state
     */
    render(): React.ReactElement<IToolbarSubmenuProps>;
    private _bindButtonClickHandlers();
    /**
     * Return the props of the currently active button
     */
    private _getActiveButton();
    private _handleSubmenuKeyDown(e);
    private _handleSubmenuItemsKeyDown(e);
    private _handleClickOnDisplayButton();
    private _handleOpenSubmenu();
    private _handleCloseSubmenu(isDocumentClick?);
    /**
     * @param onClickAction - The original onClick callback passed for the button
     *
     * Closes the submenu after calling the action of the button
     * All the button props must be updated to use this function as their onClick handler
     */
    private _handleOnButtonClick(onClickCallback);
    private _handleDocumentClick(evt);
}
