define([], function() { return "import * as React from 'react';\r\nimport { DatePicker } from './DatePicker';\r\nimport { DayOfWeek } from '../../Calendar';\r\n\r\nexport interface IDatePickerProps extends React.Props<DatePicker> {\r\n  /**\r\n   * Callback issued when a date is selected\r\n   */\r\n  onSelectDate?: (date: Date) => void;\r\n\r\n  /**\r\n   * Label for the DatePicker\r\n   */\r\n  label?: string;\r\n\r\n  /**\r\n   * Whether the DatePicker is a required field or not\r\n   * @defaultvalue false\r\n   */\r\n  isRequired?: boolean;\r\n\r\n  /**\r\n   * Aria Label for TextField of the DatePicker for screen reader users.\r\n   */\r\n  ariaLabel?: string;\r\n\r\n  /**\r\n   * Whether the month picker is shown beside the day picker or hidden.\r\n   * @defaultvalue true\r\n   */\r\n  isMonthPickerVisible?: boolean;\r\n\r\n  /**\r\n   * Whether the DatePicker allows input a date string directly or not\r\n   * @defaultvalue false\r\n   */\r\n  allowTextInput?: boolean;\r\n\r\n  /**\r\n   * Placeholder text for the DatePicker\r\n   */\r\n  placeholder?: string;\r\n\r\n  /**\r\n   * Default value of the DatePicker, if any\r\n   */\r\n  value?: Date;\r\n\r\n  /**\r\n   * Optional method to format the chosen date to a string to display in the DatePicker\r\n   * @defaultvalue date.toString()\r\n   */\r\n  formatDate?: (date: Date) => string;\r\n\r\n  /**\r\n   * Optional method to parse the text input value to date, it is only useful when allowTextInput is set to true\r\n   * @defaultvalue new Date(Date.parse(dateStr))\r\n   */\r\n  parseDateFromString?: (dateStr: string) => Date;\r\n\r\n  /**\r\n   * The first day of the week for your locale.\r\n   * @defaultvalue DayOfWeek.Sunday\r\n   */\r\n  firstDayOfWeek?: DayOfWeek;\r\n\r\n  /**\r\n   * Localized strings to use in the DatePicker\r\n   */\r\n  strings?: IDatePickerStrings;\r\n}\r\n\r\nexport interface IDatePickerStrings {\r\n  /**\r\n   * An array of strings for the full names of months.\r\n   * The array is 0-based, so months[0] should be the full name of January.\r\n   */\r\n  months: string[];\r\n\r\n  /**\r\n   * An array of strings for the short names of months.\r\n   * The array is 0-based, so shortMonths[0] should be the short name of January.\r\n   */\r\n  shortMonths: string[];\r\n\r\n  /**\r\n   * An array of strings for the full names of days of the week.\r\n   * The array is 0-based, so days[0] should be the full name of Sunday.\r\n   */\r\n  days: string[];\r\n\r\n  /**\r\n   * An array of strings for the initials of the days of the week.\r\n   * The array is 0-based, so days[0] should be the initial of Sunday.\r\n   */\r\n  shortDays: string[];\r\n\r\n  /**\r\n   * String to render for button to direct the user to today's date.\r\n   */\r\n  goToToday: string;\r\n\r\n  /**\r\n   * Error message to render for TextField if isRequired validation fails.\r\n   */\r\n  isRequiredErrorMessage?: string;\r\n\r\n  /**\r\n   * Error message to render for TextField if input date string parsing fails.\r\n   */\r\n  invalidInputErrorMessage?: string;\r\n}\r\n"; });