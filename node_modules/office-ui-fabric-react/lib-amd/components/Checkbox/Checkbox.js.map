{"version":3,"sources":["components/Checkbox/Checkbox.tsx"],"names":[],"mappings":"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","file":"components/Checkbox/Checkbox.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  BaseComponent,\r\n  autobind,\r\n  css,\r\n  getId\r\n} from '../../Utilities';\r\nimport {\r\n  ICheckbox,\r\n  ICheckboxProps\r\n} from './Checkbox.Props';\r\nimport './Checkbox.scss';\r\n\r\nexport interface ICheckboxState {\r\n  /** Is true when the control has focus. */\r\n  isFocused?: boolean;\r\n\r\n  /** Is true when Uncontrolled control is checked. */\r\n  isChecked?: boolean;\r\n}\r\n\r\nexport class Checkbox extends BaseComponent<ICheckboxProps, ICheckboxState> implements ICheckbox {\r\n  public static defaultProps: ICheckboxProps = {\r\n  };\r\n\r\n  private _id: string;\r\n  private _checkBox: HTMLInputElement;\r\n\r\n  constructor(props: ICheckboxProps) {\r\n    super(props);\r\n\r\n    this._id = getId('checkbox-');\r\n    this.state = {\r\n      isFocused: false,\r\n      isChecked: props.defaultChecked || false\r\n    };\r\n  }\r\n\r\n  public render() {\r\n    const {\r\n      checked,\r\n      className,\r\n      defaultChecked,\r\n      disabled,\r\n      inputProps,\r\n      label,\r\n      name\r\n    } = this.props;\r\n\r\n    const { isFocused } = this.state;\r\n    const isChecked = checked === undefined ? this.state.isChecked : checked;\r\n\r\n    return (\r\n      <div\r\n        className={ css('ms-Checkbox', className, { 'is-inFocus': isFocused }) }\r\n        >\r\n        <input\r\n          { ...inputProps }\r\n          { ...(checked !== undefined && { checked }) }\r\n          { ...(defaultChecked !== undefined && { defaultChecked }) }\r\n          disabled={ disabled }\r\n          ref={ this._resolveRef('_checkBox') }\r\n          id={ this._id }\r\n          name={ name || this._id }\r\n          className='ms-Checkbox-input'\r\n          type='checkbox'\r\n          onChange={ this._onChange }\r\n          onFocus={ this._onFocus }\r\n          onBlur={ this._onBlur }\r\n          aria-checked={ isChecked }\r\n          />\r\n        { this.props.children }\r\n        <label htmlFor={ this._id }\r\n          className={ css('ms-Checkbox-label', {\r\n            'is-checked': isChecked,\r\n            'is-disabled': disabled\r\n          })\r\n          }\r\n          >\r\n          { label && <span className='ms-Label'>{ label }</span> }\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  public get checked(): boolean {\r\n    return this._checkBox ? this._checkBox.checked : false;\r\n  }\r\n\r\n  public focus() {\r\n    if (this._checkBox) {\r\n      this._checkBox.focus();\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _onFocus(ev: React.FocusEvent<HTMLInputElement>): void {\r\n    const { inputProps } = this.props;\r\n\r\n    if (inputProps && inputProps.onFocus) {\r\n      inputProps.onFocus(ev);\r\n    }\r\n\r\n    this.setState({ isFocused: true });\r\n  }\r\n\r\n  @autobind\r\n  private _onBlur(ev: React.FocusEvent<HTMLInputElement>): void {\r\n    const { inputProps } = this.props;\r\n\r\n    if (inputProps && inputProps.onBlur) {\r\n      inputProps.onBlur(ev);\r\n    }\r\n\r\n    this.setState({ isFocused: false });\r\n  }\r\n\r\n  @autobind\r\n  private _onChange(ev: React.FormEvent<HTMLInputElement>) {\r\n    const { onChange } = this.props;\r\n    const isChecked = (ev.target as HTMLInputElement).checked;\r\n\r\n    if (onChange) {\r\n      onChange(ev, isChecked);\r\n    }\r\n\r\n    if (this.props.checked === undefined) {\r\n      this.setState({ isChecked: isChecked });\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}