"use strict";
var chai_1 = require("chai");
var ComponentStore_1 = require("../../stores/ComponentStore");
describe('ComponentStore tests', function () {
    var id = '00000000-0000-0000-0000-000000000000';
    var sampleModule = {
        field: 'value'
    };
    afterEach(function () {
        ComponentStore_1.default._instance = undefined; 
    });
    it('get a component by id and version returns the component promise', function (done) {
        var version = '1.0.0';
        ComponentStore_1.default.instance.storeComponent(id, version, new Promise(function (resolve) { resolve(sampleModule); }));
        ComponentStore_1.default.instance.getComponent(id, version).then(function (outputModule) {
            chai_1.assert.equal(outputModule, sampleModule);
            done();
        });
    });
    it('get a non-stored component returns undefined', function () {
        chai_1.assert.isUndefined(ComponentStore_1.default.instance.getComponent(id, '1.0.0'));
    });
    it('get a component by id only without conflicts returns the component promise', function (done) {
        ComponentStore_1.default.instance.storeComponent(id, '1.0.0', new Promise(function (resolve) { resolve(sampleModule); }));
        ComponentStore_1.default.instance.getComponentById(id).then(function (outputModule) {
            chai_1.assert.equal(outputModule, sampleModule);
            done();
        });
    });
    it('get a component by id only with conflicting components throws error', function () {
        var version1 = '1.0.0';
        var version2 = '2.0.0';
        ComponentStore_1.default.instance.storeComponent(id, version1, new Promise(function (resolve) { resolve(sampleModule); }));
        ComponentStore_1.default.instance.storeComponent(id, version2, new Promise(function (resolve) { resolve(sampleModule); }));
        chai_1.assert.throws(function () { ComponentStore_1.default.instance.getComponentById(id); });
    });
});
