/// <reference types="es6-promise" />
/**
 * Stores component modules by id and version.
 * Used by the component loader to retrieve already loaded components.
 */
export default class ComponentStore {
    private static _instance;
    static readonly instance: ComponentStore;
    private _componentMap;
    /**
     * Returns a promise of the component module by id and version.
     *
     * If the component is not found, returns undefined.
     */
    getComponent<TModule>(id: string, version: string): Promise<TModule>;
    /**
     * Returns a promise of the component module by id.
     *
     * If a component is not found, returns undefined.
     * If there are too many components for the id, returns undefined.
     *
     * Don't use this method, use getComponent() instead.
     * This method is only used by the DeveloperToolsLoader for react and office-ui-fabric-react
     * when those haven't been loaded yet, as the version might not be known at the time.
     */
    tryGetComponentById<TModule>(id: string): Promise<TModule> | undefined;
    /**
     * Returns a promise of the component module by id.
     *
     * If a component is not found, throws an error.
     * If there are too many components for the id, throws an error.
     *
     * Don't use this method, use getComponent() instead.
     * This method is only used by the DeveloperToolsLoader for react and office-ui-fabric-react
     * when those haven't been loaded yet, as the version might not be known at the time.
     */
    getComponentById<TModule>(id: string): Promise<TModule>;
    /**
     * Stores a component module.
     *
     * @param id Component id
     * @param version Component version
     * @param modulePromise Promise of the component module, as it might have been not fully loaded yet.
     */
    storeComponent<TModule>(id: string, version: string, modulePromise: Promise<TModule>): void;
    /**
     * Deletes a component from the store, if it exists.
     *
     * @param id Component id
     * @param version Component version
     */
    deleteComponent(id: string, version: string): void;
    private _getKey(id, version);
}
