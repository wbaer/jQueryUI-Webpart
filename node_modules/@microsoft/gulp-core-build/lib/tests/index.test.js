'use strict';
/// <reference path='../../typings/main.d.ts' />
require("es6-promise");
var chai_1 = require("chai");
var index_1 = require("../index");
// disable the exit watching
global['dontWatchExit'] = true; // tslint:disable-line:no-string-literal
describe('serial', function () {
    it('can run a set of tasks in serial', function (done) {
        var execution = [];
        var tasks = createTasks('task', 3, function (command) { return execution.push(command); });
        index_1.serial(tasks).execute({}).then(function () {
            chai_1.expect(execution).to.deep.equal([
                'executing task 0',
                'complete task 0',
                'executing task 1',
                'complete task 1',
                'executing task 2',
                'complete task 2'
            ]);
            done();
        }).catch(function (error) { return done(error); });
    });
});
describe('parallel', function () {
    it('can run a set of tasks in parallel', function (done) {
        var execution = [];
        var tasks = createTasks('task', 3, function (command) { return execution.push(command); });
        index_1.parallel(tasks).execute({}).then(function () {
            chai_1.expect(execution).to.deep.equal([
                'executing task 0',
                'executing task 1',
                'executing task 2',
                'complete task 0',
                'complete task 1',
                'complete task 2'
            ]);
            done();
        }).catch(function (error) { return done(error); });
    });
    it('can mix in serial sets of tasks', function (done) {
        var execution = [];
        var serial1Tasks = index_1.serial(createTasks('serial set 1 -', 2, function (command) { return execution.push(command); }));
        var parallelTasks = index_1.parallel(createTasks('parallel', 2, function (command) { return execution.push(command); }));
        var serial2Tasks = index_1.serial(createTasks('serial set 2 -', 2, function (command) { return execution.push(command); }));
        index_1.serial([
            serial1Tasks,
            parallelTasks,
            serial2Tasks
        ]).execute({})
            .then(function () {
            chai_1.expect(execution).to.deep.equal([
                'executing serial set 1 - 0',
                'complete serial set 1 - 0',
                'executing serial set 1 - 1',
                'complete serial set 1 - 1',
                'executing parallel 0',
                'executing parallel 1',
                'complete parallel 0',
                'complete parallel 1',
                'executing serial set 2 - 0',
                'complete serial set 2 - 0',
                'executing serial set 2 - 1',
                'complete serial set 2 - 1'
            ]);
            done();
        })
            .catch(function (error) { return done(error); });
    });
    it('stops running serial tasks on failure', function (done) {
        var execution = [];
        var tasks = createTasks('task', 1, function (command) { return execution.push(command); });
        tasks.push(createTask('fail task', function (command) { return execution.push(command); }, true));
        tasks.push(createTask('should not run task', function (command) { return execution.push(command); }, false));
        index_1.serial(tasks).execute({}).then(function () {
            done('The task returned success unexpectedly.');
        }).catch(function (error) {
            chai_1.expect(error).to.equal('Failure', 'Make sure the proper error is propagate');
            chai_1.expect(execution).to.deep.equal([
                'executing task 0',
                'complete task 0',
                'executing fail task',
                'complete fail task'
            ]);
            done();
        });
    });
    it('can read the current config', function (done) {
        var config = index_1.getConfig();
        chai_1.expect(config).to.be.not.null;
        done();
    });
    it('can set the config', function (done) {
        var distFolder = 'testFolder';
        var newConfig = {
            distFolder: distFolder
        };
        index_1.setConfig(newConfig);
        chai_1.expect(index_1.getConfig().distFolder).to.eq(distFolder);
        done();
    });
});
function createTasks(name, count, executionCallback) {
    return Array.apply(undefined, Array(count))
        .map(function (item, index) { return createTask(name + ' ' + index, executionCallback); });
}
function createTask(name, executionCallback, shouldFail) {
    return {
        execute: function (buildConfig) { return new Promise(function (done, error) {
            executionCallback("executing " + name);
            setTimeout(function () {
                executionCallback("complete " + name);
                if (shouldFail) {
                    error('Failure');
                }
                else {
                    done();
                }
            }, 10);
        }); }
    };
}

//# sourceMappingURL=index.test.js.map
