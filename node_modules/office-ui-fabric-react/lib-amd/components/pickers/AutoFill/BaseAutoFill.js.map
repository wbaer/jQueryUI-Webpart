{"version":3,"sources":["components/pickers/AutoFill/BaseAutoFill.tsx"],"names":[],"mappings":"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","file":"components/pickers/AutoFill/BaseAutoFill.js","sourcesContent":["import * as React from 'react';\r\nimport { IBaseAutoFillProps, IBaseAutoFill } from './BaseAutoFill.Props';\r\nimport {\r\n  BaseComponent,\r\n  KeyCodes,\r\n  autobind,\r\n  getNativeProps,\r\n  inputProperties\r\n} from '../../../Utilities';\r\n\r\nexport interface IBaseAutoFillState {\r\n  displayValue?: string;\r\n}\r\n\r\nconst SELECTION_FORWARD = 'forward';\r\nconst SELECTION_BACKWARD = 'backward';\r\n\r\nexport class BaseAutoFill extends BaseComponent<IBaseAutoFillProps, IBaseAutoFillState> implements IBaseAutoFill {\r\n\r\n  public static defaultProps = {\r\n    enableAutoFillOnKeyPress: [KeyCodes.down, KeyCodes.up]\r\n  };\r\n\r\n  private _inputElement: HTMLInputElement;\r\n  private _autoFillEnabled: boolean = true;\r\n  private _value: string;\r\n\r\n  constructor(props: IBaseAutoFillProps) {\r\n    super(props);\r\n    this._value = '';\r\n    this.state = {\r\n      displayValue: ''\r\n    };\r\n  }\r\n\r\n  public get cursorLocation(): number {\r\n    if (this._inputElement) {\r\n      let inputElement = this._inputElement;\r\n      if (inputElement.selectionDirection !== SELECTION_FORWARD) {\r\n        return inputElement.selectionEnd;\r\n      } else {\r\n        return inputElement.selectionStart;\r\n      }\r\n    } else {\r\n      return -1;\r\n    }\r\n  }\r\n\r\n  public get isValueSelected(): boolean {\r\n    return this.inputElement.selectionStart !== this.inputElement.selectionEnd;\r\n  }\r\n\r\n  public get value(): string {\r\n    return this._value;\r\n  }\r\n\r\n  public get selectionStart(): number {\r\n    return this._inputElement ? this._inputElement.selectionStart : -1;\r\n  }\r\n\r\n  public get selectionEnd(): number {\r\n    return this._inputElement ? this._inputElement.selectionEnd : -1;\r\n  }\r\n\r\n  public get inputElement(): HTMLInputElement {\r\n    return this._inputElement;\r\n  }\r\n\r\n  public componentWillReceiveProps(nextProps: IBaseAutoFillProps) {\r\n    if (this._autoFillEnabled && this._doesTextStartWith(nextProps.suggestedDisplayValue, this._value)) {\r\n      this.setState({ displayValue: nextProps.suggestedDisplayValue });\r\n    }\r\n  }\r\n\r\n  public componentDidUpdate() {\r\n    let value = this._value;\r\n    let { suggestedDisplayValue } = this.props;\r\n    let differenceIndex = 0;\r\n    if (this._autoFillEnabled && value && suggestedDisplayValue && this._doesTextStartWith(suggestedDisplayValue, value)) {\r\n      while (differenceIndex < value.length && value[differenceIndex].toLocaleLowerCase() === suggestedDisplayValue[differenceIndex].toLocaleLowerCase()) {\r\n        differenceIndex++;\r\n      }\r\n      if (differenceIndex > 0) {\r\n        this._inputElement.setSelectionRange(differenceIndex, suggestedDisplayValue.length, SELECTION_BACKWARD);\r\n      }\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    let {\r\n      displayValue\r\n    } = this.state;\r\n\r\n    const nativeProps = getNativeProps(this.props, inputProperties);\r\n    return <input { ...nativeProps}\r\n      ref={ this._resolveRef('_inputElement') }\r\n      value={ displayValue }\r\n      autoCapitalize={ 'off' }\r\n      autoComplete={ 'off' }\r\n      onChange={ this._onChange }\r\n      onKeyDown={ this._onKeyDown }\r\n      onClick={ this._onClick }\r\n      />;\r\n  }\r\n\r\n  public focus() {\r\n    this._inputElement.focus();\r\n  }\r\n\r\n  public clear() {\r\n    this._autoFillEnabled = true;\r\n    this._updateValue('');\r\n  }\r\n\r\n  @autobind\r\n  private _onClick() {\r\n    if (this._value && this._value !== '' && this._autoFillEnabled) {\r\n      this._autoFillEnabled = false;\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _onKeyDown(ev: React.KeyboardEvent<HTMLElement>) {\r\n    switch (ev.which) {\r\n      case KeyCodes.backspace:\r\n        this._autoFillEnabled = false;\r\n        break;\r\n      case KeyCodes.left:\r\n        if (this._autoFillEnabled) {\r\n          this._autoFillEnabled = false;\r\n        }\r\n        break;\r\n      case KeyCodes.right:\r\n        if (this._autoFillEnabled) {\r\n          this._autoFillEnabled = false;\r\n        }\r\n        break;\r\n      default:\r\n        if (!this._autoFillEnabled) {\r\n          if (this.props.enableAutoFillOnKeyPress.indexOf(ev.which) !== -1) {\r\n            this._autoFillEnabled = true;\r\n          }\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _onChange(ev: React.FormEvent<HTMLElement>) {\r\n    let value: string = (ev.target as HTMLInputElement).value;\r\n    if (value && (ev.target as HTMLInputElement).selectionStart === value.length && !this._autoFillEnabled && value.length > this._value.length) {\r\n      this._autoFillEnabled = true;\r\n    }\r\n    this._updateValue(value);\r\n  }\r\n\r\n  private _notifyInputChange(newValue: string) {\r\n    if (this.props.onInputValueChange) {\r\n      this.props.onInputValueChange(newValue);\r\n    }\r\n  }\r\n\r\n  private _updateValue(newValue: string) {\r\n    this._value = newValue;\r\n    let displayValue = newValue;\r\n    if (this.props.suggestedDisplayValue &&\r\n      this._doesTextStartWith(this.props.suggestedDisplayValue, displayValue)\r\n      && this._autoFillEnabled) {\r\n      displayValue = this.props.suggestedDisplayValue;\r\n    }\r\n    this.setState({\r\n      displayValue: newValue\r\n    }, () => this._notifyInputChange(newValue));\r\n  }\r\n\r\n  private _doesTextStartWith(text: string, startWith: string) {\r\n    if (!text || !startWith) {\r\n      return false;\r\n    }\r\n    return text.toLocaleLowerCase().indexOf(startWith.toLocaleLowerCase()) === 0;\r\n  }\r\n}"],"sourceRoot":"..\\..\\..\\..\\src"}