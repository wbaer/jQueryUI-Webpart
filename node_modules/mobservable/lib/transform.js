var observableview_1 = require('./observableview');
function createTransformer(transformer, onCleanup) {
    var _this = this;
    if (typeof transformer !== "function" || transformer.length !== 1)
        throw new Error("[mobservable] transformer parameter should be a function that accepts one argument");
    var objectCache = {};
    return function (object) {
        var identifier = getMemoizationId(object);
        var reactiveTransformer = objectCache[identifier];
        if (reactiveTransformer)
            return reactiveTransformer.get();
        reactiveTransformer = objectCache[identifier] = new observableview_1.ObservableView(function () {
            return transformer(object);
        }, _this, {
            object: object,
            name: "transformer-" + transformer.name + "-" + identifier
        }, false);
        reactiveTransformer.onceSleep(function (lastValue) {
            delete objectCache[identifier];
            if (onCleanup)
                onCleanup(lastValue, object);
        });
        return reactiveTransformer.get();
    };
}
exports.createTransformer = createTransformer;
var transformId = 0;
function getMemoizationId(object) {
    if (object === null || typeof object !== "object")
        throw new Error("[mobservable] transform expected some kind of object, got: " + object);
    var tid = object.$transformId;
    if (tid === undefined)
        return object.$transformId = ++transformId;
    return tid;
}
