"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var gulp_core_build_1 = require("@microsoft/gulp-core-build");
var os = require("os");
var fs = require("fs");
var path = require("path");
var KarmaTask = (function (_super) {
    __extends(KarmaTask, _super);
    function KarmaTask() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'karma';
        _this.taskConfig = {
            configPath: './karma.config.js',
            testMatch: /.+\.test\.js?$/
        };
        return _this;
    }
    Object.defineProperty(KarmaTask.prototype, "resources", {
        get: function () {
            if (!this._resources) {
                this._resources = {
                    bindPolyfillPath: require.resolve('phantomjs-polyfill/bind-polyfill.js'),
                    istanbulInstrumenterLoaderPath: require.resolve('istanbul-instrumenter-loader'),
                    plugins: [
                        require('karma-webpack'),
                        require('karma-mocha'),
                        require('karma-coverage'),
                        require('karma-mocha-clean-reporter'),
                        require('karma-phantomjs-launcher'),
                        require('karma-sinon-chai')
                    ]
                };
            }
            return this._resources;
        },
        enumerable: true,
        configurable: true
    });
    KarmaTask.prototype.loadSchema = function () {
        return require('./karma.schema.json');
    };
    KarmaTask.prototype.getCleanMatch = function (buildConfig, taskConfig) {
        if (taskConfig === void 0) { taskConfig = this.taskConfig; }
        return [
            path.join(buildConfig.tempFolder, 'tests.js')
        ];
    };
    KarmaTask.prototype.isEnabled = function (buildConfig) {
        return (_super.prototype.isEnabled.call(this, buildConfig) &&
            this.taskConfig.configPath !== null // tslint:disable-line:no-null-keyword
        );
    };
    KarmaTask.prototype.executeTask = function (gulp, completeCallback) {
        var _this = this;
        var configPath = this.taskConfig.configPath;
        if (configPath && !this.fileExists(configPath)) {
            var shouldInitKarma = (process.argv.indexOf('--initkarma') > -1);
            if (!shouldInitKarma) {
                this.logWarning("No karma config has been provided. " +
                    "Run again using --initkarma to create a default config, or call " +
                    "karma.setConfig({ configPath: null }) in your gulpfile.");
            }
            else {
                this.copyFile(path.resolve(__dirname, '../karma.config.js'));
            }
            completeCallback();
        }
        else {
            // Normalize the match expression if one was specified
            var testMatch = this.taskConfig.testMatch;
            if (testMatch) {
                var normalizedMatch = void 0;
                if (typeof testMatch === 'string') {
                    try {
                        normalizedMatch = new RegExp(testMatch);
                    }
                    catch (error) {
                        completeCallback('There was an issue parsing your testMatch regular expression: ' + error.toString());
                        return;
                    }
                }
                else if (testMatch instanceof RegExp) {
                    normalizedMatch = testMatch;
                }
                else {
                    completeCallback('The testMatch regular expression is invalid');
                    return;
                }
                // tslint:disable:max-line-length
                var testsJsFileContents = [
                    "var context = require.context('" + path.posix.join('..', this.buildConfig.libFolder) + "', true, " + normalizedMatch.toString() + ");",
                    "context.keys().forEach(context);",
                    "module.exports = context;"
                ].join(os.EOL);
                // tslint:enable:max-line-length
                var tempFolder = path.join(this.buildConfig.rootPath, this.buildConfig.tempFolder);
                if (!fs.existsSync(tempFolder)) {
                    fs.mkdirSync(tempFolder);
                }
                fs.writeFileSync(path.join(tempFolder, 'tests.js'), testsJsFileContents);
            }
            var karma = require('karma'); // tslint:disable-line
            var server = karma.Server;
            var singleRun = (process.argv.indexOf('--debug') === -1);
            var matchIndex = (process.argv.indexOf('--match'));
            var matchString = (matchIndex === -1) ? '' : process.argv[matchIndex + 1];
            new server({
                client: {
                    mocha: {
                        grep: matchString
                    }
                },
                configFile: this.resolvePath(configPath),
                singleRun: singleRun
            }, function (exitCode) {
                if (exitCode) {
                    var message = 'Error(s) occured during karma.';
                    if (_this.buildConfig.production) {
                        completeCallback(message);
                    }
                    else {
                        _this.logWarning(message);
                        completeCallback();
                    }
                }
                else {
                    completeCallback();
                }
            }).start();
        }
    };
    return KarmaTask;
}(gulp_core_build_1.GulpTask));
exports.KarmaTask = KarmaTask;

//# sourceMappingURL=KarmaTask.js.map
