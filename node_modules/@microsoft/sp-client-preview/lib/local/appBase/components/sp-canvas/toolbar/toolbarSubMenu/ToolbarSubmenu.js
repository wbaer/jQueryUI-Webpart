"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var React = require("react");
var office_ui_fabric_react_1 = require("office-ui-fabric-react");
var ToolbarButton_1 = require("../toolbarButton/ToolbarButton");
var CanvasA11y_1 = require("../../a11y/CanvasA11y");
var office_ui_fabric_react_2 = require("office-ui-fabric-react");
require("./ToolbarSubmenu.scss");
var DISPLAYBUTTON = 'displayButton';
var ToolbarSubmenu = (function (_super) {
    __extends(ToolbarSubmenu, _super);
    function ToolbarSubmenu(props) {
        var _this = _super.call(this, props) || this;
        _this._hasExplicitActiveButton = false;
        _this.state = {
            isOpen: props.isOpen
        };
        return _this;
    }
    ToolbarSubmenu.prototype.componentDidMount = function () {
        document.addEventListener('click', this._handleDocumentClick);
    };
    ToolbarSubmenu.prototype.componentDidUpdate = function (prevProps, prevState) {
        if (this._isKeyboardNav && !this.state.isOpen && this._focusElement) {
            this._focusElement.focus();
            this._focusElement = undefined;
            this._isKeyboardNav = false;
        }
        if (this._isKeyboardNav && this.state.isOpen && this._menuElement) {
            CanvasA11y_1.navigateInside(this._menuElement);
            this._isKeyboardNav = false;
        }
    };
    ToolbarSubmenu.prototype.componentWillReceiveProps = function (nextProps) {
        if (this.props.isOpen !== nextProps.isOpen) {
            this.setState({ isOpen: nextProps.isOpen });
        }
    };
    ToolbarSubmenu.prototype.componentWillUnmount = function () {
        document.removeEventListener('click', this._handleDocumentClick);
    };
    ToolbarSubmenu.prototype.render = function () {
        var openedCssClass = this.state.isOpen ? 'is-open' : '';
        var wideCssClass = this.props.isWide ? 'ToolbarSubmenu--wide' : '';
        var activeButton = this._getActiveButton();
        this._bindButtonClickHandlers();
        var buttonElements = [];
        for (var _i = 0, _a = this.props.buttons; _i < _a.length; _i++) {
            var buttonProps = _a[_i];
            buttonProps.tabIndex = this.state.isOpen ? 0 : -1;
            if (buttonProps === activeButton) {
                buttonProps.isActive = true;
            }
            buttonElements.push(React.createElement(ToolbarButton_1.default, __assign({}, buttonProps)));
        }
        return (React.createElement("div", { className: "ToolbarSubmenu " + openedCssClass + " " + wideCssClass },
            React.createElement(ToolbarButton_1.default, { className: 'ToolbarSubmenu-displayButton', fabricIconKey: activeButton.fabricIconKey, iconClassName: activeButton.iconClassName, key: 'displayButton', onClick: this._handleClickOnDisplayButton, label: activeButton.label, tabIndex: this.state.isOpen ? -1 : 0, title: activeButton.title, onKeyDown: this._handleSubmenuItemsKeyDown, automationId: DISPLAYBUTTON, onBlur: this.props.onBlur }),
            React.createElement("i", { className: 'ms-Icon ms-Icon--CaretDownSolid8 ToolbarSubmenu-caret' }),
            React.createElement(office_ui_fabric_react_1.FocusZone, { isCircularNavigation: true },
                React.createElement("div", { role: 'presentation', className: 'ToolbarSubmenu-menuItems', ref: this._resolveRef('_menuElement'), onKeyDown: this._handleSubmenuKeyDown, "data-automation-id": 'subMenuContainer' }, buttonElements))));
    };
    ToolbarSubmenu.prototype._bindButtonClickHandlers = function () {
        for (var _i = 0, _a = this.props.buttons; _i < _a.length; _i++) {
            var buttonProps = _a[_i];
            buttonProps.onClick = this._handleOnButtonClick.bind(this, buttonProps.onClick);
        }
    };
    ToolbarSubmenu.prototype._getActiveButton = function () {
        this._hasExplicitActiveButton = false;
        for (var _i = 0, _a = this.props.buttons; _i < _a.length; _i++) {
            var button = _a[_i];
            if (button.isActive) {
                this._hasExplicitActiveButton = true;
                return button;
            }
        }
        return this.props.buttons[0];
    };
    ToolbarSubmenu.prototype._handleSubmenuKeyDown = function (e) {
        if (this.state.isOpen &&
            (e.key === 'ArrowRight' || e.key === 'ArrowLeft')) {
            this._isKeyboardNav = true;
            this._handleCloseSubmenu();
        }
    };
    ToolbarSubmenu.prototype._handleSubmenuItemsKeyDown = function (e) {
        if (e.key === 'ArrowDown') {
            this._isKeyboardNav = true;
            this._handleOpenSubmenu();
        }
    };
    ToolbarSubmenu.prototype._handleClickOnDisplayButton = function () {
        if (this.state.isOpen) {
            this._handleCloseSubmenu();
        }
        else {
            this._handleOpenSubmenu();
        }
    };
    ToolbarSubmenu.prototype._handleOpenSubmenu = function () {
        this._focusElement = document.activeElement;
        this.props.onOpen();
        this.setState({ isOpen: true });
    };
    ToolbarSubmenu.prototype._handleCloseSubmenu = function (isDocumentClick) {
        this.setState({ isOpen: false });
        this.props.onClose(isDocumentClick);
    };
    ToolbarSubmenu.prototype._handleOnButtonClick = function (onClickCallback) {
        onClickCallback();
        this._handleCloseSubmenu();
    };
    ToolbarSubmenu.prototype._handleDocumentClick = function (evt) {
        var currentTarget = evt.target;
        if (this.state.isOpen &&
            currentTarget.getAttribute('data-automation-id') !== DISPLAYBUTTON &&
            currentTarget.parentElement &&
            currentTarget.parentElement.getAttribute('data-automation-id') !== DISPLAYBUTTON) {
            this._handleCloseSubmenu(true);
        }
    };
    return ToolbarSubmenu;
}(office_ui_fabric_react_2.BaseComponent));
__decorate([
    office_ui_fabric_react_2.autobind
], ToolbarSubmenu.prototype, "_bindButtonClickHandlers", null);
__decorate([
    office_ui_fabric_react_2.autobind
], ToolbarSubmenu.prototype, "_handleSubmenuKeyDown", null);
__decorate([
    office_ui_fabric_react_2.autobind
], ToolbarSubmenu.prototype, "_handleSubmenuItemsKeyDown", null);
__decorate([
    office_ui_fabric_react_2.autobind
], ToolbarSubmenu.prototype, "_handleClickOnDisplayButton", null);
__decorate([
    office_ui_fabric_react_2.autobind
], ToolbarSubmenu.prototype, "_handleOpenSubmenu", null);
__decorate([
    office_ui_fabric_react_2.autobind
], ToolbarSubmenu.prototype, "_handleCloseSubmenu", null);
__decorate([
    office_ui_fabric_react_2.autobind
], ToolbarSubmenu.prototype, "_handleOnButtonClick", null);
__decorate([
    office_ui_fabric_react_2.autobind
], ToolbarSubmenu.prototype, "_handleDocumentClick", null);
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ToolbarSubmenu;
