{"version":3,"sources":["CertificateStore.ts"],"names":[],"mappings":"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","file":"CertificateStore.js","sourcesContent":["import * as path from 'path';\r\nimport * as fs from 'fs';\r\nimport { homedir } from 'os';\r\n\r\nconst encoding: string = 'utf8';\r\n\r\nexport default class CertificateStore {\r\n  private static _instance: CertificateStore;\r\n\r\n  public static get instance(): CertificateStore {\r\n    if (!CertificateStore._instance) {\r\n      CertificateStore._instance = new CertificateStore();\r\n      CertificateStore._instance._initialize();\r\n    }\r\n\r\n    return CertificateStore._instance;\r\n  }\r\n\r\n  private _userProfilePath: string;\r\n  private _gcbServeDataPath: string;\r\n  private _certificatePath: string;\r\n  private _keyPath: string;\r\n\r\n  private _certificateData: string;\r\n  private _keyData: string;\r\n\r\n  public get certificatePath(): string {\r\n    return this._certificatePath;\r\n  }\r\n\r\n  public get certificateData(): string {\r\n    if (!this._certificateData) {\r\n      if (fs.existsSync(this._certificatePath)) {\r\n        this._certificateData = fs.readFileSync(this._certificatePath, encoding);\r\n      } else {\r\n        return undefined;\r\n      }\r\n    }\r\n\r\n    return this._certificateData;\r\n  }\r\n\r\n  public set certificateData(certificate: string) {\r\n    if (certificate) {\r\n      fs.writeFileSync(this._certificatePath, certificate);\r\n    } else if (fs.existsSync(this._certificatePath)) {\r\n      fs.unlinkSync(this._certificatePath);\r\n    }\r\n\r\n    this._certificateData = certificate;\r\n  }\r\n\r\n  public get keyData(): string {\r\n    if (!this._keyData) {\r\n      if (fs.existsSync(this._keyPath)) {\r\n        this._keyData = fs.readFileSync(this._keyPath, encoding);\r\n      } else {\r\n        return undefined;\r\n      }\r\n    }\r\n\r\n    return this._keyData;\r\n  }\r\n\r\n  public set keyData(key: string) {\r\n    if (key) {\r\n      fs.writeFileSync(this._keyPath, key, { encoding });\r\n    } else if (fs.existsSync(this._keyPath)) {\r\n      fs.unlinkSync(this._keyPath);\r\n    }\r\n\r\n    this._keyData = key;\r\n  }\r\n\r\n  private _initialize(): void {\r\n    const unresolvedUserFolder: string = homedir();\r\n    this._userProfilePath = path.resolve(unresolvedUserFolder);\r\n    if (!fs.existsSync(this._userProfilePath)) {\r\n      throw new Error('Unable to determine the current user\\'s home directory');\r\n    }\r\n\r\n    this._gcbServeDataPath = path.join(this._userProfilePath, '.gcb-serve-data');\r\n    if (!fs.existsSync(this._gcbServeDataPath)) {\r\n      fs.mkdirSync(this._gcbServeDataPath);\r\n    }\r\n\r\n    this._certificatePath = path.join(this._gcbServeDataPath, 'gcb-serve.cer');\r\n    this._keyPath = path.join(this._gcbServeDataPath, 'gcb-serve.key');\r\n  }\r\n}\r\n"],"sourceRoot":"..\\src"}