/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file Render settings passed into O365Shell.Render.
 * In Chicago see: sources\Dev\SuiteControls\src\shell\core\RenderSettings.cs.
 */
import ISuiteNavData from './models/ISuiteNavData';
export interface IO365ShellRenderSettings {
    /** The ID of the element the suite nav should render in. */
    top: string;
    /**
     * The layout type of the current view.
     * The only option we're interested in is 'Mouse'.
     */
    layout: string;
    /**
     * Flag that indicates whether additional components need to be loaded immediately.
     * If false or unspecified, delay-loaded components will be loaded after page load event.
     */
    disableDelayLoad?: boolean;
    /**
     * Flag to indicate whether automatic loading of ShellPlus (notifications and such)
     * should be disabled. Loading can be manually triggered later with LoadShellPlus().
     */
    disableShellPlus?: boolean;
}
/**
 * This is an interface for the O365Shell.Navigation external 'module.'
 */
export interface IO365Navigation {
    /**
     * Subscribes to link click events.
     */
    OnLinkClick(callback: (eventArgs: any) => any): void;
    /**
     * Subscribes to the hamburger button click events.
     */
    OnHamburgerButtonClick(callback: (eventArgs: any) => any): void;
}
/**
 * This is an interface for the O365Shell.FlexPane external 'module.'
 */
export interface IFlexPane {
    /**
     * Subscribes to the visibility changed event.
     * Returns a subscription token that can be used to unsubscribe.
     */
    OnFlexPaneVisibilityChanged(callback: (visible: boolean) => any): number;
    /**
     * Opens the FlexPan using the specified provider.
     */
    OpenFlexPaneForProvider(provider: string): void;
}
/**
 * This is an interface for the O365Shell external 'module.'
 * Only the functions we use from the interface are included.
 * In Chicago see: sources\Dev\SuiteControls\src\shell\g2\coreshim\O365Shell.cs
 * ('Suite nav' and 'shell' are more or less synonymous in this context.)
 */
export interface IO365Shell {
    /** O365 Flex Pane. */
    FlexPane: IFlexPane;
    /** O365 Navigation. */
    Navigation: IO365Navigation;
    /** Passes the shell data blob to the shell client API. */
    SetData(shellData: ISuiteNavData): void;
    /**
     * Renders the shell using the specified render settings.
     * The callback will be called after ShellPlus is loaded.
     */
    Render(renderSettings: IO365ShellRenderSettings, callback: () => void): void;
    /**
     * Renders the shell using the specified render settings.
     * renderCallback will be executed after the core shell is rendered.
     * callback will be executed after shell plus is loaded.
     */
    RenderAsync(renderSettings: IO365ShellRenderSettings, renderCallback: () => void, callback: () => void): void;
    /**
     * This is not provided by O365Shell. It invokes a given callback when a member/function
     * name is defined. This is useful when a component is trying to access a O365Shell
     * member but is not in charge of loading it.
     */
    OnHasMember(memberName: string, callback: () => void): void;
    /** Load shell plus (extra features like notifications) if it was disabled on initial load. */
    LoadShellPlus(): void;
}
export default IO365Shell;
