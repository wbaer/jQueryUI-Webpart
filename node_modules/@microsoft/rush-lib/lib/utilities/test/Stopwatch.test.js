// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
"use strict";
/// <reference types='mocha' />
var chai_1 = require("chai");
var Stopwatch_1 = require("../Stopwatch");
function pseudoTimeMilliseconds(times) {
    return function () { return times.shift(); };
}
function pseudoTimeSeconds(times) {
    return pseudoTimeMilliseconds(times.map(function (time) { return time * 1000; }));
}
describe('Stopwatch', function () {
    it('allows a static invocation as a quick shorthand', function (done) {
        chai_1.assert.equal(Stopwatch_1.Stopwatch.start().reset().toString(), '0.00 seconds (stopped)');
        done();
    });
    it('stopping before starting does nothing', function (done) {
        var watch = new Stopwatch_1.Stopwatch();
        watch.stop();
        chai_1.assert.equal(watch.toString(), '0.00 seconds (stopped)');
        done();
    });
    it('can\'t start twice', function (done) {
        var watch = new Stopwatch_1.Stopwatch();
        chai_1.assert.throws(function () {
            watch.start();
            watch.start();
        });
        done();
    });
    it('reflects the proper state', function (done) {
        var watch = new Stopwatch_1.Stopwatch();
        chai_1.assert.equal(watch.state, Stopwatch_1.StopwatchState.Stopped);
        watch.start();
        chai_1.assert.equal(watch.state, Stopwatch_1.StopwatchState.Started);
        watch.stop();
        chai_1.assert.equal(watch.state, Stopwatch_1.StopwatchState.Stopped);
        watch.reset();
        chai_1.assert.equal(watch.state, Stopwatch_1.StopwatchState.Stopped);
        done();
    });
    it('gives 0.00 seconds after being reset', function (done) {
        var watch = new Stopwatch_1.Stopwatch();
        watch.start();
        watch.reset();
        chai_1.assert.equal(watch.toString(), '0.00 seconds (stopped)');
        done();
    });
    it('gives 0.00 seconds when not running', function (done) {
        var watch = new Stopwatch_1.Stopwatch();
        chai_1.assert.equal(watch.toString(), '0.00 seconds (stopped)');
        done();
    });
    it('uses the latest time when the clock is not stopped', function (done) {
        var watch = new Stopwatch_1.Stopwatch(pseudoTimeSeconds([0, 1, 2]));
        watch.start();
        chai_1.assert.equal(watch.toString(), '1.00 seconds');
        chai_1.assert.equal(watch.toString(), '2.00 seconds');
        done();
    });
    it('uses the stop time when the clock is stopped', function (done) {
        var watch = new Stopwatch_1.Stopwatch(pseudoTimeSeconds([0, 1, 2]));
        watch.start();
        watch.stop();
        chai_1.assert.equal(watch.toString(), '1.00 seconds');
        chai_1.assert.equal(watch.toString(), '1.00 seconds');
        done();
    });
    it('gives elapsed seconds when < 1 minute', function (done) {
        var watch = new Stopwatch_1.Stopwatch(pseudoTimeSeconds([0, 1, 2, 3.25]));
        watch.start();
        watch.stop();
        chai_1.assert.equal(watch.toString(), '1.00 seconds');
        done();
    });
    it('gives elapsed minutes and seconds when > 1 minute', function (done) {
        var watch = new Stopwatch_1.Stopwatch(pseudoTimeSeconds([0, 400]));
        watch.start();
        watch.stop();
        chai_1.assert.equal(watch.toString(), '6 minutes 40.0 seconds');
        done();
    });
    it('gives elapsed minute and seconds when time >=60 <=119 seconds', function (done) {
        var watch = new Stopwatch_1.Stopwatch(pseudoTimeSeconds([0, 61.25]));
        watch.start();
        watch.stop();
        chai_1.assert.equal(watch.toString(), '1 minute 1.3 seconds');
        done();
    });
});

//# sourceMappingURL=Stopwatch.test.js.map
