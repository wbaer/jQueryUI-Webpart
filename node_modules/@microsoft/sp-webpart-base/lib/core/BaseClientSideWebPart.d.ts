/// <reference types="es6-promise" />
import { DisplayMode, Version } from '@microsoft/sp-core-library';
import { IPropertyPaneConfiguration } from '../propertyPane/propertyPane/IPropertyPane';
import IWebPartContext from './IWebPartContext';
import IWebPartEvent from './IWebPartEvent';
import IWebPartPropertiesMetadata from './IWebPartPropertiesMetadata';
/**
 * This abstract class implements the the base functionality for a client side web part. Every client side web part
 * needs to inherit from this class. Along with the base functionality, this class provides some APIs that can be
 * used by the web part. These APIs fall in two catagories.
 *
 * The first category of APIs provide data and functionality. Example, the web part context (i.e. this.context). This
 * API should be used to access contextual data relevant to this web part instance.
 *
 * The second category of APIs provide a base implementation for the web part lifecycle and can be overridden for an
 * updated implementation. The render() API is the only API that is mandatory to be implemented/overridden by a web
 * part. All other life cycle APIs have a base implementation and can be overridden based on the needs of the web part.
 * Please refer to the documentation of the individual APIs to make the right decision.
 *
 * @public
 */
declare abstract class BaseClientSideWebPart<TProperties> {
    private static _viewportLoader;
    private _displayMode;
    private _context;
    private _properties;
    private _logEntry;
    private _initialized;
    private _renderedOnce;
    private _renderedFromPersistedData;
    private _propertiesBackup;
    private _previousState;
    private _logSource;
    private _title;
    private _description;
    /**
     * Initially this flag is false reflecting the fact that web part will be loaded lazily.
     *
     * Once true, it reflects that web part is in viewport or atleast has been in viewport earlier.
     *
     * However this does not mean that web part rendering is also complete. It just ensures that
     * web part has been asked to load. Either it is in the middle of loading or already loaded.
     *
     * For web parts in the viewport during initial page load, it will become true at start.
     * For rest, it will turn true as and when user scrolls closer to the web part.
     *
     * NOTE: Don't update it. This flag should be only read to know the lazy loading status.
     * NOTE: Don't use this flag to track position of the web part in viewport. Use this
     * flag only to track if web part rendeing has been delayed or not.
     */
    private _isInViewport;
    /**
     * A timer guard, QOS monitor and resolver delegate for the Async render scenarios. An async render scenario
     * is one in which the web part is rendering an IFRAME OR fetching async data outside of the onInit API
     * OR rendering an image tag. In these cases much of the web part rendering lifecycle is controlled by external
     * factors once the IFRAME is created or the data fetch request is sent OR the image tag is set. The web part
     * needs to call the renderCompleted API once the final rendering is complete and data is displayed.
     */
    private _asyncRenderGuardTimer;
    private _asyncRenderQosMonitor;
    private _renderPromiseResolver;
    /**
     * This property is a pointer to the web part context.
     * @see IWebPartContext for more details.
     *
     * @readonly
     */
    /**
     * Error on attempt to set readonly properties. The following properties will go away when TypeScript supports
     * readonly.
     * @internal
     */
    protected context: IWebPartContext;
    /**
     * This property is a pointer to the root DOM element of the web part. This is a DIV element and contains the whole
     * DOM subtree of the web part.
     *
     * @readonly
     */
    /**
     * @internal
     */
    protected domElement: HTMLElement;
    /**
     * This value is the available width of the area in which the web part can render itself.
     *
     * @readonly
     * @alpha
     */
    protected readonly width: number;
    /**
     * The value of this property is stored in the serialized data of the web part to allow developers to manage
     * versioning of their web part. The default version is 1.0
     */
    protected readonly dataVersion: Version;
    /**
     * This property is the current display mode of the web part.
     *
     * @readonly
     */
    /**
     * @internal
     */
    protected displayMode: DisplayMode;
    /**
     * This property is the pointer to the custom property bag of the web part.
     *
     * @readonly
     */
    /**
     * @internal
     */
    protected properties: TProperties;
    /**
     * This property defines metadata for the web part property bag. The metadata can help SharePoint understand
     * the content of the properties better and perform relevant services on the data.
     *
     * @see IWebPartPropertiesMetadata for more information about how to define metadata
     */
    protected readonly propertiesMetadata: IWebPartPropertiesMetadata | undefined;
    /**
     * This property indicates whether the web part has been rendered once or not. After the first time rendering,
     * the value of this property is always true. Till a full re-render of the web part happens.
     *
     * @readonly
     */
    /**
     * @internal
     */
    protected renderedOnce: boolean;
    /**
     * This property indicates whether the web part was rendered from the persisted data (serialized state from the
     * last time that the web part was saved) or not.
     * Example: When web part is added for the first time using toolbox then the value is false.
     *
     * @readonly
     */
    /**
     * @internal
     */
    protected renderedFromPersistedData: boolean;
    /**
     * This property indicates whether a web part can open a popup on initial render. In some environments the host
     * re-renders the web parts frequently, and therefor, opening popups during render will cause popups to open
     * repeatedly and hence poor user experience. As an example, the classic SharePoint pages perform postbacks
     * and hence page re-render on all button clicks. If a web part needs to open a popup on render, it should use
     * this API before opening the popup. If this API returns false, the web part should not open popup on initial
     * render. Some web parts that open popups during render are the document embed web part
     * that pops up the file picker on initial render, embedded video web part that pops up the PropertyPane on initial
     * render.
     *
     * @readonly
     */
    protected readonly canOpenPopupOnRender: boolean;
    /**
     * This property is used to change the web part's PropertyPane interaction from Reactive to NonReactive. The default
     * behaviour is Reactive. Where,
     * Reactive implies that changes made in the PropertyPane are transmitted to the web part instantly and the user can
     * see instant updates. This helps the page creator get instant feedback and decide if they should keep the new
     * configuration changes or not.
     * NonReactive implies that the configuraiton changes are transmitted to the web part only after 'Apply' PropertyPane
     * button is clicked.
     */
    protected readonly disableReactivePropertyChanges: boolean;
    /**
     * This property points to the preview image for the web part. The base implementation returns undefined. Web parts
     * that want to provide a valid preview image url need to override this API. The preview image url can be used to
     * create a preview of the web part or of the page on which the web part is present.
     */
    /**
     * @internal
     */
    protected previewImageUrl: string | undefined;
    /**
     * This property points to the accessible title of web part made available to screen readers. The base implementation
     * returns that default title in the manifest. Web parts that want to provide more descriptive title containing
     * contextual information need to override this API.
     */
    /**
     * @internal
     */
    protected accessibleTitle: string;
    /**
     * Title of the WebPart
     *
     * @readonly
     */
    /**
     * @internal
     */
    protected title: string;
    /**
     * Description of the WebPart
     *
     * @readonly
     */
    /**
     * @internal
     */
    protected description: string;
    /**
     * Indicates whether the web part is rendering in Async mode. Default value is false.
     * If the web part overrides this field to return true, then it needs to call renderCompleted API
     * after the web part rendering is complete.
     */
    protected readonly isRenderAsync: boolean;
    /**
     * @internal
     */
    protected instanceId: string;
    /**
     * @internal
     */
    protected propertyPaneRenderedByWebPart: boolean;
    /**
     * Constructor for the BaseClientSideWebPart class.
     * If a sub class overrides the constructor, it needs to call super() as the first line of its constructor.
     *
     * It is highly recommended that the web part use the OnInit API to perform any web part specific initialization.
     * Most of the web part features like this.context and this.properties are not available to be used before the
     * the onInit part of the web part loading lifecycle.
     *
     * e.g.
     *   constructor() {
     *     super();
     *     .
     *     . class specific constructor code ..
     *   }
     */
    constructor();
    /**
     * This API should be overridden to perform long running operations e.g. data fetching from a remote service before
     * the initial rendering of the web part. The loading indicator is displayed during the lifetime of this method.
     * This API is called only once during the lifecycle of a web part.
     */
    protected onInit(): Promise<void>;
    /**
     * This API is called to render the web part. There is no base implementation of this API and the web part is
     * required to override this API.
     */
    protected abstract render(): void;
    /**
     * This API should be called by web parts that perform Async rendering. Those web part are required to override
     * the isRenderAsync API and return true. One such example is web parts that render content in an IFrame. The
     * web part initiates the IFrame rendering in the render() API but the actual rendering is complete only after
     * the iframe loading completes.
     */
    protected renderCompleted(): void;
    /**
     * This API is called when the display mode of a web part is changed. The default implementation of this API calls
     * the web part render method to re-render the web part with the new display mode. If a web part developer does not
     * want a full re-render to happen on display mode change, they can override this API and perform specific updates
     * to the web part DOM to switch its display mode.
     *
     * @param oldDisplayMode - The old display mode.
     */
    protected onDisplayModeChanged(oldDisplayMode: DisplayMode): void;
    /**
     * This API is called before the web part is serialized. The default implementation is a no-op. The serialization
     * process serializes the web part property bag i.e. this.properties. This API gives the web part a chance to
     * update it's property bag before the serialization happens. Some web part's may keep their state other objects
     * or even in the DOM. If a web part needs to persist some of that state, it needs to override this API and update
     * the web part property bag to the latest state. If a web part updates the property bag with invalid property
     * values, those will get persisted. So that should be avoided. The web part property bag should always contain
     * valid property values.
     */
    protected onBeforeSerialize(): void;
    /**
     * This API is called after the web part is deserialized to an object, right before the property bag is populated.
     * The default implementation is a no-op. A web part developer can override this API if the deserialized object
     * does not fully reflect the initial state of the property bag. This gives the web part developer a chance to
     * populate the property bag right after the data is deserialized to an object.
     *
     * @remarks An important scenario to use deserialize is upgrading. An upgraded web part may load the data
     * that was serialized by an older version of the web part that supported a different schema of the property bag,
     * resulting the deserialized object to be incosistent with the current schema of the property bag. The developer
     * can use onAfterDeserialize to check the dataVersion and fix the property bag.
     *
     * @param deserializedObject - The object deserialized from the stored data. Note that the schema of  this object
     * is not necessarily consistent with the current property bag, because the serialization could have been done by
     * an older version of the web part
     * @param dataVersion - The data version of the stored data being deserialized. You can use this value to determine
     * if the data was serialized by an older web part. Web parts can define their data version by overriding the
     * dataVersion property.
     *
     * @returns The property bag of the web part
     */
    protected onAfterDeserialize(deserializedObject: any, dataVersion: Version): TProperties;
    /**
     * This API is used to receive custom event notifications from the host page or another web part. ReservedEventNames
     * defines some reserved events. Each web part may process web part specific events.
     *
     * @param eventName - Event name, such as "setPropertyPaneState".
     * @param eventObject - object containing event source, destination and property information.
     *
     * @internal
     */
    protected onEvent<T>(eventName: string, eventObject: IWebPartEvent<T>): void;
    /**
     * This API is used to ger the configuration to build the property pane for the web part. If the web part wants
     * to use the PropertyPane for configuration, this API needs to be overridden and the web part needs to return
     * the configuration for the PropertyPane.
     *
     * @see IPropertyPane and other PropertyPane integration wiki documentation for more details.
     */
    protected getPropertyPaneConfiguration(): IPropertyPaneConfiguration;
    /**
     * This API should be used to refresh the contents of the PropertyPane.
     * This API is called at the end of the web part lifecycle on a page. It should be used to dispose any local
     * resources (i.e. DOM elements) that the web part is holding onto. This API is expected to be called in scenarios
     * like page navigation i.e. the host is transitioning from one page to another and disposes the page that is being
     * transitioned out.
     */
    protected onDispose(): void;
    /**
     * This API is invoked after updating the new value of the property in the property bag when the PropertyPane
     * is being used in Reactive mode. The base implementation of this API re-renders the web part.
     *
     * @param propertyPath - JSON path of the property in the property bag.
     * @param oldValue - Old value of the property.
     * @param newValue - New value of the property.
     */
    protected onPropertyPaneFieldChanged(propertyPath: string, oldValue: any, newValue: any): void;
    /**
     * This API is invoked when the configuration starts on the PropertyPane. It's invoked in the following cases:
     *  - When the PropertyPane is opened.
     *  - When the user switches web parts then the new web part gets this event.
     */
    protected onPropertyPaneConfigurationStart(): void;
    /**
     * This API is invoked when the configuration is completed on the PropertyPane. It's invoked in the following cases:
     *  - When the CONFIGURATION_COMPLETE_TIMEOUT((currently the value is 5 secs) elapses after the last change.
     *  - When user clicks 'x'(close) button before the CONFIGURATION_COMPLETE_TIMEOUT elapses.
     *  - When user clciks 'Apply' button before the CONFIGURATION_COMPLETE_TIMEOUT elapses.
     *  - When the user switches web parts then the current web part gets this event.
     */
    protected onPropertyPaneConfigurationComplete(): void;
    /**
     * This API is invoked after the changes made on the PropertyPane are applied when the PropertyPane is used in
     * Non-Reactive mode. This API is not invoked when the PropertyPane is used in Reactive mode.
     */
    protected onAfterPropertyPaneChangesApplied(): void;
    /**
     * This API is invoked when the PropertyPane is rendered.
     *
     * From framework standpoint, we do not want to allow this event handler to be passed in, and trigger it.
     * This api should be deprecated and then removed as part of refactoring.
     */
    protected onPropertyPaneRendered(): void;
    /**
     * This API is invoked when the web part container dom element width is changed, e.g. when the browser
     * browser window is resized and when the property pane is toggled open/close.
     *
     * Webparts should utilize this method to perform operations such as potentially re-rendering components
     * based on the new availble width for the webpart.
     *
     * @alpha
     */
    protected onAfterResize(newWidth: number): void;
    /**
     * This API should be used to render an error message in the web part display area. Also logs the error message
     * using the trace logger.
     *
     * @param error - An error object containing the error message to render.
     */
    protected renderError(error: Error): void;
    /**
     * This API should be used to clear the error message from the web part display area.
     */
    protected clearError(): void;
    /**
     * This method consumes the properties object from the serialized data and re-applies
     * the field values from the serverProcessedContent. This process will result in the
     * properties bag as it was when the serialization happened.
     */
    private _reInstateServerProcessedData(deserializedProperties, serverProcessedContent);
    private _forEachPropertyWithMetaData(callback, properties?);
    /**
     * The Deserializer for the exposed part of the web part data
     *
     * @internalremarks This is a public API candidate for post-GA
     */
    private _deserialize(data);
    /**
     * This is the initial entry point, which is called by the ClientSideWebPartManager immediately
     * after the web part is constructed.  The initialization contract is internal.
     */
    private _internalInitialize(webPartContext);
    /**
     * Internal base implemenation of the web part data deserialization.
     *
     * @param data - web part data
     */
    private _internalDeserialize(data);
    /**
     * Internal API for the first time render of the web part. The purpose of this API is to enforce intialization steps
     * before the actual render is called. This API is called only once during the web part loading lifecycle.
     *
     * @return {Promise<void>} The promise indicates the render loop is finished (success or fail).
     */
    private _internalFirstTimeRender(addedFromPersistedData, mode?, qosMonitor?, data?);
    /**
     * The actual initialization and rendering of the Web part starts when it is close enough
     * to the Viewport
     */
    private _internalRenderInViewPort();
    /**
     * Internal API to switch the web part's display mode. This API updates the display mode and then re-renders the web
     * part in the new mode.
     */
    private _internalSetDisplayMode(newDisplayMode);
    /**
     * Internal API to get property pane configuration.
     *
     * @return Property pane data
     */
    private _internalGetPropertyPaneData();
    /**
     * Internal API which is invoked when a property field is changed on the property pane.
     * This API is invoked only for the reactive property pane.
     *
     * @param propertyPath - JSON path of the property in the property bag.
     * @param newValue - New value of the property.
     */
    private _internalOnPropertyPaneFieldChanged(propertyPath, newValue);
    /**
     * Internal API which is invoked when one of the predefined configuraiton events
     * (defined in WebPartConfigurationEvent enum.) is triggered.
     *
     * @see WebPartConfigurationEvent for more details on the event definitions.
     */
    private _internalOnConfigurationEvent(configurationEvent);
    /**
     * Internal API to set the dirty bit on the web part host if the web part properties have changed.
     */
    private _internalSetDirtyBit();
    /**
     * The serializer for the exposed part of the web part data
     *
     * @internalremarks This serialize API is a public candidate for post-GA (after removing the input parameter)
     */
    private _serialize();
    /**
     * Internal API to serialize the web part properties.
     */
    private _internalSerialize();
    /**
     * Internal API to dispose the web part.
     *
     * @see - onDispose for more details.
     */
    private _internalDispose();
    /**
     * Internal API to update the webpart upon a resize of the DOM window's viewport
     *
     * @see - onAfterResize for more details.
     */
    private _internalOnAfterResize();
    /**
     * Update the web part property if it is in the property bag.
     *
     * @param propertyPath - property path as expected by lodash update (https://lodash.com/docs#update).
     *   (e.g. 'o.a.b', 'o[0].a.b[1].c'). These paths are similar to those in the JSONPath spec described by
     *   Stefan Goessner at (http://goessner.net/articles/JsonPath/). Currently we plan to use lodash.get, has
     *   and update APIs which support paths. Some day we may migrate to using actual JSONPath.js. But that
     *   should not be an issue because the path formatting conventions are same in lodash and JSONPath.
     */
    private _updateProperty(propertyPath, newValue);
    private _processInputParams(context);
    /**
     * Throw an error indicating that this property is readonly and cannot be set.
     */
    private _throwReadOnlyError();
    /**
     * Wraps render to ensure any type of rendering has access to the latest context
     * to provide the most accurate accessible info to screen readers.
     */
    private _renderWithAccessibileTitle();
    /**
     * Gets default accessible title in the format "{Web part name} web part", such as "Image web part".
     * Note: pulled into own method because TypeScript doesn't allow derived classes to call super protected properties.
     */
    private _getDefaultAccessibleTitle();
    /**
     * Start async guard timer. This timer is to help avoid losing performance markers for a web part
     * that renders asynchronously but does not call the `renderCompleted` API;
     */
    private _startAsyncRenderGuardTimer();
    /**
     * Render completed.
     */
    private _renderCompleted();
    /**
     * Async render timed out. Log error information and
     */
    private _asyncRenderTimeout();
    private _clearAsyncRenderGuardTimer();
    private _resolveOnRenderPromise();
}
export default BaseClientSideWebPart;
