{"version":3,"sources":["next/DualTaskStream.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AACH,0BAA0B;;;;;;;AAE1B,IAAY,MAAM,WAAM,QAAQ,CAAC,CAAA;AACjC,IAAY,MAAM,WAAM,QAAQ,CAAC,CAAA;AAEjC,iCAA6B,oBAAoB,CAAC,CAAA;AAElD;;;;GAIG;AACH;IAA4C,kCAAe;IASzD;;OAEG;IACH,wBAAY,SAA0B;QAZxC,iBA6DC;QAjDa,yBAA0B,GAA1B,iBAA0B;QACpC,iBAAO,CAAC;QACR,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,MAAM,GAAG,IAAI,0BAAgB,EAAE,CAAC;QACrC,IAAI,CAAC,MAAM,GAAG,IAAI,0BAAgB,EAAE,CAAC;QAErC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE;YACvB,KAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC5B,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE;YACvB,KAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC5B,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,UAAC,IAAqB,EAAE,QAAQ;YACrD,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,UAAU,CAAC,CAAC,CAAC;gBACrB,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClB,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,UAAC,IAAqB,EAAE,QAAQ;YACrD,IAAM,IAAI,GAAW,IAAI,CAAC,QAAQ,EAAE,CAAC;YACrC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACrC,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;YACzC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,KAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;YAC9B,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,8BAAK,GAAZ;QACE,QAAQ;IACV,CAAC;IAED;;OAEG;IACI,4BAAG,GAAV;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;QACpB,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;QACpB,CAAC;QACD,iBAAiB;QACjB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACpB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,sCAAsC;QACzD,CAAC;IACH,CAAC;IACH,qBAAC;AAAD,CA7DA,AA6DC,CA7D2C,MAAM,CAAC,QAAQ,GA6D1D;AA7DD;gCA6DC,CAAA","file":"next/DualTaskStream.js","sourcesContent":["/**\r\n * @file DualTaskStream.ts\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n *\r\n * This is a special type of stream class which has two substreams (stderr and stdout), which you can write to.\r\n */\r\n/* istanbul ignore next */\r\n\r\nimport * as colors from 'colors';\r\nimport * as stream from 'stream';\r\n\r\nimport PersistentStream from './PersistentStream';\r\n\r\n/**\r\n * This is a special type of stream class which has two substreams (stderr and stdout), which you can write to.\r\n * The DualTaskStream will merge these two streams into a single readable stream.\r\n * Everything written to stderr is written in red, unless it is a Warning, in which case it appears in yellow.\r\n */\r\nexport default class DualTaskStream extends stream.Readable implements NodeJS.ReadableStream, NodeJS.EventEmitter {\r\n  public stdout: PersistentStream;\r\n  public stderr: PersistentStream;\r\n\r\n  private _quietMode: boolean;\r\n  private _stdoutClosed: boolean;\r\n  private _stderrClosed: boolean;\r\n  private _closed: boolean;\r\n\r\n  /**\r\n   * @param {boolean} quietMode is true if things written to stdout (and warnings) should be ignored\r\n   */\r\n  constructor(quietMode: boolean = false) {\r\n    super();\r\n    this._quietMode = quietMode;\r\n    this.stdout = new PersistentStream();\r\n    this.stderr = new PersistentStream();\r\n\r\n    this.stdout.on('finish', () => {\r\n      this._stdoutClosed = true;\r\n    });\r\n    this.stderr.on('finish', () => {\r\n      this._stderrClosed = true;\r\n    });\r\n\r\n    this.stdout.on('data', (data: Buffer | string, encoding) => {\r\n      if (!this._quietMode) {\r\n        this.push(data);\r\n      }\r\n    });\r\n\r\n    this.stderr.on('data', (data: Buffer | string, encoding) => {\r\n      const text: string = data.toString();\r\n      if (text.indexOf('Warning - ') === 0) {\r\n        this.stdout.write(colors.yellow(text));\r\n      } else {\r\n        this.push(colors.red(text));\r\n      }\r\n    });\r\n  }\r\n\r\n  public _read(): void {\r\n    // No-op\r\n  }\r\n\r\n  /**\r\n   * Closes both substreams and closes the readable stream\r\n   */\r\n  public end(): void {\r\n    if (!this._stdoutClosed) {\r\n      this.stdout.end();\r\n    }\r\n    if (!this._stderrClosed) {\r\n      this.stderr.end();\r\n    }\r\n    // End the stream\r\n    if (!this._closed) {\r\n      this._closed = true;\r\n      this.push(null); // tslint:disable-line:no-null-keyword\r\n    }\r\n  }\r\n}"],"sourceRoot":"..\\..\\src"}